
tad-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  080093b0  080093b0  000193b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b3c  08009b3c  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  08009b3c  08009b3c  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b3c  08009b3c  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b40  08009b40  00019b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08009b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000250  08009d94  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08009d94  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ad9  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002373  00000000  00000000  00032d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000350c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00036140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ec7  00000000  00000000  000370d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014124  00000000  00000000  0004df97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edce  00000000  00000000  000620bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0e89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e70  00000000  00000000  000f0edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000250 	.word	0x20000250
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009398 	.word	0x08009398

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000254 	.word	0x20000254
 80000fc:	08009398 	.word	0x08009398

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f98d 	bl	8001754 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8dd 	bl	8001604 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f97f 	bl	8001754 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f975 	bl	8001754 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f905 	bl	8001688 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f8fb 	bl	8001688 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fdiv>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	0245      	lsls	r5, r0, #9
 80004aa:	b5c0      	push	{r6, r7, lr}
 80004ac:	0047      	lsls	r7, r0, #1
 80004ae:	1c0c      	adds	r4, r1, #0
 80004b0:	0a6d      	lsrs	r5, r5, #9
 80004b2:	0e3f      	lsrs	r7, r7, #24
 80004b4:	0fc6      	lsrs	r6, r0, #31
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	d100      	bne.n	80004bc <__aeabi_fdiv+0x1c>
 80004ba:	e070      	b.n	800059e <__aeabi_fdiv+0xfe>
 80004bc:	2fff      	cmp	r7, #255	; 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fdiv+0x22>
 80004c0:	e075      	b.n	80005ae <__aeabi_fdiv+0x10e>
 80004c2:	00eb      	lsls	r3, r5, #3
 80004c4:	2580      	movs	r5, #128	; 0x80
 80004c6:	04ed      	lsls	r5, r5, #19
 80004c8:	431d      	orrs	r5, r3
 80004ca:	2300      	movs	r3, #0
 80004cc:	4699      	mov	r9, r3
 80004ce:	469a      	mov	sl, r3
 80004d0:	3f7f      	subs	r7, #127	; 0x7f
 80004d2:	0260      	lsls	r0, r4, #9
 80004d4:	0a43      	lsrs	r3, r0, #9
 80004d6:	4698      	mov	r8, r3
 80004d8:	0063      	lsls	r3, r4, #1
 80004da:	0e1b      	lsrs	r3, r3, #24
 80004dc:	0fe4      	lsrs	r4, r4, #31
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d04e      	beq.n	8000580 <__aeabi_fdiv+0xe0>
 80004e2:	2bff      	cmp	r3, #255	; 0xff
 80004e4:	d046      	beq.n	8000574 <__aeabi_fdiv+0xd4>
 80004e6:	4642      	mov	r2, r8
 80004e8:	00d0      	lsls	r0, r2, #3
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	04d2      	lsls	r2, r2, #19
 80004ee:	4302      	orrs	r2, r0
 80004f0:	4690      	mov	r8, r2
 80004f2:	2200      	movs	r2, #0
 80004f4:	3b7f      	subs	r3, #127	; 0x7f
 80004f6:	0031      	movs	r1, r6
 80004f8:	1aff      	subs	r7, r7, r3
 80004fa:	464b      	mov	r3, r9
 80004fc:	4061      	eors	r1, r4
 80004fe:	b2c9      	uxtb	r1, r1
 8000500:	4313      	orrs	r3, r2
 8000502:	2b0f      	cmp	r3, #15
 8000504:	d900      	bls.n	8000508 <__aeabi_fdiv+0x68>
 8000506:	e0b5      	b.n	8000674 <__aeabi_fdiv+0x1d4>
 8000508:	486e      	ldr	r0, [pc, #440]	; (80006c4 <__aeabi_fdiv+0x224>)
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	58c3      	ldr	r3, [r0, r3]
 800050e:	469f      	mov	pc, r3
 8000510:	2300      	movs	r3, #0
 8000512:	4698      	mov	r8, r3
 8000514:	0026      	movs	r6, r4
 8000516:	4645      	mov	r5, r8
 8000518:	4692      	mov	sl, r2
 800051a:	4653      	mov	r3, sl
 800051c:	2b02      	cmp	r3, #2
 800051e:	d100      	bne.n	8000522 <__aeabi_fdiv+0x82>
 8000520:	e089      	b.n	8000636 <__aeabi_fdiv+0x196>
 8000522:	2b03      	cmp	r3, #3
 8000524:	d100      	bne.n	8000528 <__aeabi_fdiv+0x88>
 8000526:	e09e      	b.n	8000666 <__aeabi_fdiv+0x1c6>
 8000528:	2b01      	cmp	r3, #1
 800052a:	d018      	beq.n	800055e <__aeabi_fdiv+0xbe>
 800052c:	003b      	movs	r3, r7
 800052e:	337f      	adds	r3, #127	; 0x7f
 8000530:	2b00      	cmp	r3, #0
 8000532:	dd69      	ble.n	8000608 <__aeabi_fdiv+0x168>
 8000534:	076a      	lsls	r2, r5, #29
 8000536:	d004      	beq.n	8000542 <__aeabi_fdiv+0xa2>
 8000538:	220f      	movs	r2, #15
 800053a:	402a      	ands	r2, r5
 800053c:	2a04      	cmp	r2, #4
 800053e:	d000      	beq.n	8000542 <__aeabi_fdiv+0xa2>
 8000540:	3504      	adds	r5, #4
 8000542:	012a      	lsls	r2, r5, #4
 8000544:	d503      	bpl.n	800054e <__aeabi_fdiv+0xae>
 8000546:	4b60      	ldr	r3, [pc, #384]	; (80006c8 <__aeabi_fdiv+0x228>)
 8000548:	401d      	ands	r5, r3
 800054a:	003b      	movs	r3, r7
 800054c:	3380      	adds	r3, #128	; 0x80
 800054e:	2bfe      	cmp	r3, #254	; 0xfe
 8000550:	dd00      	ble.n	8000554 <__aeabi_fdiv+0xb4>
 8000552:	e070      	b.n	8000636 <__aeabi_fdiv+0x196>
 8000554:	01ad      	lsls	r5, r5, #6
 8000556:	0a6d      	lsrs	r5, r5, #9
 8000558:	b2d8      	uxtb	r0, r3
 800055a:	e002      	b.n	8000562 <__aeabi_fdiv+0xc2>
 800055c:	000e      	movs	r6, r1
 800055e:	2000      	movs	r0, #0
 8000560:	2500      	movs	r5, #0
 8000562:	05c0      	lsls	r0, r0, #23
 8000564:	4328      	orrs	r0, r5
 8000566:	07f6      	lsls	r6, r6, #31
 8000568:	4330      	orrs	r0, r6
 800056a:	bce0      	pop	{r5, r6, r7}
 800056c:	46ba      	mov	sl, r7
 800056e:	46b1      	mov	r9, r6
 8000570:	46a8      	mov	r8, r5
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4643      	mov	r3, r8
 8000576:	2b00      	cmp	r3, #0
 8000578:	d13f      	bne.n	80005fa <__aeabi_fdiv+0x15a>
 800057a:	2202      	movs	r2, #2
 800057c:	3fff      	subs	r7, #255	; 0xff
 800057e:	e003      	b.n	8000588 <__aeabi_fdiv+0xe8>
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d12d      	bne.n	80005e2 <__aeabi_fdiv+0x142>
 8000586:	2201      	movs	r2, #1
 8000588:	0031      	movs	r1, r6
 800058a:	464b      	mov	r3, r9
 800058c:	4061      	eors	r1, r4
 800058e:	b2c9      	uxtb	r1, r1
 8000590:	4313      	orrs	r3, r2
 8000592:	2b0f      	cmp	r3, #15
 8000594:	d834      	bhi.n	8000600 <__aeabi_fdiv+0x160>
 8000596:	484d      	ldr	r0, [pc, #308]	; (80006cc <__aeabi_fdiv+0x22c>)
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	58c3      	ldr	r3, [r0, r3]
 800059c:	469f      	mov	pc, r3
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d113      	bne.n	80005ca <__aeabi_fdiv+0x12a>
 80005a2:	2304      	movs	r3, #4
 80005a4:	4699      	mov	r9, r3
 80005a6:	3b03      	subs	r3, #3
 80005a8:	2700      	movs	r7, #0
 80005aa:	469a      	mov	sl, r3
 80005ac:	e791      	b.n	80004d2 <__aeabi_fdiv+0x32>
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d105      	bne.n	80005be <__aeabi_fdiv+0x11e>
 80005b2:	2308      	movs	r3, #8
 80005b4:	4699      	mov	r9, r3
 80005b6:	3b06      	subs	r3, #6
 80005b8:	27ff      	movs	r7, #255	; 0xff
 80005ba:	469a      	mov	sl, r3
 80005bc:	e789      	b.n	80004d2 <__aeabi_fdiv+0x32>
 80005be:	230c      	movs	r3, #12
 80005c0:	4699      	mov	r9, r3
 80005c2:	3b09      	subs	r3, #9
 80005c4:	27ff      	movs	r7, #255	; 0xff
 80005c6:	469a      	mov	sl, r3
 80005c8:	e783      	b.n	80004d2 <__aeabi_fdiv+0x32>
 80005ca:	0028      	movs	r0, r5
 80005cc:	f002 f816 	bl	80025fc <__clzsi2>
 80005d0:	2776      	movs	r7, #118	; 0x76
 80005d2:	1f43      	subs	r3, r0, #5
 80005d4:	409d      	lsls	r5, r3
 80005d6:	2300      	movs	r3, #0
 80005d8:	427f      	negs	r7, r7
 80005da:	4699      	mov	r9, r3
 80005dc:	469a      	mov	sl, r3
 80005de:	1a3f      	subs	r7, r7, r0
 80005e0:	e777      	b.n	80004d2 <__aeabi_fdiv+0x32>
 80005e2:	4640      	mov	r0, r8
 80005e4:	f002 f80a 	bl	80025fc <__clzsi2>
 80005e8:	4642      	mov	r2, r8
 80005ea:	1f43      	subs	r3, r0, #5
 80005ec:	409a      	lsls	r2, r3
 80005ee:	2376      	movs	r3, #118	; 0x76
 80005f0:	425b      	negs	r3, r3
 80005f2:	4690      	mov	r8, r2
 80005f4:	1a1b      	subs	r3, r3, r0
 80005f6:	2200      	movs	r2, #0
 80005f8:	e77d      	b.n	80004f6 <__aeabi_fdiv+0x56>
 80005fa:	23ff      	movs	r3, #255	; 0xff
 80005fc:	2203      	movs	r2, #3
 80005fe:	e77a      	b.n	80004f6 <__aeabi_fdiv+0x56>
 8000600:	000e      	movs	r6, r1
 8000602:	20ff      	movs	r0, #255	; 0xff
 8000604:	2500      	movs	r5, #0
 8000606:	e7ac      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000608:	2001      	movs	r0, #1
 800060a:	1ac0      	subs	r0, r0, r3
 800060c:	281b      	cmp	r0, #27
 800060e:	dca6      	bgt.n	800055e <__aeabi_fdiv+0xbe>
 8000610:	379e      	adds	r7, #158	; 0x9e
 8000612:	002a      	movs	r2, r5
 8000614:	40bd      	lsls	r5, r7
 8000616:	40c2      	lsrs	r2, r0
 8000618:	1e6b      	subs	r3, r5, #1
 800061a:	419d      	sbcs	r5, r3
 800061c:	4315      	orrs	r5, r2
 800061e:	076b      	lsls	r3, r5, #29
 8000620:	d004      	beq.n	800062c <__aeabi_fdiv+0x18c>
 8000622:	230f      	movs	r3, #15
 8000624:	402b      	ands	r3, r5
 8000626:	2b04      	cmp	r3, #4
 8000628:	d000      	beq.n	800062c <__aeabi_fdiv+0x18c>
 800062a:	3504      	adds	r5, #4
 800062c:	016b      	lsls	r3, r5, #5
 800062e:	d544      	bpl.n	80006ba <__aeabi_fdiv+0x21a>
 8000630:	2001      	movs	r0, #1
 8000632:	2500      	movs	r5, #0
 8000634:	e795      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000636:	20ff      	movs	r0, #255	; 0xff
 8000638:	2500      	movs	r5, #0
 800063a:	e792      	b.n	8000562 <__aeabi_fdiv+0xc2>
 800063c:	2580      	movs	r5, #128	; 0x80
 800063e:	2600      	movs	r6, #0
 8000640:	20ff      	movs	r0, #255	; 0xff
 8000642:	03ed      	lsls	r5, r5, #15
 8000644:	e78d      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000646:	2300      	movs	r3, #0
 8000648:	4698      	mov	r8, r3
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	03c0      	lsls	r0, r0, #15
 800064e:	4205      	tst	r5, r0
 8000650:	d009      	beq.n	8000666 <__aeabi_fdiv+0x1c6>
 8000652:	4643      	mov	r3, r8
 8000654:	4203      	tst	r3, r0
 8000656:	d106      	bne.n	8000666 <__aeabi_fdiv+0x1c6>
 8000658:	4645      	mov	r5, r8
 800065a:	4305      	orrs	r5, r0
 800065c:	026d      	lsls	r5, r5, #9
 800065e:	0026      	movs	r6, r4
 8000660:	20ff      	movs	r0, #255	; 0xff
 8000662:	0a6d      	lsrs	r5, r5, #9
 8000664:	e77d      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000666:	2080      	movs	r0, #128	; 0x80
 8000668:	03c0      	lsls	r0, r0, #15
 800066a:	4305      	orrs	r5, r0
 800066c:	026d      	lsls	r5, r5, #9
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	0a6d      	lsrs	r5, r5, #9
 8000672:	e776      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000674:	4642      	mov	r2, r8
 8000676:	016b      	lsls	r3, r5, #5
 8000678:	0150      	lsls	r0, r2, #5
 800067a:	4283      	cmp	r3, r0
 800067c:	d219      	bcs.n	80006b2 <__aeabi_fdiv+0x212>
 800067e:	221b      	movs	r2, #27
 8000680:	2500      	movs	r5, #0
 8000682:	3f01      	subs	r7, #1
 8000684:	2601      	movs	r6, #1
 8000686:	001c      	movs	r4, r3
 8000688:	006d      	lsls	r5, r5, #1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	2c00      	cmp	r4, #0
 800068e:	db01      	blt.n	8000694 <__aeabi_fdiv+0x1f4>
 8000690:	4298      	cmp	r0, r3
 8000692:	d801      	bhi.n	8000698 <__aeabi_fdiv+0x1f8>
 8000694:	1a1b      	subs	r3, r3, r0
 8000696:	4335      	orrs	r5, r6
 8000698:	3a01      	subs	r2, #1
 800069a:	2a00      	cmp	r2, #0
 800069c:	d1f3      	bne.n	8000686 <__aeabi_fdiv+0x1e6>
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	4193      	sbcs	r3, r2
 80006a2:	431d      	orrs	r5, r3
 80006a4:	003b      	movs	r3, r7
 80006a6:	337f      	adds	r3, #127	; 0x7f
 80006a8:	000e      	movs	r6, r1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_fdiv+0x210>
 80006ae:	e741      	b.n	8000534 <__aeabi_fdiv+0x94>
 80006b0:	e7aa      	b.n	8000608 <__aeabi_fdiv+0x168>
 80006b2:	221a      	movs	r2, #26
 80006b4:	2501      	movs	r5, #1
 80006b6:	1a1b      	subs	r3, r3, r0
 80006b8:	e7e4      	b.n	8000684 <__aeabi_fdiv+0x1e4>
 80006ba:	01ad      	lsls	r5, r5, #6
 80006bc:	2000      	movs	r0, #0
 80006be:	0a6d      	lsrs	r5, r5, #9
 80006c0:	e74f      	b.n	8000562 <__aeabi_fdiv+0xc2>
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	08009594 	.word	0x08009594
 80006c8:	f7ffffff 	.word	0xf7ffffff
 80006cc:	080095d4 	.word	0x080095d4

080006d0 <__aeabi_fmul>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	4646      	mov	r6, r8
 80006d6:	46d6      	mov	lr, sl
 80006d8:	0244      	lsls	r4, r0, #9
 80006da:	0045      	lsls	r5, r0, #1
 80006dc:	b5c0      	push	{r6, r7, lr}
 80006de:	0a64      	lsrs	r4, r4, #9
 80006e0:	1c0f      	adds	r7, r1, #0
 80006e2:	0e2d      	lsrs	r5, r5, #24
 80006e4:	0fc6      	lsrs	r6, r0, #31
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d100      	bne.n	80006ec <__aeabi_fmul+0x1c>
 80006ea:	e08d      	b.n	8000808 <__aeabi_fmul+0x138>
 80006ec:	2dff      	cmp	r5, #255	; 0xff
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fmul+0x22>
 80006f0:	e092      	b.n	8000818 <__aeabi_fmul+0x148>
 80006f2:	2300      	movs	r3, #0
 80006f4:	2080      	movs	r0, #128	; 0x80
 80006f6:	4699      	mov	r9, r3
 80006f8:	469a      	mov	sl, r3
 80006fa:	00e4      	lsls	r4, r4, #3
 80006fc:	04c0      	lsls	r0, r0, #19
 80006fe:	4304      	orrs	r4, r0
 8000700:	3d7f      	subs	r5, #127	; 0x7f
 8000702:	0278      	lsls	r0, r7, #9
 8000704:	0a43      	lsrs	r3, r0, #9
 8000706:	4698      	mov	r8, r3
 8000708:	007b      	lsls	r3, r7, #1
 800070a:	0e1b      	lsrs	r3, r3, #24
 800070c:	0fff      	lsrs	r7, r7, #31
 800070e:	2b00      	cmp	r3, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fmul+0x44>
 8000712:	e070      	b.n	80007f6 <__aeabi_fmul+0x126>
 8000714:	2bff      	cmp	r3, #255	; 0xff
 8000716:	d100      	bne.n	800071a <__aeabi_fmul+0x4a>
 8000718:	e086      	b.n	8000828 <__aeabi_fmul+0x158>
 800071a:	4642      	mov	r2, r8
 800071c:	00d0      	lsls	r0, r2, #3
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	3b7f      	subs	r3, #127	; 0x7f
 8000722:	18ed      	adds	r5, r5, r3
 8000724:	2300      	movs	r3, #0
 8000726:	04d2      	lsls	r2, r2, #19
 8000728:	4302      	orrs	r2, r0
 800072a:	4690      	mov	r8, r2
 800072c:	469c      	mov	ip, r3
 800072e:	0031      	movs	r1, r6
 8000730:	464b      	mov	r3, r9
 8000732:	4079      	eors	r1, r7
 8000734:	1c68      	adds	r0, r5, #1
 8000736:	2b0f      	cmp	r3, #15
 8000738:	d81c      	bhi.n	8000774 <__aeabi_fmul+0xa4>
 800073a:	4a76      	ldr	r2, [pc, #472]	; (8000914 <__aeabi_fmul+0x244>)
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	58d3      	ldr	r3, [r2, r3]
 8000740:	469f      	mov	pc, r3
 8000742:	0039      	movs	r1, r7
 8000744:	4644      	mov	r4, r8
 8000746:	46e2      	mov	sl, ip
 8000748:	4653      	mov	r3, sl
 800074a:	2b02      	cmp	r3, #2
 800074c:	d00f      	beq.n	800076e <__aeabi_fmul+0x9e>
 800074e:	2b03      	cmp	r3, #3
 8000750:	d100      	bne.n	8000754 <__aeabi_fmul+0x84>
 8000752:	e0d7      	b.n	8000904 <__aeabi_fmul+0x234>
 8000754:	2b01      	cmp	r3, #1
 8000756:	d137      	bne.n	80007c8 <__aeabi_fmul+0xf8>
 8000758:	2000      	movs	r0, #0
 800075a:	2400      	movs	r4, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4320      	orrs	r0, r4
 8000760:	07c9      	lsls	r1, r1, #31
 8000762:	4308      	orrs	r0, r1
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	20ff      	movs	r0, #255	; 0xff
 8000770:	2400      	movs	r4, #0
 8000772:	e7f3      	b.n	800075c <__aeabi_fmul+0x8c>
 8000774:	0c26      	lsrs	r6, r4, #16
 8000776:	0424      	lsls	r4, r4, #16
 8000778:	0c22      	lsrs	r2, r4, #16
 800077a:	4644      	mov	r4, r8
 800077c:	0424      	lsls	r4, r4, #16
 800077e:	0c24      	lsrs	r4, r4, #16
 8000780:	4643      	mov	r3, r8
 8000782:	0027      	movs	r7, r4
 8000784:	0c1b      	lsrs	r3, r3, #16
 8000786:	4357      	muls	r7, r2
 8000788:	4374      	muls	r4, r6
 800078a:	435a      	muls	r2, r3
 800078c:	435e      	muls	r6, r3
 800078e:	1912      	adds	r2, r2, r4
 8000790:	0c3b      	lsrs	r3, r7, #16
 8000792:	189b      	adds	r3, r3, r2
 8000794:	429c      	cmp	r4, r3
 8000796:	d903      	bls.n	80007a0 <__aeabi_fmul+0xd0>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0252      	lsls	r2, r2, #9
 800079c:	4694      	mov	ip, r2
 800079e:	4466      	add	r6, ip
 80007a0:	043f      	lsls	r7, r7, #16
 80007a2:	041a      	lsls	r2, r3, #16
 80007a4:	0c3f      	lsrs	r7, r7, #16
 80007a6:	19d2      	adds	r2, r2, r7
 80007a8:	0194      	lsls	r4, r2, #6
 80007aa:	1e67      	subs	r7, r4, #1
 80007ac:	41bc      	sbcs	r4, r7
 80007ae:	0c1b      	lsrs	r3, r3, #16
 80007b0:	0e92      	lsrs	r2, r2, #26
 80007b2:	199b      	adds	r3, r3, r6
 80007b4:	4314      	orrs	r4, r2
 80007b6:	019b      	lsls	r3, r3, #6
 80007b8:	431c      	orrs	r4, r3
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	d400      	bmi.n	80007c0 <__aeabi_fmul+0xf0>
 80007be:	e09b      	b.n	80008f8 <__aeabi_fmul+0x228>
 80007c0:	2301      	movs	r3, #1
 80007c2:	0862      	lsrs	r2, r4, #1
 80007c4:	401c      	ands	r4, r3
 80007c6:	4314      	orrs	r4, r2
 80007c8:	0002      	movs	r2, r0
 80007ca:	327f      	adds	r2, #127	; 0x7f
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	dd64      	ble.n	800089a <__aeabi_fmul+0x1ca>
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d004      	beq.n	80007de <__aeabi_fmul+0x10e>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d000      	beq.n	80007de <__aeabi_fmul+0x10e>
 80007dc:	3404      	adds	r4, #4
 80007de:	0123      	lsls	r3, r4, #4
 80007e0:	d503      	bpl.n	80007ea <__aeabi_fmul+0x11a>
 80007e2:	0002      	movs	r2, r0
 80007e4:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <__aeabi_fmul+0x248>)
 80007e6:	3280      	adds	r2, #128	; 0x80
 80007e8:	401c      	ands	r4, r3
 80007ea:	2afe      	cmp	r2, #254	; 0xfe
 80007ec:	dcbf      	bgt.n	800076e <__aeabi_fmul+0x9e>
 80007ee:	01a4      	lsls	r4, r4, #6
 80007f0:	0a64      	lsrs	r4, r4, #9
 80007f2:	b2d0      	uxtb	r0, r2
 80007f4:	e7b2      	b.n	800075c <__aeabi_fmul+0x8c>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d13d      	bne.n	8000878 <__aeabi_fmul+0x1a8>
 80007fc:	464a      	mov	r2, r9
 80007fe:	3301      	adds	r3, #1
 8000800:	431a      	orrs	r2, r3
 8000802:	4691      	mov	r9, r2
 8000804:	469c      	mov	ip, r3
 8000806:	e792      	b.n	800072e <__aeabi_fmul+0x5e>
 8000808:	2c00      	cmp	r4, #0
 800080a:	d129      	bne.n	8000860 <__aeabi_fmul+0x190>
 800080c:	2304      	movs	r3, #4
 800080e:	4699      	mov	r9, r3
 8000810:	3b03      	subs	r3, #3
 8000812:	2500      	movs	r5, #0
 8000814:	469a      	mov	sl, r3
 8000816:	e774      	b.n	8000702 <__aeabi_fmul+0x32>
 8000818:	2c00      	cmp	r4, #0
 800081a:	d11b      	bne.n	8000854 <__aeabi_fmul+0x184>
 800081c:	2308      	movs	r3, #8
 800081e:	4699      	mov	r9, r3
 8000820:	3b06      	subs	r3, #6
 8000822:	25ff      	movs	r5, #255	; 0xff
 8000824:	469a      	mov	sl, r3
 8000826:	e76c      	b.n	8000702 <__aeabi_fmul+0x32>
 8000828:	4643      	mov	r3, r8
 800082a:	35ff      	adds	r5, #255	; 0xff
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10b      	bne.n	8000848 <__aeabi_fmul+0x178>
 8000830:	2302      	movs	r3, #2
 8000832:	464a      	mov	r2, r9
 8000834:	431a      	orrs	r2, r3
 8000836:	4691      	mov	r9, r2
 8000838:	469c      	mov	ip, r3
 800083a:	e778      	b.n	800072e <__aeabi_fmul+0x5e>
 800083c:	4653      	mov	r3, sl
 800083e:	0031      	movs	r1, r6
 8000840:	2b02      	cmp	r3, #2
 8000842:	d000      	beq.n	8000846 <__aeabi_fmul+0x176>
 8000844:	e783      	b.n	800074e <__aeabi_fmul+0x7e>
 8000846:	e792      	b.n	800076e <__aeabi_fmul+0x9e>
 8000848:	2303      	movs	r3, #3
 800084a:	464a      	mov	r2, r9
 800084c:	431a      	orrs	r2, r3
 800084e:	4691      	mov	r9, r2
 8000850:	469c      	mov	ip, r3
 8000852:	e76c      	b.n	800072e <__aeabi_fmul+0x5e>
 8000854:	230c      	movs	r3, #12
 8000856:	4699      	mov	r9, r3
 8000858:	3b09      	subs	r3, #9
 800085a:	25ff      	movs	r5, #255	; 0xff
 800085c:	469a      	mov	sl, r3
 800085e:	e750      	b.n	8000702 <__aeabi_fmul+0x32>
 8000860:	0020      	movs	r0, r4
 8000862:	f001 fecb 	bl	80025fc <__clzsi2>
 8000866:	2576      	movs	r5, #118	; 0x76
 8000868:	1f43      	subs	r3, r0, #5
 800086a:	409c      	lsls	r4, r3
 800086c:	2300      	movs	r3, #0
 800086e:	426d      	negs	r5, r5
 8000870:	4699      	mov	r9, r3
 8000872:	469a      	mov	sl, r3
 8000874:	1a2d      	subs	r5, r5, r0
 8000876:	e744      	b.n	8000702 <__aeabi_fmul+0x32>
 8000878:	4640      	mov	r0, r8
 800087a:	f001 febf 	bl	80025fc <__clzsi2>
 800087e:	4642      	mov	r2, r8
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409a      	lsls	r2, r3
 8000884:	2300      	movs	r3, #0
 8000886:	1a2d      	subs	r5, r5, r0
 8000888:	4690      	mov	r8, r2
 800088a:	469c      	mov	ip, r3
 800088c:	3d76      	subs	r5, #118	; 0x76
 800088e:	e74e      	b.n	800072e <__aeabi_fmul+0x5e>
 8000890:	2480      	movs	r4, #128	; 0x80
 8000892:	2100      	movs	r1, #0
 8000894:	20ff      	movs	r0, #255	; 0xff
 8000896:	03e4      	lsls	r4, r4, #15
 8000898:	e760      	b.n	800075c <__aeabi_fmul+0x8c>
 800089a:	2301      	movs	r3, #1
 800089c:	1a9b      	subs	r3, r3, r2
 800089e:	2b1b      	cmp	r3, #27
 80008a0:	dd00      	ble.n	80008a4 <__aeabi_fmul+0x1d4>
 80008a2:	e759      	b.n	8000758 <__aeabi_fmul+0x88>
 80008a4:	0022      	movs	r2, r4
 80008a6:	309e      	adds	r0, #158	; 0x9e
 80008a8:	40da      	lsrs	r2, r3
 80008aa:	4084      	lsls	r4, r0
 80008ac:	0013      	movs	r3, r2
 80008ae:	1e62      	subs	r2, r4, #1
 80008b0:	4194      	sbcs	r4, r2
 80008b2:	431c      	orrs	r4, r3
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d004      	beq.n	80008c2 <__aeabi_fmul+0x1f2>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d000      	beq.n	80008c2 <__aeabi_fmul+0x1f2>
 80008c0:	3404      	adds	r4, #4
 80008c2:	0163      	lsls	r3, r4, #5
 80008c4:	d51a      	bpl.n	80008fc <__aeabi_fmul+0x22c>
 80008c6:	2001      	movs	r0, #1
 80008c8:	2400      	movs	r4, #0
 80008ca:	e747      	b.n	800075c <__aeabi_fmul+0x8c>
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	03c0      	lsls	r0, r0, #15
 80008d0:	4204      	tst	r4, r0
 80008d2:	d009      	beq.n	80008e8 <__aeabi_fmul+0x218>
 80008d4:	4643      	mov	r3, r8
 80008d6:	4203      	tst	r3, r0
 80008d8:	d106      	bne.n	80008e8 <__aeabi_fmul+0x218>
 80008da:	4644      	mov	r4, r8
 80008dc:	4304      	orrs	r4, r0
 80008de:	0264      	lsls	r4, r4, #9
 80008e0:	0039      	movs	r1, r7
 80008e2:	20ff      	movs	r0, #255	; 0xff
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	e739      	b.n	800075c <__aeabi_fmul+0x8c>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	03c0      	lsls	r0, r0, #15
 80008ec:	4304      	orrs	r4, r0
 80008ee:	0264      	lsls	r4, r4, #9
 80008f0:	0031      	movs	r1, r6
 80008f2:	20ff      	movs	r0, #255	; 0xff
 80008f4:	0a64      	lsrs	r4, r4, #9
 80008f6:	e731      	b.n	800075c <__aeabi_fmul+0x8c>
 80008f8:	0028      	movs	r0, r5
 80008fa:	e765      	b.n	80007c8 <__aeabi_fmul+0xf8>
 80008fc:	01a4      	lsls	r4, r4, #6
 80008fe:	2000      	movs	r0, #0
 8000900:	0a64      	lsrs	r4, r4, #9
 8000902:	e72b      	b.n	800075c <__aeabi_fmul+0x8c>
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	03c0      	lsls	r0, r0, #15
 8000908:	4304      	orrs	r4, r0
 800090a:	0264      	lsls	r4, r4, #9
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	0a64      	lsrs	r4, r4, #9
 8000910:	e724      	b.n	800075c <__aeabi_fmul+0x8c>
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	08009614 	.word	0x08009614
 8000918:	f7ffffff 	.word	0xf7ffffff

0800091c <__aeabi_ui2f>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	1e05      	subs	r5, r0, #0
 8000920:	d00e      	beq.n	8000940 <__aeabi_ui2f+0x24>
 8000922:	f001 fe6b 	bl	80025fc <__clzsi2>
 8000926:	239e      	movs	r3, #158	; 0x9e
 8000928:	0004      	movs	r4, r0
 800092a:	1a1b      	subs	r3, r3, r0
 800092c:	2b96      	cmp	r3, #150	; 0x96
 800092e:	dc0c      	bgt.n	800094a <__aeabi_ui2f+0x2e>
 8000930:	2808      	cmp	r0, #8
 8000932:	dd01      	ble.n	8000938 <__aeabi_ui2f+0x1c>
 8000934:	3c08      	subs	r4, #8
 8000936:	40a5      	lsls	r5, r4
 8000938:	026d      	lsls	r5, r5, #9
 800093a:	0a6d      	lsrs	r5, r5, #9
 800093c:	b2d8      	uxtb	r0, r3
 800093e:	e001      	b.n	8000944 <__aeabi_ui2f+0x28>
 8000940:	2000      	movs	r0, #0
 8000942:	2500      	movs	r5, #0
 8000944:	05c0      	lsls	r0, r0, #23
 8000946:	4328      	orrs	r0, r5
 8000948:	bd70      	pop	{r4, r5, r6, pc}
 800094a:	2b99      	cmp	r3, #153	; 0x99
 800094c:	dd09      	ble.n	8000962 <__aeabi_ui2f+0x46>
 800094e:	0002      	movs	r2, r0
 8000950:	0029      	movs	r1, r5
 8000952:	321b      	adds	r2, #27
 8000954:	4091      	lsls	r1, r2
 8000956:	1e4a      	subs	r2, r1, #1
 8000958:	4191      	sbcs	r1, r2
 800095a:	2205      	movs	r2, #5
 800095c:	1a12      	subs	r2, r2, r0
 800095e:	40d5      	lsrs	r5, r2
 8000960:	430d      	orrs	r5, r1
 8000962:	2c05      	cmp	r4, #5
 8000964:	dc12      	bgt.n	800098c <__aeabi_ui2f+0x70>
 8000966:	0029      	movs	r1, r5
 8000968:	4e0c      	ldr	r6, [pc, #48]	; (800099c <__aeabi_ui2f+0x80>)
 800096a:	4031      	ands	r1, r6
 800096c:	076a      	lsls	r2, r5, #29
 800096e:	d009      	beq.n	8000984 <__aeabi_ui2f+0x68>
 8000970:	200f      	movs	r0, #15
 8000972:	4028      	ands	r0, r5
 8000974:	2804      	cmp	r0, #4
 8000976:	d005      	beq.n	8000984 <__aeabi_ui2f+0x68>
 8000978:	3104      	adds	r1, #4
 800097a:	014a      	lsls	r2, r1, #5
 800097c:	d502      	bpl.n	8000984 <__aeabi_ui2f+0x68>
 800097e:	239f      	movs	r3, #159	; 0x9f
 8000980:	4031      	ands	r1, r6
 8000982:	1b1b      	subs	r3, r3, r4
 8000984:	0189      	lsls	r1, r1, #6
 8000986:	0a4d      	lsrs	r5, r1, #9
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	e7db      	b.n	8000944 <__aeabi_ui2f+0x28>
 800098c:	1f62      	subs	r2, r4, #5
 800098e:	4095      	lsls	r5, r2
 8000990:	0029      	movs	r1, r5
 8000992:	4e02      	ldr	r6, [pc, #8]	; (800099c <__aeabi_ui2f+0x80>)
 8000994:	4031      	ands	r1, r6
 8000996:	076a      	lsls	r2, r5, #29
 8000998:	d0f4      	beq.n	8000984 <__aeabi_ui2f+0x68>
 800099a:	e7e9      	b.n	8000970 <__aeabi_ui2f+0x54>
 800099c:	fbffffff 	.word	0xfbffffff

080009a0 <__aeabi_dadd>:
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a2:	464f      	mov	r7, r9
 80009a4:	4646      	mov	r6, r8
 80009a6:	46d6      	mov	lr, sl
 80009a8:	000d      	movs	r5, r1
 80009aa:	0004      	movs	r4, r0
 80009ac:	b5c0      	push	{r6, r7, lr}
 80009ae:	001f      	movs	r7, r3
 80009b0:	0011      	movs	r1, r2
 80009b2:	0328      	lsls	r0, r5, #12
 80009b4:	0f62      	lsrs	r2, r4, #29
 80009b6:	0a40      	lsrs	r0, r0, #9
 80009b8:	4310      	orrs	r0, r2
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0d52      	lsrs	r2, r2, #21
 80009be:	00e3      	lsls	r3, r4, #3
 80009c0:	033c      	lsls	r4, r7, #12
 80009c2:	4691      	mov	r9, r2
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	0ffa      	lsrs	r2, r7, #31
 80009c8:	0f4f      	lsrs	r7, r1, #29
 80009ca:	006e      	lsls	r6, r5, #1
 80009cc:	4327      	orrs	r7, r4
 80009ce:	4692      	mov	sl, r2
 80009d0:	46b8      	mov	r8, r7
 80009d2:	0d76      	lsrs	r6, r6, #21
 80009d4:	0fed      	lsrs	r5, r5, #31
 80009d6:	00c9      	lsls	r1, r1, #3
 80009d8:	4295      	cmp	r5, r2
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x3e>
 80009dc:	e099      	b.n	8000b12 <__aeabi_dadd+0x172>
 80009de:	464c      	mov	r4, r9
 80009e0:	1b34      	subs	r4, r6, r4
 80009e2:	46a4      	mov	ip, r4
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	dc00      	bgt.n	80009ea <__aeabi_dadd+0x4a>
 80009e8:	e07c      	b.n	8000ae4 <__aeabi_dadd+0x144>
 80009ea:	464a      	mov	r2, r9
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x52>
 80009f0:	e0b8      	b.n	8000b64 <__aeabi_dadd+0x1c4>
 80009f2:	4ac5      	ldr	r2, [pc, #788]	; (8000d08 <__aeabi_dadd+0x368>)
 80009f4:	4296      	cmp	r6, r2
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x5a>
 80009f8:	e11c      	b.n	8000c34 <__aeabi_dadd+0x294>
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	003c      	movs	r4, r7
 80009fe:	0412      	lsls	r2, r2, #16
 8000a00:	4314      	orrs	r4, r2
 8000a02:	46a0      	mov	r8, r4
 8000a04:	4662      	mov	r2, ip
 8000a06:	2a38      	cmp	r2, #56	; 0x38
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x6c>
 8000a0a:	e161      	b.n	8000cd0 <__aeabi_dadd+0x330>
 8000a0c:	2a1f      	cmp	r2, #31
 8000a0e:	dd00      	ble.n	8000a12 <__aeabi_dadd+0x72>
 8000a10:	e1cc      	b.n	8000dac <__aeabi_dadd+0x40c>
 8000a12:	4664      	mov	r4, ip
 8000a14:	2220      	movs	r2, #32
 8000a16:	1b12      	subs	r2, r2, r4
 8000a18:	4644      	mov	r4, r8
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	000f      	movs	r7, r1
 8000a1e:	46a1      	mov	r9, r4
 8000a20:	4664      	mov	r4, ip
 8000a22:	4091      	lsls	r1, r2
 8000a24:	40e7      	lsrs	r7, r4
 8000a26:	464c      	mov	r4, r9
 8000a28:	1e4a      	subs	r2, r1, #1
 8000a2a:	4191      	sbcs	r1, r2
 8000a2c:	433c      	orrs	r4, r7
 8000a2e:	4642      	mov	r2, r8
 8000a30:	4321      	orrs	r1, r4
 8000a32:	4664      	mov	r4, ip
 8000a34:	40e2      	lsrs	r2, r4
 8000a36:	1a80      	subs	r0, r0, r2
 8000a38:	1a5c      	subs	r4, r3, r1
 8000a3a:	42a3      	cmp	r3, r4
 8000a3c:	419b      	sbcs	r3, r3
 8000a3e:	425f      	negs	r7, r3
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	023b      	lsls	r3, r7, #8
 8000a44:	d400      	bmi.n	8000a48 <__aeabi_dadd+0xa8>
 8000a46:	e0d0      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000a48:	027f      	lsls	r7, r7, #9
 8000a4a:	0a7f      	lsrs	r7, r7, #9
 8000a4c:	2f00      	cmp	r7, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0xb2>
 8000a50:	e0ff      	b.n	8000c52 <__aeabi_dadd+0x2b2>
 8000a52:	0038      	movs	r0, r7
 8000a54:	f001 fdd2 	bl	80025fc <__clzsi2>
 8000a58:	0001      	movs	r1, r0
 8000a5a:	3908      	subs	r1, #8
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	0022      	movs	r2, r4
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	408f      	lsls	r7, r1
 8000a64:	40da      	lsrs	r2, r3
 8000a66:	408c      	lsls	r4, r1
 8000a68:	4317      	orrs	r7, r2
 8000a6a:	42b1      	cmp	r1, r6
 8000a6c:	da00      	bge.n	8000a70 <__aeabi_dadd+0xd0>
 8000a6e:	e0ff      	b.n	8000c70 <__aeabi_dadd+0x2d0>
 8000a70:	1b89      	subs	r1, r1, r6
 8000a72:	1c4b      	adds	r3, r1, #1
 8000a74:	2b1f      	cmp	r3, #31
 8000a76:	dd00      	ble.n	8000a7a <__aeabi_dadd+0xda>
 8000a78:	e0a8      	b.n	8000bcc <__aeabi_dadd+0x22c>
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	0039      	movs	r1, r7
 8000a7e:	1ad2      	subs	r2, r2, r3
 8000a80:	0020      	movs	r0, r4
 8000a82:	4094      	lsls	r4, r2
 8000a84:	4091      	lsls	r1, r2
 8000a86:	40d8      	lsrs	r0, r3
 8000a88:	1e62      	subs	r2, r4, #1
 8000a8a:	4194      	sbcs	r4, r2
 8000a8c:	40df      	lsrs	r7, r3
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4301      	orrs	r1, r0
 8000a92:	430c      	orrs	r4, r1
 8000a94:	0763      	lsls	r3, r4, #29
 8000a96:	d009      	beq.n	8000aac <__aeabi_dadd+0x10c>
 8000a98:	230f      	movs	r3, #15
 8000a9a:	4023      	ands	r3, r4
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d005      	beq.n	8000aac <__aeabi_dadd+0x10c>
 8000aa0:	1d23      	adds	r3, r4, #4
 8000aa2:	42a3      	cmp	r3, r4
 8000aa4:	41a4      	sbcs	r4, r4
 8000aa6:	4264      	negs	r4, r4
 8000aa8:	193f      	adds	r7, r7, r4
 8000aaa:	001c      	movs	r4, r3
 8000aac:	023b      	lsls	r3, r7, #8
 8000aae:	d400      	bmi.n	8000ab2 <__aeabi_dadd+0x112>
 8000ab0:	e09e      	b.n	8000bf0 <__aeabi_dadd+0x250>
 8000ab2:	4b95      	ldr	r3, [pc, #596]	; (8000d08 <__aeabi_dadd+0x368>)
 8000ab4:	3601      	adds	r6, #1
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x11c>
 8000aba:	e0b7      	b.n	8000c2c <__aeabi_dadd+0x28c>
 8000abc:	4a93      	ldr	r2, [pc, #588]	; (8000d0c <__aeabi_dadd+0x36c>)
 8000abe:	08e4      	lsrs	r4, r4, #3
 8000ac0:	4017      	ands	r7, r2
 8000ac2:	077b      	lsls	r3, r7, #29
 8000ac4:	0571      	lsls	r1, r6, #21
 8000ac6:	027f      	lsls	r7, r7, #9
 8000ac8:	4323      	orrs	r3, r4
 8000aca:	0b3f      	lsrs	r7, r7, #12
 8000acc:	0d4a      	lsrs	r2, r1, #21
 8000ace:	0512      	lsls	r2, r2, #20
 8000ad0:	433a      	orrs	r2, r7
 8000ad2:	07ed      	lsls	r5, r5, #31
 8000ad4:	432a      	orrs	r2, r5
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	0011      	movs	r1, r2
 8000ada:	bce0      	pop	{r5, r6, r7}
 8000adc:	46ba      	mov	sl, r7
 8000ade:	46b1      	mov	r9, r6
 8000ae0:	46a8      	mov	r8, r5
 8000ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae4:	2c00      	cmp	r4, #0
 8000ae6:	d04b      	beq.n	8000b80 <__aeabi_dadd+0x1e0>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	1ba4      	subs	r4, r4, r6
 8000aec:	46a4      	mov	ip, r4
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d000      	beq.n	8000af4 <__aeabi_dadd+0x154>
 8000af2:	e123      	b.n	8000d3c <__aeabi_dadd+0x39c>
 8000af4:	0004      	movs	r4, r0
 8000af6:	431c      	orrs	r4, r3
 8000af8:	d100      	bne.n	8000afc <__aeabi_dadd+0x15c>
 8000afa:	e1af      	b.n	8000e5c <__aeabi_dadd+0x4bc>
 8000afc:	4662      	mov	r2, ip
 8000afe:	1e54      	subs	r4, r2, #1
 8000b00:	2a01      	cmp	r2, #1
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dadd+0x166>
 8000b04:	e215      	b.n	8000f32 <__aeabi_dadd+0x592>
 8000b06:	4d80      	ldr	r5, [pc, #512]	; (8000d08 <__aeabi_dadd+0x368>)
 8000b08:	45ac      	cmp	ip, r5
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x16e>
 8000b0c:	e1c8      	b.n	8000ea0 <__aeabi_dadd+0x500>
 8000b0e:	46a4      	mov	ip, r4
 8000b10:	e11b      	b.n	8000d4a <__aeabi_dadd+0x3aa>
 8000b12:	464a      	mov	r2, r9
 8000b14:	1ab2      	subs	r2, r6, r2
 8000b16:	4694      	mov	ip, r2
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	dc00      	bgt.n	8000b1e <__aeabi_dadd+0x17e>
 8000b1c:	e0ac      	b.n	8000c78 <__aeabi_dadd+0x2d8>
 8000b1e:	464a      	mov	r2, r9
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	d043      	beq.n	8000bac <__aeabi_dadd+0x20c>
 8000b24:	4a78      	ldr	r2, [pc, #480]	; (8000d08 <__aeabi_dadd+0x368>)
 8000b26:	4296      	cmp	r6, r2
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x18c>
 8000b2a:	e1af      	b.n	8000e8c <__aeabi_dadd+0x4ec>
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	003c      	movs	r4, r7
 8000b30:	0412      	lsls	r2, r2, #16
 8000b32:	4314      	orrs	r4, r2
 8000b34:	46a0      	mov	r8, r4
 8000b36:	4662      	mov	r2, ip
 8000b38:	2a38      	cmp	r2, #56	; 0x38
 8000b3a:	dc67      	bgt.n	8000c0c <__aeabi_dadd+0x26c>
 8000b3c:	2a1f      	cmp	r2, #31
 8000b3e:	dc00      	bgt.n	8000b42 <__aeabi_dadd+0x1a2>
 8000b40:	e15f      	b.n	8000e02 <__aeabi_dadd+0x462>
 8000b42:	4647      	mov	r7, r8
 8000b44:	3a20      	subs	r2, #32
 8000b46:	40d7      	lsrs	r7, r2
 8000b48:	4662      	mov	r2, ip
 8000b4a:	2a20      	cmp	r2, #32
 8000b4c:	d005      	beq.n	8000b5a <__aeabi_dadd+0x1ba>
 8000b4e:	4664      	mov	r4, ip
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	1b12      	subs	r2, r2, r4
 8000b54:	4644      	mov	r4, r8
 8000b56:	4094      	lsls	r4, r2
 8000b58:	4321      	orrs	r1, r4
 8000b5a:	1e4a      	subs	r2, r1, #1
 8000b5c:	4191      	sbcs	r1, r2
 8000b5e:	000c      	movs	r4, r1
 8000b60:	433c      	orrs	r4, r7
 8000b62:	e057      	b.n	8000c14 <__aeabi_dadd+0x274>
 8000b64:	003a      	movs	r2, r7
 8000b66:	430a      	orrs	r2, r1
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x1cc>
 8000b6a:	e105      	b.n	8000d78 <__aeabi_dadd+0x3d8>
 8000b6c:	0022      	movs	r2, r4
 8000b6e:	3a01      	subs	r2, #1
 8000b70:	2c01      	cmp	r4, #1
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x1d6>
 8000b74:	e182      	b.n	8000e7c <__aeabi_dadd+0x4dc>
 8000b76:	4c64      	ldr	r4, [pc, #400]	; (8000d08 <__aeabi_dadd+0x368>)
 8000b78:	45a4      	cmp	ip, r4
 8000b7a:	d05b      	beq.n	8000c34 <__aeabi_dadd+0x294>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	e741      	b.n	8000a04 <__aeabi_dadd+0x64>
 8000b80:	4c63      	ldr	r4, [pc, #396]	; (8000d10 <__aeabi_dadd+0x370>)
 8000b82:	1c77      	adds	r7, r6, #1
 8000b84:	4227      	tst	r7, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x1ea>
 8000b88:	e0c4      	b.n	8000d14 <__aeabi_dadd+0x374>
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	431c      	orrs	r4, r3
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d000      	beq.n	8000b94 <__aeabi_dadd+0x1f4>
 8000b92:	e169      	b.n	8000e68 <__aeabi_dadd+0x4c8>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x1fa>
 8000b98:	e1bf      	b.n	8000f1a <__aeabi_dadd+0x57a>
 8000b9a:	4644      	mov	r4, r8
 8000b9c:	430c      	orrs	r4, r1
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x202>
 8000ba0:	e1d0      	b.n	8000f44 <__aeabi_dadd+0x5a4>
 8000ba2:	0742      	lsls	r2, r0, #29
 8000ba4:	08db      	lsrs	r3, r3, #3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	08c0      	lsrs	r0, r0, #3
 8000baa:	e029      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000bac:	003a      	movs	r2, r7
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x214>
 8000bb2:	e170      	b.n	8000e96 <__aeabi_dadd+0x4f6>
 8000bb4:	4662      	mov	r2, ip
 8000bb6:	4664      	mov	r4, ip
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	2c01      	cmp	r4, #1
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dadd+0x220>
 8000bbe:	e0e0      	b.n	8000d82 <__aeabi_dadd+0x3e2>
 8000bc0:	4c51      	ldr	r4, [pc, #324]	; (8000d08 <__aeabi_dadd+0x368>)
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0x228>
 8000bc6:	e161      	b.n	8000e8c <__aeabi_dadd+0x4ec>
 8000bc8:	4694      	mov	ip, r2
 8000bca:	e7b4      	b.n	8000b36 <__aeabi_dadd+0x196>
 8000bcc:	003a      	movs	r2, r7
 8000bce:	391f      	subs	r1, #31
 8000bd0:	40ca      	lsrs	r2, r1
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	2b20      	cmp	r3, #32
 8000bd6:	d003      	beq.n	8000be0 <__aeabi_dadd+0x240>
 8000bd8:	2240      	movs	r2, #64	; 0x40
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	409f      	lsls	r7, r3
 8000bde:	433c      	orrs	r4, r7
 8000be0:	1e63      	subs	r3, r4, #1
 8000be2:	419c      	sbcs	r4, r3
 8000be4:	2700      	movs	r7, #0
 8000be6:	2600      	movs	r6, #0
 8000be8:	430c      	orrs	r4, r1
 8000bea:	0763      	lsls	r3, r4, #29
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_dadd+0x250>
 8000bee:	e753      	b.n	8000a98 <__aeabi_dadd+0xf8>
 8000bf0:	46b4      	mov	ip, r6
 8000bf2:	08e4      	lsrs	r4, r4, #3
 8000bf4:	077b      	lsls	r3, r7, #29
 8000bf6:	4323      	orrs	r3, r4
 8000bf8:	08f8      	lsrs	r0, r7, #3
 8000bfa:	4a43      	ldr	r2, [pc, #268]	; (8000d08 <__aeabi_dadd+0x368>)
 8000bfc:	4594      	cmp	ip, r2
 8000bfe:	d01d      	beq.n	8000c3c <__aeabi_dadd+0x29c>
 8000c00:	4662      	mov	r2, ip
 8000c02:	0307      	lsls	r7, r0, #12
 8000c04:	0552      	lsls	r2, r2, #21
 8000c06:	0b3f      	lsrs	r7, r7, #12
 8000c08:	0d52      	lsrs	r2, r2, #21
 8000c0a:	e760      	b.n	8000ace <__aeabi_dadd+0x12e>
 8000c0c:	4644      	mov	r4, r8
 8000c0e:	430c      	orrs	r4, r1
 8000c10:	1e62      	subs	r2, r4, #1
 8000c12:	4194      	sbcs	r4, r2
 8000c14:	18e4      	adds	r4, r4, r3
 8000c16:	429c      	cmp	r4, r3
 8000c18:	419b      	sbcs	r3, r3
 8000c1a:	425f      	negs	r7, r3
 8000c1c:	183f      	adds	r7, r7, r0
 8000c1e:	023b      	lsls	r3, r7, #8
 8000c20:	d5e3      	bpl.n	8000bea <__aeabi_dadd+0x24a>
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <__aeabi_dadd+0x368>)
 8000c24:	3601      	adds	r6, #1
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d000      	beq.n	8000c2c <__aeabi_dadd+0x28c>
 8000c2a:	e0b5      	b.n	8000d98 <__aeabi_dadd+0x3f8>
 8000c2c:	0032      	movs	r2, r6
 8000c2e:	2700      	movs	r7, #0
 8000c30:	2300      	movs	r3, #0
 8000c32:	e74c      	b.n	8000ace <__aeabi_dadd+0x12e>
 8000c34:	0742      	lsls	r2, r0, #29
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	08c0      	lsrs	r0, r0, #3
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4302      	orrs	r2, r0
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x2a4>
 8000c42:	e1e1      	b.n	8001008 <__aeabi_dadd+0x668>
 8000c44:	2780      	movs	r7, #128	; 0x80
 8000c46:	033f      	lsls	r7, r7, #12
 8000c48:	4307      	orrs	r7, r0
 8000c4a:	033f      	lsls	r7, r7, #12
 8000c4c:	4a2e      	ldr	r2, [pc, #184]	; (8000d08 <__aeabi_dadd+0x368>)
 8000c4e:	0b3f      	lsrs	r7, r7, #12
 8000c50:	e73d      	b.n	8000ace <__aeabi_dadd+0x12e>
 8000c52:	0020      	movs	r0, r4
 8000c54:	f001 fcd2 	bl	80025fc <__clzsi2>
 8000c58:	0001      	movs	r1, r0
 8000c5a:	3118      	adds	r1, #24
 8000c5c:	291f      	cmp	r1, #31
 8000c5e:	dc00      	bgt.n	8000c62 <__aeabi_dadd+0x2c2>
 8000c60:	e6fc      	b.n	8000a5c <__aeabi_dadd+0xbc>
 8000c62:	3808      	subs	r0, #8
 8000c64:	4084      	lsls	r4, r0
 8000c66:	0027      	movs	r7, r4
 8000c68:	2400      	movs	r4, #0
 8000c6a:	42b1      	cmp	r1, r6
 8000c6c:	db00      	blt.n	8000c70 <__aeabi_dadd+0x2d0>
 8000c6e:	e6ff      	b.n	8000a70 <__aeabi_dadd+0xd0>
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <__aeabi_dadd+0x36c>)
 8000c72:	1a76      	subs	r6, r6, r1
 8000c74:	4017      	ands	r7, r2
 8000c76:	e70d      	b.n	8000a94 <__aeabi_dadd+0xf4>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d02f      	beq.n	8000cdc <__aeabi_dadd+0x33c>
 8000c7c:	464a      	mov	r2, r9
 8000c7e:	1b92      	subs	r2, r2, r6
 8000c80:	4694      	mov	ip, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dadd+0x2e8>
 8000c86:	e0ad      	b.n	8000de4 <__aeabi_dadd+0x444>
 8000c88:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <__aeabi_dadd+0x368>)
 8000c8a:	4591      	cmp	r9, r2
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x2f0>
 8000c8e:	e10f      	b.n	8000eb0 <__aeabi_dadd+0x510>
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	0412      	lsls	r2, r2, #16
 8000c94:	4310      	orrs	r0, r2
 8000c96:	4662      	mov	r2, ip
 8000c98:	2a38      	cmp	r2, #56	; 0x38
 8000c9a:	dd00      	ble.n	8000c9e <__aeabi_dadd+0x2fe>
 8000c9c:	e10f      	b.n	8000ebe <__aeabi_dadd+0x51e>
 8000c9e:	2a1f      	cmp	r2, #31
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dadd+0x304>
 8000ca2:	e180      	b.n	8000fa6 <__aeabi_dadd+0x606>
 8000ca4:	4664      	mov	r4, ip
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	001e      	movs	r6, r3
 8000caa:	1b12      	subs	r2, r2, r4
 8000cac:	4667      	mov	r7, ip
 8000cae:	0004      	movs	r4, r0
 8000cb0:	4093      	lsls	r3, r2
 8000cb2:	4094      	lsls	r4, r2
 8000cb4:	40fe      	lsrs	r6, r7
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	4193      	sbcs	r3, r2
 8000cba:	40f8      	lsrs	r0, r7
 8000cbc:	4334      	orrs	r4, r6
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	4480      	add	r8, r0
 8000cc2:	1864      	adds	r4, r4, r1
 8000cc4:	428c      	cmp	r4, r1
 8000cc6:	41bf      	sbcs	r7, r7
 8000cc8:	427f      	negs	r7, r7
 8000cca:	464e      	mov	r6, r9
 8000ccc:	4447      	add	r7, r8
 8000cce:	e7a6      	b.n	8000c1e <__aeabi_dadd+0x27e>
 8000cd0:	4642      	mov	r2, r8
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	1e4a      	subs	r2, r1, #1
 8000cd8:	4191      	sbcs	r1, r2
 8000cda:	e6ad      	b.n	8000a38 <__aeabi_dadd+0x98>
 8000cdc:	4c0c      	ldr	r4, [pc, #48]	; (8000d10 <__aeabi_dadd+0x370>)
 8000cde:	1c72      	adds	r2, r6, #1
 8000ce0:	4222      	tst	r2, r4
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_dadd+0x346>
 8000ce4:	e0a1      	b.n	8000e2a <__aeabi_dadd+0x48a>
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_dadd+0x350>
 8000cee:	e0fa      	b.n	8000ee6 <__aeabi_dadd+0x546>
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x356>
 8000cf4:	e145      	b.n	8000f82 <__aeabi_dadd+0x5e2>
 8000cf6:	003a      	movs	r2, r7
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_dadd+0x35e>
 8000cfc:	e146      	b.n	8000f8c <__aeabi_dadd+0x5ec>
 8000cfe:	0742      	lsls	r2, r0, #29
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	08c0      	lsrs	r0, r0, #3
 8000d06:	e77b      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000d08:	000007ff 	.word	0x000007ff
 8000d0c:	ff7fffff 	.word	0xff7fffff
 8000d10:	000007fe 	.word	0x000007fe
 8000d14:	4647      	mov	r7, r8
 8000d16:	1a5c      	subs	r4, r3, r1
 8000d18:	1bc2      	subs	r2, r0, r7
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	41bf      	sbcs	r7, r7
 8000d1e:	427f      	negs	r7, r7
 8000d20:	46b9      	mov	r9, r7
 8000d22:	0017      	movs	r7, r2
 8000d24:	464a      	mov	r2, r9
 8000d26:	1abf      	subs	r7, r7, r2
 8000d28:	023a      	lsls	r2, r7, #8
 8000d2a:	d500      	bpl.n	8000d2e <__aeabi_dadd+0x38e>
 8000d2c:	e08d      	b.n	8000e4a <__aeabi_dadd+0x4aa>
 8000d2e:	0023      	movs	r3, r4
 8000d30:	433b      	orrs	r3, r7
 8000d32:	d000      	beq.n	8000d36 <__aeabi_dadd+0x396>
 8000d34:	e68a      	b.n	8000a4c <__aeabi_dadd+0xac>
 8000d36:	2000      	movs	r0, #0
 8000d38:	2500      	movs	r5, #0
 8000d3a:	e761      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000d3c:	4cb4      	ldr	r4, [pc, #720]	; (8001010 <__aeabi_dadd+0x670>)
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x3a4>
 8000d42:	e0ad      	b.n	8000ea0 <__aeabi_dadd+0x500>
 8000d44:	2480      	movs	r4, #128	; 0x80
 8000d46:	0424      	lsls	r4, r4, #16
 8000d48:	4320      	orrs	r0, r4
 8000d4a:	4664      	mov	r4, ip
 8000d4c:	2c38      	cmp	r4, #56	; 0x38
 8000d4e:	dc3d      	bgt.n	8000dcc <__aeabi_dadd+0x42c>
 8000d50:	4662      	mov	r2, ip
 8000d52:	2c1f      	cmp	r4, #31
 8000d54:	dd00      	ble.n	8000d58 <__aeabi_dadd+0x3b8>
 8000d56:	e0b7      	b.n	8000ec8 <__aeabi_dadd+0x528>
 8000d58:	2520      	movs	r5, #32
 8000d5a:	001e      	movs	r6, r3
 8000d5c:	1b2d      	subs	r5, r5, r4
 8000d5e:	0004      	movs	r4, r0
 8000d60:	40ab      	lsls	r3, r5
 8000d62:	40ac      	lsls	r4, r5
 8000d64:	40d6      	lsrs	r6, r2
 8000d66:	40d0      	lsrs	r0, r2
 8000d68:	4642      	mov	r2, r8
 8000d6a:	1e5d      	subs	r5, r3, #1
 8000d6c:	41ab      	sbcs	r3, r5
 8000d6e:	4334      	orrs	r4, r6
 8000d70:	1a12      	subs	r2, r2, r0
 8000d72:	4690      	mov	r8, r2
 8000d74:	4323      	orrs	r3, r4
 8000d76:	e02c      	b.n	8000dd2 <__aeabi_dadd+0x432>
 8000d78:	0742      	lsls	r2, r0, #29
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	08c0      	lsrs	r0, r0, #3
 8000d80:	e73b      	b.n	8000bfa <__aeabi_dadd+0x25a>
 8000d82:	185c      	adds	r4, r3, r1
 8000d84:	429c      	cmp	r4, r3
 8000d86:	419b      	sbcs	r3, r3
 8000d88:	4440      	add	r0, r8
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	18c7      	adds	r7, r0, r3
 8000d8e:	2601      	movs	r6, #1
 8000d90:	023b      	lsls	r3, r7, #8
 8000d92:	d400      	bmi.n	8000d96 <__aeabi_dadd+0x3f6>
 8000d94:	e729      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000d96:	2602      	movs	r6, #2
 8000d98:	4a9e      	ldr	r2, [pc, #632]	; (8001014 <__aeabi_dadd+0x674>)
 8000d9a:	0863      	lsrs	r3, r4, #1
 8000d9c:	4017      	ands	r7, r2
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4014      	ands	r4, r2
 8000da2:	431c      	orrs	r4, r3
 8000da4:	07fb      	lsls	r3, r7, #31
 8000da6:	431c      	orrs	r4, r3
 8000da8:	087f      	lsrs	r7, r7, #1
 8000daa:	e673      	b.n	8000a94 <__aeabi_dadd+0xf4>
 8000dac:	4644      	mov	r4, r8
 8000dae:	3a20      	subs	r2, #32
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	4662      	mov	r2, ip
 8000db4:	2a20      	cmp	r2, #32
 8000db6:	d005      	beq.n	8000dc4 <__aeabi_dadd+0x424>
 8000db8:	4667      	mov	r7, ip
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	1bd2      	subs	r2, r2, r7
 8000dbe:	4647      	mov	r7, r8
 8000dc0:	4097      	lsls	r7, r2
 8000dc2:	4339      	orrs	r1, r7
 8000dc4:	1e4a      	subs	r2, r1, #1
 8000dc6:	4191      	sbcs	r1, r2
 8000dc8:	4321      	orrs	r1, r4
 8000dca:	e635      	b.n	8000a38 <__aeabi_dadd+0x98>
 8000dcc:	4303      	orrs	r3, r0
 8000dce:	1e58      	subs	r0, r3, #1
 8000dd0:	4183      	sbcs	r3, r0
 8000dd2:	1acc      	subs	r4, r1, r3
 8000dd4:	42a1      	cmp	r1, r4
 8000dd6:	41bf      	sbcs	r7, r7
 8000dd8:	4643      	mov	r3, r8
 8000dda:	427f      	negs	r7, r7
 8000ddc:	4655      	mov	r5, sl
 8000dde:	464e      	mov	r6, r9
 8000de0:	1bdf      	subs	r7, r3, r7
 8000de2:	e62e      	b.n	8000a42 <__aeabi_dadd+0xa2>
 8000de4:	0002      	movs	r2, r0
 8000de6:	431a      	orrs	r2, r3
 8000de8:	d100      	bne.n	8000dec <__aeabi_dadd+0x44c>
 8000dea:	e0bd      	b.n	8000f68 <__aeabi_dadd+0x5c8>
 8000dec:	4662      	mov	r2, ip
 8000dee:	4664      	mov	r4, ip
 8000df0:	3a01      	subs	r2, #1
 8000df2:	2c01      	cmp	r4, #1
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x458>
 8000df6:	e0e5      	b.n	8000fc4 <__aeabi_dadd+0x624>
 8000df8:	4c85      	ldr	r4, [pc, #532]	; (8001010 <__aeabi_dadd+0x670>)
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d058      	beq.n	8000eb0 <__aeabi_dadd+0x510>
 8000dfe:	4694      	mov	ip, r2
 8000e00:	e749      	b.n	8000c96 <__aeabi_dadd+0x2f6>
 8000e02:	4664      	mov	r4, ip
 8000e04:	2220      	movs	r2, #32
 8000e06:	1b12      	subs	r2, r2, r4
 8000e08:	4644      	mov	r4, r8
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	000f      	movs	r7, r1
 8000e0e:	46a1      	mov	r9, r4
 8000e10:	4664      	mov	r4, ip
 8000e12:	4091      	lsls	r1, r2
 8000e14:	40e7      	lsrs	r7, r4
 8000e16:	464c      	mov	r4, r9
 8000e18:	1e4a      	subs	r2, r1, #1
 8000e1a:	4191      	sbcs	r1, r2
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	4642      	mov	r2, r8
 8000e20:	430c      	orrs	r4, r1
 8000e22:	4661      	mov	r1, ip
 8000e24:	40ca      	lsrs	r2, r1
 8000e26:	1880      	adds	r0, r0, r2
 8000e28:	e6f4      	b.n	8000c14 <__aeabi_dadd+0x274>
 8000e2a:	4c79      	ldr	r4, [pc, #484]	; (8001010 <__aeabi_dadd+0x670>)
 8000e2c:	42a2      	cmp	r2, r4
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dadd+0x492>
 8000e30:	e6fd      	b.n	8000c2e <__aeabi_dadd+0x28e>
 8000e32:	1859      	adds	r1, r3, r1
 8000e34:	4299      	cmp	r1, r3
 8000e36:	419b      	sbcs	r3, r3
 8000e38:	4440      	add	r0, r8
 8000e3a:	425f      	negs	r7, r3
 8000e3c:	19c7      	adds	r7, r0, r7
 8000e3e:	07fc      	lsls	r4, r7, #31
 8000e40:	0849      	lsrs	r1, r1, #1
 8000e42:	0016      	movs	r6, r2
 8000e44:	430c      	orrs	r4, r1
 8000e46:	087f      	lsrs	r7, r7, #1
 8000e48:	e6cf      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000e4a:	1acc      	subs	r4, r1, r3
 8000e4c:	42a1      	cmp	r1, r4
 8000e4e:	41bf      	sbcs	r7, r7
 8000e50:	4643      	mov	r3, r8
 8000e52:	427f      	negs	r7, r7
 8000e54:	1a18      	subs	r0, r3, r0
 8000e56:	4655      	mov	r5, sl
 8000e58:	1bc7      	subs	r7, r0, r7
 8000e5a:	e5f7      	b.n	8000a4c <__aeabi_dadd+0xac>
 8000e5c:	08c9      	lsrs	r1, r1, #3
 8000e5e:	077b      	lsls	r3, r7, #29
 8000e60:	4655      	mov	r5, sl
 8000e62:	430b      	orrs	r3, r1
 8000e64:	08f8      	lsrs	r0, r7, #3
 8000e66:	e6c8      	b.n	8000bfa <__aeabi_dadd+0x25a>
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d000      	beq.n	8000e6e <__aeabi_dadd+0x4ce>
 8000e6c:	e081      	b.n	8000f72 <__aeabi_dadd+0x5d2>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	430b      	orrs	r3, r1
 8000e72:	d115      	bne.n	8000ea0 <__aeabi_dadd+0x500>
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	2500      	movs	r5, #0
 8000e78:	0300      	lsls	r0, r0, #12
 8000e7a:	e6e3      	b.n	8000c44 <__aeabi_dadd+0x2a4>
 8000e7c:	1a5c      	subs	r4, r3, r1
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	419b      	sbcs	r3, r3
 8000e82:	1bc7      	subs	r7, r0, r7
 8000e84:	425b      	negs	r3, r3
 8000e86:	2601      	movs	r6, #1
 8000e88:	1aff      	subs	r7, r7, r3
 8000e8a:	e5da      	b.n	8000a42 <__aeabi_dadd+0xa2>
 8000e8c:	0742      	lsls	r2, r0, #29
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	08c0      	lsrs	r0, r0, #3
 8000e94:	e6d2      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000e96:	0742      	lsls	r2, r0, #29
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	08c0      	lsrs	r0, r0, #3
 8000e9e:	e6ac      	b.n	8000bfa <__aeabi_dadd+0x25a>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	4642      	mov	r2, r8
 8000ea4:	08c9      	lsrs	r1, r1, #3
 8000ea6:	075b      	lsls	r3, r3, #29
 8000ea8:	4655      	mov	r5, sl
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	08d0      	lsrs	r0, r2, #3
 8000eae:	e6c5      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000eb0:	4643      	mov	r3, r8
 8000eb2:	4642      	mov	r2, r8
 8000eb4:	075b      	lsls	r3, r3, #29
 8000eb6:	08c9      	lsrs	r1, r1, #3
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	08d0      	lsrs	r0, r2, #3
 8000ebc:	e6be      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000ebe:	4303      	orrs	r3, r0
 8000ec0:	001c      	movs	r4, r3
 8000ec2:	1e63      	subs	r3, r4, #1
 8000ec4:	419c      	sbcs	r4, r3
 8000ec6:	e6fc      	b.n	8000cc2 <__aeabi_dadd+0x322>
 8000ec8:	0002      	movs	r2, r0
 8000eca:	3c20      	subs	r4, #32
 8000ecc:	40e2      	lsrs	r2, r4
 8000ece:	0014      	movs	r4, r2
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	2a20      	cmp	r2, #32
 8000ed4:	d003      	beq.n	8000ede <__aeabi_dadd+0x53e>
 8000ed6:	2540      	movs	r5, #64	; 0x40
 8000ed8:	1aad      	subs	r5, r5, r2
 8000eda:	40a8      	lsls	r0, r5
 8000edc:	4303      	orrs	r3, r0
 8000ede:	1e58      	subs	r0, r3, #1
 8000ee0:	4183      	sbcs	r3, r0
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	e775      	b.n	8000dd2 <__aeabi_dadd+0x432>
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	d0e2      	beq.n	8000eb0 <__aeabi_dadd+0x510>
 8000eea:	003a      	movs	r2, r7
 8000eec:	430a      	orrs	r2, r1
 8000eee:	d0cd      	beq.n	8000e8c <__aeabi_dadd+0x4ec>
 8000ef0:	0742      	lsls	r2, r0, #29
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	08c0      	lsrs	r0, r0, #3
 8000efa:	0312      	lsls	r2, r2, #12
 8000efc:	4210      	tst	r0, r2
 8000efe:	d006      	beq.n	8000f0e <__aeabi_dadd+0x56e>
 8000f00:	08fc      	lsrs	r4, r7, #3
 8000f02:	4214      	tst	r4, r2
 8000f04:	d103      	bne.n	8000f0e <__aeabi_dadd+0x56e>
 8000f06:	0020      	movs	r0, r4
 8000f08:	08cb      	lsrs	r3, r1, #3
 8000f0a:	077a      	lsls	r2, r7, #29
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	0f5a      	lsrs	r2, r3, #29
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	0752      	lsls	r2, r2, #29
 8000f14:	08db      	lsrs	r3, r3, #3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	e690      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x582>
 8000f20:	e709      	b.n	8000d36 <__aeabi_dadd+0x396>
 8000f22:	4643      	mov	r3, r8
 8000f24:	4642      	mov	r2, r8
 8000f26:	08c9      	lsrs	r1, r1, #3
 8000f28:	075b      	lsls	r3, r3, #29
 8000f2a:	4655      	mov	r5, sl
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	08d0      	lsrs	r0, r2, #3
 8000f30:	e666      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000f32:	1acc      	subs	r4, r1, r3
 8000f34:	42a1      	cmp	r1, r4
 8000f36:	4189      	sbcs	r1, r1
 8000f38:	1a3f      	subs	r7, r7, r0
 8000f3a:	4249      	negs	r1, r1
 8000f3c:	4655      	mov	r5, sl
 8000f3e:	2601      	movs	r6, #1
 8000f40:	1a7f      	subs	r7, r7, r1
 8000f42:	e57e      	b.n	8000a42 <__aeabi_dadd+0xa2>
 8000f44:	4642      	mov	r2, r8
 8000f46:	1a5c      	subs	r4, r3, r1
 8000f48:	1a87      	subs	r7, r0, r2
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	4192      	sbcs	r2, r2
 8000f4e:	4252      	negs	r2, r2
 8000f50:	1abf      	subs	r7, r7, r2
 8000f52:	023a      	lsls	r2, r7, #8
 8000f54:	d53d      	bpl.n	8000fd2 <__aeabi_dadd+0x632>
 8000f56:	1acc      	subs	r4, r1, r3
 8000f58:	42a1      	cmp	r1, r4
 8000f5a:	4189      	sbcs	r1, r1
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	4249      	negs	r1, r1
 8000f60:	1a1f      	subs	r7, r3, r0
 8000f62:	4655      	mov	r5, sl
 8000f64:	1a7f      	subs	r7, r7, r1
 8000f66:	e595      	b.n	8000a94 <__aeabi_dadd+0xf4>
 8000f68:	077b      	lsls	r3, r7, #29
 8000f6a:	08c9      	lsrs	r1, r1, #3
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	08f8      	lsrs	r0, r7, #3
 8000f70:	e643      	b.n	8000bfa <__aeabi_dadd+0x25a>
 8000f72:	4644      	mov	r4, r8
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	430c      	orrs	r4, r1
 8000f78:	d130      	bne.n	8000fdc <__aeabi_dadd+0x63c>
 8000f7a:	0742      	lsls	r2, r0, #29
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	08c0      	lsrs	r0, r0, #3
 8000f80:	e65c      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000f82:	077b      	lsls	r3, r7, #29
 8000f84:	08c9      	lsrs	r1, r1, #3
 8000f86:	430b      	orrs	r3, r1
 8000f88:	08f8      	lsrs	r0, r7, #3
 8000f8a:	e639      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000f8c:	185c      	adds	r4, r3, r1
 8000f8e:	429c      	cmp	r4, r3
 8000f90:	419b      	sbcs	r3, r3
 8000f92:	4440      	add	r0, r8
 8000f94:	425b      	negs	r3, r3
 8000f96:	18c7      	adds	r7, r0, r3
 8000f98:	023b      	lsls	r3, r7, #8
 8000f9a:	d400      	bmi.n	8000f9e <__aeabi_dadd+0x5fe>
 8000f9c:	e625      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <__aeabi_dadd+0x674>)
 8000fa0:	2601      	movs	r6, #1
 8000fa2:	401f      	ands	r7, r3
 8000fa4:	e621      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000fa6:	0004      	movs	r4, r0
 8000fa8:	3a20      	subs	r2, #32
 8000faa:	40d4      	lsrs	r4, r2
 8000fac:	4662      	mov	r2, ip
 8000fae:	2a20      	cmp	r2, #32
 8000fb0:	d004      	beq.n	8000fbc <__aeabi_dadd+0x61c>
 8000fb2:	2240      	movs	r2, #64	; 0x40
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	1b92      	subs	r2, r2, r6
 8000fb8:	4090      	lsls	r0, r2
 8000fba:	4303      	orrs	r3, r0
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	4193      	sbcs	r3, r2
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	e67e      	b.n	8000cc2 <__aeabi_dadd+0x322>
 8000fc4:	185c      	adds	r4, r3, r1
 8000fc6:	428c      	cmp	r4, r1
 8000fc8:	4189      	sbcs	r1, r1
 8000fca:	4440      	add	r0, r8
 8000fcc:	4249      	negs	r1, r1
 8000fce:	1847      	adds	r7, r0, r1
 8000fd0:	e6dd      	b.n	8000d8e <__aeabi_dadd+0x3ee>
 8000fd2:	0023      	movs	r3, r4
 8000fd4:	433b      	orrs	r3, r7
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x63a>
 8000fd8:	e6ad      	b.n	8000d36 <__aeabi_dadd+0x396>
 8000fda:	e606      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000fdc:	0744      	lsls	r4, r0, #29
 8000fde:	4323      	orrs	r3, r4
 8000fe0:	2480      	movs	r4, #128	; 0x80
 8000fe2:	08c0      	lsrs	r0, r0, #3
 8000fe4:	0324      	lsls	r4, r4, #12
 8000fe6:	4220      	tst	r0, r4
 8000fe8:	d008      	beq.n	8000ffc <__aeabi_dadd+0x65c>
 8000fea:	4642      	mov	r2, r8
 8000fec:	08d6      	lsrs	r6, r2, #3
 8000fee:	4226      	tst	r6, r4
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_dadd+0x65c>
 8000ff2:	4655      	mov	r5, sl
 8000ff4:	0030      	movs	r0, r6
 8000ff6:	08cb      	lsrs	r3, r1, #3
 8000ff8:	0751      	lsls	r1, r2, #29
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	0f5a      	lsrs	r2, r3, #29
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	0752      	lsls	r2, r2, #29
 8001004:	4313      	orrs	r3, r2
 8001006:	e619      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8001008:	2300      	movs	r3, #0
 800100a:	4a01      	ldr	r2, [pc, #4]	; (8001010 <__aeabi_dadd+0x670>)
 800100c:	001f      	movs	r7, r3
 800100e:	e55e      	b.n	8000ace <__aeabi_dadd+0x12e>
 8001010:	000007ff 	.word	0x000007ff
 8001014:	ff7fffff 	.word	0xff7fffff

08001018 <__aeabi_ddiv>:
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	4657      	mov	r7, sl
 800101c:	464e      	mov	r6, r9
 800101e:	4645      	mov	r5, r8
 8001020:	46de      	mov	lr, fp
 8001022:	b5e0      	push	{r5, r6, r7, lr}
 8001024:	4681      	mov	r9, r0
 8001026:	0005      	movs	r5, r0
 8001028:	030c      	lsls	r4, r1, #12
 800102a:	0048      	lsls	r0, r1, #1
 800102c:	4692      	mov	sl, r2
 800102e:	001f      	movs	r7, r3
 8001030:	b085      	sub	sp, #20
 8001032:	0b24      	lsrs	r4, r4, #12
 8001034:	0d40      	lsrs	r0, r0, #21
 8001036:	0fce      	lsrs	r6, r1, #31
 8001038:	2800      	cmp	r0, #0
 800103a:	d100      	bne.n	800103e <__aeabi_ddiv+0x26>
 800103c:	e156      	b.n	80012ec <__aeabi_ddiv+0x2d4>
 800103e:	4bd4      	ldr	r3, [pc, #848]	; (8001390 <__aeabi_ddiv+0x378>)
 8001040:	4298      	cmp	r0, r3
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x2e>
 8001044:	e172      	b.n	800132c <__aeabi_ddiv+0x314>
 8001046:	0f6b      	lsrs	r3, r5, #29
 8001048:	00e4      	lsls	r4, r4, #3
 800104a:	431c      	orrs	r4, r3
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	4323      	orrs	r3, r4
 8001052:	4698      	mov	r8, r3
 8001054:	4bcf      	ldr	r3, [pc, #828]	; (8001394 <__aeabi_ddiv+0x37c>)
 8001056:	00ed      	lsls	r5, r5, #3
 8001058:	469b      	mov	fp, r3
 800105a:	2300      	movs	r3, #0
 800105c:	4699      	mov	r9, r3
 800105e:	4483      	add	fp, r0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	033c      	lsls	r4, r7, #12
 8001064:	007b      	lsls	r3, r7, #1
 8001066:	4650      	mov	r0, sl
 8001068:	0b24      	lsrs	r4, r4, #12
 800106a:	0d5b      	lsrs	r3, r3, #21
 800106c:	0fff      	lsrs	r7, r7, #31
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_ddiv+0x5c>
 8001072:	e11f      	b.n	80012b4 <__aeabi_ddiv+0x29c>
 8001074:	4ac6      	ldr	r2, [pc, #792]	; (8001390 <__aeabi_ddiv+0x378>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d100      	bne.n	800107c <__aeabi_ddiv+0x64>
 800107a:	e162      	b.n	8001342 <__aeabi_ddiv+0x32a>
 800107c:	49c5      	ldr	r1, [pc, #788]	; (8001394 <__aeabi_ddiv+0x37c>)
 800107e:	0f42      	lsrs	r2, r0, #29
 8001080:	468c      	mov	ip, r1
 8001082:	00e4      	lsls	r4, r4, #3
 8001084:	4659      	mov	r1, fp
 8001086:	4314      	orrs	r4, r2
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	4463      	add	r3, ip
 800108c:	0412      	lsls	r2, r2, #16
 800108e:	1acb      	subs	r3, r1, r3
 8001090:	4314      	orrs	r4, r2
 8001092:	469b      	mov	fp, r3
 8001094:	00c2      	lsls	r2, r0, #3
 8001096:	2000      	movs	r0, #0
 8001098:	0033      	movs	r3, r6
 800109a:	407b      	eors	r3, r7
 800109c:	469a      	mov	sl, r3
 800109e:	464b      	mov	r3, r9
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d827      	bhi.n	80010f4 <__aeabi_ddiv+0xdc>
 80010a4:	49bc      	ldr	r1, [pc, #752]	; (8001398 <__aeabi_ddiv+0x380>)
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	58cb      	ldr	r3, [r1, r3]
 80010aa:	469f      	mov	pc, r3
 80010ac:	46b2      	mov	sl, r6
 80010ae:	9b00      	ldr	r3, [sp, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d016      	beq.n	80010e2 <__aeabi_ddiv+0xca>
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0xa2>
 80010b8:	e28e      	b.n	80015d8 <__aeabi_ddiv+0x5c0>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d000      	beq.n	80010c0 <__aeabi_ddiv+0xa8>
 80010be:	e0d9      	b.n	8001274 <__aeabi_ddiv+0x25c>
 80010c0:	2300      	movs	r3, #0
 80010c2:	2400      	movs	r4, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	4652      	mov	r2, sl
 80010c8:	051b      	lsls	r3, r3, #20
 80010ca:	4323      	orrs	r3, r4
 80010cc:	07d2      	lsls	r2, r2, #31
 80010ce:	4313      	orrs	r3, r2
 80010d0:	0028      	movs	r0, r5
 80010d2:	0019      	movs	r1, r3
 80010d4:	b005      	add	sp, #20
 80010d6:	bcf0      	pop	{r4, r5, r6, r7}
 80010d8:	46bb      	mov	fp, r7
 80010da:	46b2      	mov	sl, r6
 80010dc:	46a9      	mov	r9, r5
 80010de:	46a0      	mov	r8, r4
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e2:	2400      	movs	r4, #0
 80010e4:	2500      	movs	r5, #0
 80010e6:	4baa      	ldr	r3, [pc, #680]	; (8001390 <__aeabi_ddiv+0x378>)
 80010e8:	e7ed      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80010ea:	46ba      	mov	sl, r7
 80010ec:	46a0      	mov	r8, r4
 80010ee:	0015      	movs	r5, r2
 80010f0:	9000      	str	r0, [sp, #0]
 80010f2:	e7dc      	b.n	80010ae <__aeabi_ddiv+0x96>
 80010f4:	4544      	cmp	r4, r8
 80010f6:	d200      	bcs.n	80010fa <__aeabi_ddiv+0xe2>
 80010f8:	e1c7      	b.n	800148a <__aeabi_ddiv+0x472>
 80010fa:	d100      	bne.n	80010fe <__aeabi_ddiv+0xe6>
 80010fc:	e1c2      	b.n	8001484 <__aeabi_ddiv+0x46c>
 80010fe:	2301      	movs	r3, #1
 8001100:	425b      	negs	r3, r3
 8001102:	469c      	mov	ip, r3
 8001104:	002e      	movs	r6, r5
 8001106:	4640      	mov	r0, r8
 8001108:	2500      	movs	r5, #0
 800110a:	44e3      	add	fp, ip
 800110c:	0223      	lsls	r3, r4, #8
 800110e:	0e14      	lsrs	r4, r2, #24
 8001110:	431c      	orrs	r4, r3
 8001112:	0c1b      	lsrs	r3, r3, #16
 8001114:	4699      	mov	r9, r3
 8001116:	0423      	lsls	r3, r4, #16
 8001118:	0c1f      	lsrs	r7, r3, #16
 800111a:	0212      	lsls	r2, r2, #8
 800111c:	4649      	mov	r1, r9
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	9701      	str	r7, [sp, #4]
 8001122:	f7ff f88f 	bl	8000244 <__aeabi_uidivmod>
 8001126:	0002      	movs	r2, r0
 8001128:	437a      	muls	r2, r7
 800112a:	040b      	lsls	r3, r1, #16
 800112c:	0c31      	lsrs	r1, r6, #16
 800112e:	4680      	mov	r8, r0
 8001130:	4319      	orrs	r1, r3
 8001132:	428a      	cmp	r2, r1
 8001134:	d907      	bls.n	8001146 <__aeabi_ddiv+0x12e>
 8001136:	2301      	movs	r3, #1
 8001138:	425b      	negs	r3, r3
 800113a:	469c      	mov	ip, r3
 800113c:	1909      	adds	r1, r1, r4
 800113e:	44e0      	add	r8, ip
 8001140:	428c      	cmp	r4, r1
 8001142:	d800      	bhi.n	8001146 <__aeabi_ddiv+0x12e>
 8001144:	e207      	b.n	8001556 <__aeabi_ddiv+0x53e>
 8001146:	1a88      	subs	r0, r1, r2
 8001148:	4649      	mov	r1, r9
 800114a:	f7ff f87b 	bl	8000244 <__aeabi_uidivmod>
 800114e:	0409      	lsls	r1, r1, #16
 8001150:	468c      	mov	ip, r1
 8001152:	0431      	lsls	r1, r6, #16
 8001154:	4666      	mov	r6, ip
 8001156:	9a01      	ldr	r2, [sp, #4]
 8001158:	0c09      	lsrs	r1, r1, #16
 800115a:	4342      	muls	r2, r0
 800115c:	0003      	movs	r3, r0
 800115e:	4331      	orrs	r1, r6
 8001160:	428a      	cmp	r2, r1
 8001162:	d904      	bls.n	800116e <__aeabi_ddiv+0x156>
 8001164:	1909      	adds	r1, r1, r4
 8001166:	3b01      	subs	r3, #1
 8001168:	428c      	cmp	r4, r1
 800116a:	d800      	bhi.n	800116e <__aeabi_ddiv+0x156>
 800116c:	e1ed      	b.n	800154a <__aeabi_ddiv+0x532>
 800116e:	1a88      	subs	r0, r1, r2
 8001170:	4642      	mov	r2, r8
 8001172:	0412      	lsls	r2, r2, #16
 8001174:	431a      	orrs	r2, r3
 8001176:	4690      	mov	r8, r2
 8001178:	4641      	mov	r1, r8
 800117a:	9b00      	ldr	r3, [sp, #0]
 800117c:	040e      	lsls	r6, r1, #16
 800117e:	0c1b      	lsrs	r3, r3, #16
 8001180:	001f      	movs	r7, r3
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	9b00      	ldr	r3, [sp, #0]
 8001186:	0c36      	lsrs	r6, r6, #16
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	0c19      	lsrs	r1, r3, #16
 800118c:	000b      	movs	r3, r1
 800118e:	4373      	muls	r3, r6
 8001190:	0c12      	lsrs	r2, r2, #16
 8001192:	437e      	muls	r6, r7
 8001194:	9103      	str	r1, [sp, #12]
 8001196:	4351      	muls	r1, r2
 8001198:	437a      	muls	r2, r7
 800119a:	0c1f      	lsrs	r7, r3, #16
 800119c:	46bc      	mov	ip, r7
 800119e:	1876      	adds	r6, r6, r1
 80011a0:	4466      	add	r6, ip
 80011a2:	42b1      	cmp	r1, r6
 80011a4:	d903      	bls.n	80011ae <__aeabi_ddiv+0x196>
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	0249      	lsls	r1, r1, #9
 80011aa:	468c      	mov	ip, r1
 80011ac:	4462      	add	r2, ip
 80011ae:	0c31      	lsrs	r1, r6, #16
 80011b0:	188a      	adds	r2, r1, r2
 80011b2:	0431      	lsls	r1, r6, #16
 80011b4:	041e      	lsls	r6, r3, #16
 80011b6:	0c36      	lsrs	r6, r6, #16
 80011b8:	198e      	adds	r6, r1, r6
 80011ba:	4290      	cmp	r0, r2
 80011bc:	d302      	bcc.n	80011c4 <__aeabi_ddiv+0x1ac>
 80011be:	d112      	bne.n	80011e6 <__aeabi_ddiv+0x1ce>
 80011c0:	42b5      	cmp	r5, r6
 80011c2:	d210      	bcs.n	80011e6 <__aeabi_ddiv+0x1ce>
 80011c4:	4643      	mov	r3, r8
 80011c6:	1e59      	subs	r1, r3, #1
 80011c8:	9b00      	ldr	r3, [sp, #0]
 80011ca:	469c      	mov	ip, r3
 80011cc:	4465      	add	r5, ip
 80011ce:	001f      	movs	r7, r3
 80011d0:	429d      	cmp	r5, r3
 80011d2:	419b      	sbcs	r3, r3
 80011d4:	425b      	negs	r3, r3
 80011d6:	191b      	adds	r3, r3, r4
 80011d8:	18c0      	adds	r0, r0, r3
 80011da:	4284      	cmp	r4, r0
 80011dc:	d200      	bcs.n	80011e0 <__aeabi_ddiv+0x1c8>
 80011de:	e1a0      	b.n	8001522 <__aeabi_ddiv+0x50a>
 80011e0:	d100      	bne.n	80011e4 <__aeabi_ddiv+0x1cc>
 80011e2:	e19b      	b.n	800151c <__aeabi_ddiv+0x504>
 80011e4:	4688      	mov	r8, r1
 80011e6:	1bae      	subs	r6, r5, r6
 80011e8:	42b5      	cmp	r5, r6
 80011ea:	41ad      	sbcs	r5, r5
 80011ec:	1a80      	subs	r0, r0, r2
 80011ee:	426d      	negs	r5, r5
 80011f0:	1b40      	subs	r0, r0, r5
 80011f2:	4284      	cmp	r4, r0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x1e0>
 80011f6:	e1d5      	b.n	80015a4 <__aeabi_ddiv+0x58c>
 80011f8:	4649      	mov	r1, r9
 80011fa:	f7ff f823 	bl	8000244 <__aeabi_uidivmod>
 80011fe:	9a01      	ldr	r2, [sp, #4]
 8001200:	040b      	lsls	r3, r1, #16
 8001202:	4342      	muls	r2, r0
 8001204:	0c31      	lsrs	r1, r6, #16
 8001206:	0005      	movs	r5, r0
 8001208:	4319      	orrs	r1, r3
 800120a:	428a      	cmp	r2, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x1f8>
 800120e:	e16c      	b.n	80014ea <__aeabi_ddiv+0x4d2>
 8001210:	1a88      	subs	r0, r1, r2
 8001212:	4649      	mov	r1, r9
 8001214:	f7ff f816 	bl	8000244 <__aeabi_uidivmod>
 8001218:	9a01      	ldr	r2, [sp, #4]
 800121a:	0436      	lsls	r6, r6, #16
 800121c:	4342      	muls	r2, r0
 800121e:	0409      	lsls	r1, r1, #16
 8001220:	0c36      	lsrs	r6, r6, #16
 8001222:	0003      	movs	r3, r0
 8001224:	430e      	orrs	r6, r1
 8001226:	42b2      	cmp	r2, r6
 8001228:	d900      	bls.n	800122c <__aeabi_ddiv+0x214>
 800122a:	e153      	b.n	80014d4 <__aeabi_ddiv+0x4bc>
 800122c:	9803      	ldr	r0, [sp, #12]
 800122e:	1ab6      	subs	r6, r6, r2
 8001230:	0002      	movs	r2, r0
 8001232:	042d      	lsls	r5, r5, #16
 8001234:	431d      	orrs	r5, r3
 8001236:	9f02      	ldr	r7, [sp, #8]
 8001238:	042b      	lsls	r3, r5, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	435a      	muls	r2, r3
 800123e:	437b      	muls	r3, r7
 8001240:	469c      	mov	ip, r3
 8001242:	0c29      	lsrs	r1, r5, #16
 8001244:	4348      	muls	r0, r1
 8001246:	0c13      	lsrs	r3, r2, #16
 8001248:	4484      	add	ip, r0
 800124a:	4463      	add	r3, ip
 800124c:	4379      	muls	r1, r7
 800124e:	4298      	cmp	r0, r3
 8001250:	d903      	bls.n	800125a <__aeabi_ddiv+0x242>
 8001252:	2080      	movs	r0, #128	; 0x80
 8001254:	0240      	lsls	r0, r0, #9
 8001256:	4684      	mov	ip, r0
 8001258:	4461      	add	r1, ip
 800125a:	0c18      	lsrs	r0, r3, #16
 800125c:	0412      	lsls	r2, r2, #16
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	0c12      	lsrs	r2, r2, #16
 8001262:	1841      	adds	r1, r0, r1
 8001264:	189b      	adds	r3, r3, r2
 8001266:	428e      	cmp	r6, r1
 8001268:	d200      	bcs.n	800126c <__aeabi_ddiv+0x254>
 800126a:	e0ff      	b.n	800146c <__aeabi_ddiv+0x454>
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x258>
 800126e:	e0fa      	b.n	8001466 <__aeabi_ddiv+0x44e>
 8001270:	2301      	movs	r3, #1
 8001272:	431d      	orrs	r5, r3
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <__aeabi_ddiv+0x384>)
 8001276:	445a      	add	r2, fp
 8001278:	2a00      	cmp	r2, #0
 800127a:	dc00      	bgt.n	800127e <__aeabi_ddiv+0x266>
 800127c:	e0aa      	b.n	80013d4 <__aeabi_ddiv+0x3bc>
 800127e:	076b      	lsls	r3, r5, #29
 8001280:	d000      	beq.n	8001284 <__aeabi_ddiv+0x26c>
 8001282:	e13d      	b.n	8001500 <__aeabi_ddiv+0x4e8>
 8001284:	08ed      	lsrs	r5, r5, #3
 8001286:	4643      	mov	r3, r8
 8001288:	01db      	lsls	r3, r3, #7
 800128a:	d506      	bpl.n	800129a <__aeabi_ddiv+0x282>
 800128c:	4642      	mov	r2, r8
 800128e:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <__aeabi_ddiv+0x388>)
 8001290:	401a      	ands	r2, r3
 8001292:	4690      	mov	r8, r2
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	00d2      	lsls	r2, r2, #3
 8001298:	445a      	add	r2, fp
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <__aeabi_ddiv+0x38c>)
 800129c:	429a      	cmp	r2, r3
 800129e:	dd00      	ble.n	80012a2 <__aeabi_ddiv+0x28a>
 80012a0:	e71f      	b.n	80010e2 <__aeabi_ddiv+0xca>
 80012a2:	4643      	mov	r3, r8
 80012a4:	075b      	lsls	r3, r3, #29
 80012a6:	431d      	orrs	r5, r3
 80012a8:	4643      	mov	r3, r8
 80012aa:	0552      	lsls	r2, r2, #21
 80012ac:	025c      	lsls	r4, r3, #9
 80012ae:	0b24      	lsrs	r4, r4, #12
 80012b0:	0d53      	lsrs	r3, r2, #21
 80012b2:	e708      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80012b4:	4652      	mov	r2, sl
 80012b6:	4322      	orrs	r2, r4
 80012b8:	d100      	bne.n	80012bc <__aeabi_ddiv+0x2a4>
 80012ba:	e07b      	b.n	80013b4 <__aeabi_ddiv+0x39c>
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x2aa>
 80012c0:	e0fa      	b.n	80014b8 <__aeabi_ddiv+0x4a0>
 80012c2:	0020      	movs	r0, r4
 80012c4:	f001 f99a 	bl	80025fc <__clzsi2>
 80012c8:	0002      	movs	r2, r0
 80012ca:	3a0b      	subs	r2, #11
 80012cc:	231d      	movs	r3, #29
 80012ce:	0001      	movs	r1, r0
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	4652      	mov	r2, sl
 80012d4:	3908      	subs	r1, #8
 80012d6:	40da      	lsrs	r2, r3
 80012d8:	408c      	lsls	r4, r1
 80012da:	4314      	orrs	r4, r2
 80012dc:	4652      	mov	r2, sl
 80012de:	408a      	lsls	r2, r1
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <__aeabi_ddiv+0x390>)
 80012e2:	4458      	add	r0, fp
 80012e4:	469b      	mov	fp, r3
 80012e6:	4483      	add	fp, r0
 80012e8:	2000      	movs	r0, #0
 80012ea:	e6d5      	b.n	8001098 <__aeabi_ddiv+0x80>
 80012ec:	464b      	mov	r3, r9
 80012ee:	4323      	orrs	r3, r4
 80012f0:	4698      	mov	r8, r3
 80012f2:	d044      	beq.n	800137e <__aeabi_ddiv+0x366>
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	d100      	bne.n	80012fa <__aeabi_ddiv+0x2e2>
 80012f8:	e0ce      	b.n	8001498 <__aeabi_ddiv+0x480>
 80012fa:	0020      	movs	r0, r4
 80012fc:	f001 f97e 	bl	80025fc <__clzsi2>
 8001300:	0001      	movs	r1, r0
 8001302:	0002      	movs	r2, r0
 8001304:	390b      	subs	r1, #11
 8001306:	231d      	movs	r3, #29
 8001308:	1a5b      	subs	r3, r3, r1
 800130a:	4649      	mov	r1, r9
 800130c:	0010      	movs	r0, r2
 800130e:	40d9      	lsrs	r1, r3
 8001310:	3808      	subs	r0, #8
 8001312:	4084      	lsls	r4, r0
 8001314:	000b      	movs	r3, r1
 8001316:	464d      	mov	r5, r9
 8001318:	4323      	orrs	r3, r4
 800131a:	4698      	mov	r8, r3
 800131c:	4085      	lsls	r5, r0
 800131e:	4823      	ldr	r0, [pc, #140]	; (80013ac <__aeabi_ddiv+0x394>)
 8001320:	1a83      	subs	r3, r0, r2
 8001322:	469b      	mov	fp, r3
 8001324:	2300      	movs	r3, #0
 8001326:	4699      	mov	r9, r3
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	e69a      	b.n	8001062 <__aeabi_ddiv+0x4a>
 800132c:	464b      	mov	r3, r9
 800132e:	4323      	orrs	r3, r4
 8001330:	4698      	mov	r8, r3
 8001332:	d11d      	bne.n	8001370 <__aeabi_ddiv+0x358>
 8001334:	2308      	movs	r3, #8
 8001336:	4699      	mov	r9, r3
 8001338:	3b06      	subs	r3, #6
 800133a:	2500      	movs	r5, #0
 800133c:	4683      	mov	fp, r0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	e68f      	b.n	8001062 <__aeabi_ddiv+0x4a>
 8001342:	4652      	mov	r2, sl
 8001344:	4322      	orrs	r2, r4
 8001346:	d109      	bne.n	800135c <__aeabi_ddiv+0x344>
 8001348:	2302      	movs	r3, #2
 800134a:	4649      	mov	r1, r9
 800134c:	4319      	orrs	r1, r3
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <__aeabi_ddiv+0x398>)
 8001350:	4689      	mov	r9, r1
 8001352:	469c      	mov	ip, r3
 8001354:	2400      	movs	r4, #0
 8001356:	2002      	movs	r0, #2
 8001358:	44e3      	add	fp, ip
 800135a:	e69d      	b.n	8001098 <__aeabi_ddiv+0x80>
 800135c:	2303      	movs	r3, #3
 800135e:	464a      	mov	r2, r9
 8001360:	431a      	orrs	r2, r3
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <__aeabi_ddiv+0x398>)
 8001364:	4691      	mov	r9, r2
 8001366:	469c      	mov	ip, r3
 8001368:	4652      	mov	r2, sl
 800136a:	2003      	movs	r0, #3
 800136c:	44e3      	add	fp, ip
 800136e:	e693      	b.n	8001098 <__aeabi_ddiv+0x80>
 8001370:	230c      	movs	r3, #12
 8001372:	4699      	mov	r9, r3
 8001374:	3b09      	subs	r3, #9
 8001376:	46a0      	mov	r8, r4
 8001378:	4683      	mov	fp, r0
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	e671      	b.n	8001062 <__aeabi_ddiv+0x4a>
 800137e:	2304      	movs	r3, #4
 8001380:	4699      	mov	r9, r3
 8001382:	2300      	movs	r3, #0
 8001384:	469b      	mov	fp, r3
 8001386:	3301      	adds	r3, #1
 8001388:	2500      	movs	r5, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	e669      	b.n	8001062 <__aeabi_ddiv+0x4a>
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	000007ff 	.word	0x000007ff
 8001394:	fffffc01 	.word	0xfffffc01
 8001398:	08009654 	.word	0x08009654
 800139c:	000003ff 	.word	0x000003ff
 80013a0:	feffffff 	.word	0xfeffffff
 80013a4:	000007fe 	.word	0x000007fe
 80013a8:	000003f3 	.word	0x000003f3
 80013ac:	fffffc0d 	.word	0xfffffc0d
 80013b0:	fffff801 	.word	0xfffff801
 80013b4:	4649      	mov	r1, r9
 80013b6:	2301      	movs	r3, #1
 80013b8:	4319      	orrs	r1, r3
 80013ba:	4689      	mov	r9, r1
 80013bc:	2400      	movs	r4, #0
 80013be:	2001      	movs	r0, #1
 80013c0:	e66a      	b.n	8001098 <__aeabi_ddiv+0x80>
 80013c2:	2300      	movs	r3, #0
 80013c4:	2480      	movs	r4, #128	; 0x80
 80013c6:	469a      	mov	sl, r3
 80013c8:	2500      	movs	r5, #0
 80013ca:	4b8a      	ldr	r3, [pc, #552]	; (80015f4 <__aeabi_ddiv+0x5dc>)
 80013cc:	0324      	lsls	r4, r4, #12
 80013ce:	e67a      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80013d0:	2501      	movs	r5, #1
 80013d2:	426d      	negs	r5, r5
 80013d4:	2301      	movs	r3, #1
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	2b38      	cmp	r3, #56	; 0x38
 80013da:	dd00      	ble.n	80013de <__aeabi_ddiv+0x3c6>
 80013dc:	e670      	b.n	80010c0 <__aeabi_ddiv+0xa8>
 80013de:	2b1f      	cmp	r3, #31
 80013e0:	dc00      	bgt.n	80013e4 <__aeabi_ddiv+0x3cc>
 80013e2:	e0bf      	b.n	8001564 <__aeabi_ddiv+0x54c>
 80013e4:	211f      	movs	r1, #31
 80013e6:	4249      	negs	r1, r1
 80013e8:	1a8a      	subs	r2, r1, r2
 80013ea:	4641      	mov	r1, r8
 80013ec:	40d1      	lsrs	r1, r2
 80013ee:	000a      	movs	r2, r1
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d004      	beq.n	80013fe <__aeabi_ddiv+0x3e6>
 80013f4:	4641      	mov	r1, r8
 80013f6:	4b80      	ldr	r3, [pc, #512]	; (80015f8 <__aeabi_ddiv+0x5e0>)
 80013f8:	445b      	add	r3, fp
 80013fa:	4099      	lsls	r1, r3
 80013fc:	430d      	orrs	r5, r1
 80013fe:	1e6b      	subs	r3, r5, #1
 8001400:	419d      	sbcs	r5, r3
 8001402:	2307      	movs	r3, #7
 8001404:	432a      	orrs	r2, r5
 8001406:	001d      	movs	r5, r3
 8001408:	2400      	movs	r4, #0
 800140a:	4015      	ands	r5, r2
 800140c:	4213      	tst	r3, r2
 800140e:	d100      	bne.n	8001412 <__aeabi_ddiv+0x3fa>
 8001410:	e0d4      	b.n	80015bc <__aeabi_ddiv+0x5a4>
 8001412:	210f      	movs	r1, #15
 8001414:	2300      	movs	r3, #0
 8001416:	4011      	ands	r1, r2
 8001418:	2904      	cmp	r1, #4
 800141a:	d100      	bne.n	800141e <__aeabi_ddiv+0x406>
 800141c:	e0cb      	b.n	80015b6 <__aeabi_ddiv+0x59e>
 800141e:	1d11      	adds	r1, r2, #4
 8001420:	4291      	cmp	r1, r2
 8001422:	4192      	sbcs	r2, r2
 8001424:	4252      	negs	r2, r2
 8001426:	189b      	adds	r3, r3, r2
 8001428:	000a      	movs	r2, r1
 800142a:	0219      	lsls	r1, r3, #8
 800142c:	d400      	bmi.n	8001430 <__aeabi_ddiv+0x418>
 800142e:	e0c2      	b.n	80015b6 <__aeabi_ddiv+0x59e>
 8001430:	2301      	movs	r3, #1
 8001432:	2400      	movs	r4, #0
 8001434:	2500      	movs	r5, #0
 8001436:	e646      	b.n	80010c6 <__aeabi_ddiv+0xae>
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	4641      	mov	r1, r8
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	4219      	tst	r1, r3
 8001440:	d008      	beq.n	8001454 <__aeabi_ddiv+0x43c>
 8001442:	421c      	tst	r4, r3
 8001444:	d106      	bne.n	8001454 <__aeabi_ddiv+0x43c>
 8001446:	431c      	orrs	r4, r3
 8001448:	0324      	lsls	r4, r4, #12
 800144a:	46ba      	mov	sl, r7
 800144c:	0015      	movs	r5, r2
 800144e:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <__aeabi_ddiv+0x5dc>)
 8001450:	0b24      	lsrs	r4, r4, #12
 8001452:	e638      	b.n	80010c6 <__aeabi_ddiv+0xae>
 8001454:	2480      	movs	r4, #128	; 0x80
 8001456:	4643      	mov	r3, r8
 8001458:	0324      	lsls	r4, r4, #12
 800145a:	431c      	orrs	r4, r3
 800145c:	0324      	lsls	r4, r4, #12
 800145e:	46b2      	mov	sl, r6
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <__aeabi_ddiv+0x5dc>)
 8001462:	0b24      	lsrs	r4, r4, #12
 8001464:	e62f      	b.n	80010c6 <__aeabi_ddiv+0xae>
 8001466:	2b00      	cmp	r3, #0
 8001468:	d100      	bne.n	800146c <__aeabi_ddiv+0x454>
 800146a:	e703      	b.n	8001274 <__aeabi_ddiv+0x25c>
 800146c:	19a6      	adds	r6, r4, r6
 800146e:	1e68      	subs	r0, r5, #1
 8001470:	42a6      	cmp	r6, r4
 8001472:	d200      	bcs.n	8001476 <__aeabi_ddiv+0x45e>
 8001474:	e08d      	b.n	8001592 <__aeabi_ddiv+0x57a>
 8001476:	428e      	cmp	r6, r1
 8001478:	d200      	bcs.n	800147c <__aeabi_ddiv+0x464>
 800147a:	e0a3      	b.n	80015c4 <__aeabi_ddiv+0x5ac>
 800147c:	d100      	bne.n	8001480 <__aeabi_ddiv+0x468>
 800147e:	e0b3      	b.n	80015e8 <__aeabi_ddiv+0x5d0>
 8001480:	0005      	movs	r5, r0
 8001482:	e6f5      	b.n	8001270 <__aeabi_ddiv+0x258>
 8001484:	42aa      	cmp	r2, r5
 8001486:	d900      	bls.n	800148a <__aeabi_ddiv+0x472>
 8001488:	e639      	b.n	80010fe <__aeabi_ddiv+0xe6>
 800148a:	4643      	mov	r3, r8
 800148c:	07de      	lsls	r6, r3, #31
 800148e:	0858      	lsrs	r0, r3, #1
 8001490:	086b      	lsrs	r3, r5, #1
 8001492:	431e      	orrs	r6, r3
 8001494:	07ed      	lsls	r5, r5, #31
 8001496:	e639      	b.n	800110c <__aeabi_ddiv+0xf4>
 8001498:	4648      	mov	r0, r9
 800149a:	f001 f8af 	bl	80025fc <__clzsi2>
 800149e:	0001      	movs	r1, r0
 80014a0:	0002      	movs	r2, r0
 80014a2:	3115      	adds	r1, #21
 80014a4:	3220      	adds	r2, #32
 80014a6:	291c      	cmp	r1, #28
 80014a8:	dc00      	bgt.n	80014ac <__aeabi_ddiv+0x494>
 80014aa:	e72c      	b.n	8001306 <__aeabi_ddiv+0x2ee>
 80014ac:	464b      	mov	r3, r9
 80014ae:	3808      	subs	r0, #8
 80014b0:	4083      	lsls	r3, r0
 80014b2:	2500      	movs	r5, #0
 80014b4:	4698      	mov	r8, r3
 80014b6:	e732      	b.n	800131e <__aeabi_ddiv+0x306>
 80014b8:	f001 f8a0 	bl	80025fc <__clzsi2>
 80014bc:	0003      	movs	r3, r0
 80014be:	001a      	movs	r2, r3
 80014c0:	3215      	adds	r2, #21
 80014c2:	3020      	adds	r0, #32
 80014c4:	2a1c      	cmp	r2, #28
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_ddiv+0x4b2>
 80014c8:	e700      	b.n	80012cc <__aeabi_ddiv+0x2b4>
 80014ca:	4654      	mov	r4, sl
 80014cc:	3b08      	subs	r3, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	409c      	lsls	r4, r3
 80014d2:	e705      	b.n	80012e0 <__aeabi_ddiv+0x2c8>
 80014d4:	1936      	adds	r6, r6, r4
 80014d6:	3b01      	subs	r3, #1
 80014d8:	42b4      	cmp	r4, r6
 80014da:	d900      	bls.n	80014de <__aeabi_ddiv+0x4c6>
 80014dc:	e6a6      	b.n	800122c <__aeabi_ddiv+0x214>
 80014de:	42b2      	cmp	r2, r6
 80014e0:	d800      	bhi.n	80014e4 <__aeabi_ddiv+0x4cc>
 80014e2:	e6a3      	b.n	800122c <__aeabi_ddiv+0x214>
 80014e4:	1e83      	subs	r3, r0, #2
 80014e6:	1936      	adds	r6, r6, r4
 80014e8:	e6a0      	b.n	800122c <__aeabi_ddiv+0x214>
 80014ea:	1909      	adds	r1, r1, r4
 80014ec:	3d01      	subs	r5, #1
 80014ee:	428c      	cmp	r4, r1
 80014f0:	d900      	bls.n	80014f4 <__aeabi_ddiv+0x4dc>
 80014f2:	e68d      	b.n	8001210 <__aeabi_ddiv+0x1f8>
 80014f4:	428a      	cmp	r2, r1
 80014f6:	d800      	bhi.n	80014fa <__aeabi_ddiv+0x4e2>
 80014f8:	e68a      	b.n	8001210 <__aeabi_ddiv+0x1f8>
 80014fa:	1e85      	subs	r5, r0, #2
 80014fc:	1909      	adds	r1, r1, r4
 80014fe:	e687      	b.n	8001210 <__aeabi_ddiv+0x1f8>
 8001500:	230f      	movs	r3, #15
 8001502:	402b      	ands	r3, r5
 8001504:	2b04      	cmp	r3, #4
 8001506:	d100      	bne.n	800150a <__aeabi_ddiv+0x4f2>
 8001508:	e6bc      	b.n	8001284 <__aeabi_ddiv+0x26c>
 800150a:	2305      	movs	r3, #5
 800150c:	425b      	negs	r3, r3
 800150e:	42ab      	cmp	r3, r5
 8001510:	419b      	sbcs	r3, r3
 8001512:	3504      	adds	r5, #4
 8001514:	425b      	negs	r3, r3
 8001516:	08ed      	lsrs	r5, r5, #3
 8001518:	4498      	add	r8, r3
 800151a:	e6b4      	b.n	8001286 <__aeabi_ddiv+0x26e>
 800151c:	42af      	cmp	r7, r5
 800151e:	d900      	bls.n	8001522 <__aeabi_ddiv+0x50a>
 8001520:	e660      	b.n	80011e4 <__aeabi_ddiv+0x1cc>
 8001522:	4282      	cmp	r2, r0
 8001524:	d804      	bhi.n	8001530 <__aeabi_ddiv+0x518>
 8001526:	d000      	beq.n	800152a <__aeabi_ddiv+0x512>
 8001528:	e65c      	b.n	80011e4 <__aeabi_ddiv+0x1cc>
 800152a:	42ae      	cmp	r6, r5
 800152c:	d800      	bhi.n	8001530 <__aeabi_ddiv+0x518>
 800152e:	e659      	b.n	80011e4 <__aeabi_ddiv+0x1cc>
 8001530:	2302      	movs	r3, #2
 8001532:	425b      	negs	r3, r3
 8001534:	469c      	mov	ip, r3
 8001536:	9b00      	ldr	r3, [sp, #0]
 8001538:	44e0      	add	r8, ip
 800153a:	469c      	mov	ip, r3
 800153c:	4465      	add	r5, ip
 800153e:	429d      	cmp	r5, r3
 8001540:	419b      	sbcs	r3, r3
 8001542:	425b      	negs	r3, r3
 8001544:	191b      	adds	r3, r3, r4
 8001546:	18c0      	adds	r0, r0, r3
 8001548:	e64d      	b.n	80011e6 <__aeabi_ddiv+0x1ce>
 800154a:	428a      	cmp	r2, r1
 800154c:	d800      	bhi.n	8001550 <__aeabi_ddiv+0x538>
 800154e:	e60e      	b.n	800116e <__aeabi_ddiv+0x156>
 8001550:	1e83      	subs	r3, r0, #2
 8001552:	1909      	adds	r1, r1, r4
 8001554:	e60b      	b.n	800116e <__aeabi_ddiv+0x156>
 8001556:	428a      	cmp	r2, r1
 8001558:	d800      	bhi.n	800155c <__aeabi_ddiv+0x544>
 800155a:	e5f4      	b.n	8001146 <__aeabi_ddiv+0x12e>
 800155c:	1e83      	subs	r3, r0, #2
 800155e:	4698      	mov	r8, r3
 8001560:	1909      	adds	r1, r1, r4
 8001562:	e5f0      	b.n	8001146 <__aeabi_ddiv+0x12e>
 8001564:	4925      	ldr	r1, [pc, #148]	; (80015fc <__aeabi_ddiv+0x5e4>)
 8001566:	0028      	movs	r0, r5
 8001568:	4459      	add	r1, fp
 800156a:	408d      	lsls	r5, r1
 800156c:	4642      	mov	r2, r8
 800156e:	408a      	lsls	r2, r1
 8001570:	1e69      	subs	r1, r5, #1
 8001572:	418d      	sbcs	r5, r1
 8001574:	4641      	mov	r1, r8
 8001576:	40d8      	lsrs	r0, r3
 8001578:	40d9      	lsrs	r1, r3
 800157a:	4302      	orrs	r2, r0
 800157c:	432a      	orrs	r2, r5
 800157e:	000b      	movs	r3, r1
 8001580:	0751      	lsls	r1, r2, #29
 8001582:	d100      	bne.n	8001586 <__aeabi_ddiv+0x56e>
 8001584:	e751      	b.n	800142a <__aeabi_ddiv+0x412>
 8001586:	210f      	movs	r1, #15
 8001588:	4011      	ands	r1, r2
 800158a:	2904      	cmp	r1, #4
 800158c:	d000      	beq.n	8001590 <__aeabi_ddiv+0x578>
 800158e:	e746      	b.n	800141e <__aeabi_ddiv+0x406>
 8001590:	e74b      	b.n	800142a <__aeabi_ddiv+0x412>
 8001592:	0005      	movs	r5, r0
 8001594:	428e      	cmp	r6, r1
 8001596:	d000      	beq.n	800159a <__aeabi_ddiv+0x582>
 8001598:	e66a      	b.n	8001270 <__aeabi_ddiv+0x258>
 800159a:	9a00      	ldr	r2, [sp, #0]
 800159c:	4293      	cmp	r3, r2
 800159e:	d000      	beq.n	80015a2 <__aeabi_ddiv+0x58a>
 80015a0:	e666      	b.n	8001270 <__aeabi_ddiv+0x258>
 80015a2:	e667      	b.n	8001274 <__aeabi_ddiv+0x25c>
 80015a4:	4a16      	ldr	r2, [pc, #88]	; (8001600 <__aeabi_ddiv+0x5e8>)
 80015a6:	445a      	add	r2, fp
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	dc00      	bgt.n	80015ae <__aeabi_ddiv+0x596>
 80015ac:	e710      	b.n	80013d0 <__aeabi_ddiv+0x3b8>
 80015ae:	2301      	movs	r3, #1
 80015b0:	2500      	movs	r5, #0
 80015b2:	4498      	add	r8, r3
 80015b4:	e667      	b.n	8001286 <__aeabi_ddiv+0x26e>
 80015b6:	075d      	lsls	r5, r3, #29
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	0b1c      	lsrs	r4, r3, #12
 80015bc:	08d2      	lsrs	r2, r2, #3
 80015be:	2300      	movs	r3, #0
 80015c0:	4315      	orrs	r5, r2
 80015c2:	e580      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80015c4:	9800      	ldr	r0, [sp, #0]
 80015c6:	3d02      	subs	r5, #2
 80015c8:	0042      	lsls	r2, r0, #1
 80015ca:	4282      	cmp	r2, r0
 80015cc:	41bf      	sbcs	r7, r7
 80015ce:	427f      	negs	r7, r7
 80015d0:	193c      	adds	r4, r7, r4
 80015d2:	1936      	adds	r6, r6, r4
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	e7dd      	b.n	8001594 <__aeabi_ddiv+0x57c>
 80015d8:	2480      	movs	r4, #128	; 0x80
 80015da:	4643      	mov	r3, r8
 80015dc:	0324      	lsls	r4, r4, #12
 80015de:	431c      	orrs	r4, r3
 80015e0:	0324      	lsls	r4, r4, #12
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__aeabi_ddiv+0x5dc>)
 80015e4:	0b24      	lsrs	r4, r4, #12
 80015e6:	e56e      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80015e8:	9a00      	ldr	r2, [sp, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3ea      	bcc.n	80015c4 <__aeabi_ddiv+0x5ac>
 80015ee:	0005      	movs	r5, r0
 80015f0:	e7d3      	b.n	800159a <__aeabi_ddiv+0x582>
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	000007ff 	.word	0x000007ff
 80015f8:	0000043e 	.word	0x0000043e
 80015fc:	0000041e 	.word	0x0000041e
 8001600:	000003ff 	.word	0x000003ff

08001604 <__eqdf2>:
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	464e      	mov	r6, r9
 8001608:	4645      	mov	r5, r8
 800160a:	46de      	mov	lr, fp
 800160c:	4657      	mov	r7, sl
 800160e:	4690      	mov	r8, r2
 8001610:	b5e0      	push	{r5, r6, r7, lr}
 8001612:	0017      	movs	r7, r2
 8001614:	031a      	lsls	r2, r3, #12
 8001616:	0b12      	lsrs	r2, r2, #12
 8001618:	0005      	movs	r5, r0
 800161a:	4684      	mov	ip, r0
 800161c:	4819      	ldr	r0, [pc, #100]	; (8001684 <__eqdf2+0x80>)
 800161e:	030e      	lsls	r6, r1, #12
 8001620:	004c      	lsls	r4, r1, #1
 8001622:	4691      	mov	r9, r2
 8001624:	005a      	lsls	r2, r3, #1
 8001626:	0fdb      	lsrs	r3, r3, #31
 8001628:	469b      	mov	fp, r3
 800162a:	0b36      	lsrs	r6, r6, #12
 800162c:	0d64      	lsrs	r4, r4, #21
 800162e:	0fc9      	lsrs	r1, r1, #31
 8001630:	0d52      	lsrs	r2, r2, #21
 8001632:	4284      	cmp	r4, r0
 8001634:	d019      	beq.n	800166a <__eqdf2+0x66>
 8001636:	4282      	cmp	r2, r0
 8001638:	d010      	beq.n	800165c <__eqdf2+0x58>
 800163a:	2001      	movs	r0, #1
 800163c:	4294      	cmp	r4, r2
 800163e:	d10e      	bne.n	800165e <__eqdf2+0x5a>
 8001640:	454e      	cmp	r6, r9
 8001642:	d10c      	bne.n	800165e <__eqdf2+0x5a>
 8001644:	2001      	movs	r0, #1
 8001646:	45c4      	cmp	ip, r8
 8001648:	d109      	bne.n	800165e <__eqdf2+0x5a>
 800164a:	4559      	cmp	r1, fp
 800164c:	d017      	beq.n	800167e <__eqdf2+0x7a>
 800164e:	2c00      	cmp	r4, #0
 8001650:	d105      	bne.n	800165e <__eqdf2+0x5a>
 8001652:	0030      	movs	r0, r6
 8001654:	4328      	orrs	r0, r5
 8001656:	1e43      	subs	r3, r0, #1
 8001658:	4198      	sbcs	r0, r3
 800165a:	e000      	b.n	800165e <__eqdf2+0x5a>
 800165c:	2001      	movs	r0, #1
 800165e:	bcf0      	pop	{r4, r5, r6, r7}
 8001660:	46bb      	mov	fp, r7
 8001662:	46b2      	mov	sl, r6
 8001664:	46a9      	mov	r9, r5
 8001666:	46a0      	mov	r8, r4
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166a:	0033      	movs	r3, r6
 800166c:	2001      	movs	r0, #1
 800166e:	432b      	orrs	r3, r5
 8001670:	d1f5      	bne.n	800165e <__eqdf2+0x5a>
 8001672:	42a2      	cmp	r2, r4
 8001674:	d1f3      	bne.n	800165e <__eqdf2+0x5a>
 8001676:	464b      	mov	r3, r9
 8001678:	433b      	orrs	r3, r7
 800167a:	d1f0      	bne.n	800165e <__eqdf2+0x5a>
 800167c:	e7e2      	b.n	8001644 <__eqdf2+0x40>
 800167e:	2000      	movs	r0, #0
 8001680:	e7ed      	b.n	800165e <__eqdf2+0x5a>
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	000007ff 	.word	0x000007ff

08001688 <__gedf2>:
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	4647      	mov	r7, r8
 800168c:	46ce      	mov	lr, r9
 800168e:	0004      	movs	r4, r0
 8001690:	0018      	movs	r0, r3
 8001692:	0016      	movs	r6, r2
 8001694:	031b      	lsls	r3, r3, #12
 8001696:	0b1b      	lsrs	r3, r3, #12
 8001698:	4d2d      	ldr	r5, [pc, #180]	; (8001750 <__gedf2+0xc8>)
 800169a:	004a      	lsls	r2, r1, #1
 800169c:	4699      	mov	r9, r3
 800169e:	b580      	push	{r7, lr}
 80016a0:	0043      	lsls	r3, r0, #1
 80016a2:	030f      	lsls	r7, r1, #12
 80016a4:	46a4      	mov	ip, r4
 80016a6:	46b0      	mov	r8, r6
 80016a8:	0b3f      	lsrs	r7, r7, #12
 80016aa:	0d52      	lsrs	r2, r2, #21
 80016ac:	0fc9      	lsrs	r1, r1, #31
 80016ae:	0d5b      	lsrs	r3, r3, #21
 80016b0:	0fc0      	lsrs	r0, r0, #31
 80016b2:	42aa      	cmp	r2, r5
 80016b4:	d021      	beq.n	80016fa <__gedf2+0x72>
 80016b6:	42ab      	cmp	r3, r5
 80016b8:	d013      	beq.n	80016e2 <__gedf2+0x5a>
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d122      	bne.n	8001704 <__gedf2+0x7c>
 80016be:	433c      	orrs	r4, r7
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <__gedf2+0x42>
 80016c4:	464d      	mov	r5, r9
 80016c6:	432e      	orrs	r6, r5
 80016c8:	d022      	beq.n	8001710 <__gedf2+0x88>
 80016ca:	2c00      	cmp	r4, #0
 80016cc:	d010      	beq.n	80016f0 <__gedf2+0x68>
 80016ce:	4281      	cmp	r1, r0
 80016d0:	d022      	beq.n	8001718 <__gedf2+0x90>
 80016d2:	2002      	movs	r0, #2
 80016d4:	3901      	subs	r1, #1
 80016d6:	4008      	ands	r0, r1
 80016d8:	3801      	subs	r0, #1
 80016da:	bcc0      	pop	{r6, r7}
 80016dc:	46b9      	mov	r9, r7
 80016de:	46b0      	mov	r8, r6
 80016e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e2:	464d      	mov	r5, r9
 80016e4:	432e      	orrs	r6, r5
 80016e6:	d129      	bne.n	800173c <__gedf2+0xb4>
 80016e8:	2a00      	cmp	r2, #0
 80016ea:	d1f0      	bne.n	80016ce <__gedf2+0x46>
 80016ec:	433c      	orrs	r4, r7
 80016ee:	d1ee      	bne.n	80016ce <__gedf2+0x46>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d1f2      	bne.n	80016da <__gedf2+0x52>
 80016f4:	2001      	movs	r0, #1
 80016f6:	4240      	negs	r0, r0
 80016f8:	e7ef      	b.n	80016da <__gedf2+0x52>
 80016fa:	003d      	movs	r5, r7
 80016fc:	4325      	orrs	r5, r4
 80016fe:	d11d      	bne.n	800173c <__gedf2+0xb4>
 8001700:	4293      	cmp	r3, r2
 8001702:	d0ee      	beq.n	80016e2 <__gedf2+0x5a>
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e2      	bne.n	80016ce <__gedf2+0x46>
 8001708:	464c      	mov	r4, r9
 800170a:	4326      	orrs	r6, r4
 800170c:	d1df      	bne.n	80016ce <__gedf2+0x46>
 800170e:	e7e0      	b.n	80016d2 <__gedf2+0x4a>
 8001710:	2000      	movs	r0, #0
 8001712:	2c00      	cmp	r4, #0
 8001714:	d0e1      	beq.n	80016da <__gedf2+0x52>
 8001716:	e7dc      	b.n	80016d2 <__gedf2+0x4a>
 8001718:	429a      	cmp	r2, r3
 800171a:	dc0a      	bgt.n	8001732 <__gedf2+0xaa>
 800171c:	dbe8      	blt.n	80016f0 <__gedf2+0x68>
 800171e:	454f      	cmp	r7, r9
 8001720:	d8d7      	bhi.n	80016d2 <__gedf2+0x4a>
 8001722:	d00e      	beq.n	8001742 <__gedf2+0xba>
 8001724:	2000      	movs	r0, #0
 8001726:	454f      	cmp	r7, r9
 8001728:	d2d7      	bcs.n	80016da <__gedf2+0x52>
 800172a:	2900      	cmp	r1, #0
 800172c:	d0e2      	beq.n	80016f4 <__gedf2+0x6c>
 800172e:	0008      	movs	r0, r1
 8001730:	e7d3      	b.n	80016da <__gedf2+0x52>
 8001732:	4243      	negs	r3, r0
 8001734:	4158      	adcs	r0, r3
 8001736:	0040      	lsls	r0, r0, #1
 8001738:	3801      	subs	r0, #1
 800173a:	e7ce      	b.n	80016da <__gedf2+0x52>
 800173c:	2002      	movs	r0, #2
 800173e:	4240      	negs	r0, r0
 8001740:	e7cb      	b.n	80016da <__gedf2+0x52>
 8001742:	45c4      	cmp	ip, r8
 8001744:	d8c5      	bhi.n	80016d2 <__gedf2+0x4a>
 8001746:	2000      	movs	r0, #0
 8001748:	45c4      	cmp	ip, r8
 800174a:	d2c6      	bcs.n	80016da <__gedf2+0x52>
 800174c:	e7ed      	b.n	800172a <__gedf2+0xa2>
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	000007ff 	.word	0x000007ff

08001754 <__ledf2>:
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	4647      	mov	r7, r8
 8001758:	46ce      	mov	lr, r9
 800175a:	0004      	movs	r4, r0
 800175c:	0018      	movs	r0, r3
 800175e:	0016      	movs	r6, r2
 8001760:	031b      	lsls	r3, r3, #12
 8001762:	0b1b      	lsrs	r3, r3, #12
 8001764:	4d2c      	ldr	r5, [pc, #176]	; (8001818 <__ledf2+0xc4>)
 8001766:	004a      	lsls	r2, r1, #1
 8001768:	4699      	mov	r9, r3
 800176a:	b580      	push	{r7, lr}
 800176c:	0043      	lsls	r3, r0, #1
 800176e:	030f      	lsls	r7, r1, #12
 8001770:	46a4      	mov	ip, r4
 8001772:	46b0      	mov	r8, r6
 8001774:	0b3f      	lsrs	r7, r7, #12
 8001776:	0d52      	lsrs	r2, r2, #21
 8001778:	0fc9      	lsrs	r1, r1, #31
 800177a:	0d5b      	lsrs	r3, r3, #21
 800177c:	0fc0      	lsrs	r0, r0, #31
 800177e:	42aa      	cmp	r2, r5
 8001780:	d00d      	beq.n	800179e <__ledf2+0x4a>
 8001782:	42ab      	cmp	r3, r5
 8001784:	d010      	beq.n	80017a8 <__ledf2+0x54>
 8001786:	2a00      	cmp	r2, #0
 8001788:	d127      	bne.n	80017da <__ledf2+0x86>
 800178a:	433c      	orrs	r4, r7
 800178c:	2b00      	cmp	r3, #0
 800178e:	d111      	bne.n	80017b4 <__ledf2+0x60>
 8001790:	464d      	mov	r5, r9
 8001792:	432e      	orrs	r6, r5
 8001794:	d10e      	bne.n	80017b4 <__ledf2+0x60>
 8001796:	2000      	movs	r0, #0
 8001798:	2c00      	cmp	r4, #0
 800179a:	d015      	beq.n	80017c8 <__ledf2+0x74>
 800179c:	e00e      	b.n	80017bc <__ledf2+0x68>
 800179e:	003d      	movs	r5, r7
 80017a0:	4325      	orrs	r5, r4
 80017a2:	d110      	bne.n	80017c6 <__ledf2+0x72>
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d118      	bne.n	80017da <__ledf2+0x86>
 80017a8:	464d      	mov	r5, r9
 80017aa:	432e      	orrs	r6, r5
 80017ac:	d10b      	bne.n	80017c6 <__ledf2+0x72>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d102      	bne.n	80017b8 <__ledf2+0x64>
 80017b2:	433c      	orrs	r4, r7
 80017b4:	2c00      	cmp	r4, #0
 80017b6:	d00b      	beq.n	80017d0 <__ledf2+0x7c>
 80017b8:	4281      	cmp	r1, r0
 80017ba:	d014      	beq.n	80017e6 <__ledf2+0x92>
 80017bc:	2002      	movs	r0, #2
 80017be:	3901      	subs	r1, #1
 80017c0:	4008      	ands	r0, r1
 80017c2:	3801      	subs	r0, #1
 80017c4:	e000      	b.n	80017c8 <__ledf2+0x74>
 80017c6:	2002      	movs	r0, #2
 80017c8:	bcc0      	pop	{r6, r7}
 80017ca:	46b9      	mov	r9, r7
 80017cc:	46b0      	mov	r8, r6
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d1f9      	bne.n	80017c8 <__ledf2+0x74>
 80017d4:	2001      	movs	r0, #1
 80017d6:	4240      	negs	r0, r0
 80017d8:	e7f6      	b.n	80017c8 <__ledf2+0x74>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ec      	bne.n	80017b8 <__ledf2+0x64>
 80017de:	464c      	mov	r4, r9
 80017e0:	4326      	orrs	r6, r4
 80017e2:	d1e9      	bne.n	80017b8 <__ledf2+0x64>
 80017e4:	e7ea      	b.n	80017bc <__ledf2+0x68>
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dd04      	ble.n	80017f4 <__ledf2+0xa0>
 80017ea:	4243      	negs	r3, r0
 80017ec:	4158      	adcs	r0, r3
 80017ee:	0040      	lsls	r0, r0, #1
 80017f0:	3801      	subs	r0, #1
 80017f2:	e7e9      	b.n	80017c8 <__ledf2+0x74>
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbeb      	blt.n	80017d0 <__ledf2+0x7c>
 80017f8:	454f      	cmp	r7, r9
 80017fa:	d8df      	bhi.n	80017bc <__ledf2+0x68>
 80017fc:	d006      	beq.n	800180c <__ledf2+0xb8>
 80017fe:	2000      	movs	r0, #0
 8001800:	454f      	cmp	r7, r9
 8001802:	d2e1      	bcs.n	80017c8 <__ledf2+0x74>
 8001804:	2900      	cmp	r1, #0
 8001806:	d0e5      	beq.n	80017d4 <__ledf2+0x80>
 8001808:	0008      	movs	r0, r1
 800180a:	e7dd      	b.n	80017c8 <__ledf2+0x74>
 800180c:	45c4      	cmp	ip, r8
 800180e:	d8d5      	bhi.n	80017bc <__ledf2+0x68>
 8001810:	2000      	movs	r0, #0
 8001812:	45c4      	cmp	ip, r8
 8001814:	d2d8      	bcs.n	80017c8 <__ledf2+0x74>
 8001816:	e7f5      	b.n	8001804 <__ledf2+0xb0>
 8001818:	000007ff 	.word	0x000007ff

0800181c <__aeabi_dmul>:
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	4657      	mov	r7, sl
 8001820:	464e      	mov	r6, r9
 8001822:	4645      	mov	r5, r8
 8001824:	46de      	mov	lr, fp
 8001826:	b5e0      	push	{r5, r6, r7, lr}
 8001828:	4698      	mov	r8, r3
 800182a:	030c      	lsls	r4, r1, #12
 800182c:	004b      	lsls	r3, r1, #1
 800182e:	0006      	movs	r6, r0
 8001830:	4692      	mov	sl, r2
 8001832:	b087      	sub	sp, #28
 8001834:	0b24      	lsrs	r4, r4, #12
 8001836:	0d5b      	lsrs	r3, r3, #21
 8001838:	0fcf      	lsrs	r7, r1, #31
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <__aeabi_dmul+0x24>
 800183e:	e15c      	b.n	8001afa <__aeabi_dmul+0x2de>
 8001840:	4ad9      	ldr	r2, [pc, #868]	; (8001ba8 <__aeabi_dmul+0x38c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d100      	bne.n	8001848 <__aeabi_dmul+0x2c>
 8001846:	e175      	b.n	8001b34 <__aeabi_dmul+0x318>
 8001848:	0f42      	lsrs	r2, r0, #29
 800184a:	00e4      	lsls	r4, r4, #3
 800184c:	4314      	orrs	r4, r2
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	0412      	lsls	r2, r2, #16
 8001852:	4314      	orrs	r4, r2
 8001854:	4ad5      	ldr	r2, [pc, #852]	; (8001bac <__aeabi_dmul+0x390>)
 8001856:	00c5      	lsls	r5, r0, #3
 8001858:	4694      	mov	ip, r2
 800185a:	4463      	add	r3, ip
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	4699      	mov	r9, r3
 8001862:	469b      	mov	fp, r3
 8001864:	4643      	mov	r3, r8
 8001866:	4642      	mov	r2, r8
 8001868:	031e      	lsls	r6, r3, #12
 800186a:	0fd2      	lsrs	r2, r2, #31
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4650      	mov	r0, sl
 8001870:	4690      	mov	r8, r2
 8001872:	0b36      	lsrs	r6, r6, #12
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0x5e>
 8001878:	e120      	b.n	8001abc <__aeabi_dmul+0x2a0>
 800187a:	4acb      	ldr	r2, [pc, #812]	; (8001ba8 <__aeabi_dmul+0x38c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d100      	bne.n	8001882 <__aeabi_dmul+0x66>
 8001880:	e162      	b.n	8001b48 <__aeabi_dmul+0x32c>
 8001882:	49ca      	ldr	r1, [pc, #808]	; (8001bac <__aeabi_dmul+0x390>)
 8001884:	0f42      	lsrs	r2, r0, #29
 8001886:	468c      	mov	ip, r1
 8001888:	9900      	ldr	r1, [sp, #0]
 800188a:	4463      	add	r3, ip
 800188c:	00f6      	lsls	r6, r6, #3
 800188e:	468c      	mov	ip, r1
 8001890:	4316      	orrs	r6, r2
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	449c      	add	ip, r3
 8001896:	0412      	lsls	r2, r2, #16
 8001898:	4663      	mov	r3, ip
 800189a:	4316      	orrs	r6, r2
 800189c:	00c2      	lsls	r2, r0, #3
 800189e:	2000      	movs	r0, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	9900      	ldr	r1, [sp, #0]
 80018a4:	4643      	mov	r3, r8
 80018a6:	3101      	adds	r1, #1
 80018a8:	468c      	mov	ip, r1
 80018aa:	4649      	mov	r1, r9
 80018ac:	407b      	eors	r3, r7
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	290f      	cmp	r1, #15
 80018b2:	d826      	bhi.n	8001902 <__aeabi_dmul+0xe6>
 80018b4:	4bbe      	ldr	r3, [pc, #760]	; (8001bb0 <__aeabi_dmul+0x394>)
 80018b6:	0089      	lsls	r1, r1, #2
 80018b8:	5859      	ldr	r1, [r3, r1]
 80018ba:	468f      	mov	pc, r1
 80018bc:	4643      	mov	r3, r8
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	0034      	movs	r4, r6
 80018c2:	0015      	movs	r5, r2
 80018c4:	4683      	mov	fp, r0
 80018c6:	465b      	mov	r3, fp
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d016      	beq.n	80018fa <__aeabi_dmul+0xde>
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dmul+0xb6>
 80018d0:	e203      	b.n	8001cda <__aeabi_dmul+0x4be>
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d000      	beq.n	80018d8 <__aeabi_dmul+0xbc>
 80018d6:	e0cd      	b.n	8001a74 <__aeabi_dmul+0x258>
 80018d8:	2200      	movs	r2, #0
 80018da:	2400      	movs	r4, #0
 80018dc:	2500      	movs	r5, #0
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	0512      	lsls	r2, r2, #20
 80018e2:	4322      	orrs	r2, r4
 80018e4:	07db      	lsls	r3, r3, #31
 80018e6:	431a      	orrs	r2, r3
 80018e8:	0028      	movs	r0, r5
 80018ea:	0011      	movs	r1, r2
 80018ec:	b007      	add	sp, #28
 80018ee:	bcf0      	pop	{r4, r5, r6, r7}
 80018f0:	46bb      	mov	fp, r7
 80018f2:	46b2      	mov	sl, r6
 80018f4:	46a9      	mov	r9, r5
 80018f6:	46a0      	mov	r8, r4
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fa:	2400      	movs	r4, #0
 80018fc:	2500      	movs	r5, #0
 80018fe:	4aaa      	ldr	r2, [pc, #680]	; (8001ba8 <__aeabi_dmul+0x38c>)
 8001900:	e7ed      	b.n	80018de <__aeabi_dmul+0xc2>
 8001902:	0c28      	lsrs	r0, r5, #16
 8001904:	042d      	lsls	r5, r5, #16
 8001906:	0c2d      	lsrs	r5, r5, #16
 8001908:	002b      	movs	r3, r5
 800190a:	0c11      	lsrs	r1, r2, #16
 800190c:	0412      	lsls	r2, r2, #16
 800190e:	0c12      	lsrs	r2, r2, #16
 8001910:	4353      	muls	r3, r2
 8001912:	4698      	mov	r8, r3
 8001914:	0013      	movs	r3, r2
 8001916:	002f      	movs	r7, r5
 8001918:	4343      	muls	r3, r0
 800191a:	4699      	mov	r9, r3
 800191c:	434f      	muls	r7, r1
 800191e:	444f      	add	r7, r9
 8001920:	46bb      	mov	fp, r7
 8001922:	4647      	mov	r7, r8
 8001924:	000b      	movs	r3, r1
 8001926:	0c3f      	lsrs	r7, r7, #16
 8001928:	46ba      	mov	sl, r7
 800192a:	4343      	muls	r3, r0
 800192c:	44da      	add	sl, fp
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	45d1      	cmp	r9, sl
 8001932:	d904      	bls.n	800193e <__aeabi_dmul+0x122>
 8001934:	2780      	movs	r7, #128	; 0x80
 8001936:	027f      	lsls	r7, r7, #9
 8001938:	46b9      	mov	r9, r7
 800193a:	444b      	add	r3, r9
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	4653      	mov	r3, sl
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	469b      	mov	fp, r3
 8001944:	4653      	mov	r3, sl
 8001946:	041f      	lsls	r7, r3, #16
 8001948:	4643      	mov	r3, r8
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	4698      	mov	r8, r3
 8001950:	003b      	movs	r3, r7
 8001952:	4443      	add	r3, r8
 8001954:	9304      	str	r3, [sp, #16]
 8001956:	0c33      	lsrs	r3, r6, #16
 8001958:	0436      	lsls	r6, r6, #16
 800195a:	0c36      	lsrs	r6, r6, #16
 800195c:	4698      	mov	r8, r3
 800195e:	0033      	movs	r3, r6
 8001960:	4343      	muls	r3, r0
 8001962:	4699      	mov	r9, r3
 8001964:	4643      	mov	r3, r8
 8001966:	4343      	muls	r3, r0
 8001968:	002f      	movs	r7, r5
 800196a:	469a      	mov	sl, r3
 800196c:	4643      	mov	r3, r8
 800196e:	4377      	muls	r7, r6
 8001970:	435d      	muls	r5, r3
 8001972:	0c38      	lsrs	r0, r7, #16
 8001974:	444d      	add	r5, r9
 8001976:	1945      	adds	r5, r0, r5
 8001978:	45a9      	cmp	r9, r5
 800197a:	d903      	bls.n	8001984 <__aeabi_dmul+0x168>
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	4699      	mov	r9, r3
 8001982:	44ca      	add	sl, r9
 8001984:	043f      	lsls	r7, r7, #16
 8001986:	0c28      	lsrs	r0, r5, #16
 8001988:	0c3f      	lsrs	r7, r7, #16
 800198a:	042d      	lsls	r5, r5, #16
 800198c:	19ed      	adds	r5, r5, r7
 800198e:	0c27      	lsrs	r7, r4, #16
 8001990:	0424      	lsls	r4, r4, #16
 8001992:	0c24      	lsrs	r4, r4, #16
 8001994:	0003      	movs	r3, r0
 8001996:	0020      	movs	r0, r4
 8001998:	4350      	muls	r0, r2
 800199a:	437a      	muls	r2, r7
 800199c:	4691      	mov	r9, r2
 800199e:	003a      	movs	r2, r7
 80019a0:	4453      	add	r3, sl
 80019a2:	9305      	str	r3, [sp, #20]
 80019a4:	0c03      	lsrs	r3, r0, #16
 80019a6:	469a      	mov	sl, r3
 80019a8:	434a      	muls	r2, r1
 80019aa:	4361      	muls	r1, r4
 80019ac:	4449      	add	r1, r9
 80019ae:	4451      	add	r1, sl
 80019b0:	44ab      	add	fp, r5
 80019b2:	4589      	cmp	r9, r1
 80019b4:	d903      	bls.n	80019be <__aeabi_dmul+0x1a2>
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	4699      	mov	r9, r3
 80019bc:	444a      	add	r2, r9
 80019be:	0400      	lsls	r0, r0, #16
 80019c0:	0c0b      	lsrs	r3, r1, #16
 80019c2:	0c00      	lsrs	r0, r0, #16
 80019c4:	0409      	lsls	r1, r1, #16
 80019c6:	1809      	adds	r1, r1, r0
 80019c8:	0020      	movs	r0, r4
 80019ca:	4699      	mov	r9, r3
 80019cc:	4643      	mov	r3, r8
 80019ce:	4370      	muls	r0, r6
 80019d0:	435c      	muls	r4, r3
 80019d2:	437e      	muls	r6, r7
 80019d4:	435f      	muls	r7, r3
 80019d6:	0c03      	lsrs	r3, r0, #16
 80019d8:	4698      	mov	r8, r3
 80019da:	19a4      	adds	r4, r4, r6
 80019dc:	4444      	add	r4, r8
 80019de:	444a      	add	r2, r9
 80019e0:	9703      	str	r7, [sp, #12]
 80019e2:	42a6      	cmp	r6, r4
 80019e4:	d904      	bls.n	80019f0 <__aeabi_dmul+0x1d4>
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	025b      	lsls	r3, r3, #9
 80019ea:	4698      	mov	r8, r3
 80019ec:	4447      	add	r7, r8
 80019ee:	9703      	str	r7, [sp, #12]
 80019f0:	0423      	lsls	r3, r4, #16
 80019f2:	9e02      	ldr	r6, [sp, #8]
 80019f4:	469a      	mov	sl, r3
 80019f6:	9b05      	ldr	r3, [sp, #20]
 80019f8:	445e      	add	r6, fp
 80019fa:	4698      	mov	r8, r3
 80019fc:	42ae      	cmp	r6, r5
 80019fe:	41ad      	sbcs	r5, r5
 8001a00:	1876      	adds	r6, r6, r1
 8001a02:	428e      	cmp	r6, r1
 8001a04:	4189      	sbcs	r1, r1
 8001a06:	0400      	lsls	r0, r0, #16
 8001a08:	0c00      	lsrs	r0, r0, #16
 8001a0a:	4450      	add	r0, sl
 8001a0c:	4440      	add	r0, r8
 8001a0e:	426d      	negs	r5, r5
 8001a10:	1947      	adds	r7, r0, r5
 8001a12:	46b8      	mov	r8, r7
 8001a14:	4693      	mov	fp, r2
 8001a16:	4249      	negs	r1, r1
 8001a18:	4689      	mov	r9, r1
 8001a1a:	44c3      	add	fp, r8
 8001a1c:	44d9      	add	r9, fp
 8001a1e:	4298      	cmp	r0, r3
 8001a20:	4180      	sbcs	r0, r0
 8001a22:	45a8      	cmp	r8, r5
 8001a24:	41ad      	sbcs	r5, r5
 8001a26:	4593      	cmp	fp, r2
 8001a28:	4192      	sbcs	r2, r2
 8001a2a:	4589      	cmp	r9, r1
 8001a2c:	4189      	sbcs	r1, r1
 8001a2e:	426d      	negs	r5, r5
 8001a30:	4240      	negs	r0, r0
 8001a32:	4328      	orrs	r0, r5
 8001a34:	0c24      	lsrs	r4, r4, #16
 8001a36:	4252      	negs	r2, r2
 8001a38:	4249      	negs	r1, r1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	9b03      	ldr	r3, [sp, #12]
 8001a3e:	1900      	adds	r0, r0, r4
 8001a40:	1880      	adds	r0, r0, r2
 8001a42:	18c7      	adds	r7, r0, r3
 8001a44:	464b      	mov	r3, r9
 8001a46:	0ddc      	lsrs	r4, r3, #23
 8001a48:	9b04      	ldr	r3, [sp, #16]
 8001a4a:	0275      	lsls	r5, r6, #9
 8001a4c:	431d      	orrs	r5, r3
 8001a4e:	1e6a      	subs	r2, r5, #1
 8001a50:	4195      	sbcs	r5, r2
 8001a52:	464b      	mov	r3, r9
 8001a54:	0df6      	lsrs	r6, r6, #23
 8001a56:	027f      	lsls	r7, r7, #9
 8001a58:	4335      	orrs	r5, r6
 8001a5a:	025a      	lsls	r2, r3, #9
 8001a5c:	433c      	orrs	r4, r7
 8001a5e:	4315      	orrs	r5, r2
 8001a60:	01fb      	lsls	r3, r7, #7
 8001a62:	d400      	bmi.n	8001a66 <__aeabi_dmul+0x24a>
 8001a64:	e11c      	b.n	8001ca0 <__aeabi_dmul+0x484>
 8001a66:	2101      	movs	r1, #1
 8001a68:	086a      	lsrs	r2, r5, #1
 8001a6a:	400d      	ands	r5, r1
 8001a6c:	4315      	orrs	r5, r2
 8001a6e:	07e2      	lsls	r2, r4, #31
 8001a70:	4315      	orrs	r5, r2
 8001a72:	0864      	lsrs	r4, r4, #1
 8001a74:	494f      	ldr	r1, [pc, #316]	; (8001bb4 <__aeabi_dmul+0x398>)
 8001a76:	4461      	add	r1, ip
 8001a78:	2900      	cmp	r1, #0
 8001a7a:	dc00      	bgt.n	8001a7e <__aeabi_dmul+0x262>
 8001a7c:	e0b0      	b.n	8001be0 <__aeabi_dmul+0x3c4>
 8001a7e:	076b      	lsls	r3, r5, #29
 8001a80:	d009      	beq.n	8001a96 <__aeabi_dmul+0x27a>
 8001a82:	220f      	movs	r2, #15
 8001a84:	402a      	ands	r2, r5
 8001a86:	2a04      	cmp	r2, #4
 8001a88:	d005      	beq.n	8001a96 <__aeabi_dmul+0x27a>
 8001a8a:	1d2a      	adds	r2, r5, #4
 8001a8c:	42aa      	cmp	r2, r5
 8001a8e:	41ad      	sbcs	r5, r5
 8001a90:	426d      	negs	r5, r5
 8001a92:	1964      	adds	r4, r4, r5
 8001a94:	0015      	movs	r5, r2
 8001a96:	01e3      	lsls	r3, r4, #7
 8001a98:	d504      	bpl.n	8001aa4 <__aeabi_dmul+0x288>
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	4a46      	ldr	r2, [pc, #280]	; (8001bb8 <__aeabi_dmul+0x39c>)
 8001a9e:	00c9      	lsls	r1, r1, #3
 8001aa0:	4014      	ands	r4, r2
 8001aa2:	4461      	add	r1, ip
 8001aa4:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <__aeabi_dmul+0x3a0>)
 8001aa6:	4291      	cmp	r1, r2
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dmul+0x290>
 8001aaa:	e726      	b.n	80018fa <__aeabi_dmul+0xde>
 8001aac:	0762      	lsls	r2, r4, #29
 8001aae:	08ed      	lsrs	r5, r5, #3
 8001ab0:	0264      	lsls	r4, r4, #9
 8001ab2:	0549      	lsls	r1, r1, #21
 8001ab4:	4315      	orrs	r5, r2
 8001ab6:	0b24      	lsrs	r4, r4, #12
 8001ab8:	0d4a      	lsrs	r2, r1, #21
 8001aba:	e710      	b.n	80018de <__aeabi_dmul+0xc2>
 8001abc:	4652      	mov	r2, sl
 8001abe:	4332      	orrs	r2, r6
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dmul+0x2a8>
 8001ac2:	e07f      	b.n	8001bc4 <__aeabi_dmul+0x3a8>
 8001ac4:	2e00      	cmp	r6, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dmul+0x2ae>
 8001ac8:	e0dc      	b.n	8001c84 <__aeabi_dmul+0x468>
 8001aca:	0030      	movs	r0, r6
 8001acc:	f000 fd96 	bl	80025fc <__clzsi2>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	3a0b      	subs	r2, #11
 8001ad4:	231d      	movs	r3, #29
 8001ad6:	0001      	movs	r1, r0
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	4652      	mov	r2, sl
 8001adc:	3908      	subs	r1, #8
 8001ade:	40da      	lsrs	r2, r3
 8001ae0:	408e      	lsls	r6, r1
 8001ae2:	4316      	orrs	r6, r2
 8001ae4:	4652      	mov	r2, sl
 8001ae6:	408a      	lsls	r2, r1
 8001ae8:	9b00      	ldr	r3, [sp, #0]
 8001aea:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <__aeabi_dmul+0x3a4>)
 8001aec:	1a18      	subs	r0, r3, r0
 8001aee:	0003      	movs	r3, r0
 8001af0:	468c      	mov	ip, r1
 8001af2:	4463      	add	r3, ip
 8001af4:	2000      	movs	r0, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	e6d3      	b.n	80018a2 <__aeabi_dmul+0x86>
 8001afa:	0025      	movs	r5, r4
 8001afc:	4305      	orrs	r5, r0
 8001afe:	d04a      	beq.n	8001b96 <__aeabi_dmul+0x37a>
 8001b00:	2c00      	cmp	r4, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dmul+0x2ea>
 8001b04:	e0b0      	b.n	8001c68 <__aeabi_dmul+0x44c>
 8001b06:	0020      	movs	r0, r4
 8001b08:	f000 fd78 	bl	80025fc <__clzsi2>
 8001b0c:	0001      	movs	r1, r0
 8001b0e:	0002      	movs	r2, r0
 8001b10:	390b      	subs	r1, #11
 8001b12:	231d      	movs	r3, #29
 8001b14:	0010      	movs	r0, r2
 8001b16:	1a5b      	subs	r3, r3, r1
 8001b18:	0031      	movs	r1, r6
 8001b1a:	0035      	movs	r5, r6
 8001b1c:	3808      	subs	r0, #8
 8001b1e:	4084      	lsls	r4, r0
 8001b20:	40d9      	lsrs	r1, r3
 8001b22:	4085      	lsls	r5, r0
 8001b24:	430c      	orrs	r4, r1
 8001b26:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <__aeabi_dmul+0x3a4>)
 8001b28:	1a83      	subs	r3, r0, r2
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	4699      	mov	r9, r3
 8001b30:	469b      	mov	fp, r3
 8001b32:	e697      	b.n	8001864 <__aeabi_dmul+0x48>
 8001b34:	0005      	movs	r5, r0
 8001b36:	4325      	orrs	r5, r4
 8001b38:	d126      	bne.n	8001b88 <__aeabi_dmul+0x36c>
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2302      	movs	r3, #2
 8001b40:	2400      	movs	r4, #0
 8001b42:	4691      	mov	r9, r2
 8001b44:	469b      	mov	fp, r3
 8001b46:	e68d      	b.n	8001864 <__aeabi_dmul+0x48>
 8001b48:	4652      	mov	r2, sl
 8001b4a:	9b00      	ldr	r3, [sp, #0]
 8001b4c:	4332      	orrs	r2, r6
 8001b4e:	d110      	bne.n	8001b72 <__aeabi_dmul+0x356>
 8001b50:	4915      	ldr	r1, [pc, #84]	; (8001ba8 <__aeabi_dmul+0x38c>)
 8001b52:	2600      	movs	r6, #0
 8001b54:	468c      	mov	ip, r1
 8001b56:	4463      	add	r3, ip
 8001b58:	4649      	mov	r1, r9
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	4319      	orrs	r1, r3
 8001b60:	4689      	mov	r9, r1
 8001b62:	2002      	movs	r0, #2
 8001b64:	e69d      	b.n	80018a2 <__aeabi_dmul+0x86>
 8001b66:	465b      	mov	r3, fp
 8001b68:	9701      	str	r7, [sp, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_dmul+0x354>
 8001b6e:	e6ad      	b.n	80018cc <__aeabi_dmul+0xb0>
 8001b70:	e6c3      	b.n	80018fa <__aeabi_dmul+0xde>
 8001b72:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <__aeabi_dmul+0x38c>)
 8001b74:	2003      	movs	r0, #3
 8001b76:	4694      	mov	ip, r2
 8001b78:	4463      	add	r3, ip
 8001b7a:	464a      	mov	r2, r9
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2303      	movs	r3, #3
 8001b80:	431a      	orrs	r2, r3
 8001b82:	4691      	mov	r9, r2
 8001b84:	4652      	mov	r2, sl
 8001b86:	e68c      	b.n	80018a2 <__aeabi_dmul+0x86>
 8001b88:	220c      	movs	r2, #12
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	0005      	movs	r5, r0
 8001b90:	4691      	mov	r9, r2
 8001b92:	469b      	mov	fp, r3
 8001b94:	e666      	b.n	8001864 <__aeabi_dmul+0x48>
 8001b96:	2304      	movs	r3, #4
 8001b98:	4699      	mov	r9, r3
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	469b      	mov	fp, r3
 8001ba4:	e65e      	b.n	8001864 <__aeabi_dmul+0x48>
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	000007ff 	.word	0x000007ff
 8001bac:	fffffc01 	.word	0xfffffc01
 8001bb0:	08009694 	.word	0x08009694
 8001bb4:	000003ff 	.word	0x000003ff
 8001bb8:	feffffff 	.word	0xfeffffff
 8001bbc:	000007fe 	.word	0x000007fe
 8001bc0:	fffffc0d 	.word	0xfffffc0d
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4319      	orrs	r1, r3
 8001bca:	4689      	mov	r9, r1
 8001bcc:	2600      	movs	r6, #0
 8001bce:	2001      	movs	r0, #1
 8001bd0:	e667      	b.n	80018a2 <__aeabi_dmul+0x86>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2480      	movs	r4, #128	; 0x80
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	4a43      	ldr	r2, [pc, #268]	; (8001ce8 <__aeabi_dmul+0x4cc>)
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	0324      	lsls	r4, r4, #12
 8001bde:	e67e      	b.n	80018de <__aeabi_dmul+0xc2>
 8001be0:	2001      	movs	r0, #1
 8001be2:	1a40      	subs	r0, r0, r1
 8001be4:	2838      	cmp	r0, #56	; 0x38
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dmul+0x3ce>
 8001be8:	e676      	b.n	80018d8 <__aeabi_dmul+0xbc>
 8001bea:	281f      	cmp	r0, #31
 8001bec:	dd5b      	ble.n	8001ca6 <__aeabi_dmul+0x48a>
 8001bee:	221f      	movs	r2, #31
 8001bf0:	0023      	movs	r3, r4
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	40cb      	lsrs	r3, r1
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	2820      	cmp	r0, #32
 8001bfc:	d003      	beq.n	8001c06 <__aeabi_dmul+0x3ea>
 8001bfe:	4a3b      	ldr	r2, [pc, #236]	; (8001cec <__aeabi_dmul+0x4d0>)
 8001c00:	4462      	add	r2, ip
 8001c02:	4094      	lsls	r4, r2
 8001c04:	4325      	orrs	r5, r4
 8001c06:	1e6a      	subs	r2, r5, #1
 8001c08:	4195      	sbcs	r5, r2
 8001c0a:	002a      	movs	r2, r5
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	2107      	movs	r1, #7
 8001c10:	000d      	movs	r5, r1
 8001c12:	2400      	movs	r4, #0
 8001c14:	4015      	ands	r5, r2
 8001c16:	4211      	tst	r1, r2
 8001c18:	d05b      	beq.n	8001cd2 <__aeabi_dmul+0x4b6>
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	4011      	ands	r1, r2
 8001c20:	2904      	cmp	r1, #4
 8001c22:	d053      	beq.n	8001ccc <__aeabi_dmul+0x4b0>
 8001c24:	1d11      	adds	r1, r2, #4
 8001c26:	4291      	cmp	r1, r2
 8001c28:	4192      	sbcs	r2, r2
 8001c2a:	4252      	negs	r2, r2
 8001c2c:	18a4      	adds	r4, r4, r2
 8001c2e:	000a      	movs	r2, r1
 8001c30:	0223      	lsls	r3, r4, #8
 8001c32:	d54b      	bpl.n	8001ccc <__aeabi_dmul+0x4b0>
 8001c34:	2201      	movs	r2, #1
 8001c36:	2400      	movs	r4, #0
 8001c38:	2500      	movs	r5, #0
 8001c3a:	e650      	b.n	80018de <__aeabi_dmul+0xc2>
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	031b      	lsls	r3, r3, #12
 8001c40:	421c      	tst	r4, r3
 8001c42:	d009      	beq.n	8001c58 <__aeabi_dmul+0x43c>
 8001c44:	421e      	tst	r6, r3
 8001c46:	d107      	bne.n	8001c58 <__aeabi_dmul+0x43c>
 8001c48:	4333      	orrs	r3, r6
 8001c4a:	031c      	lsls	r4, r3, #12
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	0015      	movs	r5, r2
 8001c50:	0b24      	lsrs	r4, r4, #12
 8001c52:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <__aeabi_dmul+0x4cc>)
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	e642      	b.n	80018de <__aeabi_dmul+0xc2>
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	0312      	lsls	r2, r2, #12
 8001c5c:	4314      	orrs	r4, r2
 8001c5e:	0324      	lsls	r4, r4, #12
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <__aeabi_dmul+0x4cc>)
 8001c62:	0b24      	lsrs	r4, r4, #12
 8001c64:	9701      	str	r7, [sp, #4]
 8001c66:	e63a      	b.n	80018de <__aeabi_dmul+0xc2>
 8001c68:	f000 fcc8 	bl	80025fc <__clzsi2>
 8001c6c:	0001      	movs	r1, r0
 8001c6e:	0002      	movs	r2, r0
 8001c70:	3115      	adds	r1, #21
 8001c72:	3220      	adds	r2, #32
 8001c74:	291c      	cmp	r1, #28
 8001c76:	dc00      	bgt.n	8001c7a <__aeabi_dmul+0x45e>
 8001c78:	e74b      	b.n	8001b12 <__aeabi_dmul+0x2f6>
 8001c7a:	0034      	movs	r4, r6
 8001c7c:	3808      	subs	r0, #8
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4084      	lsls	r4, r0
 8001c82:	e750      	b.n	8001b26 <__aeabi_dmul+0x30a>
 8001c84:	f000 fcba 	bl	80025fc <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	3215      	adds	r2, #21
 8001c8e:	3020      	adds	r0, #32
 8001c90:	2a1c      	cmp	r2, #28
 8001c92:	dc00      	bgt.n	8001c96 <__aeabi_dmul+0x47a>
 8001c94:	e71e      	b.n	8001ad4 <__aeabi_dmul+0x2b8>
 8001c96:	4656      	mov	r6, sl
 8001c98:	3b08      	subs	r3, #8
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	409e      	lsls	r6, r3
 8001c9e:	e723      	b.n	8001ae8 <__aeabi_dmul+0x2cc>
 8001ca0:	9b00      	ldr	r3, [sp, #0]
 8001ca2:	469c      	mov	ip, r3
 8001ca4:	e6e6      	b.n	8001a74 <__aeabi_dmul+0x258>
 8001ca6:	4912      	ldr	r1, [pc, #72]	; (8001cf0 <__aeabi_dmul+0x4d4>)
 8001ca8:	0022      	movs	r2, r4
 8001caa:	4461      	add	r1, ip
 8001cac:	002e      	movs	r6, r5
 8001cae:	408d      	lsls	r5, r1
 8001cb0:	408a      	lsls	r2, r1
 8001cb2:	40c6      	lsrs	r6, r0
 8001cb4:	1e69      	subs	r1, r5, #1
 8001cb6:	418d      	sbcs	r5, r1
 8001cb8:	4332      	orrs	r2, r6
 8001cba:	432a      	orrs	r2, r5
 8001cbc:	40c4      	lsrs	r4, r0
 8001cbe:	0753      	lsls	r3, r2, #29
 8001cc0:	d0b6      	beq.n	8001c30 <__aeabi_dmul+0x414>
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	4011      	ands	r1, r2
 8001cc6:	2904      	cmp	r1, #4
 8001cc8:	d1ac      	bne.n	8001c24 <__aeabi_dmul+0x408>
 8001cca:	e7b1      	b.n	8001c30 <__aeabi_dmul+0x414>
 8001ccc:	0765      	lsls	r5, r4, #29
 8001cce:	0264      	lsls	r4, r4, #9
 8001cd0:	0b24      	lsrs	r4, r4, #12
 8001cd2:	08d2      	lsrs	r2, r2, #3
 8001cd4:	4315      	orrs	r5, r2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	e601      	b.n	80018de <__aeabi_dmul+0xc2>
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	0312      	lsls	r2, r2, #12
 8001cde:	4314      	orrs	r4, r2
 8001ce0:	0324      	lsls	r4, r4, #12
 8001ce2:	4a01      	ldr	r2, [pc, #4]	; (8001ce8 <__aeabi_dmul+0x4cc>)
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	e5fa      	b.n	80018de <__aeabi_dmul+0xc2>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000043e 	.word	0x0000043e
 8001cf0:	0000041e 	.word	0x0000041e

08001cf4 <__aeabi_dsub>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	4657      	mov	r7, sl
 8001cf8:	464e      	mov	r6, r9
 8001cfa:	4645      	mov	r5, r8
 8001cfc:	46de      	mov	lr, fp
 8001cfe:	b5e0      	push	{r5, r6, r7, lr}
 8001d00:	001e      	movs	r6, r3
 8001d02:	0017      	movs	r7, r2
 8001d04:	004a      	lsls	r2, r1, #1
 8001d06:	030b      	lsls	r3, r1, #12
 8001d08:	0d52      	lsrs	r2, r2, #21
 8001d0a:	0a5b      	lsrs	r3, r3, #9
 8001d0c:	4690      	mov	r8, r2
 8001d0e:	0f42      	lsrs	r2, r0, #29
 8001d10:	431a      	orrs	r2, r3
 8001d12:	0fcd      	lsrs	r5, r1, #31
 8001d14:	4ccd      	ldr	r4, [pc, #820]	; (800204c <__aeabi_dsub+0x358>)
 8001d16:	0331      	lsls	r1, r6, #12
 8001d18:	00c3      	lsls	r3, r0, #3
 8001d1a:	4694      	mov	ip, r2
 8001d1c:	0070      	lsls	r0, r6, #1
 8001d1e:	0f7a      	lsrs	r2, r7, #29
 8001d20:	0a49      	lsrs	r1, r1, #9
 8001d22:	00ff      	lsls	r7, r7, #3
 8001d24:	469a      	mov	sl, r3
 8001d26:	46b9      	mov	r9, r7
 8001d28:	0d40      	lsrs	r0, r0, #21
 8001d2a:	0ff6      	lsrs	r6, r6, #31
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	42a0      	cmp	r0, r4
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x40>
 8001d32:	e0b1      	b.n	8001e98 <__aeabi_dsub+0x1a4>
 8001d34:	2201      	movs	r2, #1
 8001d36:	4056      	eors	r6, r2
 8001d38:	46b3      	mov	fp, r6
 8001d3a:	42b5      	cmp	r5, r6
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x4c>
 8001d3e:	e088      	b.n	8001e52 <__aeabi_dsub+0x15e>
 8001d40:	4642      	mov	r2, r8
 8001d42:	1a12      	subs	r2, r2, r0
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x56>
 8001d48:	e0ae      	b.n	8001ea8 <__aeabi_dsub+0x1b4>
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x5c>
 8001d4e:	e0c1      	b.n	8001ed4 <__aeabi_dsub+0x1e0>
 8001d50:	48be      	ldr	r0, [pc, #760]	; (800204c <__aeabi_dsub+0x358>)
 8001d52:	4580      	cmp	r8, r0
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x64>
 8001d56:	e151      	b.n	8001ffc <__aeabi_dsub+0x308>
 8001d58:	2080      	movs	r0, #128	; 0x80
 8001d5a:	0400      	lsls	r0, r0, #16
 8001d5c:	4301      	orrs	r1, r0
 8001d5e:	2a38      	cmp	r2, #56	; 0x38
 8001d60:	dd00      	ble.n	8001d64 <__aeabi_dsub+0x70>
 8001d62:	e17b      	b.n	800205c <__aeabi_dsub+0x368>
 8001d64:	2a1f      	cmp	r2, #31
 8001d66:	dd00      	ble.n	8001d6a <__aeabi_dsub+0x76>
 8001d68:	e1ee      	b.n	8002148 <__aeabi_dsub+0x454>
 8001d6a:	2020      	movs	r0, #32
 8001d6c:	003e      	movs	r6, r7
 8001d6e:	1a80      	subs	r0, r0, r2
 8001d70:	000c      	movs	r4, r1
 8001d72:	40d6      	lsrs	r6, r2
 8001d74:	40d1      	lsrs	r1, r2
 8001d76:	4087      	lsls	r7, r0
 8001d78:	4662      	mov	r2, ip
 8001d7a:	4084      	lsls	r4, r0
 8001d7c:	1a52      	subs	r2, r2, r1
 8001d7e:	1e78      	subs	r0, r7, #1
 8001d80:	4187      	sbcs	r7, r0
 8001d82:	4694      	mov	ip, r2
 8001d84:	4334      	orrs	r4, r6
 8001d86:	4327      	orrs	r7, r4
 8001d88:	1bdc      	subs	r4, r3, r7
 8001d8a:	42a3      	cmp	r3, r4
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	4662      	mov	r2, ip
 8001d90:	425b      	negs	r3, r3
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4699      	mov	r9, r3
 8001d96:	464b      	mov	r3, r9
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	d400      	bmi.n	8001d9e <__aeabi_dsub+0xaa>
 8001d9c:	e118      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 8001d9e:	464b      	mov	r3, r9
 8001da0:	0258      	lsls	r0, r3, #9
 8001da2:	0a43      	lsrs	r3, r0, #9
 8001da4:	4699      	mov	r9, r3
 8001da6:	464b      	mov	r3, r9
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0xba>
 8001dac:	e137      	b.n	800201e <__aeabi_dsub+0x32a>
 8001dae:	4648      	mov	r0, r9
 8001db0:	f000 fc24 	bl	80025fc <__clzsi2>
 8001db4:	0001      	movs	r1, r0
 8001db6:	3908      	subs	r1, #8
 8001db8:	2320      	movs	r3, #32
 8001dba:	0022      	movs	r2, r4
 8001dbc:	4648      	mov	r0, r9
 8001dbe:	1a5b      	subs	r3, r3, r1
 8001dc0:	40da      	lsrs	r2, r3
 8001dc2:	4088      	lsls	r0, r1
 8001dc4:	408c      	lsls	r4, r1
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	4310      	orrs	r0, r2
 8001dca:	4588      	cmp	r8, r1
 8001dcc:	dd00      	ble.n	8001dd0 <__aeabi_dsub+0xdc>
 8001dce:	e136      	b.n	800203e <__aeabi_dsub+0x34a>
 8001dd0:	1ac9      	subs	r1, r1, r3
 8001dd2:	1c4b      	adds	r3, r1, #1
 8001dd4:	2b1f      	cmp	r3, #31
 8001dd6:	dd00      	ble.n	8001dda <__aeabi_dsub+0xe6>
 8001dd8:	e0ea      	b.n	8001fb0 <__aeabi_dsub+0x2bc>
 8001dda:	2220      	movs	r2, #32
 8001ddc:	0026      	movs	r6, r4
 8001dde:	1ad2      	subs	r2, r2, r3
 8001de0:	0001      	movs	r1, r0
 8001de2:	4094      	lsls	r4, r2
 8001de4:	40de      	lsrs	r6, r3
 8001de6:	40d8      	lsrs	r0, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	4091      	lsls	r1, r2
 8001dec:	1e62      	subs	r2, r4, #1
 8001dee:	4194      	sbcs	r4, r2
 8001df0:	4681      	mov	r9, r0
 8001df2:	4698      	mov	r8, r3
 8001df4:	4331      	orrs	r1, r6
 8001df6:	430c      	orrs	r4, r1
 8001df8:	0763      	lsls	r3, r4, #29
 8001dfa:	d009      	beq.n	8001e10 <__aeabi_dsub+0x11c>
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	4023      	ands	r3, r4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <__aeabi_dsub+0x11c>
 8001e04:	1d23      	adds	r3, r4, #4
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	41a4      	sbcs	r4, r4
 8001e0a:	4264      	negs	r4, r4
 8001e0c:	44a1      	add	r9, r4
 8001e0e:	001c      	movs	r4, r3
 8001e10:	464b      	mov	r3, r9
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	d400      	bmi.n	8001e18 <__aeabi_dsub+0x124>
 8001e16:	e0de      	b.n	8001fd6 <__aeabi_dsub+0x2e2>
 8001e18:	4641      	mov	r1, r8
 8001e1a:	4b8c      	ldr	r3, [pc, #560]	; (800204c <__aeabi_dsub+0x358>)
 8001e1c:	3101      	adds	r1, #1
 8001e1e:	4299      	cmp	r1, r3
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x130>
 8001e22:	e0e7      	b.n	8001ff4 <__aeabi_dsub+0x300>
 8001e24:	464b      	mov	r3, r9
 8001e26:	488a      	ldr	r0, [pc, #552]	; (8002050 <__aeabi_dsub+0x35c>)
 8001e28:	08e4      	lsrs	r4, r4, #3
 8001e2a:	4003      	ands	r3, r0
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	0549      	lsls	r1, r1, #21
 8001e30:	075b      	lsls	r3, r3, #29
 8001e32:	0240      	lsls	r0, r0, #9
 8001e34:	4323      	orrs	r3, r4
 8001e36:	0d4a      	lsrs	r2, r1, #21
 8001e38:	0b04      	lsrs	r4, r0, #12
 8001e3a:	0512      	lsls	r2, r2, #20
 8001e3c:	07ed      	lsls	r5, r5, #31
 8001e3e:	4322      	orrs	r2, r4
 8001e40:	432a      	orrs	r2, r5
 8001e42:	0018      	movs	r0, r3
 8001e44:	0011      	movs	r1, r2
 8001e46:	bcf0      	pop	{r4, r5, r6, r7}
 8001e48:	46bb      	mov	fp, r7
 8001e4a:	46b2      	mov	sl, r6
 8001e4c:	46a9      	mov	r9, r5
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e52:	4642      	mov	r2, r8
 8001e54:	1a12      	subs	r2, r2, r0
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	dd52      	ble.n	8001f00 <__aeabi_dsub+0x20c>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x16c>
 8001e5e:	e09c      	b.n	8001f9a <__aeabi_dsub+0x2a6>
 8001e60:	45a0      	cmp	r8, r4
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x172>
 8001e64:	e0ca      	b.n	8001ffc <__aeabi_dsub+0x308>
 8001e66:	2080      	movs	r0, #128	; 0x80
 8001e68:	0400      	lsls	r0, r0, #16
 8001e6a:	4301      	orrs	r1, r0
 8001e6c:	2a38      	cmp	r2, #56	; 0x38
 8001e6e:	dd00      	ble.n	8001e72 <__aeabi_dsub+0x17e>
 8001e70:	e149      	b.n	8002106 <__aeabi_dsub+0x412>
 8001e72:	2a1f      	cmp	r2, #31
 8001e74:	dc00      	bgt.n	8001e78 <__aeabi_dsub+0x184>
 8001e76:	e197      	b.n	80021a8 <__aeabi_dsub+0x4b4>
 8001e78:	0010      	movs	r0, r2
 8001e7a:	000e      	movs	r6, r1
 8001e7c:	3820      	subs	r0, #32
 8001e7e:	40c6      	lsrs	r6, r0
 8001e80:	2a20      	cmp	r2, #32
 8001e82:	d004      	beq.n	8001e8e <__aeabi_dsub+0x19a>
 8001e84:	2040      	movs	r0, #64	; 0x40
 8001e86:	1a82      	subs	r2, r0, r2
 8001e88:	4091      	lsls	r1, r2
 8001e8a:	430f      	orrs	r7, r1
 8001e8c:	46b9      	mov	r9, r7
 8001e8e:	464c      	mov	r4, r9
 8001e90:	1e62      	subs	r2, r4, #1
 8001e92:	4194      	sbcs	r4, r2
 8001e94:	4334      	orrs	r4, r6
 8001e96:	e13a      	b.n	800210e <__aeabi_dsub+0x41a>
 8001e98:	000a      	movs	r2, r1
 8001e9a:	433a      	orrs	r2, r7
 8001e9c:	d028      	beq.n	8001ef0 <__aeabi_dsub+0x1fc>
 8001e9e:	46b3      	mov	fp, r6
 8001ea0:	42b5      	cmp	r5, r6
 8001ea2:	d02b      	beq.n	8001efc <__aeabi_dsub+0x208>
 8001ea4:	4a6b      	ldr	r2, [pc, #428]	; (8002054 <__aeabi_dsub+0x360>)
 8001ea6:	4442      	add	r2, r8
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	d05d      	beq.n	8001f68 <__aeabi_dsub+0x274>
 8001eac:	4642      	mov	r2, r8
 8001eae:	4644      	mov	r4, r8
 8001eb0:	1a82      	subs	r2, r0, r2
 8001eb2:	2c00      	cmp	r4, #0
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x1c4>
 8001eb6:	e0f5      	b.n	80020a4 <__aeabi_dsub+0x3b0>
 8001eb8:	4665      	mov	r5, ip
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x1cc>
 8001ebe:	e19c      	b.n	80021fa <__aeabi_dsub+0x506>
 8001ec0:	1e55      	subs	r5, r2, #1
 8001ec2:	2a01      	cmp	r2, #1
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x1d4>
 8001ec6:	e1fb      	b.n	80022c0 <__aeabi_dsub+0x5cc>
 8001ec8:	4c60      	ldr	r4, [pc, #384]	; (800204c <__aeabi_dsub+0x358>)
 8001eca:	42a2      	cmp	r2, r4
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x1dc>
 8001ece:	e1bd      	b.n	800224c <__aeabi_dsub+0x558>
 8001ed0:	002a      	movs	r2, r5
 8001ed2:	e0f0      	b.n	80020b6 <__aeabi_dsub+0x3c2>
 8001ed4:	0008      	movs	r0, r1
 8001ed6:	4338      	orrs	r0, r7
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x1e8>
 8001eda:	e0c3      	b.n	8002064 <__aeabi_dsub+0x370>
 8001edc:	1e50      	subs	r0, r2, #1
 8001ede:	2a01      	cmp	r2, #1
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x1f0>
 8001ee2:	e1a8      	b.n	8002236 <__aeabi_dsub+0x542>
 8001ee4:	4c59      	ldr	r4, [pc, #356]	; (800204c <__aeabi_dsub+0x358>)
 8001ee6:	42a2      	cmp	r2, r4
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x1f8>
 8001eea:	e087      	b.n	8001ffc <__aeabi_dsub+0x308>
 8001eec:	0002      	movs	r2, r0
 8001eee:	e736      	b.n	8001d5e <__aeabi_dsub+0x6a>
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4056      	eors	r6, r2
 8001ef4:	46b3      	mov	fp, r6
 8001ef6:	42b5      	cmp	r5, r6
 8001ef8:	d000      	beq.n	8001efc <__aeabi_dsub+0x208>
 8001efa:	e721      	b.n	8001d40 <__aeabi_dsub+0x4c>
 8001efc:	4a55      	ldr	r2, [pc, #340]	; (8002054 <__aeabi_dsub+0x360>)
 8001efe:	4442      	add	r2, r8
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x212>
 8001f04:	e0b5      	b.n	8002072 <__aeabi_dsub+0x37e>
 8001f06:	4642      	mov	r2, r8
 8001f08:	4644      	mov	r4, r8
 8001f0a:	1a82      	subs	r2, r0, r2
 8001f0c:	2c00      	cmp	r4, #0
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dsub+0x21e>
 8001f10:	e138      	b.n	8002184 <__aeabi_dsub+0x490>
 8001f12:	4e4e      	ldr	r6, [pc, #312]	; (800204c <__aeabi_dsub+0x358>)
 8001f14:	42b0      	cmp	r0, r6
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x226>
 8001f18:	e1de      	b.n	80022d8 <__aeabi_dsub+0x5e4>
 8001f1a:	2680      	movs	r6, #128	; 0x80
 8001f1c:	4664      	mov	r4, ip
 8001f1e:	0436      	lsls	r6, r6, #16
 8001f20:	4334      	orrs	r4, r6
 8001f22:	46a4      	mov	ip, r4
 8001f24:	2a38      	cmp	r2, #56	; 0x38
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x236>
 8001f28:	e196      	b.n	8002258 <__aeabi_dsub+0x564>
 8001f2a:	2a1f      	cmp	r2, #31
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x23c>
 8001f2e:	e224      	b.n	800237a <__aeabi_dsub+0x686>
 8001f30:	2620      	movs	r6, #32
 8001f32:	1ab4      	subs	r4, r6, r2
 8001f34:	46a2      	mov	sl, r4
 8001f36:	4664      	mov	r4, ip
 8001f38:	4656      	mov	r6, sl
 8001f3a:	40b4      	lsls	r4, r6
 8001f3c:	46a1      	mov	r9, r4
 8001f3e:	001c      	movs	r4, r3
 8001f40:	464e      	mov	r6, r9
 8001f42:	40d4      	lsrs	r4, r2
 8001f44:	4326      	orrs	r6, r4
 8001f46:	0034      	movs	r4, r6
 8001f48:	4656      	mov	r6, sl
 8001f4a:	40b3      	lsls	r3, r6
 8001f4c:	1e5e      	subs	r6, r3, #1
 8001f4e:	41b3      	sbcs	r3, r6
 8001f50:	431c      	orrs	r4, r3
 8001f52:	4663      	mov	r3, ip
 8001f54:	40d3      	lsrs	r3, r2
 8001f56:	18c9      	adds	r1, r1, r3
 8001f58:	19e4      	adds	r4, r4, r7
 8001f5a:	42bc      	cmp	r4, r7
 8001f5c:	41bf      	sbcs	r7, r7
 8001f5e:	427f      	negs	r7, r7
 8001f60:	46b9      	mov	r9, r7
 8001f62:	4680      	mov	r8, r0
 8001f64:	4489      	add	r9, r1
 8001f66:	e0d8      	b.n	800211a <__aeabi_dsub+0x426>
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4c3b      	ldr	r4, [pc, #236]	; (8002058 <__aeabi_dsub+0x364>)
 8001f6c:	3001      	adds	r0, #1
 8001f6e:	4220      	tst	r0, r4
 8001f70:	d000      	beq.n	8001f74 <__aeabi_dsub+0x280>
 8001f72:	e0b4      	b.n	80020de <__aeabi_dsub+0x3ea>
 8001f74:	4640      	mov	r0, r8
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dsub+0x288>
 8001f7a:	e144      	b.n	8002206 <__aeabi_dsub+0x512>
 8001f7c:	4660      	mov	r0, ip
 8001f7e:	4318      	orrs	r0, r3
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x290>
 8001f82:	e190      	b.n	80022a6 <__aeabi_dsub+0x5b2>
 8001f84:	0008      	movs	r0, r1
 8001f86:	4338      	orrs	r0, r7
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x298>
 8001f8a:	e1aa      	b.n	80022e2 <__aeabi_dsub+0x5ee>
 8001f8c:	4661      	mov	r1, ip
 8001f8e:	08db      	lsrs	r3, r3, #3
 8001f90:	0749      	lsls	r1, r1, #29
 8001f92:	430b      	orrs	r3, r1
 8001f94:	4661      	mov	r1, ip
 8001f96:	08cc      	lsrs	r4, r1, #3
 8001f98:	e027      	b.n	8001fea <__aeabi_dsub+0x2f6>
 8001f9a:	0008      	movs	r0, r1
 8001f9c:	4338      	orrs	r0, r7
 8001f9e:	d061      	beq.n	8002064 <__aeabi_dsub+0x370>
 8001fa0:	1e50      	subs	r0, r2, #1
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x2b4>
 8001fa6:	e139      	b.n	800221c <__aeabi_dsub+0x528>
 8001fa8:	42a2      	cmp	r2, r4
 8001faa:	d027      	beq.n	8001ffc <__aeabi_dsub+0x308>
 8001fac:	0002      	movs	r2, r0
 8001fae:	e75d      	b.n	8001e6c <__aeabi_dsub+0x178>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	391f      	subs	r1, #31
 8001fb4:	40ca      	lsrs	r2, r1
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d003      	beq.n	8001fc4 <__aeabi_dsub+0x2d0>
 8001fbc:	2240      	movs	r2, #64	; 0x40
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	4098      	lsls	r0, r3
 8001fc2:	4304      	orrs	r4, r0
 8001fc4:	1e63      	subs	r3, r4, #1
 8001fc6:	419c      	sbcs	r4, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	4699      	mov	r9, r3
 8001fcc:	4698      	mov	r8, r3
 8001fce:	430c      	orrs	r4, r1
 8001fd0:	0763      	lsls	r3, r4, #29
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_dsub+0x2e2>
 8001fd4:	e712      	b.n	8001dfc <__aeabi_dsub+0x108>
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	464a      	mov	r2, r9
 8001fda:	08e4      	lsrs	r4, r4, #3
 8001fdc:	075b      	lsls	r3, r3, #29
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	08d4      	lsrs	r4, r2, #3
 8001fe2:	4642      	mov	r2, r8
 8001fe4:	4919      	ldr	r1, [pc, #100]	; (800204c <__aeabi_dsub+0x358>)
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d00e      	beq.n	8002008 <__aeabi_dsub+0x314>
 8001fea:	0324      	lsls	r4, r4, #12
 8001fec:	0552      	lsls	r2, r2, #21
 8001fee:	0b24      	lsrs	r4, r4, #12
 8001ff0:	0d52      	lsrs	r2, r2, #21
 8001ff2:	e722      	b.n	8001e3a <__aeabi_dsub+0x146>
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	2400      	movs	r4, #0
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e71e      	b.n	8001e3a <__aeabi_dsub+0x146>
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	4662      	mov	r2, ip
 8002000:	0752      	lsls	r2, r2, #29
 8002002:	4313      	orrs	r3, r2
 8002004:	4662      	mov	r2, ip
 8002006:	08d4      	lsrs	r4, r2, #3
 8002008:	001a      	movs	r2, r3
 800200a:	4322      	orrs	r2, r4
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x31c>
 800200e:	e1fc      	b.n	800240a <__aeabi_dsub+0x716>
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	0312      	lsls	r2, r2, #12
 8002014:	4314      	orrs	r4, r2
 8002016:	0324      	lsls	r4, r4, #12
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <__aeabi_dsub+0x358>)
 800201a:	0b24      	lsrs	r4, r4, #12
 800201c:	e70d      	b.n	8001e3a <__aeabi_dsub+0x146>
 800201e:	0020      	movs	r0, r4
 8002020:	f000 faec 	bl	80025fc <__clzsi2>
 8002024:	0001      	movs	r1, r0
 8002026:	3118      	adds	r1, #24
 8002028:	291f      	cmp	r1, #31
 800202a:	dc00      	bgt.n	800202e <__aeabi_dsub+0x33a>
 800202c:	e6c4      	b.n	8001db8 <__aeabi_dsub+0xc4>
 800202e:	3808      	subs	r0, #8
 8002030:	4084      	lsls	r4, r0
 8002032:	4643      	mov	r3, r8
 8002034:	0020      	movs	r0, r4
 8002036:	2400      	movs	r4, #0
 8002038:	4588      	cmp	r8, r1
 800203a:	dc00      	bgt.n	800203e <__aeabi_dsub+0x34a>
 800203c:	e6c8      	b.n	8001dd0 <__aeabi_dsub+0xdc>
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__aeabi_dsub+0x35c>)
 8002040:	1a5b      	subs	r3, r3, r1
 8002042:	4010      	ands	r0, r2
 8002044:	4698      	mov	r8, r3
 8002046:	4681      	mov	r9, r0
 8002048:	e6d6      	b.n	8001df8 <__aeabi_dsub+0x104>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	000007ff 	.word	0x000007ff
 8002050:	ff7fffff 	.word	0xff7fffff
 8002054:	fffff801 	.word	0xfffff801
 8002058:	000007fe 	.word	0x000007fe
 800205c:	430f      	orrs	r7, r1
 800205e:	1e7a      	subs	r2, r7, #1
 8002060:	4197      	sbcs	r7, r2
 8002062:	e691      	b.n	8001d88 <__aeabi_dsub+0x94>
 8002064:	4661      	mov	r1, ip
 8002066:	08db      	lsrs	r3, r3, #3
 8002068:	0749      	lsls	r1, r1, #29
 800206a:	430b      	orrs	r3, r1
 800206c:	4661      	mov	r1, ip
 800206e:	08cc      	lsrs	r4, r1, #3
 8002070:	e7b8      	b.n	8001fe4 <__aeabi_dsub+0x2f0>
 8002072:	4640      	mov	r0, r8
 8002074:	4cd3      	ldr	r4, [pc, #844]	; (80023c4 <__aeabi_dsub+0x6d0>)
 8002076:	3001      	adds	r0, #1
 8002078:	4220      	tst	r0, r4
 800207a:	d000      	beq.n	800207e <__aeabi_dsub+0x38a>
 800207c:	e0a2      	b.n	80021c4 <__aeabi_dsub+0x4d0>
 800207e:	4640      	mov	r0, r8
 8002080:	2800      	cmp	r0, #0
 8002082:	d000      	beq.n	8002086 <__aeabi_dsub+0x392>
 8002084:	e101      	b.n	800228a <__aeabi_dsub+0x596>
 8002086:	4660      	mov	r0, ip
 8002088:	4318      	orrs	r0, r3
 800208a:	d100      	bne.n	800208e <__aeabi_dsub+0x39a>
 800208c:	e15e      	b.n	800234c <__aeabi_dsub+0x658>
 800208e:	0008      	movs	r0, r1
 8002090:	4338      	orrs	r0, r7
 8002092:	d000      	beq.n	8002096 <__aeabi_dsub+0x3a2>
 8002094:	e15f      	b.n	8002356 <__aeabi_dsub+0x662>
 8002096:	4661      	mov	r1, ip
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	0749      	lsls	r1, r1, #29
 800209c:	430b      	orrs	r3, r1
 800209e:	4661      	mov	r1, ip
 80020a0:	08cc      	lsrs	r4, r1, #3
 80020a2:	e7a2      	b.n	8001fea <__aeabi_dsub+0x2f6>
 80020a4:	4dc8      	ldr	r5, [pc, #800]	; (80023c8 <__aeabi_dsub+0x6d4>)
 80020a6:	42a8      	cmp	r0, r5
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x3b8>
 80020aa:	e0cf      	b.n	800224c <__aeabi_dsub+0x558>
 80020ac:	2580      	movs	r5, #128	; 0x80
 80020ae:	4664      	mov	r4, ip
 80020b0:	042d      	lsls	r5, r5, #16
 80020b2:	432c      	orrs	r4, r5
 80020b4:	46a4      	mov	ip, r4
 80020b6:	2a38      	cmp	r2, #56	; 0x38
 80020b8:	dc56      	bgt.n	8002168 <__aeabi_dsub+0x474>
 80020ba:	2a1f      	cmp	r2, #31
 80020bc:	dd00      	ble.n	80020c0 <__aeabi_dsub+0x3cc>
 80020be:	e0d1      	b.n	8002264 <__aeabi_dsub+0x570>
 80020c0:	2520      	movs	r5, #32
 80020c2:	001e      	movs	r6, r3
 80020c4:	1aad      	subs	r5, r5, r2
 80020c6:	4664      	mov	r4, ip
 80020c8:	40ab      	lsls	r3, r5
 80020ca:	40ac      	lsls	r4, r5
 80020cc:	40d6      	lsrs	r6, r2
 80020ce:	1e5d      	subs	r5, r3, #1
 80020d0:	41ab      	sbcs	r3, r5
 80020d2:	4334      	orrs	r4, r6
 80020d4:	4323      	orrs	r3, r4
 80020d6:	4664      	mov	r4, ip
 80020d8:	40d4      	lsrs	r4, r2
 80020da:	1b09      	subs	r1, r1, r4
 80020dc:	e049      	b.n	8002172 <__aeabi_dsub+0x47e>
 80020de:	4660      	mov	r0, ip
 80020e0:	1bdc      	subs	r4, r3, r7
 80020e2:	1a46      	subs	r6, r0, r1
 80020e4:	42a3      	cmp	r3, r4
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	4240      	negs	r0, r0
 80020ea:	4681      	mov	r9, r0
 80020ec:	0030      	movs	r0, r6
 80020ee:	464e      	mov	r6, r9
 80020f0:	1b80      	subs	r0, r0, r6
 80020f2:	4681      	mov	r9, r0
 80020f4:	0200      	lsls	r0, r0, #8
 80020f6:	d476      	bmi.n	80021e6 <__aeabi_dsub+0x4f2>
 80020f8:	464b      	mov	r3, r9
 80020fa:	4323      	orrs	r3, r4
 80020fc:	d000      	beq.n	8002100 <__aeabi_dsub+0x40c>
 80020fe:	e652      	b.n	8001da6 <__aeabi_dsub+0xb2>
 8002100:	2400      	movs	r4, #0
 8002102:	2500      	movs	r5, #0
 8002104:	e771      	b.n	8001fea <__aeabi_dsub+0x2f6>
 8002106:	4339      	orrs	r1, r7
 8002108:	000c      	movs	r4, r1
 800210a:	1e62      	subs	r2, r4, #1
 800210c:	4194      	sbcs	r4, r2
 800210e:	18e4      	adds	r4, r4, r3
 8002110:	429c      	cmp	r4, r3
 8002112:	419b      	sbcs	r3, r3
 8002114:	425b      	negs	r3, r3
 8002116:	4463      	add	r3, ip
 8002118:	4699      	mov	r9, r3
 800211a:	464b      	mov	r3, r9
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	d400      	bmi.n	8002122 <__aeabi_dsub+0x42e>
 8002120:	e756      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 8002122:	2301      	movs	r3, #1
 8002124:	469c      	mov	ip, r3
 8002126:	4ba8      	ldr	r3, [pc, #672]	; (80023c8 <__aeabi_dsub+0x6d4>)
 8002128:	44e0      	add	r8, ip
 800212a:	4598      	cmp	r8, r3
 800212c:	d038      	beq.n	80021a0 <__aeabi_dsub+0x4ac>
 800212e:	464b      	mov	r3, r9
 8002130:	48a6      	ldr	r0, [pc, #664]	; (80023cc <__aeabi_dsub+0x6d8>)
 8002132:	2201      	movs	r2, #1
 8002134:	4003      	ands	r3, r0
 8002136:	0018      	movs	r0, r3
 8002138:	0863      	lsrs	r3, r4, #1
 800213a:	4014      	ands	r4, r2
 800213c:	431c      	orrs	r4, r3
 800213e:	07c3      	lsls	r3, r0, #31
 8002140:	431c      	orrs	r4, r3
 8002142:	0843      	lsrs	r3, r0, #1
 8002144:	4699      	mov	r9, r3
 8002146:	e657      	b.n	8001df8 <__aeabi_dsub+0x104>
 8002148:	0010      	movs	r0, r2
 800214a:	000e      	movs	r6, r1
 800214c:	3820      	subs	r0, #32
 800214e:	40c6      	lsrs	r6, r0
 8002150:	2a20      	cmp	r2, #32
 8002152:	d004      	beq.n	800215e <__aeabi_dsub+0x46a>
 8002154:	2040      	movs	r0, #64	; 0x40
 8002156:	1a82      	subs	r2, r0, r2
 8002158:	4091      	lsls	r1, r2
 800215a:	430f      	orrs	r7, r1
 800215c:	46b9      	mov	r9, r7
 800215e:	464f      	mov	r7, r9
 8002160:	1e7a      	subs	r2, r7, #1
 8002162:	4197      	sbcs	r7, r2
 8002164:	4337      	orrs	r7, r6
 8002166:	e60f      	b.n	8001d88 <__aeabi_dsub+0x94>
 8002168:	4662      	mov	r2, ip
 800216a:	431a      	orrs	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	1e5a      	subs	r2, r3, #1
 8002170:	4193      	sbcs	r3, r2
 8002172:	1afc      	subs	r4, r7, r3
 8002174:	42a7      	cmp	r7, r4
 8002176:	41bf      	sbcs	r7, r7
 8002178:	427f      	negs	r7, r7
 800217a:	1bcb      	subs	r3, r1, r7
 800217c:	4699      	mov	r9, r3
 800217e:	465d      	mov	r5, fp
 8002180:	4680      	mov	r8, r0
 8002182:	e608      	b.n	8001d96 <__aeabi_dsub+0xa2>
 8002184:	4666      	mov	r6, ip
 8002186:	431e      	orrs	r6, r3
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x498>
 800218a:	e0be      	b.n	800230a <__aeabi_dsub+0x616>
 800218c:	1e56      	subs	r6, r2, #1
 800218e:	2a01      	cmp	r2, #1
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x4a0>
 8002192:	e109      	b.n	80023a8 <__aeabi_dsub+0x6b4>
 8002194:	4c8c      	ldr	r4, [pc, #560]	; (80023c8 <__aeabi_dsub+0x6d4>)
 8002196:	42a2      	cmp	r2, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x4a8>
 800219a:	e119      	b.n	80023d0 <__aeabi_dsub+0x6dc>
 800219c:	0032      	movs	r2, r6
 800219e:	e6c1      	b.n	8001f24 <__aeabi_dsub+0x230>
 80021a0:	4642      	mov	r2, r8
 80021a2:	2400      	movs	r4, #0
 80021a4:	2300      	movs	r3, #0
 80021a6:	e648      	b.n	8001e3a <__aeabi_dsub+0x146>
 80021a8:	2020      	movs	r0, #32
 80021aa:	000c      	movs	r4, r1
 80021ac:	1a80      	subs	r0, r0, r2
 80021ae:	003e      	movs	r6, r7
 80021b0:	4087      	lsls	r7, r0
 80021b2:	4084      	lsls	r4, r0
 80021b4:	40d6      	lsrs	r6, r2
 80021b6:	1e78      	subs	r0, r7, #1
 80021b8:	4187      	sbcs	r7, r0
 80021ba:	40d1      	lsrs	r1, r2
 80021bc:	4334      	orrs	r4, r6
 80021be:	433c      	orrs	r4, r7
 80021c0:	448c      	add	ip, r1
 80021c2:	e7a4      	b.n	800210e <__aeabi_dsub+0x41a>
 80021c4:	4a80      	ldr	r2, [pc, #512]	; (80023c8 <__aeabi_dsub+0x6d4>)
 80021c6:	4290      	cmp	r0, r2
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x4d8>
 80021ca:	e0e9      	b.n	80023a0 <__aeabi_dsub+0x6ac>
 80021cc:	19df      	adds	r7, r3, r7
 80021ce:	429f      	cmp	r7, r3
 80021d0:	419b      	sbcs	r3, r3
 80021d2:	4461      	add	r1, ip
 80021d4:	425b      	negs	r3, r3
 80021d6:	18c9      	adds	r1, r1, r3
 80021d8:	07cc      	lsls	r4, r1, #31
 80021da:	087f      	lsrs	r7, r7, #1
 80021dc:	084b      	lsrs	r3, r1, #1
 80021de:	4699      	mov	r9, r3
 80021e0:	4680      	mov	r8, r0
 80021e2:	433c      	orrs	r4, r7
 80021e4:	e6f4      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 80021e6:	1afc      	subs	r4, r7, r3
 80021e8:	42a7      	cmp	r7, r4
 80021ea:	41bf      	sbcs	r7, r7
 80021ec:	4663      	mov	r3, ip
 80021ee:	427f      	negs	r7, r7
 80021f0:	1ac9      	subs	r1, r1, r3
 80021f2:	1bcb      	subs	r3, r1, r7
 80021f4:	4699      	mov	r9, r3
 80021f6:	465d      	mov	r5, fp
 80021f8:	e5d5      	b.n	8001da6 <__aeabi_dsub+0xb2>
 80021fa:	08ff      	lsrs	r7, r7, #3
 80021fc:	074b      	lsls	r3, r1, #29
 80021fe:	465d      	mov	r5, fp
 8002200:	433b      	orrs	r3, r7
 8002202:	08cc      	lsrs	r4, r1, #3
 8002204:	e6ee      	b.n	8001fe4 <__aeabi_dsub+0x2f0>
 8002206:	4662      	mov	r2, ip
 8002208:	431a      	orrs	r2, r3
 800220a:	d000      	beq.n	800220e <__aeabi_dsub+0x51a>
 800220c:	e082      	b.n	8002314 <__aeabi_dsub+0x620>
 800220e:	000b      	movs	r3, r1
 8002210:	433b      	orrs	r3, r7
 8002212:	d11b      	bne.n	800224c <__aeabi_dsub+0x558>
 8002214:	2480      	movs	r4, #128	; 0x80
 8002216:	2500      	movs	r5, #0
 8002218:	0324      	lsls	r4, r4, #12
 800221a:	e6f9      	b.n	8002010 <__aeabi_dsub+0x31c>
 800221c:	19dc      	adds	r4, r3, r7
 800221e:	429c      	cmp	r4, r3
 8002220:	419b      	sbcs	r3, r3
 8002222:	4461      	add	r1, ip
 8002224:	4689      	mov	r9, r1
 8002226:	425b      	negs	r3, r3
 8002228:	4499      	add	r9, r3
 800222a:	464b      	mov	r3, r9
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	d444      	bmi.n	80022ba <__aeabi_dsub+0x5c6>
 8002230:	2301      	movs	r3, #1
 8002232:	4698      	mov	r8, r3
 8002234:	e6cc      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 8002236:	1bdc      	subs	r4, r3, r7
 8002238:	4662      	mov	r2, ip
 800223a:	42a3      	cmp	r3, r4
 800223c:	419b      	sbcs	r3, r3
 800223e:	1a51      	subs	r1, r2, r1
 8002240:	425b      	negs	r3, r3
 8002242:	1acb      	subs	r3, r1, r3
 8002244:	4699      	mov	r9, r3
 8002246:	2301      	movs	r3, #1
 8002248:	4698      	mov	r8, r3
 800224a:	e5a4      	b.n	8001d96 <__aeabi_dsub+0xa2>
 800224c:	08ff      	lsrs	r7, r7, #3
 800224e:	074b      	lsls	r3, r1, #29
 8002250:	465d      	mov	r5, fp
 8002252:	433b      	orrs	r3, r7
 8002254:	08cc      	lsrs	r4, r1, #3
 8002256:	e6d7      	b.n	8002008 <__aeabi_dsub+0x314>
 8002258:	4662      	mov	r2, ip
 800225a:	431a      	orrs	r2, r3
 800225c:	0014      	movs	r4, r2
 800225e:	1e63      	subs	r3, r4, #1
 8002260:	419c      	sbcs	r4, r3
 8002262:	e679      	b.n	8001f58 <__aeabi_dsub+0x264>
 8002264:	0015      	movs	r5, r2
 8002266:	4664      	mov	r4, ip
 8002268:	3d20      	subs	r5, #32
 800226a:	40ec      	lsrs	r4, r5
 800226c:	46a0      	mov	r8, r4
 800226e:	2a20      	cmp	r2, #32
 8002270:	d005      	beq.n	800227e <__aeabi_dsub+0x58a>
 8002272:	2540      	movs	r5, #64	; 0x40
 8002274:	4664      	mov	r4, ip
 8002276:	1aaa      	subs	r2, r5, r2
 8002278:	4094      	lsls	r4, r2
 800227a:	4323      	orrs	r3, r4
 800227c:	469a      	mov	sl, r3
 800227e:	4654      	mov	r4, sl
 8002280:	1e63      	subs	r3, r4, #1
 8002282:	419c      	sbcs	r4, r3
 8002284:	4643      	mov	r3, r8
 8002286:	4323      	orrs	r3, r4
 8002288:	e773      	b.n	8002172 <__aeabi_dsub+0x47e>
 800228a:	4662      	mov	r2, ip
 800228c:	431a      	orrs	r2, r3
 800228e:	d023      	beq.n	80022d8 <__aeabi_dsub+0x5e4>
 8002290:	000a      	movs	r2, r1
 8002292:	433a      	orrs	r2, r7
 8002294:	d000      	beq.n	8002298 <__aeabi_dsub+0x5a4>
 8002296:	e0a0      	b.n	80023da <__aeabi_dsub+0x6e6>
 8002298:	4662      	mov	r2, ip
 800229a:	08db      	lsrs	r3, r3, #3
 800229c:	0752      	lsls	r2, r2, #29
 800229e:	4313      	orrs	r3, r2
 80022a0:	4662      	mov	r2, ip
 80022a2:	08d4      	lsrs	r4, r2, #3
 80022a4:	e6b0      	b.n	8002008 <__aeabi_dsub+0x314>
 80022a6:	000b      	movs	r3, r1
 80022a8:	433b      	orrs	r3, r7
 80022aa:	d100      	bne.n	80022ae <__aeabi_dsub+0x5ba>
 80022ac:	e728      	b.n	8002100 <__aeabi_dsub+0x40c>
 80022ae:	08ff      	lsrs	r7, r7, #3
 80022b0:	074b      	lsls	r3, r1, #29
 80022b2:	465d      	mov	r5, fp
 80022b4:	433b      	orrs	r3, r7
 80022b6:	08cc      	lsrs	r4, r1, #3
 80022b8:	e697      	b.n	8001fea <__aeabi_dsub+0x2f6>
 80022ba:	2302      	movs	r3, #2
 80022bc:	4698      	mov	r8, r3
 80022be:	e736      	b.n	800212e <__aeabi_dsub+0x43a>
 80022c0:	1afc      	subs	r4, r7, r3
 80022c2:	42a7      	cmp	r7, r4
 80022c4:	41bf      	sbcs	r7, r7
 80022c6:	4663      	mov	r3, ip
 80022c8:	427f      	negs	r7, r7
 80022ca:	1ac9      	subs	r1, r1, r3
 80022cc:	1bcb      	subs	r3, r1, r7
 80022ce:	4699      	mov	r9, r3
 80022d0:	2301      	movs	r3, #1
 80022d2:	465d      	mov	r5, fp
 80022d4:	4698      	mov	r8, r3
 80022d6:	e55e      	b.n	8001d96 <__aeabi_dsub+0xa2>
 80022d8:	074b      	lsls	r3, r1, #29
 80022da:	08ff      	lsrs	r7, r7, #3
 80022dc:	433b      	orrs	r3, r7
 80022de:	08cc      	lsrs	r4, r1, #3
 80022e0:	e692      	b.n	8002008 <__aeabi_dsub+0x314>
 80022e2:	1bdc      	subs	r4, r3, r7
 80022e4:	4660      	mov	r0, ip
 80022e6:	42a3      	cmp	r3, r4
 80022e8:	41b6      	sbcs	r6, r6
 80022ea:	1a40      	subs	r0, r0, r1
 80022ec:	4276      	negs	r6, r6
 80022ee:	1b80      	subs	r0, r0, r6
 80022f0:	4681      	mov	r9, r0
 80022f2:	0200      	lsls	r0, r0, #8
 80022f4:	d560      	bpl.n	80023b8 <__aeabi_dsub+0x6c4>
 80022f6:	1afc      	subs	r4, r7, r3
 80022f8:	42a7      	cmp	r7, r4
 80022fa:	41bf      	sbcs	r7, r7
 80022fc:	4663      	mov	r3, ip
 80022fe:	427f      	negs	r7, r7
 8002300:	1ac9      	subs	r1, r1, r3
 8002302:	1bcb      	subs	r3, r1, r7
 8002304:	4699      	mov	r9, r3
 8002306:	465d      	mov	r5, fp
 8002308:	e576      	b.n	8001df8 <__aeabi_dsub+0x104>
 800230a:	08ff      	lsrs	r7, r7, #3
 800230c:	074b      	lsls	r3, r1, #29
 800230e:	433b      	orrs	r3, r7
 8002310:	08cc      	lsrs	r4, r1, #3
 8002312:	e667      	b.n	8001fe4 <__aeabi_dsub+0x2f0>
 8002314:	000a      	movs	r2, r1
 8002316:	08db      	lsrs	r3, r3, #3
 8002318:	433a      	orrs	r2, r7
 800231a:	d100      	bne.n	800231e <__aeabi_dsub+0x62a>
 800231c:	e66f      	b.n	8001ffe <__aeabi_dsub+0x30a>
 800231e:	4662      	mov	r2, ip
 8002320:	0752      	lsls	r2, r2, #29
 8002322:	4313      	orrs	r3, r2
 8002324:	4662      	mov	r2, ip
 8002326:	08d4      	lsrs	r4, r2, #3
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	0312      	lsls	r2, r2, #12
 800232c:	4214      	tst	r4, r2
 800232e:	d007      	beq.n	8002340 <__aeabi_dsub+0x64c>
 8002330:	08c8      	lsrs	r0, r1, #3
 8002332:	4210      	tst	r0, r2
 8002334:	d104      	bne.n	8002340 <__aeabi_dsub+0x64c>
 8002336:	465d      	mov	r5, fp
 8002338:	0004      	movs	r4, r0
 800233a:	08fb      	lsrs	r3, r7, #3
 800233c:	0749      	lsls	r1, r1, #29
 800233e:	430b      	orrs	r3, r1
 8002340:	0f5a      	lsrs	r2, r3, #29
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	08db      	lsrs	r3, r3, #3
 8002346:	0752      	lsls	r2, r2, #29
 8002348:	4313      	orrs	r3, r2
 800234a:	e65d      	b.n	8002008 <__aeabi_dsub+0x314>
 800234c:	074b      	lsls	r3, r1, #29
 800234e:	08ff      	lsrs	r7, r7, #3
 8002350:	433b      	orrs	r3, r7
 8002352:	08cc      	lsrs	r4, r1, #3
 8002354:	e649      	b.n	8001fea <__aeabi_dsub+0x2f6>
 8002356:	19dc      	adds	r4, r3, r7
 8002358:	429c      	cmp	r4, r3
 800235a:	419b      	sbcs	r3, r3
 800235c:	4461      	add	r1, ip
 800235e:	4689      	mov	r9, r1
 8002360:	425b      	negs	r3, r3
 8002362:	4499      	add	r9, r3
 8002364:	464b      	mov	r3, r9
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	d400      	bmi.n	800236c <__aeabi_dsub+0x678>
 800236a:	e631      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 800236c:	464a      	mov	r2, r9
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <__aeabi_dsub+0x6d8>)
 8002370:	401a      	ands	r2, r3
 8002372:	2301      	movs	r3, #1
 8002374:	4691      	mov	r9, r2
 8002376:	4698      	mov	r8, r3
 8002378:	e62a      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 800237a:	0016      	movs	r6, r2
 800237c:	4664      	mov	r4, ip
 800237e:	3e20      	subs	r6, #32
 8002380:	40f4      	lsrs	r4, r6
 8002382:	46a0      	mov	r8, r4
 8002384:	2a20      	cmp	r2, #32
 8002386:	d005      	beq.n	8002394 <__aeabi_dsub+0x6a0>
 8002388:	2640      	movs	r6, #64	; 0x40
 800238a:	4664      	mov	r4, ip
 800238c:	1ab2      	subs	r2, r6, r2
 800238e:	4094      	lsls	r4, r2
 8002390:	4323      	orrs	r3, r4
 8002392:	469a      	mov	sl, r3
 8002394:	4654      	mov	r4, sl
 8002396:	1e63      	subs	r3, r4, #1
 8002398:	419c      	sbcs	r4, r3
 800239a:	4643      	mov	r3, r8
 800239c:	431c      	orrs	r4, r3
 800239e:	e5db      	b.n	8001f58 <__aeabi_dsub+0x264>
 80023a0:	0002      	movs	r2, r0
 80023a2:	2400      	movs	r4, #0
 80023a4:	2300      	movs	r3, #0
 80023a6:	e548      	b.n	8001e3a <__aeabi_dsub+0x146>
 80023a8:	19dc      	adds	r4, r3, r7
 80023aa:	42bc      	cmp	r4, r7
 80023ac:	41bf      	sbcs	r7, r7
 80023ae:	4461      	add	r1, ip
 80023b0:	4689      	mov	r9, r1
 80023b2:	427f      	negs	r7, r7
 80023b4:	44b9      	add	r9, r7
 80023b6:	e738      	b.n	800222a <__aeabi_dsub+0x536>
 80023b8:	464b      	mov	r3, r9
 80023ba:	4323      	orrs	r3, r4
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dsub+0x6cc>
 80023be:	e69f      	b.n	8002100 <__aeabi_dsub+0x40c>
 80023c0:	e606      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	000007fe 	.word	0x000007fe
 80023c8:	000007ff 	.word	0x000007ff
 80023cc:	ff7fffff 	.word	0xff7fffff
 80023d0:	08ff      	lsrs	r7, r7, #3
 80023d2:	074b      	lsls	r3, r1, #29
 80023d4:	433b      	orrs	r3, r7
 80023d6:	08cc      	lsrs	r4, r1, #3
 80023d8:	e616      	b.n	8002008 <__aeabi_dsub+0x314>
 80023da:	4662      	mov	r2, ip
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	0752      	lsls	r2, r2, #29
 80023e0:	4313      	orrs	r3, r2
 80023e2:	4662      	mov	r2, ip
 80023e4:	08d4      	lsrs	r4, r2, #3
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	0312      	lsls	r2, r2, #12
 80023ea:	4214      	tst	r4, r2
 80023ec:	d007      	beq.n	80023fe <__aeabi_dsub+0x70a>
 80023ee:	08c8      	lsrs	r0, r1, #3
 80023f0:	4210      	tst	r0, r2
 80023f2:	d104      	bne.n	80023fe <__aeabi_dsub+0x70a>
 80023f4:	465d      	mov	r5, fp
 80023f6:	0004      	movs	r4, r0
 80023f8:	08fb      	lsrs	r3, r7, #3
 80023fa:	0749      	lsls	r1, r1, #29
 80023fc:	430b      	orrs	r3, r1
 80023fe:	0f5a      	lsrs	r2, r3, #29
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	0752      	lsls	r2, r2, #29
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	4313      	orrs	r3, r2
 8002408:	e5fe      	b.n	8002008 <__aeabi_dsub+0x314>
 800240a:	2300      	movs	r3, #0
 800240c:	4a01      	ldr	r2, [pc, #4]	; (8002414 <__aeabi_dsub+0x720>)
 800240e:	001c      	movs	r4, r3
 8002410:	e513      	b.n	8001e3a <__aeabi_dsub+0x146>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	000007ff 	.word	0x000007ff

08002418 <__aeabi_dcmpun>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	0005      	movs	r5, r0
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <__aeabi_dcmpun+0x38>)
 800241e:	031c      	lsls	r4, r3, #12
 8002420:	0016      	movs	r6, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	030a      	lsls	r2, r1, #12
 8002426:	0049      	lsls	r1, r1, #1
 8002428:	0b12      	lsrs	r2, r2, #12
 800242a:	0d49      	lsrs	r1, r1, #21
 800242c:	0b24      	lsrs	r4, r4, #12
 800242e:	0d5b      	lsrs	r3, r3, #21
 8002430:	4281      	cmp	r1, r0
 8002432:	d008      	beq.n	8002446 <__aeabi_dcmpun+0x2e>
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <__aeabi_dcmpun+0x38>)
 8002436:	2000      	movs	r0, #0
 8002438:	4293      	cmp	r3, r2
 800243a:	d103      	bne.n	8002444 <__aeabi_dcmpun+0x2c>
 800243c:	0020      	movs	r0, r4
 800243e:	4330      	orrs	r0, r6
 8002440:	1e43      	subs	r3, r0, #1
 8002442:	4198      	sbcs	r0, r3
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	2001      	movs	r0, #1
 8002448:	432a      	orrs	r2, r5
 800244a:	d1fb      	bne.n	8002444 <__aeabi_dcmpun+0x2c>
 800244c:	e7f2      	b.n	8002434 <__aeabi_dcmpun+0x1c>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__aeabi_d2iz>:
 8002454:	000a      	movs	r2, r1
 8002456:	b530      	push	{r4, r5, lr}
 8002458:	4c13      	ldr	r4, [pc, #76]	; (80024a8 <__aeabi_d2iz+0x54>)
 800245a:	0053      	lsls	r3, r2, #1
 800245c:	0309      	lsls	r1, r1, #12
 800245e:	0005      	movs	r5, r0
 8002460:	0b09      	lsrs	r1, r1, #12
 8002462:	2000      	movs	r0, #0
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	0fd2      	lsrs	r2, r2, #31
 8002468:	42a3      	cmp	r3, r4
 800246a:	dd04      	ble.n	8002476 <__aeabi_d2iz+0x22>
 800246c:	480f      	ldr	r0, [pc, #60]	; (80024ac <__aeabi_d2iz+0x58>)
 800246e:	4283      	cmp	r3, r0
 8002470:	dd02      	ble.n	8002478 <__aeabi_d2iz+0x24>
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <__aeabi_d2iz+0x5c>)
 8002474:	18d0      	adds	r0, r2, r3
 8002476:	bd30      	pop	{r4, r5, pc}
 8002478:	2080      	movs	r0, #128	; 0x80
 800247a:	0340      	lsls	r0, r0, #13
 800247c:	4301      	orrs	r1, r0
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <__aeabi_d2iz+0x60>)
 8002480:	1ac0      	subs	r0, r0, r3
 8002482:	281f      	cmp	r0, #31
 8002484:	dd08      	ble.n	8002498 <__aeabi_d2iz+0x44>
 8002486:	480c      	ldr	r0, [pc, #48]	; (80024b8 <__aeabi_d2iz+0x64>)
 8002488:	1ac3      	subs	r3, r0, r3
 800248a:	40d9      	lsrs	r1, r3
 800248c:	000b      	movs	r3, r1
 800248e:	4258      	negs	r0, r3
 8002490:	2a00      	cmp	r2, #0
 8002492:	d1f0      	bne.n	8002476 <__aeabi_d2iz+0x22>
 8002494:	0018      	movs	r0, r3
 8002496:	e7ee      	b.n	8002476 <__aeabi_d2iz+0x22>
 8002498:	4c08      	ldr	r4, [pc, #32]	; (80024bc <__aeabi_d2iz+0x68>)
 800249a:	40c5      	lsrs	r5, r0
 800249c:	46a4      	mov	ip, r4
 800249e:	4463      	add	r3, ip
 80024a0:	4099      	lsls	r1, r3
 80024a2:	000b      	movs	r3, r1
 80024a4:	432b      	orrs	r3, r5
 80024a6:	e7f2      	b.n	800248e <__aeabi_d2iz+0x3a>
 80024a8:	000003fe 	.word	0x000003fe
 80024ac:	0000041d 	.word	0x0000041d
 80024b0:	7fffffff 	.word	0x7fffffff
 80024b4:	00000433 	.word	0x00000433
 80024b8:	00000413 	.word	0x00000413
 80024bc:	fffffbed 	.word	0xfffffbed

080024c0 <__aeabi_i2d>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d016      	beq.n	80024f4 <__aeabi_i2d+0x34>
 80024c6:	17c3      	asrs	r3, r0, #31
 80024c8:	18c5      	adds	r5, r0, r3
 80024ca:	405d      	eors	r5, r3
 80024cc:	0fc4      	lsrs	r4, r0, #31
 80024ce:	0028      	movs	r0, r5
 80024d0:	f000 f894 	bl	80025fc <__clzsi2>
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <__aeabi_i2d+0x5c>)
 80024d6:	1a12      	subs	r2, r2, r0
 80024d8:	280a      	cmp	r0, #10
 80024da:	dc16      	bgt.n	800250a <__aeabi_i2d+0x4a>
 80024dc:	0003      	movs	r3, r0
 80024de:	002e      	movs	r6, r5
 80024e0:	3315      	adds	r3, #21
 80024e2:	409e      	lsls	r6, r3
 80024e4:	230b      	movs	r3, #11
 80024e6:	1a18      	subs	r0, r3, r0
 80024e8:	40c5      	lsrs	r5, r0
 80024ea:	0552      	lsls	r2, r2, #21
 80024ec:	032d      	lsls	r5, r5, #12
 80024ee:	0b2d      	lsrs	r5, r5, #12
 80024f0:	0d53      	lsrs	r3, r2, #21
 80024f2:	e003      	b.n	80024fc <__aeabi_i2d+0x3c>
 80024f4:	2400      	movs	r4, #0
 80024f6:	2300      	movs	r3, #0
 80024f8:	2500      	movs	r5, #0
 80024fa:	2600      	movs	r6, #0
 80024fc:	051b      	lsls	r3, r3, #20
 80024fe:	432b      	orrs	r3, r5
 8002500:	07e4      	lsls	r4, r4, #31
 8002502:	4323      	orrs	r3, r4
 8002504:	0030      	movs	r0, r6
 8002506:	0019      	movs	r1, r3
 8002508:	bd70      	pop	{r4, r5, r6, pc}
 800250a:	380b      	subs	r0, #11
 800250c:	4085      	lsls	r5, r0
 800250e:	0552      	lsls	r2, r2, #21
 8002510:	032d      	lsls	r5, r5, #12
 8002512:	2600      	movs	r6, #0
 8002514:	0b2d      	lsrs	r5, r5, #12
 8002516:	0d53      	lsrs	r3, r2, #21
 8002518:	e7f0      	b.n	80024fc <__aeabi_i2d+0x3c>
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	0000041e 	.word	0x0000041e

08002520 <__aeabi_ui2d>:
 8002520:	b510      	push	{r4, lr}
 8002522:	1e04      	subs	r4, r0, #0
 8002524:	d010      	beq.n	8002548 <__aeabi_ui2d+0x28>
 8002526:	f000 f869 	bl	80025fc <__clzsi2>
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <__aeabi_ui2d+0x48>)
 800252c:	1a1b      	subs	r3, r3, r0
 800252e:	280a      	cmp	r0, #10
 8002530:	dc11      	bgt.n	8002556 <__aeabi_ui2d+0x36>
 8002532:	220b      	movs	r2, #11
 8002534:	0021      	movs	r1, r4
 8002536:	1a12      	subs	r2, r2, r0
 8002538:	40d1      	lsrs	r1, r2
 800253a:	3015      	adds	r0, #21
 800253c:	030a      	lsls	r2, r1, #12
 800253e:	055b      	lsls	r3, r3, #21
 8002540:	4084      	lsls	r4, r0
 8002542:	0b12      	lsrs	r2, r2, #12
 8002544:	0d5b      	lsrs	r3, r3, #21
 8002546:	e001      	b.n	800254c <__aeabi_ui2d+0x2c>
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	051b      	lsls	r3, r3, #20
 800254e:	4313      	orrs	r3, r2
 8002550:	0020      	movs	r0, r4
 8002552:	0019      	movs	r1, r3
 8002554:	bd10      	pop	{r4, pc}
 8002556:	0022      	movs	r2, r4
 8002558:	380b      	subs	r0, #11
 800255a:	4082      	lsls	r2, r0
 800255c:	055b      	lsls	r3, r3, #21
 800255e:	0312      	lsls	r2, r2, #12
 8002560:	2400      	movs	r4, #0
 8002562:	0b12      	lsrs	r2, r2, #12
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	e7f1      	b.n	800254c <__aeabi_ui2d+0x2c>
 8002568:	0000041e 	.word	0x0000041e

0800256c <__aeabi_f2d>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	0043      	lsls	r3, r0, #1
 8002570:	0246      	lsls	r6, r0, #9
 8002572:	0fc4      	lsrs	r4, r0, #31
 8002574:	20fe      	movs	r0, #254	; 0xfe
 8002576:	0e1b      	lsrs	r3, r3, #24
 8002578:	1c59      	adds	r1, r3, #1
 800257a:	0a75      	lsrs	r5, r6, #9
 800257c:	4208      	tst	r0, r1
 800257e:	d00c      	beq.n	800259a <__aeabi_f2d+0x2e>
 8002580:	22e0      	movs	r2, #224	; 0xe0
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	4694      	mov	ip, r2
 8002586:	076d      	lsls	r5, r5, #29
 8002588:	0b36      	lsrs	r6, r6, #12
 800258a:	4463      	add	r3, ip
 800258c:	051b      	lsls	r3, r3, #20
 800258e:	4333      	orrs	r3, r6
 8002590:	07e4      	lsls	r4, r4, #31
 8002592:	4323      	orrs	r3, r4
 8002594:	0028      	movs	r0, r5
 8002596:	0019      	movs	r1, r3
 8002598:	bd70      	pop	{r4, r5, r6, pc}
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <__aeabi_f2d+0x5c>
 800259e:	2d00      	cmp	r5, #0
 80025a0:	d01b      	beq.n	80025da <__aeabi_f2d+0x6e>
 80025a2:	0028      	movs	r0, r5
 80025a4:	f000 f82a 	bl	80025fc <__clzsi2>
 80025a8:	280a      	cmp	r0, #10
 80025aa:	dc1c      	bgt.n	80025e6 <__aeabi_f2d+0x7a>
 80025ac:	230b      	movs	r3, #11
 80025ae:	002e      	movs	r6, r5
 80025b0:	1a1b      	subs	r3, r3, r0
 80025b2:	40de      	lsrs	r6, r3
 80025b4:	0003      	movs	r3, r0
 80025b6:	3315      	adds	r3, #21
 80025b8:	409d      	lsls	r5, r3
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <__aeabi_f2d+0x88>)
 80025bc:	0336      	lsls	r6, r6, #12
 80025be:	1a12      	subs	r2, r2, r0
 80025c0:	0552      	lsls	r2, r2, #21
 80025c2:	0b36      	lsrs	r6, r6, #12
 80025c4:	0d53      	lsrs	r3, r2, #21
 80025c6:	e7e1      	b.n	800258c <__aeabi_f2d+0x20>
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d009      	beq.n	80025e0 <__aeabi_f2d+0x74>
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	0b36      	lsrs	r6, r6, #12
 80025d0:	0312      	lsls	r2, r2, #12
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <__aeabi_f2d+0x8c>)
 80025d4:	076d      	lsls	r5, r5, #29
 80025d6:	4316      	orrs	r6, r2
 80025d8:	e7d8      	b.n	800258c <__aeabi_f2d+0x20>
 80025da:	2300      	movs	r3, #0
 80025dc:	2600      	movs	r6, #0
 80025de:	e7d5      	b.n	800258c <__aeabi_f2d+0x20>
 80025e0:	2600      	movs	r6, #0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <__aeabi_f2d+0x8c>)
 80025e4:	e7d2      	b.n	800258c <__aeabi_f2d+0x20>
 80025e6:	0003      	movs	r3, r0
 80025e8:	3b0b      	subs	r3, #11
 80025ea:	409d      	lsls	r5, r3
 80025ec:	002e      	movs	r6, r5
 80025ee:	2500      	movs	r5, #0
 80025f0:	e7e3      	b.n	80025ba <__aeabi_f2d+0x4e>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	00000389 	.word	0x00000389
 80025f8:	000007ff 	.word	0x000007ff

080025fc <__clzsi2>:
 80025fc:	211c      	movs	r1, #28
 80025fe:	2301      	movs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0xe>
 8002606:	0c00      	lsrs	r0, r0, #16
 8002608:	3910      	subs	r1, #16
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	4298      	cmp	r0, r3
 800260e:	d301      	bcc.n	8002614 <__clzsi2+0x18>
 8002610:	0a00      	lsrs	r0, r0, #8
 8002612:	3908      	subs	r1, #8
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	4298      	cmp	r0, r3
 8002618:	d301      	bcc.n	800261e <__clzsi2+0x22>
 800261a:	0900      	lsrs	r0, r0, #4
 800261c:	3904      	subs	r1, #4
 800261e:	a202      	add	r2, pc, #8	; (adr r2, 8002628 <__clzsi2+0x2c>)
 8002620:	5c10      	ldrb	r0, [r2, r0]
 8002622:	1840      	adds	r0, r0, r1
 8002624:	4770      	bx	lr
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	02020304 	.word	0x02020304
 800262c:	01010101 	.word	0x01010101
	...

08002638 <read_keys>:
  while (__HAL_TIM_GET_COUNTER(&htim1) < us)
    ; // wait for the counter to reach the us input in the parameter
}

void read_keys(int report)
{
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af02      	add	r7, sp, #8
 800263e:	6078      	str	r0, [r7, #4]
  uint8_t MSG[16];
  for (int i = 0; i < KEYBOARD_N_COLUMNS; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	e0b8      	b.n	80027b8 <read_keys+0x180>
  {

    HAL_GPIO_WritePin(KEYBOARD_COLUMN_PORT[i], KEYBOARD_COLUMN_PINS[i], 1);
 8002646:	4b61      	ldr	r3, [pc, #388]	; (80027cc <read_keys+0x194>)
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	58d0      	ldr	r0, [r2, r3]
 800264e:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <read_keys+0x198>)
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	0052      	lsls	r2, r2, #1
 8002654:	5ad3      	ldrh	r3, [r2, r3]
 8002656:	2201      	movs	r2, #1
 8002658:	0019      	movs	r1, r3
 800265a:	f001 fb18 	bl	8003c8e <HAL_GPIO_WritePin>

    for (int j = 0; j < KEYBOARD_N_ROWS; j++)
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	e096      	b.n	8002792 <read_keys+0x15a>
    {

      KEYBOARD_STATE_LAST[i][j] = KEYBOARD_STATE[i][j];
 8002664:	495b      	ldr	r1, [pc, #364]	; (80027d4 <read_keys+0x19c>)
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	0013      	movs	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	189b      	adds	r3, r3, r2
 800266e:	18ca      	adds	r2, r1, r3
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	18d3      	adds	r3, r2, r3
 8002674:	7818      	ldrb	r0, [r3, #0]
 8002676:	4958      	ldr	r1, [pc, #352]	; (80027d8 <read_keys+0x1a0>)
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	0013      	movs	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	189b      	adds	r3, r3, r2
 8002680:	18ca      	adds	r2, r1, r3
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	18d3      	adds	r3, r2, r3
 8002686:	1c02      	adds	r2, r0, #0
 8002688:	701a      	strb	r2, [r3, #0]
      KEYBOARD_STATE[i][j] = HAL_GPIO_ReadPin(KEYBOARD_ROW_PORT[j], KEYBOARD_ROW_PINS[j]);
 800268a:	4b54      	ldr	r3, [pc, #336]	; (80027dc <read_keys+0x1a4>)
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	58d0      	ldr	r0, [r2, r3]
 8002692:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <read_keys+0x1a8>)
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	0052      	lsls	r2, r2, #1
 8002698:	5ad3      	ldrh	r3, [r2, r3]
 800269a:	0019      	movs	r1, r3
 800269c:	f001 fada 	bl	8003c54 <HAL_GPIO_ReadPin>
 80026a0:	0003      	movs	r3, r0
 80026a2:	0018      	movs	r0, r3
 80026a4:	494b      	ldr	r1, [pc, #300]	; (80027d4 <read_keys+0x19c>)
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	0013      	movs	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	189b      	adds	r3, r3, r2
 80026ae:	18ca      	adds	r2, r1, r3
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	18d3      	adds	r3, r2, r3
 80026b4:	1c02      	adds	r2, r0, #0
 80026b6:	701a      	strb	r2, [r3, #0]

      if (KEYBOARD_STATE_LAST[i][j] != KEYBOARD_STATE[i][j])
 80026b8:	4947      	ldr	r1, [pc, #284]	; (80027d8 <read_keys+0x1a0>)
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	0013      	movs	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	18ca      	adds	r2, r1, r3
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	18d3      	adds	r3, r2, r3
 80026c8:	7819      	ldrb	r1, [r3, #0]
 80026ca:	4842      	ldr	r0, [pc, #264]	; (80027d4 <read_keys+0x19c>)
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	0013      	movs	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	18c2      	adds	r2, r0, r3
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	18d3      	adds	r3, r2, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4299      	cmp	r1, r3
 80026de:	d055      	beq.n	800278c <read_keys+0x154>
      {
        KEYBOARD_PUSHED[i][j] = KEYBOARD_STATE[i][j];
 80026e0:	493c      	ldr	r1, [pc, #240]	; (80027d4 <read_keys+0x19c>)
 80026e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e4:	0013      	movs	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	18ca      	adds	r2, r1, r3
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	18d3      	adds	r3, r2, r3
 80026f0:	7818      	ldrb	r0, [r3, #0]
 80026f2:	493c      	ldr	r1, [pc, #240]	; (80027e4 <read_keys+0x1ac>)
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	0013      	movs	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	189b      	adds	r3, r3, r2
 80026fc:	18ca      	adds	r2, r1, r3
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	18d3      	adds	r3, r2, r3
 8002702:	1c02      	adds	r2, r0, #0
 8002704:	701a      	strb	r2, [r3, #0]
        KEYBOARD_RELEASED[i][j] = !KEYBOARD_STATE[i][j];
 8002706:	4933      	ldr	r1, [pc, #204]	; (80027d4 <read_keys+0x19c>)
 8002708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270a:	0013      	movs	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	189b      	adds	r3, r3, r2
 8002710:	18ca      	adds	r2, r1, r3
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	18d3      	adds	r3, r2, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	425a      	negs	r2, r3
 800271a:	4153      	adcs	r3, r2
 800271c:	b2db      	uxtb	r3, r3
 800271e:	0018      	movs	r0, r3
 8002720:	4931      	ldr	r1, [pc, #196]	; (80027e8 <read_keys+0x1b0>)
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	0013      	movs	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	189b      	adds	r3, r3, r2
 800272a:	18ca      	adds	r2, r1, r3
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	18d3      	adds	r3, r2, r3
 8002730:	1c02      	adds	r2, r0, #0
 8002732:	701a      	strb	r2, [r3, #0]
        memset(MSG, 0, sizeof(MSG));
 8002734:	2510      	movs	r5, #16
 8002736:	197b      	adds	r3, r7, r5
 8002738:	2210      	movs	r2, #16
 800273a:	2100      	movs	r1, #0
 800273c:	0018      	movs	r0, r3
 800273e:	f003 fe89 	bl	8006454 <memset>
        int msglength;
        sprintf(MSG, KEYBOARD_NTA_FORMAT, i + KEYBOARD_N_COLUMNS * j, KEYBOARD_STATE[i][j], &msglength);
 8002742:	6a3a      	ldr	r2, [r7, #32]
 8002744:	0013      	movs	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	001a      	movs	r2, r3
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	18d4      	adds	r4, r2, r3
 8002752:	4920      	ldr	r1, [pc, #128]	; (80027d4 <read_keys+0x19c>)
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	0013      	movs	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	189b      	adds	r3, r3, r2
 800275c:	18ca      	adds	r2, r1, r3
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	18d3      	adds	r3, r2, r3
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	001a      	movs	r2, r3
 8002766:	4921      	ldr	r1, [pc, #132]	; (80027ec <read_keys+0x1b4>)
 8002768:	1978      	adds	r0, r7, r5
 800276a:	230c      	movs	r3, #12
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	0013      	movs	r3, r2
 8002772:	0022      	movs	r2, r4
 8002774:	f004 fae4 	bl	8006d40 <siprintf>
        if (report)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <read_keys+0x154>
          HAL_UART_Transmit(&huart2, MSG, msglength * sizeof(char), 100);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	b29a      	uxth	r2, r3
 8002782:	1979      	adds	r1, r7, r5
 8002784:	481a      	ldr	r0, [pc, #104]	; (80027f0 <read_keys+0x1b8>)
 8002786:	2364      	movs	r3, #100	; 0x64
 8002788:	f003 fa6a 	bl	8005c60 <HAL_UART_Transmit>
    for (int j = 0; j < KEYBOARD_N_ROWS; j++)
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	3301      	adds	r3, #1
 8002790:	623b      	str	r3, [r7, #32]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	2b04      	cmp	r3, #4
 8002796:	dc00      	bgt.n	800279a <read_keys+0x162>
 8002798:	e764      	b.n	8002664 <read_keys+0x2c>
      }
    }

    HAL_GPIO_WritePin(KEYBOARD_COLUMN_PORT[i], KEYBOARD_COLUMN_PINS[i], 0);
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <read_keys+0x194>)
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	58d0      	ldr	r0, [r2, r3]
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <read_keys+0x198>)
 80027a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a6:	0052      	lsls	r2, r2, #1
 80027a8:	5ad3      	ldrh	r3, [r2, r3]
 80027aa:	2200      	movs	r2, #0
 80027ac:	0019      	movs	r1, r3
 80027ae:	f001 fa6e 	bl	8003c8e <HAL_GPIO_WritePin>
  for (int i = 0; i < KEYBOARD_N_COLUMNS; i++)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	3301      	adds	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	2b0d      	cmp	r3, #13
 80027bc:	dc00      	bgt.n	80027c0 <read_keys+0x188>
 80027be:	e742      	b.n	8002646 <read_keys+0xe>
  };
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b00a      	add	sp, #40	; 0x28
 80027c8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	2000001c 	.word	0x2000001c
 80027d0:	20000000 	.word	0x20000000
 80027d4:	200003a0 	.word	0x200003a0
 80027d8:	200003e8 	.word	0x200003e8
 80027dc:	20000060 	.word	0x20000060
 80027e0:	20000054 	.word	0x20000054
 80027e4:	20000430 	.word	0x20000430
 80027e8:	20000478 	.word	0x20000478
 80027ec:	080093ec 	.word	0x080093ec
 80027f0:	2000030c 	.word	0x2000030c

080027f4 <print_adc>:

void print_adc()
{
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f6:	b0c3      	sub	sp, #268	; 0x10c
 80027f8:	af04      	add	r7, sp, #16
  uint8_t writer = 0b10010000;
 80027fa:	21e7      	movs	r1, #231	; 0xe7
 80027fc:	187b      	adds	r3, r7, r1
 80027fe:	2290      	movs	r2, #144	; 0x90
 8002800:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, 75 << 1, 0x3, I2C_MEMADD_SIZE_8BIT, &writer, 1, 0xFFF);
 8002802:	4859      	ldr	r0, [pc, #356]	; (8002968 <print_adc+0x174>)
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <print_adc+0x178>)
 8002806:	9302      	str	r3, [sp, #8]
 8002808:	2301      	movs	r3, #1
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	187b      	adds	r3, r7, r1
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2301      	movs	r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	2196      	movs	r1, #150	; 0x96
 8002816:	f001 faed 	bl	8003df4 <HAL_I2C_Mem_Write>
  uint8_t MSG[128] = {"\e[3J\033c\e[1;34mADC READS:\e[0m\r\n\n\n\n\n"};
 800281a:	2464      	movs	r4, #100	; 0x64
 800281c:	1939      	adds	r1, r7, r4
 800281e:	4a54      	ldr	r2, [pc, #336]	; (8002970 <print_adc+0x17c>)
 8002820:	000b      	movs	r3, r1
 8002822:	ca61      	ldmia	r2!, {r0, r5, r6}
 8002824:	c361      	stmia	r3!, {r0, r5, r6}
 8002826:	ca61      	ldmia	r2!, {r0, r5, r6}
 8002828:	c361      	stmia	r3!, {r0, r5, r6}
 800282a:	ca21      	ldmia	r2!, {r0, r5}
 800282c:	c321      	stmia	r3!, {r0, r5}
 800282e:	8812      	ldrh	r2, [r2, #0]
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	2322      	movs	r3, #34	; 0x22
 8002834:	18cb      	adds	r3, r1, r3
 8002836:	225e      	movs	r2, #94	; 0x5e
 8002838:	2100      	movs	r1, #0
 800283a:	0018      	movs	r0, r3
 800283c:	f003 fe0a 	bl	8006454 <memset>
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002840:	1939      	adds	r1, r7, r4
 8002842:	484c      	ldr	r0, [pc, #304]	; (8002974 <print_adc+0x180>)
 8002844:	2364      	movs	r3, #100	; 0x64
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	f003 fa0a 	bl	8005c60 <HAL_UART_Transmit>
  int adresses_ADC[6] = {0xe, 0xF, 0x10, 0x11, 0x12, 0x13};
 800284c:	234c      	movs	r3, #76	; 0x4c
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	4a49      	ldr	r2, [pc, #292]	; (8002978 <print_adc+0x184>)
 8002852:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002854:	c313      	stmia	r3!, {r0, r1, r4}
 8002856:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002858:	c313      	stmia	r3!, {r0, r1, r4}
  float resolution_ADC[6] = {255, 255, 255, 128, 255, 255};
 800285a:	2334      	movs	r3, #52	; 0x34
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	4a47      	ldr	r2, [pc, #284]	; (800297c <print_adc+0x188>)
 8002860:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002862:	c313      	stmia	r3!, {r0, r1, r4}
 8002864:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002866:	c313      	stmia	r3!, {r0, r1, r4}
  float maxvalue_ADC[6] = {5.1, 5.1, 100, 7.62, 5.66, 3.39};
 8002868:	231c      	movs	r3, #28
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	4a44      	ldr	r2, [pc, #272]	; (8002980 <print_adc+0x18c>)
 800286e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002870:	c313      	stmia	r3!, {r0, r1, r4}
 8002872:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002874:	c313      	stmia	r3!, {r0, r1, r4}
  const char *descriptions_ADC[6] = {"BatV", "SysV", "NTCV", "InpV", "ChgA", "InpA"};
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	4a42      	ldr	r2, [pc, #264]	; (8002984 <print_adc+0x190>)
 800287a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800287c:	c313      	stmia	r3!, {r0, r1, r4}
 800287e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002880:	c313      	stmia	r3!, {r0, r1, r4}
  int i = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	22f4      	movs	r2, #244	; 0xf4
 8002886:	18ba      	adds	r2, r7, r2
 8002888:	6013      	str	r3, [r2, #0]
  uint8_t reader;
  while (i < 6)
 800288a:	e05e      	b.n	800294a <print_adc+0x156>
  {
    memset(MSG, 0, sizeof(MSG));
 800288c:	2664      	movs	r6, #100	; 0x64
 800288e:	19bb      	adds	r3, r7, r6
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	2100      	movs	r1, #0
 8002894:	0018      	movs	r0, r3
 8002896:	f003 fddd 	bl	8006454 <memset>
    HAL_I2C_Mem_Read(&hi2c1, 75 << 1, adresses_ADC[i], I2C_MEMADD_SIZE_8BIT, &reader, 1, 0xFFF);
 800289a:	234c      	movs	r3, #76	; 0x4c
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	24f4      	movs	r4, #244	; 0xf4
 80028a0:	193a      	adds	r2, r7, r4
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	0092      	lsls	r2, r2, #2
 80028a6:	58d3      	ldr	r3, [r2, r3]
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	482f      	ldr	r0, [pc, #188]	; (8002968 <print_adc+0x174>)
 80028ac:	4b2f      	ldr	r3, [pc, #188]	; (800296c <print_adc+0x178>)
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2301      	movs	r3, #1
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	1cfb      	adds	r3, r7, #3
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	2196      	movs	r1, #150	; 0x96
 80028bc:	f001 fbc8 	bl	8004050 <HAL_I2C_Mem_Read>
    float input = reader;
 80028c0:	1cfb      	adds	r3, r7, #3
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7fe f829 	bl	800091c <__aeabi_ui2f>
 80028ca:	1c03      	adds	r3, r0, #0
 80028cc:	20f0      	movs	r0, #240	; 0xf0
 80028ce:	183a      	adds	r2, r7, r0
 80028d0:	6013      	str	r3, [r2, #0]
    float temp1 = input / resolution_ADC[i];
 80028d2:	2334      	movs	r3, #52	; 0x34
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	193a      	adds	r2, r7, r4
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	58d3      	ldr	r3, [r2, r3]
 80028de:	1c19      	adds	r1, r3, #0
 80028e0:	183b      	adds	r3, r7, r0
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	f7fd fddc 	bl	80004a0 <__aeabi_fdiv>
 80028e8:	1c03      	adds	r3, r0, #0
 80028ea:	20ec      	movs	r0, #236	; 0xec
 80028ec:	183a      	adds	r2, r7, r0
 80028ee:	6013      	str	r3, [r2, #0]
    float output = temp1 * maxvalue_ADC[i];
 80028f0:	231c      	movs	r3, #28
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	193a      	adds	r2, r7, r4
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	58d3      	ldr	r3, [r2, r3]
 80028fc:	1c19      	adds	r1, r3, #0
 80028fe:	183b      	adds	r3, r7, r0
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	f7fd fee5 	bl	80006d0 <__aeabi_fmul>
 8002906:	1c03      	adds	r3, r0, #0
 8002908:	21e8      	movs	r1, #232	; 0xe8
 800290a:	187a      	adds	r2, r7, r1
 800290c:	6013      	str	r3, [r2, #0]
    sprintf(MSG, "\r\n%s: %5.3f\r\n", descriptions_ADC[i], output);
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	0025      	movs	r5, r4
 8002912:	193a      	adds	r2, r7, r4
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	58d4      	ldr	r4, [r2, r3]
 800291a:	187b      	adds	r3, r7, r1
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	f7ff fe25 	bl	800256c <__aeabi_f2d>
 8002922:	0002      	movs	r2, r0
 8002924:	000b      	movs	r3, r1
 8002926:	4918      	ldr	r1, [pc, #96]	; (8002988 <print_adc+0x194>)
 8002928:	19b8      	adds	r0, r7, r6
 800292a:	9200      	str	r2, [sp, #0]
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	0022      	movs	r2, r4
 8002930:	f004 fa06 	bl	8006d40 <siprintf>
    HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002934:	19b9      	adds	r1, r7, r6
 8002936:	480f      	ldr	r0, [pc, #60]	; (8002974 <print_adc+0x180>)
 8002938:	2364      	movs	r3, #100	; 0x64
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	f003 f990 	bl	8005c60 <HAL_UART_Transmit>
    i++;
 8002940:	197b      	adds	r3, r7, r5
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	197a      	adds	r2, r7, r5
 8002948:	6013      	str	r3, [r2, #0]
  while (i < 6)
 800294a:	23f4      	movs	r3, #244	; 0xf4
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b05      	cmp	r3, #5
 8002952:	dd9b      	ble.n	800288c <print_adc+0x98>
  }
  HAL_Delay(1000);
 8002954:	23fa      	movs	r3, #250	; 0xfa
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	0018      	movs	r0, r3
 800295a:	f000 ff3f 	bl	80037dc <HAL_Delay>
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b03f      	add	sp, #252	; 0xfc
 8002964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	2000026c 	.word	0x2000026c
 800296c:	00000fff 	.word	0x00000fff
 8002970:	08009408 	.word	0x08009408
 8002974:	2000030c 	.word	0x2000030c
 8002978:	08009488 	.word	0x08009488
 800297c:	080094a0 	.word	0x080094a0
 8002980:	080094b8 	.word	0x080094b8
 8002984:	080094d0 	.word	0x080094d0
 8002988:	080093f8 	.word	0x080093f8

0800298c <EDIT_I2C_MEMORY_DEBUG>:

// This function is to be used with the debugger connected to the STM, in order to, in real time, modify an I2c device's memory.
void EDIT_I2C_MEMORY_DEBUG()
{
 800298c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298e:	46de      	mov	lr, fp
 8002990:	4657      	mov	r7, sl
 8002992:	464e      	mov	r6, r9
 8002994:	4645      	mov	r5, r8
 8002996:	b5e0      	push	{r5, r6, r7, lr}
 8002998:	b0ab      	sub	sp, #172	; 0xac
 800299a:	af08      	add	r7, sp, #32
  uint8_t MSG[128];
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800299c:	23a0      	movs	r3, #160	; 0xa0
 800299e:	05db      	lsls	r3, r3, #23
 80029a0:	2201      	movs	r2, #1
 80029a2:	2140      	movs	r1, #64	; 0x40
 80029a4:	0018      	movs	r0, r3
 80029a6:	f001 f972 	bl	8003c8e <HAL_GPIO_WritePin>
  HAL_Delay(150);
 80029aa:	2096      	movs	r0, #150	; 0x96
 80029ac:	f000 ff16 	bl	80037dc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80029b0:	23a0      	movs	r3, #160	; 0xa0
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	2200      	movs	r2, #0
 80029b6:	2140      	movs	r1, #64	; 0x40
 80029b8:	0018      	movs	r0, r3
 80029ba:	f001 f968 	bl	8003c8e <HAL_GPIO_WritePin>
  int i = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	2484      	movs	r4, #132	; 0x84
 80029c2:	193a      	adds	r2, r7, r4
 80029c4:	6013      	str	r3, [r2, #0]
  uint8_t reader;
  // breakpoint here, edit i to select register to edit/view
  memset(MSG, 0, sizeof(MSG));
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	2100      	movs	r1, #0
 80029cc:	0018      	movs	r0, r3
 80029ce:	f003 fd41 	bl	8006454 <memset>
  HAL_I2C_Mem_Read(&hi2c1, 75 << 1, i, I2C_MEMADD_SIZE_8BIT, &reader, 1, 0xFFF);
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	48b5      	ldr	r0, [pc, #724]	; (8002cb0 <EDIT_I2C_MEMORY_DEBUG+0x324>)
 80029da:	4bb6      	ldr	r3, [pc, #728]	; (8002cb4 <EDIT_I2C_MEMORY_DEBUG+0x328>)
 80029dc:	9302      	str	r3, [sp, #8]
 80029de:	2301      	movs	r3, #1
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	1cfb      	adds	r3, r7, #3
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2301      	movs	r3, #1
 80029e8:	2196      	movs	r1, #150	; 0x96
 80029ea:	f001 fb31 	bl	8004050 <HAL_I2C_Mem_Read>
  sprintf(MSG, "%u read as: " BYTE_TO_BINARY_PATTERN "\r\n", i, BYTE_TO_BINARY(reader));
 80029ee:	1cfb      	adds	r3, r7, #3
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da02      	bge.n	80029fe <EDIT_I2C_MEMORY_DEBUG+0x72>
 80029f8:	2331      	movs	r3, #49	; 0x31
 80029fa:	469c      	mov	ip, r3
 80029fc:	e001      	b.n	8002a02 <EDIT_I2C_MEMORY_DEBUG+0x76>
 80029fe:	2330      	movs	r3, #48	; 0x30
 8002a00:	469c      	mov	ip, r3
 8002a02:	1cfb      	adds	r3, r7, #3
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	001a      	movs	r2, r3
 8002a08:	2340      	movs	r3, #64	; 0x40
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d002      	beq.n	8002a14 <EDIT_I2C_MEMORY_DEBUG+0x88>
 8002a0e:	2331      	movs	r3, #49	; 0x31
 8002a10:	469b      	mov	fp, r3
 8002a12:	e001      	b.n	8002a18 <EDIT_I2C_MEMORY_DEBUG+0x8c>
 8002a14:	2330      	movs	r3, #48	; 0x30
 8002a16:	469b      	mov	fp, r3
 8002a18:	1cfa      	adds	r2, r7, #3
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	0011      	movs	r1, r2
 8002a1e:	2220      	movs	r2, #32
 8002a20:	400a      	ands	r2, r1
 8002a22:	d001      	beq.n	8002a28 <EDIT_I2C_MEMORY_DEBUG+0x9c>
 8002a24:	2231      	movs	r2, #49	; 0x31
 8002a26:	e000      	b.n	8002a2a <EDIT_I2C_MEMORY_DEBUG+0x9e>
 8002a28:	2230      	movs	r2, #48	; 0x30
 8002a2a:	1cf9      	adds	r1, r7, #3
 8002a2c:	7809      	ldrb	r1, [r1, #0]
 8002a2e:	0008      	movs	r0, r1
 8002a30:	2110      	movs	r1, #16
 8002a32:	4001      	ands	r1, r0
 8002a34:	d001      	beq.n	8002a3a <EDIT_I2C_MEMORY_DEBUG+0xae>
 8002a36:	2131      	movs	r1, #49	; 0x31
 8002a38:	e000      	b.n	8002a3c <EDIT_I2C_MEMORY_DEBUG+0xb0>
 8002a3a:	2130      	movs	r1, #48	; 0x30
 8002a3c:	1cf8      	adds	r0, r7, #3
 8002a3e:	7800      	ldrb	r0, [r0, #0]
 8002a40:	0004      	movs	r4, r0
 8002a42:	2008      	movs	r0, #8
 8002a44:	4020      	ands	r0, r4
 8002a46:	d001      	beq.n	8002a4c <EDIT_I2C_MEMORY_DEBUG+0xc0>
 8002a48:	2031      	movs	r0, #49	; 0x31
 8002a4a:	e000      	b.n	8002a4e <EDIT_I2C_MEMORY_DEBUG+0xc2>
 8002a4c:	2030      	movs	r0, #48	; 0x30
 8002a4e:	1cfc      	adds	r4, r7, #3
 8002a50:	7824      	ldrb	r4, [r4, #0]
 8002a52:	0025      	movs	r5, r4
 8002a54:	2404      	movs	r4, #4
 8002a56:	402c      	ands	r4, r5
 8002a58:	d001      	beq.n	8002a5e <EDIT_I2C_MEMORY_DEBUG+0xd2>
 8002a5a:	2431      	movs	r4, #49	; 0x31
 8002a5c:	e000      	b.n	8002a60 <EDIT_I2C_MEMORY_DEBUG+0xd4>
 8002a5e:	2430      	movs	r4, #48	; 0x30
 8002a60:	1cfd      	adds	r5, r7, #3
 8002a62:	782d      	ldrb	r5, [r5, #0]
 8002a64:	002e      	movs	r6, r5
 8002a66:	2502      	movs	r5, #2
 8002a68:	4035      	ands	r5, r6
 8002a6a:	d001      	beq.n	8002a70 <EDIT_I2C_MEMORY_DEBUG+0xe4>
 8002a6c:	2531      	movs	r5, #49	; 0x31
 8002a6e:	e000      	b.n	8002a72 <EDIT_I2C_MEMORY_DEBUG+0xe6>
 8002a70:	2530      	movs	r5, #48	; 0x30
 8002a72:	1cfe      	adds	r6, r7, #3
 8002a74:	7836      	ldrb	r6, [r6, #0]
 8002a76:	46b0      	mov	r8, r6
 8002a78:	2601      	movs	r6, #1
 8002a7a:	4643      	mov	r3, r8
 8002a7c:	4033      	ands	r3, r6
 8002a7e:	1e1e      	subs	r6, r3, #0
 8002a80:	d001      	beq.n	8002a86 <EDIT_I2C_MEMORY_DEBUG+0xfa>
 8002a82:	2631      	movs	r6, #49	; 0x31
 8002a84:	e000      	b.n	8002a88 <EDIT_I2C_MEMORY_DEBUG+0xfc>
 8002a86:	2630      	movs	r6, #48	; 0x30
 8002a88:	2384      	movs	r3, #132	; 0x84
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	469a      	mov	sl, r3
 8002a90:	4b89      	ldr	r3, [pc, #548]	; (8002cb8 <EDIT_I2C_MEMORY_DEBUG+0x32c>)
 8002a92:	4699      	mov	r9, r3
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4698      	mov	r8, r3
 8002a98:	9606      	str	r6, [sp, #24]
 8002a9a:	9505      	str	r5, [sp, #20]
 8002a9c:	9404      	str	r4, [sp, #16]
 8002a9e:	9003      	str	r0, [sp, #12]
 8002aa0:	9102      	str	r1, [sp, #8]
 8002aa2:	9201      	str	r2, [sp, #4]
 8002aa4:	465b      	mov	r3, fp
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4663      	mov	r3, ip
 8002aaa:	4652      	mov	r2, sl
 8002aac:	4649      	mov	r1, r9
 8002aae:	4640      	mov	r0, r8
 8002ab0:	f004 f946 	bl	8006d40 <siprintf>
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002ab4:	1d39      	adds	r1, r7, #4
 8002ab6:	4881      	ldr	r0, [pc, #516]	; (8002cbc <EDIT_I2C_MEMORY_DEBUG+0x330>)
 8002ab8:	2364      	movs	r3, #100	; 0x64
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	f003 f8d0 	bl	8005c60 <HAL_UART_Transmit>
  // breakpoint here, edit reader to desired value
  sprintf(MSG, "%u changed to: " BYTE_TO_BINARY_PATTERN "\r\n", i, BYTE_TO_BINARY(reader));
 8002ac0:	1cfb      	adds	r3, r7, #3
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da02      	bge.n	8002ad0 <EDIT_I2C_MEMORY_DEBUG+0x144>
 8002aca:	2331      	movs	r3, #49	; 0x31
 8002acc:	469c      	mov	ip, r3
 8002ace:	e001      	b.n	8002ad4 <EDIT_I2C_MEMORY_DEBUG+0x148>
 8002ad0:	2330      	movs	r3, #48	; 0x30
 8002ad2:	469c      	mov	ip, r3
 8002ad4:	1cfb      	adds	r3, r7, #3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	001a      	movs	r2, r3
 8002ada:	2340      	movs	r3, #64	; 0x40
 8002adc:	4013      	ands	r3, r2
 8002ade:	d002      	beq.n	8002ae6 <EDIT_I2C_MEMORY_DEBUG+0x15a>
 8002ae0:	2331      	movs	r3, #49	; 0x31
 8002ae2:	469b      	mov	fp, r3
 8002ae4:	e001      	b.n	8002aea <EDIT_I2C_MEMORY_DEBUG+0x15e>
 8002ae6:	2330      	movs	r3, #48	; 0x30
 8002ae8:	469b      	mov	fp, r3
 8002aea:	1cfa      	adds	r2, r7, #3
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	0011      	movs	r1, r2
 8002af0:	2220      	movs	r2, #32
 8002af2:	400a      	ands	r2, r1
 8002af4:	d001      	beq.n	8002afa <EDIT_I2C_MEMORY_DEBUG+0x16e>
 8002af6:	2231      	movs	r2, #49	; 0x31
 8002af8:	e000      	b.n	8002afc <EDIT_I2C_MEMORY_DEBUG+0x170>
 8002afa:	2230      	movs	r2, #48	; 0x30
 8002afc:	1cf9      	adds	r1, r7, #3
 8002afe:	7809      	ldrb	r1, [r1, #0]
 8002b00:	0008      	movs	r0, r1
 8002b02:	2110      	movs	r1, #16
 8002b04:	4001      	ands	r1, r0
 8002b06:	d001      	beq.n	8002b0c <EDIT_I2C_MEMORY_DEBUG+0x180>
 8002b08:	2131      	movs	r1, #49	; 0x31
 8002b0a:	e000      	b.n	8002b0e <EDIT_I2C_MEMORY_DEBUG+0x182>
 8002b0c:	2130      	movs	r1, #48	; 0x30
 8002b0e:	1cf8      	adds	r0, r7, #3
 8002b10:	7800      	ldrb	r0, [r0, #0]
 8002b12:	0004      	movs	r4, r0
 8002b14:	2008      	movs	r0, #8
 8002b16:	4020      	ands	r0, r4
 8002b18:	d001      	beq.n	8002b1e <EDIT_I2C_MEMORY_DEBUG+0x192>
 8002b1a:	2031      	movs	r0, #49	; 0x31
 8002b1c:	e000      	b.n	8002b20 <EDIT_I2C_MEMORY_DEBUG+0x194>
 8002b1e:	2030      	movs	r0, #48	; 0x30
 8002b20:	1cfc      	adds	r4, r7, #3
 8002b22:	7824      	ldrb	r4, [r4, #0]
 8002b24:	0025      	movs	r5, r4
 8002b26:	2404      	movs	r4, #4
 8002b28:	402c      	ands	r4, r5
 8002b2a:	d001      	beq.n	8002b30 <EDIT_I2C_MEMORY_DEBUG+0x1a4>
 8002b2c:	2431      	movs	r4, #49	; 0x31
 8002b2e:	e000      	b.n	8002b32 <EDIT_I2C_MEMORY_DEBUG+0x1a6>
 8002b30:	2430      	movs	r4, #48	; 0x30
 8002b32:	1cfd      	adds	r5, r7, #3
 8002b34:	782d      	ldrb	r5, [r5, #0]
 8002b36:	002e      	movs	r6, r5
 8002b38:	2502      	movs	r5, #2
 8002b3a:	4035      	ands	r5, r6
 8002b3c:	d001      	beq.n	8002b42 <EDIT_I2C_MEMORY_DEBUG+0x1b6>
 8002b3e:	2531      	movs	r5, #49	; 0x31
 8002b40:	e000      	b.n	8002b44 <EDIT_I2C_MEMORY_DEBUG+0x1b8>
 8002b42:	2530      	movs	r5, #48	; 0x30
 8002b44:	1cfe      	adds	r6, r7, #3
 8002b46:	7836      	ldrb	r6, [r6, #0]
 8002b48:	46b0      	mov	r8, r6
 8002b4a:	2601      	movs	r6, #1
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	4033      	ands	r3, r6
 8002b50:	1e1e      	subs	r6, r3, #0
 8002b52:	d001      	beq.n	8002b58 <EDIT_I2C_MEMORY_DEBUG+0x1cc>
 8002b54:	2631      	movs	r6, #49	; 0x31
 8002b56:	e000      	b.n	8002b5a <EDIT_I2C_MEMORY_DEBUG+0x1ce>
 8002b58:	2630      	movs	r6, #48	; 0x30
 8002b5a:	2384      	movs	r3, #132	; 0x84
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	469a      	mov	sl, r3
 8002b62:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <EDIT_I2C_MEMORY_DEBUG+0x334>)
 8002b64:	4699      	mov	r9, r3
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	4698      	mov	r8, r3
 8002b6a:	9606      	str	r6, [sp, #24]
 8002b6c:	9505      	str	r5, [sp, #20]
 8002b6e:	9404      	str	r4, [sp, #16]
 8002b70:	9003      	str	r0, [sp, #12]
 8002b72:	9102      	str	r1, [sp, #8]
 8002b74:	9201      	str	r2, [sp, #4]
 8002b76:	465b      	mov	r3, fp
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4663      	mov	r3, ip
 8002b7c:	4652      	mov	r2, sl
 8002b7e:	4649      	mov	r1, r9
 8002b80:	4640      	mov	r0, r8
 8002b82:	f004 f8dd 	bl	8006d40 <siprintf>
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002b86:	1d39      	adds	r1, r7, #4
 8002b88:	484c      	ldr	r0, [pc, #304]	; (8002cbc <EDIT_I2C_MEMORY_DEBUG+0x330>)
 8002b8a:	2364      	movs	r3, #100	; 0x64
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	f003 f867 	bl	8005c60 <HAL_UART_Transmit>
  HAL_I2C_Mem_Write(&hi2c1, 75 << 1, i, I2C_MEMADD_SIZE_8BIT, &reader, 1, 0xFFF);
 8002b92:	2484      	movs	r4, #132	; 0x84
 8002b94:	193b      	adds	r3, r7, r4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4845      	ldr	r0, [pc, #276]	; (8002cb0 <EDIT_I2C_MEMORY_DEBUG+0x324>)
 8002b9c:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <EDIT_I2C_MEMORY_DEBUG+0x328>)
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	1cfb      	adds	r3, r7, #3
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2301      	movs	r3, #1
 8002baa:	2196      	movs	r1, #150	; 0x96
 8002bac:	f001 f922 	bl	8003df4 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, 75 << 1, i, I2C_MEMADD_SIZE_8BIT, &reader, 1, 0xFFF);
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	483e      	ldr	r0, [pc, #248]	; (8002cb0 <EDIT_I2C_MEMORY_DEBUG+0x324>)
 8002bb8:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <EDIT_I2C_MEMORY_DEBUG+0x328>)
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	1cfb      	adds	r3, r7, #3
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	2196      	movs	r1, #150	; 0x96
 8002bc8:	f001 fa42 	bl	8004050 <HAL_I2C_Mem_Read>
  sprintf(MSG, "%u confirm: " BYTE_TO_BINARY_PATTERN "\r\n", i, BYTE_TO_BINARY(reader));
 8002bcc:	1cfb      	adds	r3, r7, #3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b25b      	sxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da02      	bge.n	8002bdc <EDIT_I2C_MEMORY_DEBUG+0x250>
 8002bd6:	2331      	movs	r3, #49	; 0x31
 8002bd8:	469c      	mov	ip, r3
 8002bda:	e001      	b.n	8002be0 <EDIT_I2C_MEMORY_DEBUG+0x254>
 8002bdc:	2330      	movs	r3, #48	; 0x30
 8002bde:	469c      	mov	ip, r3
 8002be0:	1cfb      	adds	r3, r7, #3
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	001a      	movs	r2, r3
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	4013      	ands	r3, r2
 8002bea:	d002      	beq.n	8002bf2 <EDIT_I2C_MEMORY_DEBUG+0x266>
 8002bec:	2331      	movs	r3, #49	; 0x31
 8002bee:	469b      	mov	fp, r3
 8002bf0:	e001      	b.n	8002bf6 <EDIT_I2C_MEMORY_DEBUG+0x26a>
 8002bf2:	2330      	movs	r3, #48	; 0x30
 8002bf4:	469b      	mov	fp, r3
 8002bf6:	1cfa      	adds	r2, r7, #3
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	400a      	ands	r2, r1
 8002c00:	d001      	beq.n	8002c06 <EDIT_I2C_MEMORY_DEBUG+0x27a>
 8002c02:	2231      	movs	r2, #49	; 0x31
 8002c04:	e000      	b.n	8002c08 <EDIT_I2C_MEMORY_DEBUG+0x27c>
 8002c06:	2230      	movs	r2, #48	; 0x30
 8002c08:	1cf9      	adds	r1, r7, #3
 8002c0a:	7809      	ldrb	r1, [r1, #0]
 8002c0c:	0008      	movs	r0, r1
 8002c0e:	2110      	movs	r1, #16
 8002c10:	4001      	ands	r1, r0
 8002c12:	d001      	beq.n	8002c18 <EDIT_I2C_MEMORY_DEBUG+0x28c>
 8002c14:	2131      	movs	r1, #49	; 0x31
 8002c16:	e000      	b.n	8002c1a <EDIT_I2C_MEMORY_DEBUG+0x28e>
 8002c18:	2130      	movs	r1, #48	; 0x30
 8002c1a:	1cf8      	adds	r0, r7, #3
 8002c1c:	7800      	ldrb	r0, [r0, #0]
 8002c1e:	0004      	movs	r4, r0
 8002c20:	2008      	movs	r0, #8
 8002c22:	4020      	ands	r0, r4
 8002c24:	d001      	beq.n	8002c2a <EDIT_I2C_MEMORY_DEBUG+0x29e>
 8002c26:	2031      	movs	r0, #49	; 0x31
 8002c28:	e000      	b.n	8002c2c <EDIT_I2C_MEMORY_DEBUG+0x2a0>
 8002c2a:	2030      	movs	r0, #48	; 0x30
 8002c2c:	1cfc      	adds	r4, r7, #3
 8002c2e:	7824      	ldrb	r4, [r4, #0]
 8002c30:	0025      	movs	r5, r4
 8002c32:	2404      	movs	r4, #4
 8002c34:	402c      	ands	r4, r5
 8002c36:	d001      	beq.n	8002c3c <EDIT_I2C_MEMORY_DEBUG+0x2b0>
 8002c38:	2431      	movs	r4, #49	; 0x31
 8002c3a:	e000      	b.n	8002c3e <EDIT_I2C_MEMORY_DEBUG+0x2b2>
 8002c3c:	2430      	movs	r4, #48	; 0x30
 8002c3e:	1cfd      	adds	r5, r7, #3
 8002c40:	782d      	ldrb	r5, [r5, #0]
 8002c42:	002e      	movs	r6, r5
 8002c44:	2502      	movs	r5, #2
 8002c46:	4035      	ands	r5, r6
 8002c48:	d001      	beq.n	8002c4e <EDIT_I2C_MEMORY_DEBUG+0x2c2>
 8002c4a:	2531      	movs	r5, #49	; 0x31
 8002c4c:	e000      	b.n	8002c50 <EDIT_I2C_MEMORY_DEBUG+0x2c4>
 8002c4e:	2530      	movs	r5, #48	; 0x30
 8002c50:	1cfe      	adds	r6, r7, #3
 8002c52:	7836      	ldrb	r6, [r6, #0]
 8002c54:	46b0      	mov	r8, r6
 8002c56:	2601      	movs	r6, #1
 8002c58:	4643      	mov	r3, r8
 8002c5a:	4033      	ands	r3, r6
 8002c5c:	1e1e      	subs	r6, r3, #0
 8002c5e:	d001      	beq.n	8002c64 <EDIT_I2C_MEMORY_DEBUG+0x2d8>
 8002c60:	2631      	movs	r6, #49	; 0x31
 8002c62:	e000      	b.n	8002c66 <EDIT_I2C_MEMORY_DEBUG+0x2da>
 8002c64:	2630      	movs	r6, #48	; 0x30
 8002c66:	2384      	movs	r3, #132	; 0x84
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	469a      	mov	sl, r3
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <EDIT_I2C_MEMORY_DEBUG+0x338>)
 8002c70:	4699      	mov	r9, r3
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4698      	mov	r8, r3
 8002c76:	9606      	str	r6, [sp, #24]
 8002c78:	9505      	str	r5, [sp, #20]
 8002c7a:	9404      	str	r4, [sp, #16]
 8002c7c:	9003      	str	r0, [sp, #12]
 8002c7e:	9102      	str	r1, [sp, #8]
 8002c80:	9201      	str	r2, [sp, #4]
 8002c82:	465b      	mov	r3, fp
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	4663      	mov	r3, ip
 8002c88:	4652      	mov	r2, sl
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	4640      	mov	r0, r8
 8002c8e:	f004 f857 	bl	8006d40 <siprintf>
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002c92:	1d39      	adds	r1, r7, #4
 8002c94:	4809      	ldr	r0, [pc, #36]	; (8002cbc <EDIT_I2C_MEMORY_DEBUG+0x330>)
 8002c96:	2364      	movs	r3, #100	; 0x64
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	f002 ffe1 	bl	8005c60 <HAL_UART_Transmit>
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b023      	add	sp, #140	; 0x8c
 8002ca4:	bcf0      	pop	{r4, r5, r6, r7}
 8002ca6:	46bb      	mov	fp, r7
 8002ca8:	46b2      	mov	sl, r6
 8002caa:	46a9      	mov	r9, r5
 8002cac:	46a0      	mov	r8, r4
 8002cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb0:	2000026c 	.word	0x2000026c
 8002cb4:	00000fff 	.word	0x00000fff
 8002cb8:	080094e8 	.word	0x080094e8
 8002cbc:	2000030c 	.word	0x2000030c
 8002cc0:	08009508 	.word	0x08009508
 8002cc4:	0800952c 	.word	0x0800952c

08002cc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b098      	sub	sp, #96	; 0x60
 8002ccc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cce:	f000 fcff 	bl	80036d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cd2:	f000 f8d1 	bl	8002e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cd6:	f000 f9e7 	bl	80030a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002cda:	f000 f955 	bl	8002f88 <MX_TIM1_Init>
  MX_I2C1_Init();
 8002cde:	f000 f913 	bl	8002f08 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002ce2:	f000 f9ad 	bl	8003040 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8002ce6:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <main+0x188>)
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f002 fcdd 	bl	80056a8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // HAL_I2C_Mem_Read(&hi2c1, 75<<1, 0x00, I2C_MEMADD_SIZE_8BIT,&reader, 1, 0xFFF);
  uint8_t writer = 0b11111110;
 8002cee:	2147      	movs	r1, #71	; 0x47
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	22fe      	movs	r2, #254	; 0xfe
 8002cf4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, 75 << 1, 0x7, I2C_MEMADD_SIZE_8BIT, &writer, 1, 0xFFF);
 8002cf6:	4857      	ldr	r0, [pc, #348]	; (8002e54 <main+0x18c>)
 8002cf8:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <main+0x190>)
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	000c      	movs	r4, r1
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2301      	movs	r3, #1
 8002d08:	2207      	movs	r2, #7
 8002d0a:	2196      	movs	r1, #150	; 0x96
 8002d0c:	f001 f872 	bl	8003df4 <HAL_I2C_Mem_Write>
  writer = 0b01001000;
 8002d10:	0021      	movs	r1, r4
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2248      	movs	r2, #72	; 0x48
 8002d16:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, 75 << 1, 0x0, I2C_MEMADD_SIZE_8BIT, &writer, 1, 0xFFF);
 8002d18:	484e      	ldr	r0, [pc, #312]	; (8002e54 <main+0x18c>)
 8002d1a:	4b4f      	ldr	r3, [pc, #316]	; (8002e58 <main+0x190>)
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	2301      	movs	r3, #1
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2301      	movs	r3, #1
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2196      	movs	r1, #150	; 0x96
 8002d2c:	f001 f862 	bl	8003df4 <HAL_I2C_Mem_Write>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, 1);
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <main+0x194>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	2102      	movs	r1, #2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 ffa9 	bl	8003c8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, 1);
 8002d3c:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <main+0x194>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	2101      	movs	r1, #1
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 ffa3 	bl	8003c8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002d48:	23a0      	movs	r3, #160	; 0xa0
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2102      	movs	r1, #2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 ff9c 	bl	8003c8e <HAL_GPIO_WritePin>
  uint8_t MSG[64] = {"\r\nWelcome to TAD DEBUG\r\n\n\n\n\n"};
 8002d56:	1d39      	adds	r1, r7, #4
 8002d58:	4a41      	ldr	r2, [pc, #260]	; (8002e60 <main+0x198>)
 8002d5a:	000b      	movs	r3, r1
 8002d5c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002d5e:	c331      	stmia	r3!, {r0, r4, r5}
 8002d60:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002d62:	c331      	stmia	r3!, {r0, r4, r5}
 8002d64:	6810      	ldr	r0, [r2, #0]
 8002d66:	6018      	str	r0, [r3, #0]
 8002d68:	7912      	ldrb	r2, [r2, #4]
 8002d6a:	711a      	strb	r2, [r3, #4]
 8002d6c:	231d      	movs	r3, #29
 8002d6e:	18cb      	adds	r3, r1, r3
 8002d70:	2223      	movs	r2, #35	; 0x23
 8002d72:	2100      	movs	r1, #0
 8002d74:	0018      	movs	r0, r3
 8002d76:	f003 fb6d 	bl	8006454 <memset>
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002d7a:	1d39      	adds	r1, r7, #4
 8002d7c:	4839      	ldr	r0, [pc, #228]	; (8002e64 <main+0x19c>)
 8002d7e:	2364      	movs	r3, #100	; 0x64
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	f002 ff6d 	bl	8005c60 <HAL_UART_Transmit>
  int globalstate = 3;
 8002d86:	2303      	movs	r3, #3
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  int report_state = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	64bb      	str	r3, [r7, #72]	; 0x48
  while (1)
  {
    read_keys(report_state);
 8002d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff fc51 	bl	8002638 <read_keys>
    if (KEYBOARD_PUSHED[0][0] && KEYBOARD_STATE[13][4])
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <main+0x1a0>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <main+0xe4>
 8002d9e:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <main+0x1a4>)
 8002da0:	2245      	movs	r2, #69	; 0x45
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <main+0xe4>
      globalstate = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (KEYBOARD_PUSHED[0][1] && KEYBOARD_STATE[13][4])
 8002dac:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <main+0x1a0>)
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <main+0xfa>
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <main+0x1a4>)
 8002db6:	2245      	movs	r2, #69	; 0x45
 8002db8:	5c9b      	ldrb	r3, [r3, r2]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <main+0xfa>
      globalstate = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (KEYBOARD_PUSHED[0][2] && KEYBOARD_STATE[13][4])
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <main+0x1a0>)
 8002dc4:	789b      	ldrb	r3, [r3, #2]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <main+0x110>
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <main+0x1a4>)
 8002dcc:	2245      	movs	r2, #69	; 0x45
 8002dce:	5c9b      	ldrb	r3, [r3, r2]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <main+0x110>
      globalstate = 2;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (KEYBOARD_PUSHED[0][3] && KEYBOARD_STATE[13][4])
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <main+0x1a0>)
 8002dda:	78db      	ldrb	r3, [r3, #3]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <main+0x126>
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <main+0x1a4>)
 8002de2:	2245      	movs	r2, #69	; 0x45
 8002de4:	5c9b      	ldrb	r3, [r3, r2]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <main+0x126>
      globalstate = 3;
 8002dea:	2303      	movs	r3, #3
 8002dec:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (KEYBOARD_PUSHED[0][4] && KEYBOARD_STATE[13][4])
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <main+0x1a0>)
 8002df0:	791b      	ldrb	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <main+0x13c>
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <main+0x1a4>)
 8002df8:	2245      	movs	r2, #69	; 0x45
 8002dfa:	5c9b      	ldrb	r3, [r3, r2]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <main+0x13c>
      globalstate = 4;
 8002e00:	2304      	movs	r3, #4
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (globalstate)
 8002e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d8c1      	bhi.n	8002d8e <main+0xc6>
 8002e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0c:	009a      	lsls	r2, r3, #2
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <main+0x1a8>)
 8002e10:	18d3      	adds	r3, r2, r3
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	469f      	mov	pc, r3
    {
    case 0:
      print_adc();
 8002e16:	f7ff fced 	bl	80027f4 <print_adc>
      break;
 8002e1a:	e017      	b.n	8002e4c <main+0x184>
    case 1:
      EDIT_I2C_MEMORY_DEBUG();
 8002e1c:	f7ff fdb6 	bl	800298c <EDIT_I2C_MEMORY_DEBUG>
      break;
 8002e20:	e014      	b.n	8002e4c <main+0x184>
    case 2:
      if (!report_state)
 8002e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <main+0x166>
        report_state = 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e2c:	e001      	b.n	8002e32 <main+0x16a>
      else
        report_state = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	64bb      	str	r3, [r7, #72]	; 0x48
      globalstate = 3;
 8002e32:	2303      	movs	r3, #3
 8002e34:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8002e36:	e009      	b.n	8002e4c <main+0x184>
    case 3:
      break;
    case 4:
      HAL_UART_Transmit(&huart2, "list\n", sizeof("list\n"), 100);
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <main+0x1ac>)
 8002e3a:	480a      	ldr	r0, [pc, #40]	; (8002e64 <main+0x19c>)
 8002e3c:	2364      	movs	r3, #100	; 0x64
 8002e3e:	2206      	movs	r2, #6
 8002e40:	f002 ff0e 	bl	8005c60 <HAL_UART_Transmit>
      globalstate = 3;
 8002e44:	2303      	movs	r3, #3
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8002e48:	e000      	b.n	8002e4c <main+0x184>
      break;
 8002e4a:	46c0      	nop			; (mov r8, r8)
    read_keys(report_state);
 8002e4c:	e79f      	b.n	8002d8e <main+0xc6>
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	200002c0 	.word	0x200002c0
 8002e54:	2000026c 	.word	0x2000026c
 8002e58:	00000fff 	.word	0x00000fff
 8002e5c:	50001400 	.word	0x50001400
 8002e60:	08009554 	.word	0x08009554
 8002e64:	2000030c 	.word	0x2000030c
 8002e68:	20000430 	.word	0x20000430
 8002e6c:	200003a0 	.word	0x200003a0
 8002e70:	080096d4 	.word	0x080096d4
 8002e74:	0800954c 	.word	0x0800954c

08002e78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b093      	sub	sp, #76	; 0x4c
 8002e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7e:	2414      	movs	r4, #20
 8002e80:	193b      	adds	r3, r7, r4
 8002e82:	0018      	movs	r0, r3
 8002e84:	2334      	movs	r3, #52	; 0x34
 8002e86:	001a      	movs	r2, r3
 8002e88:	2100      	movs	r1, #0
 8002e8a:	f003 fae3 	bl	8006454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	0018      	movs	r0, r3
 8002e92:	2310      	movs	r3, #16
 8002e94:	001a      	movs	r2, r3
 8002e96:	2100      	movs	r1, #0
 8002e98:	f003 fadc 	bl	8006454 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f001 fd7d 	bl	80049a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ea6:	193b      	adds	r3, r7, r4
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eac:	193b      	adds	r3, r7, r4
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	0052      	lsls	r2, r2, #1
 8002eb2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	2240      	movs	r2, #64	; 0x40
 8002ebe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f001 fdb5 	bl	8004a38 <HAL_RCC_OscConfig>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d001      	beq.n	8002ed6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002ed2:	f000 fa03 	bl	80032dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f002 f8b0 	bl	8005058 <HAL_RCC_ClockConfig>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d001      	beq.n	8002f00 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002efc:	f000 f9ee 	bl	80032dc <Error_Handler>
  }
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b013      	add	sp, #76	; 0x4c
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <MX_I2C1_Init+0x78>)
 8002f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f14:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <MX_I2C1_Init+0x7c>)
 8002f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f18:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f24:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 febf 	bl	8003cc8 <HAL_I2C_Init>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f4e:	f000 f9c5 	bl	80032dc <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f54:	2100      	movs	r1, #0
 8002f56:	0018      	movs	r0, r3
 8002f58:	f001 fc8a 	bl	8004870 <HAL_I2CEx_ConfigAnalogFilter>
 8002f5c:	1e03      	subs	r3, r0, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f60:	f000 f9bc 	bl	80032dc <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <MX_I2C1_Init+0x74>)
 8002f66:	2100      	movs	r1, #0
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f001 fccd 	bl	8004908 <HAL_I2CEx_ConfigDigitalFilter>
 8002f6e:	1e03      	subs	r3, r0, #0
 8002f70:	d001      	beq.n	8002f76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f72:	f000 f9b3 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2000026c 	.word	0x2000026c
 8002f80:	40005400 	.word	0x40005400
 8002f84:	00303d5b 	.word	0x00303d5b

08002f88 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8e:	2310      	movs	r3, #16
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	0018      	movs	r0, r3
 8002f94:	2310      	movs	r3, #16
 8002f96:	001a      	movs	r2, r3
 8002f98:	2100      	movs	r1, #0
 8002f9a:	f003 fa5b 	bl	8006454 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f003 fa54 	bl	8006454 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <MX_TIM1_Init+0xac>)
 8002fae:	4a22      	ldr	r2, [pc, #136]	; (8003038 <MX_TIM1_Init+0xb0>)
 8002fb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <MX_TIM1_Init+0xac>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <MX_TIM1_Init+0xac>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <MX_TIM1_Init+0xac>)
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <MX_TIM1_Init+0xb4>)
 8002fc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <MX_TIM1_Init+0xac>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fca:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <MX_TIM1_Init+0xac>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <MX_TIM1_Init+0xac>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <MX_TIM1_Init+0xac>)
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f002 fb0d 	bl	80055f8 <HAL_TIM_Base_Init>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002fe2:	f000 f97b 	bl	80032dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	0152      	lsls	r2, r2, #5
 8002fee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ff0:	187a      	adds	r2, r7, r1
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <MX_TIM1_Init+0xac>)
 8002ff4:	0011      	movs	r1, r2
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f002 fb9c 	bl	8005734 <HAL_TIM_ConfigClockSource>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003000:	f000 f96c 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003016:	1d3a      	adds	r2, r7, #4
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <MX_TIM1_Init+0xac>)
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f002 fd67 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003026:	f000 f959 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b008      	add	sp, #32
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	200002c0 	.word	0x200002c0
 8003038:	40012c00 	.word	0x40012c00
 800303c:	0000ffff 	.word	0x0000ffff

08003040 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 8003046:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <MX_USART2_UART_Init+0x64>)
 8003048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 800304c:	2296      	movs	r2, #150	; 0x96
 800304e:	0152      	lsls	r2, r2, #5
 8003050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 8003066:	220c      	movs	r2, #12
 8003068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 8003078:	2200      	movs	r2, #0
 800307a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 800307e:	2200      	movs	r2, #0
 8003080:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 8003084:	2200      	movs	r2, #0
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <MX_USART2_UART_Init+0x60>)
 800308a:	0018      	movs	r0, r3
 800308c:	f002 fd92 	bl	8005bb4 <HAL_UART_Init>
 8003090:	1e03      	subs	r3, r0, #0
 8003092:	d001      	beq.n	8003098 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003094:	f000 f922 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	2000030c 	.word	0x2000030c
 80030a4:	40004400 	.word	0x40004400

080030a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b08b      	sub	sp, #44	; 0x2c
 80030ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ae:	2414      	movs	r4, #20
 80030b0:	193b      	adds	r3, r7, r4
 80030b2:	0018      	movs	r0, r3
 80030b4:	2314      	movs	r3, #20
 80030b6:	001a      	movs	r2, r3
 80030b8:	2100      	movs	r1, #0
 80030ba:	f003 f9cb 	bl	8006454 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030be:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c2:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030c4:	2104      	movs	r1, #4
 80030c6:	430a      	orrs	r2, r1
 80030c8:	635a      	str	r2, [r3, #52]	; 0x34
 80030ca:	4b7e      	ldr	r3, [pc, #504]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	2204      	movs	r2, #4
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030d6:	4b7b      	ldr	r3, [pc, #492]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030da:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030dc:	2120      	movs	r1, #32
 80030de:	430a      	orrs	r2, r1
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34
 80030e2:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	2220      	movs	r2, #32
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	4b75      	ldr	r3, [pc, #468]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f2:	4b74      	ldr	r3, [pc, #464]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030f4:	2101      	movs	r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34
 80030fa:	4b72      	ldr	r3, [pc, #456]	; (80032c4 <MX_GPIO_Init+0x21c>)
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <MX_GPIO_Init+0x21c>)
 8003108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310a:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <MX_GPIO_Init+0x21c>)
 800310c:	2102      	movs	r1, #2
 800310e:	430a      	orrs	r2, r1
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
 8003112:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <MX_GPIO_Init+0x21c>)
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800311e:	4b69      	ldr	r3, [pc, #420]	; (80032c4 <MX_GPIO_Init+0x21c>)
 8003120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003122:	4b68      	ldr	r3, [pc, #416]	; (80032c4 <MX_GPIO_Init+0x21c>)
 8003124:	2108      	movs	r1, #8
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34
 800312a:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <MX_GPIO_Init+0x21c>)
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	2208      	movs	r2, #8
 8003130:	4013      	ands	r3, r2
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, col12_Pin | col13_Pin, GPIO_PIN_RESET);
 8003136:	23c0      	movs	r3, #192	; 0xc0
 8003138:	01db      	lsls	r3, r3, #7
 800313a:	4863      	ldr	r0, [pc, #396]	; (80032c8 <MX_GPIO_Init+0x220>)
 800313c:	2200      	movs	r2, #0
 800313e:	0019      	movs	r1, r3
 8003140:	f000 fda5 	bl	8003c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <MX_GPIO_Init+0x224>)
 8003146:	2200      	movs	r2, #0
 8003148:	2103      	movs	r1, #3
 800314a:	0018      	movs	r0, r3
 800314c:	f000 fd9f 	bl	8003c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_6 | col0_Pin, GPIO_PIN_RESET);
 8003150:	495f      	ldr	r1, [pc, #380]	; (80032d0 <MX_GPIO_Init+0x228>)
 8003152:	23a0      	movs	r3, #160	; 0xa0
 8003154:	05db      	lsls	r3, r3, #23
 8003156:	2200      	movs	r2, #0
 8003158:	0018      	movs	r0, r3
 800315a:	f000 fd98 	bl	8003c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, col1_Pin | col2_Pin | col3_Pin | col4_Pin, GPIO_PIN_RESET);
 800315e:	4b5d      	ldr	r3, [pc, #372]	; (80032d4 <MX_GPIO_Init+0x22c>)
 8003160:	2200      	movs	r2, #0
 8003162:	210f      	movs	r1, #15
 8003164:	0018      	movs	r0, r3
 8003166:	f000 fd92 	bl	8003c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, col5_Pin | col6_Pin | col7_Pin | col8_Pin | col9_Pin | col10_Pin | col11_Pin, GPIO_PIN_RESET);
 800316a:	23fe      	movs	r3, #254	; 0xfe
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	485a      	ldr	r0, [pc, #360]	; (80032d8 <MX_GPIO_Init+0x230>)
 8003170:	2200      	movs	r2, #0
 8003172:	0019      	movs	r1, r3
 8003174:	f000 fd8b 	bl	8003c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : col12_Pin col13_Pin */
  GPIO_InitStruct.Pin = col12_Pin | col13_Pin;
 8003178:	193b      	adds	r3, r7, r4
 800317a:	22c0      	movs	r2, #192	; 0xc0
 800317c:	01d2      	lsls	r2, r2, #7
 800317e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003180:	193b      	adds	r3, r7, r4
 8003182:	2201      	movs	r2, #1
 8003184:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	193b      	adds	r3, r7, r4
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318c:	193b      	adds	r3, r7, r4
 800318e:	2200      	movs	r2, #0
 8003190:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003192:	193b      	adds	r3, r7, r4
 8003194:	4a4c      	ldr	r2, [pc, #304]	; (80032c8 <MX_GPIO_Init+0x220>)
 8003196:	0019      	movs	r1, r3
 8003198:	0010      	movs	r0, r2
 800319a:	f000 fbf7 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	2203      	movs	r2, #3
 80031a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a4:	193b      	adds	r3, r7, r4
 80031a6:	2201      	movs	r2, #1
 80031a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	4a44      	ldr	r2, [pc, #272]	; (80032cc <MX_GPIO_Init+0x224>)
 80031ba:	0019      	movs	r1, r3
 80031bc:	0010      	movs	r0, r2
 80031be:	f000 fbe5 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 col0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_6 | col0_Pin;
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	4a42      	ldr	r2, [pc, #264]	; (80032d0 <MX_GPIO_Init+0x228>)
 80031c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c8:	193b      	adds	r3, r7, r4
 80031ca:	2201      	movs	r2, #1
 80031cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031da:	193a      	adds	r2, r7, r4
 80031dc:	23a0      	movs	r3, #160	; 0xa0
 80031de:	05db      	lsls	r3, r3, #23
 80031e0:	0011      	movs	r1, r2
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 fbd2 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031e8:	193b      	adds	r3, r7, r4
 80031ea:	2210      	movs	r2, #16
 80031ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	2203      	movs	r2, #3
 80031f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	193a      	adds	r2, r7, r4
 80031fc:	23a0      	movs	r3, #160	; 0xa0
 80031fe:	05db      	lsls	r3, r3, #23
 8003200:	0011      	movs	r1, r2
 8003202:	0018      	movs	r0, r3
 8003204:	f000 fbc2 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003208:	193b      	adds	r3, r7, r4
 800320a:	2220      	movs	r2, #32
 800320c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800320e:	193b      	adds	r3, r7, r4
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003214:	193b      	adds	r3, r7, r4
 8003216:	2201      	movs	r2, #1
 8003218:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321a:	193a      	adds	r2, r7, r4
 800321c:	23a0      	movs	r3, #160	; 0xa0
 800321e:	05db      	lsls	r3, r3, #23
 8003220:	0011      	movs	r1, r2
 8003222:	0018      	movs	r0, r3
 8003224:	f000 fbb2 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : row0_Pin row1_Pin row2_Pin row3_Pin */
  GPIO_InitStruct.Pin = row0_Pin | row1_Pin | row2_Pin | row3_Pin;
 8003228:	0021      	movs	r1, r4
 800322a:	187b      	adds	r3, r7, r1
 800322c:	22f0      	movs	r2, #240	; 0xf0
 800322e:	0212      	lsls	r2, r2, #8
 8003230:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003232:	000c      	movs	r4, r1
 8003234:	193b      	adds	r3, r7, r4
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800323a:	193b      	adds	r3, r7, r4
 800323c:	2202      	movs	r2, #2
 800323e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	193b      	adds	r3, r7, r4
 8003242:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <MX_GPIO_Init+0x230>)
 8003244:	0019      	movs	r1, r3
 8003246:	0010      	movs	r0, r2
 8003248:	f000 fba0 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : row4_Pin */
  GPIO_InitStruct.Pin = row4_Pin;
 800324c:	193b      	adds	r3, r7, r4
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	0052      	lsls	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003254:	193b      	adds	r3, r7, r4
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800325a:	193b      	adds	r3, r7, r4
 800325c:	2202      	movs	r2, #2
 800325e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(row4_GPIO_Port, &GPIO_InitStruct);
 8003260:	193a      	adds	r2, r7, r4
 8003262:	23a0      	movs	r3, #160	; 0xa0
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	0011      	movs	r1, r2
 8003268:	0018      	movs	r0, r3
 800326a:	f000 fb8f 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : col1_Pin col2_Pin col3_Pin col4_Pin */
  GPIO_InitStruct.Pin = col1_Pin | col2_Pin | col3_Pin | col4_Pin;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	220f      	movs	r2, #15
 8003272:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003274:	193b      	adds	r3, r7, r4
 8003276:	2201      	movs	r2, #1
 8003278:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	193b      	adds	r3, r7, r4
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	193b      	adds	r3, r7, r4
 8003282:	2200      	movs	r2, #0
 8003284:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003286:	193b      	adds	r3, r7, r4
 8003288:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <MX_GPIO_Init+0x22c>)
 800328a:	0019      	movs	r1, r3
 800328c:	0010      	movs	r0, r2
 800328e:	f000 fb7d 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : col5_Pin col6_Pin col7_Pin col8_Pin
                           col9_Pin col10_Pin col11_Pin */
  GPIO_InitStruct.Pin = col5_Pin | col6_Pin | col7_Pin | col8_Pin | col9_Pin | col10_Pin | col11_Pin;
 8003292:	0021      	movs	r1, r4
 8003294:	187b      	adds	r3, r7, r1
 8003296:	22fe      	movs	r2, #254	; 0xfe
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329c:	187b      	adds	r3, r7, r1
 800329e:	2201      	movs	r2, #1
 80032a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <MX_GPIO_Init+0x230>)
 80032b2:	0019      	movs	r1, r3
 80032b4:	0010      	movs	r0, r2
 80032b6:	f000 fb69 	bl	800398c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b00b      	add	sp, #44	; 0x2c
 80032c0:	bd90      	pop	{r4, r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	40021000 	.word	0x40021000
 80032c8:	50000800 	.word	0x50000800
 80032cc:	50001400 	.word	0x50001400
 80032d0:	00008042 	.word	0x00008042
 80032d4:	50000c00 	.word	0x50000c00
 80032d8:	50000400 	.word	0x50000400

080032dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032e0:	b672      	cpsid	i
}
 80032e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032e4:	e7fe      	b.n	80032e4 <Error_Handler+0x8>
	...

080032e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_MspInit+0x44>)
 80032f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_MspInit+0x44>)
 80032f4:	2101      	movs	r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_MspInit+0x44>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_MspInit+0x44>)
 8003308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <HAL_MspInit+0x44>)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0549      	lsls	r1, r1, #21
 8003310:	430a      	orrs	r2, r1
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_MspInit+0x44>)
 8003316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	055b      	lsls	r3, r3, #21
 800331c:	4013      	ands	r3, r2
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	40021000 	.word	0x40021000

08003330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b091      	sub	sp, #68	; 0x44
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	232c      	movs	r3, #44	; 0x2c
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	0018      	movs	r0, r3
 800333e:	2314      	movs	r3, #20
 8003340:	001a      	movs	r2, r3
 8003342:	2100      	movs	r1, #0
 8003344:	f003 f886 	bl	8006454 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003348:	2414      	movs	r4, #20
 800334a:	193b      	adds	r3, r7, r4
 800334c:	0018      	movs	r0, r3
 800334e:	2318      	movs	r3, #24
 8003350:	001a      	movs	r2, r3
 8003352:	2100      	movs	r1, #0
 8003354:	f003 f87e 	bl	8006454 <memset>
  if(hi2c->Instance==I2C1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a23      	ldr	r2, [pc, #140]	; (80033ec <HAL_I2C_MspInit+0xbc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d13f      	bne.n	80033e2 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003362:	193b      	adds	r3, r7, r4
 8003364:	2220      	movs	r2, #32
 8003366:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003368:	193b      	adds	r3, r7, r4
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800336e:	193b      	adds	r3, r7, r4
 8003370:	0018      	movs	r0, r3
 8003372:	f002 f81b 	bl	80053ac <HAL_RCCEx_PeriphCLKConfig>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800337a:	f7ff ffaf 	bl	80032dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <HAL_I2C_MspInit+0xc0>)
 8003380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_I2C_MspInit+0xc0>)
 8003384:	2101      	movs	r1, #1
 8003386:	430a      	orrs	r2, r1
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
 800338a:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_I2C_MspInit+0xc0>)
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	2201      	movs	r2, #1
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	187b      	adds	r3, r7, r1
 800339a:	22c0      	movs	r2, #192	; 0xc0
 800339c:	00d2      	lsls	r2, r2, #3
 800339e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a0:	187b      	adds	r3, r7, r1
 80033a2:	2212      	movs	r2, #18
 80033a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	2201      	movs	r2, #1
 80033aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80033b2:	187b      	adds	r3, r7, r1
 80033b4:	2206      	movs	r2, #6
 80033b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b8:	187a      	adds	r2, r7, r1
 80033ba:	23a0      	movs	r3, #160	; 0xa0
 80033bc:	05db      	lsls	r3, r3, #23
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 fae3 	bl	800398c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_I2C_MspInit+0xc0>)
 80033c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_I2C_MspInit+0xc0>)
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	0389      	lsls	r1, r1, #14
 80033d0:	430a      	orrs	r2, r1
 80033d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_I2C_MspInit+0xc0>)
 80033d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	039b      	lsls	r3, r3, #14
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b011      	add	sp, #68	; 0x44
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	40005400 	.word	0x40005400
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <HAL_TIM_Base_MspInit+0x38>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10d      	bne.n	8003422 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003406:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_TIM_Base_MspInit+0x3c>)
 8003408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_TIM_Base_MspInit+0x3c>)
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	0109      	lsls	r1, r1, #4
 8003410:	430a      	orrs	r2, r1
 8003412:	641a      	str	r2, [r3, #64]	; 0x40
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_TIM_Base_MspInit+0x3c>)
 8003416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	40012c00 	.word	0x40012c00
 8003430:	40021000 	.word	0x40021000

08003434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b08b      	sub	sp, #44	; 0x2c
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	2414      	movs	r4, #20
 800343e:	193b      	adds	r3, r7, r4
 8003440:	0018      	movs	r0, r3
 8003442:	2314      	movs	r3, #20
 8003444:	001a      	movs	r2, r3
 8003446:	2100      	movs	r1, #0
 8003448:	f003 f804 	bl	8006454 <memset>
  if(huart->Instance==USART2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d130      	bne.n	80034b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_UART_MspInit+0x90>)
 8003458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_UART_MspInit+0x90>)
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	0289      	lsls	r1, r1, #10
 8003460:	430a      	orrs	r2, r1
 8003462:	63da      	str	r2, [r3, #60]	; 0x3c
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <HAL_UART_MspInit+0x90>)
 8003466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	029b      	lsls	r3, r3, #10
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <HAL_UART_MspInit+0x90>)
 8003474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_UART_MspInit+0x90>)
 8003478:	2101      	movs	r1, #1
 800347a:	430a      	orrs	r2, r1
 800347c:	635a      	str	r2, [r3, #52]	; 0x34
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_UART_MspInit+0x90>)
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	2201      	movs	r2, #1
 8003484:	4013      	ands	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800348a:	0021      	movs	r1, r4
 800348c:	187b      	adds	r3, r7, r1
 800348e:	220c      	movs	r2, #12
 8003490:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	187b      	adds	r3, r7, r1
 8003494:	2202      	movs	r2, #2
 8003496:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2200      	movs	r2, #0
 80034a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2201      	movs	r2, #1
 80034a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034aa:	187a      	adds	r2, r7, r1
 80034ac:	23a0      	movs	r3, #160	; 0xa0
 80034ae:	05db      	lsls	r3, r3, #23
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 fa6a 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b00b      	add	sp, #44	; 0x2c
 80034be:	bd90      	pop	{r4, r7, pc}
 80034c0:	40004400 	.word	0x40004400
 80034c4:	40021000 	.word	0x40021000

080034c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034cc:	e7fe      	b.n	80034cc <NMI_Handler+0x4>

080034ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d2:	e7fe      	b.n	80034d2 <HardFault_Handler+0x4>

080034d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034ec:	f000 f95a 	bl	80037a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	af00      	add	r7, sp, #0
	return 1;
 80034fa:	2301      	movs	r3, #1
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_kill>:

int _kill(int pid, int sig)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800350c:	f002 ff78 	bl	8006400 <__errno>
 8003510:	0003      	movs	r3, r0
 8003512:	2216      	movs	r2, #22
 8003514:	601a      	str	r2, [r3, #0]
	return -1;
 8003516:	2301      	movs	r3, #1
 8003518:	425b      	negs	r3, r3
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}

08003522 <_exit>:

void _exit (int status)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800352a:	2301      	movs	r3, #1
 800352c:	425a      	negs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0011      	movs	r1, r2
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff ffe5 	bl	8003502 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003538:	e7fe      	b.n	8003538 <_exit+0x16>

0800353a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e00a      	b.n	8003562 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800354c:	e000      	b.n	8003550 <_read+0x16>
 800354e:	bf00      	nop
 8003550:	0001      	movs	r1, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	60ba      	str	r2, [r7, #8]
 8003558:	b2ca      	uxtb	r2, r1
 800355a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3301      	adds	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	dbf0      	blt.n	800354c <_read+0x12>
	}

return len;
 800356a:	687b      	ldr	r3, [r7, #4]
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b006      	add	sp, #24
 8003572:	bd80      	pop	{r7, pc}

08003574 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e009      	b.n	800359a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	60ba      	str	r2, [r7, #8]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	0018      	movs	r0, r3
 8003590:	e000      	b.n	8003594 <_write+0x20>
 8003592:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3301      	adds	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	dbf1      	blt.n	8003586 <_write+0x12>
	}
	return len;
 80035a2:	687b      	ldr	r3, [r7, #4]
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b006      	add	sp, #24
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_close>:

int _close(int file)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	return -1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	425b      	negs	r3, r3
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	0192      	lsls	r2, r2, #6
 80035d0:	605a      	str	r2, [r3, #4]
	return 0;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <_isatty>:

int _isatty(int file)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	return 1;
 80035e4:	2301      	movs	r3, #1
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
	return 0;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bd80      	pop	{r7, pc}

08003604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <_sbrk+0x5c>)
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <_sbrk+0x60>)
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <_sbrk+0x64>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <_sbrk+0x64>)
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <_sbrk+0x68>)
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d207      	bcs.n	8003644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003634:	f002 fee4 	bl	8006400 <__errno>
 8003638:	0003      	movs	r3, r0
 800363a:	220c      	movs	r2, #12
 800363c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800363e:	2301      	movs	r3, #1
 8003640:	425b      	negs	r3, r3
 8003642:	e009      	b.n	8003658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <_sbrk+0x64>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	18d2      	adds	r2, r2, r3
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <_sbrk+0x64>)
 8003654:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b006      	add	sp, #24
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20002000 	.word	0x20002000
 8003664:	00000400 	.word	0x00000400
 8003668:	200004c0 	.word	0x200004c0
 800366c:	200004d8 	.word	0x200004d8

08003670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800367c:	480d      	ldr	r0, [pc, #52]	; (80036b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800367e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003680:	f7ff fff6 	bl	8003670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003684:	480c      	ldr	r0, [pc, #48]	; (80036b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003686:	490d      	ldr	r1, [pc, #52]	; (80036bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003688:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <LoopForever+0xe>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800369c:	4c0a      	ldr	r4, [pc, #40]	; (80036c8 <LoopForever+0x16>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036aa:	f002 feaf 	bl	800640c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80036ae:	f7ff fb0b 	bl	8002cc8 <main>

080036b2 <LoopForever>:

LoopForever:
  b LoopForever
 80036b2:	e7fe      	b.n	80036b2 <LoopForever>
  ldr   r0, =_estack
 80036b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80036c0:	08009b44 	.word	0x08009b44
  ldr r2, =_sbss
 80036c4:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80036c8:	200004d8 	.word	0x200004d8

080036cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC1_IRQHandler>
	...

080036d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_Init+0x3c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_Init+0x3c>)
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	0049      	lsls	r1, r1, #1
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036ea:	2003      	movs	r0, #3
 80036ec:	f000 f810 	bl	8003710 <HAL_InitTick>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d003      	beq.n	80036fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e001      	b.n	8003700 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80036fc:	f7ff fdf4 	bl	80032e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40022000 	.word	0x40022000

08003710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003718:	230f      	movs	r3, #15
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_InitTick+0x88>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02b      	beq.n	8003780 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_InitTick+0x8c>)
 800372a:	681c      	ldr	r4, [r3, #0]
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_InitTick+0x88>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	0019      	movs	r1, r3
 8003732:	23fa      	movs	r3, #250	; 0xfa
 8003734:	0098      	lsls	r0, r3, #2
 8003736:	f7fc fcff 	bl	8000138 <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	0019      	movs	r1, r3
 800373e:	0020      	movs	r0, r4
 8003740:	f7fc fcfa 	bl	8000138 <__udivsi3>
 8003744:	0003      	movs	r3, r0
 8003746:	0018      	movs	r0, r3
 8003748:	f000 f913 	bl	8003972 <HAL_SYSTICK_Config>
 800374c:	1e03      	subs	r3, r0, #0
 800374e:	d112      	bne.n	8003776 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d80a      	bhi.n	800376c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	2301      	movs	r3, #1
 800375a:	425b      	negs	r3, r3
 800375c:	2200      	movs	r2, #0
 800375e:	0018      	movs	r0, r3
 8003760:	f000 f8f2 	bl	8003948 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_InitTick+0x90>)
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e00d      	b.n	8003788 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800376c:	230f      	movs	r3, #15
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e008      	b.n	8003788 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003776:	230f      	movs	r3, #15
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e003      	b.n	8003788 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003780:	230f      	movs	r3, #15
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003788:	230f      	movs	r3, #15
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b005      	add	sp, #20
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	2000007c 	.word	0x2000007c
 800379c:	20000074 	.word	0x20000074
 80037a0:	20000078 	.word	0x20000078

080037a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_IncTick+0x1c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	001a      	movs	r2, r3
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_IncTick+0x20>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	18d2      	adds	r2, r2, r3
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_IncTick+0x20>)
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	2000007c 	.word	0x2000007c
 80037c4:	200004c4 	.word	0x200004c4

080037c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  return uwTick;
 80037cc:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <HAL_GetTick+0x10>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	200004c4 	.word	0x200004c4

080037dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7ff fff0 	bl	80037c8 <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3301      	adds	r3, #1
 80037f4:	d005      	beq.n	8003802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_Delay+0x44>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	001a      	movs	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	189b      	adds	r3, r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	f7ff ffe0 	bl	80037c8 <HAL_GetTick>
 8003808:	0002      	movs	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d8f7      	bhi.n	8003804 <HAL_Delay+0x28>
  {
  }
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	2000007c 	.word	0x2000007c

08003824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	0002      	movs	r2, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b7f      	cmp	r3, #127	; 0x7f
 8003838:	d828      	bhi.n	800388c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800383a:	4a2f      	ldr	r2, [pc, #188]	; (80038f8 <__NVIC_SetPriority+0xd4>)
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b25b      	sxtb	r3, r3
 8003842:	089b      	lsrs	r3, r3, #2
 8003844:	33c0      	adds	r3, #192	; 0xc0
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	589b      	ldr	r3, [r3, r2]
 800384a:	1dfa      	adds	r2, r7, #7
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	0011      	movs	r1, r2
 8003850:	2203      	movs	r2, #3
 8003852:	400a      	ands	r2, r1
 8003854:	00d2      	lsls	r2, r2, #3
 8003856:	21ff      	movs	r1, #255	; 0xff
 8003858:	4091      	lsls	r1, r2
 800385a:	000a      	movs	r2, r1
 800385c:	43d2      	mvns	r2, r2
 800385e:	401a      	ands	r2, r3
 8003860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	22ff      	movs	r2, #255	; 0xff
 8003868:	401a      	ands	r2, r3
 800386a:	1dfb      	adds	r3, r7, #7
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	0018      	movs	r0, r3
 8003870:	2303      	movs	r3, #3
 8003872:	4003      	ands	r3, r0
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003878:	481f      	ldr	r0, [pc, #124]	; (80038f8 <__NVIC_SetPriority+0xd4>)
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b25b      	sxtb	r3, r3
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	430a      	orrs	r2, r1
 8003884:	33c0      	adds	r3, #192	; 0xc0
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800388a:	e031      	b.n	80038f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800388c:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <__NVIC_SetPriority+0xd8>)
 800388e:	1dfb      	adds	r3, r7, #7
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	0019      	movs	r1, r3
 8003894:	230f      	movs	r3, #15
 8003896:	400b      	ands	r3, r1
 8003898:	3b08      	subs	r3, #8
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	3306      	adds	r3, #6
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	18d3      	adds	r3, r2, r3
 80038a2:	3304      	adds	r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1dfa      	adds	r2, r7, #7
 80038a8:	7812      	ldrb	r2, [r2, #0]
 80038aa:	0011      	movs	r1, r2
 80038ac:	2203      	movs	r2, #3
 80038ae:	400a      	ands	r2, r1
 80038b0:	00d2      	lsls	r2, r2, #3
 80038b2:	21ff      	movs	r1, #255	; 0xff
 80038b4:	4091      	lsls	r1, r2
 80038b6:	000a      	movs	r2, r1
 80038b8:	43d2      	mvns	r2, r2
 80038ba:	401a      	ands	r2, r3
 80038bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	401a      	ands	r2, r3
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	0018      	movs	r0, r3
 80038cc:	2303      	movs	r3, #3
 80038ce:	4003      	ands	r3, r0
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038d4:	4809      	ldr	r0, [pc, #36]	; (80038fc <__NVIC_SetPriority+0xd8>)
 80038d6:	1dfb      	adds	r3, r7, #7
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	001c      	movs	r4, r3
 80038dc:	230f      	movs	r3, #15
 80038de:	4023      	ands	r3, r4
 80038e0:	3b08      	subs	r3, #8
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	430a      	orrs	r2, r1
 80038e6:	3306      	adds	r3, #6
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	18c3      	adds	r3, r0, r3
 80038ec:	3304      	adds	r3, #4
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b003      	add	sp, #12
 80038f6:	bd90      	pop	{r4, r7, pc}
 80038f8:	e000e100 	.word	0xe000e100
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	1e5a      	subs	r2, r3, #1
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	045b      	lsls	r3, r3, #17
 8003910:	429a      	cmp	r2, r3
 8003912:	d301      	bcc.n	8003918 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003914:	2301      	movs	r3, #1
 8003916:	e010      	b.n	800393a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <SysTick_Config+0x44>)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	3a01      	subs	r2, #1
 800391e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003920:	2301      	movs	r3, #1
 8003922:	425b      	negs	r3, r3
 8003924:	2103      	movs	r1, #3
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff ff7c 	bl	8003824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <SysTick_Config+0x44>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	4b04      	ldr	r3, [pc, #16]	; (8003944 <SysTick_Config+0x44>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003938:	2300      	movs	r3, #0
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b002      	add	sp, #8
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	e000e010 	.word	0xe000e010

08003948 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	210f      	movs	r1, #15
 8003954:	187b      	adds	r3, r7, r1
 8003956:	1c02      	adds	r2, r0, #0
 8003958:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	187b      	adds	r3, r7, r1
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b25b      	sxtb	r3, r3
 8003962:	0011      	movs	r1, r2
 8003964:	0018      	movs	r0, r3
 8003966:	f7ff ff5d 	bl	8003824 <__NVIC_SetPriority>
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	b004      	add	sp, #16
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0018      	movs	r0, r3
 800397e:	f7ff ffbf 	bl	8003900 <SysTick_Config>
 8003982:	0003      	movs	r3, r0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399a:	e147      	b.n	8003c2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4091      	lsls	r1, r2
 80039a6:	000a      	movs	r2, r1
 80039a8:	4013      	ands	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d100      	bne.n	80039b4 <HAL_GPIO_Init+0x28>
 80039b2:	e138      	b.n	8003c26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2203      	movs	r2, #3
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d005      	beq.n	80039cc <HAL_GPIO_Init+0x40>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d130      	bne.n	8003a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	409a      	lsls	r2, r3
 80039da:	0013      	movs	r3, r2
 80039dc:	43da      	mvns	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	409a      	lsls	r2, r3
 80039ee:	0013      	movs	r3, r2
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a02:	2201      	movs	r2, #1
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
 8003a08:	0013      	movs	r3, r2
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	2201      	movs	r2, #1
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	0013      	movs	r3, r2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2203      	movs	r2, #3
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d017      	beq.n	8003a6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	409a      	lsls	r2, r3
 8003a48:	0013      	movs	r3, r2
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	0013      	movs	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d123      	bne.n	8003abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	58d3      	ldr	r3, [r2, r3]
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2207      	movs	r2, #7
 8003a88:	4013      	ands	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	0013      	movs	r3, r2
 8003a92:	43da      	mvns	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2107      	movs	r1, #7
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	0013      	movs	r3, r2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	08da      	lsrs	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3208      	adds	r2, #8
 8003ab8:	0092      	lsls	r2, r2, #2
 8003aba:	6939      	ldr	r1, [r7, #16]
 8003abc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	2203      	movs	r2, #3
 8003aca:	409a      	lsls	r2, r3
 8003acc:	0013      	movs	r3, r2
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2203      	movs	r2, #3
 8003adc:	401a      	ands	r2, r3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	0013      	movs	r3, r2
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	23c0      	movs	r3, #192	; 0xc0
 8003af8:	029b      	lsls	r3, r3, #10
 8003afa:	4013      	ands	r3, r2
 8003afc:	d100      	bne.n	8003b00 <HAL_GPIO_Init+0x174>
 8003afe:	e092      	b.n	8003c26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b00:	4a50      	ldr	r2, [pc, #320]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	3318      	adds	r3, #24
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	589b      	ldr	r3, [r3, r2]
 8003b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2203      	movs	r2, #3
 8003b12:	4013      	ands	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	220f      	movs	r2, #15
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	0013      	movs	r3, r2
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	23a0      	movs	r3, #160	; 0xa0
 8003b28:	05db      	lsls	r3, r3, #23
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d013      	beq.n	8003b56 <HAL_GPIO_Init+0x1ca>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a45      	ldr	r2, [pc, #276]	; (8003c48 <HAL_GPIO_Init+0x2bc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00d      	beq.n	8003b52 <HAL_GPIO_Init+0x1c6>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a44      	ldr	r2, [pc, #272]	; (8003c4c <HAL_GPIO_Init+0x2c0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <HAL_GPIO_Init+0x1c2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a43      	ldr	r2, [pc, #268]	; (8003c50 <HAL_GPIO_Init+0x2c4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_GPIO_Init+0x1be>
 8003b46:	2303      	movs	r3, #3
 8003b48:	e006      	b.n	8003b58 <HAL_GPIO_Init+0x1cc>
 8003b4a:	2305      	movs	r3, #5
 8003b4c:	e004      	b.n	8003b58 <HAL_GPIO_Init+0x1cc>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e002      	b.n	8003b58 <HAL_GPIO_Init+0x1cc>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_GPIO_Init+0x1cc>
 8003b56:	2300      	movs	r3, #0
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	2103      	movs	r1, #3
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	00d2      	lsls	r2, r2, #3
 8003b60:	4093      	lsls	r3, r2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b68:	4936      	ldr	r1, [pc, #216]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	3318      	adds	r3, #24
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b76:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	035b      	lsls	r3, r3, #13
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ba0:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	039b      	lsls	r3, r3, #14
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bc4:	4b1f      	ldr	r3, [pc, #124]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bca:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003bcc:	2384      	movs	r3, #132	; 0x84
 8003bce:	58d3      	ldr	r3, [r2, r3]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	029b      	lsls	r3, r3, #10
 8003be4:	4013      	ands	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bf0:	4914      	ldr	r1, [pc, #80]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003bf2:	2284      	movs	r2, #132	; 0x84
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003bf8:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	58d3      	ldr	r3, [r2, r3]
 8003bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	43da      	mvns	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	025b      	lsls	r3, r3, #9
 8003c12:	4013      	ands	r3, r2
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c1e:	4909      	ldr	r1, [pc, #36]	; (8003c44 <HAL_GPIO_Init+0x2b8>)
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	40da      	lsrs	r2, r3
 8003c34:	1e13      	subs	r3, r2, #0
 8003c36:	d000      	beq.n	8003c3a <HAL_GPIO_Init+0x2ae>
 8003c38:	e6b0      	b.n	800399c <HAL_GPIO_Init+0x10>
  }
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b006      	add	sp, #24
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021800 	.word	0x40021800
 8003c48:	50000400 	.word	0x50000400
 8003c4c:	50000800 	.word	0x50000800
 8003c50:	50000c00 	.word	0x50000c00

08003c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	000a      	movs	r2, r1
 8003c5e:	1cbb      	adds	r3, r7, #2
 8003c60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	1cba      	adds	r2, r7, #2
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c6e:	230f      	movs	r3, #15
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e003      	b.n	8003c80 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c80:	230f      	movs	r3, #15
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	781b      	ldrb	r3, [r3, #0]
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	0008      	movs	r0, r1
 8003c98:	0011      	movs	r1, r2
 8003c9a:	1cbb      	adds	r3, r7, #2
 8003c9c:	1c02      	adds	r2, r0, #0
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	1c7b      	adds	r3, r7, #1
 8003ca2:	1c0a      	adds	r2, r1, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca6:	1c7b      	adds	r3, r7, #1
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d004      	beq.n	8003cb8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cae:	1cbb      	adds	r3, r7, #2
 8003cb0:	881a      	ldrh	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cb6:	e003      	b.n	8003cc0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cb8:	1cbb      	adds	r3, r7, #2
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e082      	b.n	8003de0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2241      	movs	r2, #65	; 0x41
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d107      	bne.n	8003cf6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2240      	movs	r2, #64	; 0x40
 8003cea:	2100      	movs	r1, #0
 8003cec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff fb1d 	bl	8003330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2241      	movs	r2, #65	; 0x41
 8003cfa:	2124      	movs	r1, #36	; 0x24
 8003cfc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2101      	movs	r1, #1
 8003d0a:	438a      	bics	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_I2C_Init+0x120>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4931      	ldr	r1, [pc, #196]	; (8003dec <HAL_I2C_Init+0x124>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2180      	movs	r1, #128	; 0x80
 8003d3e:	0209      	lsls	r1, r1, #8
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	e007      	b.n	8003d56 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2184      	movs	r1, #132	; 0x84
 8003d50:	0209      	lsls	r1, r1, #8
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d104      	bne.n	8003d68 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2280      	movs	r2, #128	; 0x80
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	491f      	ldr	r1, [pc, #124]	; (8003df0 <HAL_I2C_Init+0x128>)
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	491a      	ldr	r1, [pc, #104]	; (8003dec <HAL_I2C_Init+0x124>)
 8003d84:	400a      	ands	r2, r1
 8003d86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69d9      	ldr	r1, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2241      	movs	r2, #65	; 0x41
 8003dcc:	2120      	movs	r1, #32
 8003dce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2242      	movs	r2, #66	; 0x42
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	f0ffffff 	.word	0xf0ffffff
 8003dec:	ffff7fff 	.word	0xffff7fff
 8003df0:	02008000 	.word	0x02008000

08003df4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	000c      	movs	r4, r1
 8003dfe:	0010      	movs	r0, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	230a      	movs	r3, #10
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	1c22      	adds	r2, r4, #0
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	1c02      	adds	r2, r0, #0
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	1dbb      	adds	r3, r7, #6
 8003e14:	1c0a      	adds	r2, r1, #0
 8003e16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2241      	movs	r2, #65	; 0x41
 8003e1c:	5c9b      	ldrb	r3, [r3, r2]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d000      	beq.n	8003e26 <HAL_I2C_Mem_Write+0x32>
 8003e24:	e10c      	b.n	8004040 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_I2C_Mem_Write+0x42>
 8003e2c:	232c      	movs	r3, #44	; 0x2c
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d105      	bne.n	8003e42 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0ff      	b.n	8004042 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	5c9b      	ldrb	r3, [r3, r2]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_I2C_Mem_Write+0x5c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e0f8      	b.n	8004042 <HAL_I2C_Mem_Write+0x24e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2240      	movs	r2, #64	; 0x40
 8003e54:	2101      	movs	r1, #1
 8003e56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e58:	f7ff fcb6 	bl	80037c8 <HAL_GetTick>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	0219      	lsls	r1, r3, #8
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	2319      	movs	r3, #25
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f000 fb0b 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0e3      	b.n	8004042 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2241      	movs	r2, #65	; 0x41
 8003e7e:	2121      	movs	r1, #33	; 0x21
 8003e80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2242      	movs	r2, #66	; 0x42
 8003e86:	2140      	movs	r1, #64	; 0x40
 8003e88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	222c      	movs	r2, #44	; 0x2c
 8003e9a:	18ba      	adds	r2, r7, r2
 8003e9c:	8812      	ldrh	r2, [r2, #0]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ea6:	1dbb      	adds	r3, r7, #6
 8003ea8:	881c      	ldrh	r4, [r3, #0]
 8003eaa:	2308      	movs	r3, #8
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	230a      	movs	r3, #10
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	8819      	ldrh	r1, [r3, #0]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	0023      	movs	r3, r4
 8003ec2:	f000 f9f9 	bl	80042b8 <I2C_RequestMemoryWrite>
 8003ec6:	1e03      	subs	r3, r0, #0
 8003ec8:	d005      	beq.n	8003ed6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	2100      	movs	r1, #0
 8003ed0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0b5      	b.n	8004042 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2bff      	cmp	r3, #255	; 0xff
 8003ede:	d911      	bls.n	8003f04 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	045c      	lsls	r4, r3, #17
 8003ef0:	230a      	movs	r3, #10
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	8819      	ldrh	r1, [r3, #0]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	0023      	movs	r3, r4
 8003efe:	f000 fc7d 	bl	80047fc <I2C_TransferConfig>
 8003f02:	e012      	b.n	8003f2a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	049c      	lsls	r4, r3, #18
 8003f18:	230a      	movs	r3, #10
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	8819      	ldrh	r1, [r3, #0]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	2300      	movs	r3, #0
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	0023      	movs	r3, r4
 8003f26:	f000 fc69 	bl	80047fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 fae8 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f36:	1e03      	subs	r3, r0, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e081      	b.n	8004042 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d03a      	beq.n	8003fee <HAL_I2C_Mem_Write+0x1fa>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d136      	bne.n	8003fee <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	0013      	movs	r3, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	f000 fa7b 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e053      	b.n	8004042 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2bff      	cmp	r3, #255	; 0xff
 8003fa2:	d911      	bls.n	8003fc8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	22ff      	movs	r2, #255	; 0xff
 8003fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	045c      	lsls	r4, r3, #17
 8003fb4:	230a      	movs	r3, #10
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	8819      	ldrh	r1, [r3, #0]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	0023      	movs	r3, r4
 8003fc2:	f000 fc1b 	bl	80047fc <I2C_TransferConfig>
 8003fc6:	e012      	b.n	8003fee <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	049c      	lsls	r4, r3, #18
 8003fdc:	230a      	movs	r3, #10
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	8819      	ldrh	r1, [r3, #0]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	0023      	movs	r3, r4
 8003fea:	f000 fc07 	bl	80047fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d198      	bne.n	8003f2a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 fac0 	bl	8004584 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d001      	beq.n	800400c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e01a      	b.n	8004042 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2220      	movs	r2, #32
 8004012:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	490b      	ldr	r1, [pc, #44]	; (800404c <HAL_I2C_Mem_Write+0x258>)
 8004020:	400a      	ands	r2, r1
 8004022:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2241      	movs	r2, #65	; 0x41
 8004028:	2120      	movs	r1, #32
 800402a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2242      	movs	r2, #66	; 0x42
 8004030:	2100      	movs	r1, #0
 8004032:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2240      	movs	r2, #64	; 0x40
 8004038:	2100      	movs	r1, #0
 800403a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	b007      	add	sp, #28
 8004048:	bd90      	pop	{r4, r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	fe00e800 	.word	0xfe00e800

08004050 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b089      	sub	sp, #36	; 0x24
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	000c      	movs	r4, r1
 800405a:	0010      	movs	r0, r2
 800405c:	0019      	movs	r1, r3
 800405e:	230a      	movs	r3, #10
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	1c22      	adds	r2, r4, #0
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	2308      	movs	r3, #8
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	1c02      	adds	r2, r0, #0
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	1dbb      	adds	r3, r7, #6
 8004070:	1c0a      	adds	r2, r1, #0
 8004072:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2241      	movs	r2, #65	; 0x41
 8004078:	5c9b      	ldrb	r3, [r3, r2]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b20      	cmp	r3, #32
 800407e:	d000      	beq.n	8004082 <HAL_I2C_Mem_Read+0x32>
 8004080:	e110      	b.n	80042a4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <HAL_I2C_Mem_Read+0x42>
 8004088:	232c      	movs	r3, #44	; 0x2c
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2280      	movs	r2, #128	; 0x80
 8004096:	0092      	lsls	r2, r2, #2
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e103      	b.n	80042a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2240      	movs	r2, #64	; 0x40
 80040a2:	5c9b      	ldrb	r3, [r3, r2]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_I2C_Mem_Read+0x5c>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0fc      	b.n	80042a6 <HAL_I2C_Mem_Read+0x256>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2240      	movs	r2, #64	; 0x40
 80040b0:	2101      	movs	r1, #1
 80040b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040b4:	f7ff fb88 	bl	80037c8 <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	0219      	lsls	r1, r3, #8
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2319      	movs	r3, #25
 80040c8:	2201      	movs	r2, #1
 80040ca:	f000 f9dd 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	1e03      	subs	r3, r0, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0e7      	b.n	80042a6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2241      	movs	r2, #65	; 0x41
 80040da:	2122      	movs	r1, #34	; 0x22
 80040dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2242      	movs	r2, #66	; 0x42
 80040e2:	2140      	movs	r1, #64	; 0x40
 80040e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	222c      	movs	r2, #44	; 0x2c
 80040f6:	18ba      	adds	r2, r7, r2
 80040f8:	8812      	ldrh	r2, [r2, #0]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004102:	1dbb      	adds	r3, r7, #6
 8004104:	881c      	ldrh	r4, [r3, #0]
 8004106:	2308      	movs	r3, #8
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	881a      	ldrh	r2, [r3, #0]
 800410c:	230a      	movs	r3, #10
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	8819      	ldrh	r1, [r3, #0]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	0023      	movs	r3, r4
 800411e:	f000 f92f 	bl	8004380 <I2C_RequestMemoryRead>
 8004122:	1e03      	subs	r3, r0, #0
 8004124:	d005      	beq.n	8004132 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2240      	movs	r2, #64	; 0x40
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0b9      	b.n	80042a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	2bff      	cmp	r3, #255	; 0xff
 800413a:	d911      	bls.n	8004160 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	22ff      	movs	r2, #255	; 0xff
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	b2da      	uxtb	r2, r3
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	045c      	lsls	r4, r3, #17
 800414c:	230a      	movs	r3, #10
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	8819      	ldrh	r1, [r3, #0]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	4b56      	ldr	r3, [pc, #344]	; (80042b0 <HAL_I2C_Mem_Read+0x260>)
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	0023      	movs	r3, r4
 800415a:	f000 fb4f 	bl	80047fc <I2C_TransferConfig>
 800415e:	e012      	b.n	8004186 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	b2da      	uxtb	r2, r3
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	049c      	lsls	r4, r3, #18
 8004174:	230a      	movs	r3, #10
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	8819      	ldrh	r1, [r3, #0]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	4b4c      	ldr	r3, [pc, #304]	; (80042b0 <HAL_I2C_Mem_Read+0x260>)
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	0023      	movs	r3, r4
 8004182:	f000 fb3b 	bl	80047fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	0013      	movs	r3, r2
 8004190:	2200      	movs	r2, #0
 8004192:	2104      	movs	r1, #4
 8004194:	f000 f978 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e082      	b.n	80042a6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d03a      	beq.n	8004252 <HAL_I2C_Mem_Read+0x202>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d136      	bne.n	8004252 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	0013      	movs	r3, r2
 80041ee:	2200      	movs	r2, #0
 80041f0:	2180      	movs	r1, #128	; 0x80
 80041f2:	f000 f949 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e053      	b.n	80042a6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2bff      	cmp	r3, #255	; 0xff
 8004206:	d911      	bls.n	800422c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	22ff      	movs	r2, #255	; 0xff
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	b2da      	uxtb	r2, r3
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	045c      	lsls	r4, r3, #17
 8004218:	230a      	movs	r3, #10
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	8819      	ldrh	r1, [r3, #0]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	0023      	movs	r3, r4
 8004226:	f000 fae9 	bl	80047fc <I2C_TransferConfig>
 800422a:	e012      	b.n	8004252 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	b2da      	uxtb	r2, r3
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	049c      	lsls	r4, r3, #18
 8004240:	230a      	movs	r3, #10
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	8819      	ldrh	r1, [r3, #0]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	2300      	movs	r3, #0
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	0023      	movs	r3, r4
 800424e:	f000 fad5 	bl	80047fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d194      	bne.n	8004186 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	0018      	movs	r0, r3
 8004264:	f000 f98e 	bl	8004584 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e01a      	b.n	80042a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2220      	movs	r2, #32
 8004276:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	490c      	ldr	r1, [pc, #48]	; (80042b4 <HAL_I2C_Mem_Read+0x264>)
 8004284:	400a      	ands	r2, r1
 8004286:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2241      	movs	r2, #65	; 0x41
 800428c:	2120      	movs	r1, #32
 800428e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2242      	movs	r2, #66	; 0x42
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2240      	movs	r2, #64	; 0x40
 800429c:	2100      	movs	r1, #0
 800429e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	0018      	movs	r0, r3
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b007      	add	sp, #28
 80042ac:	bd90      	pop	{r4, r7, pc}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	80002400 	.word	0x80002400
 80042b4:	fe00e800 	.word	0xfe00e800

080042b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	000c      	movs	r4, r1
 80042c2:	0010      	movs	r0, r2
 80042c4:	0019      	movs	r1, r3
 80042c6:	250a      	movs	r5, #10
 80042c8:	197b      	adds	r3, r7, r5
 80042ca:	1c22      	adds	r2, r4, #0
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	2308      	movs	r3, #8
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	1c02      	adds	r2, r0, #0
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	1dbb      	adds	r3, r7, #6
 80042d8:	1c0a      	adds	r2, r1, #0
 80042da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042dc:	1dbb      	adds	r3, r7, #6
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	045c      	lsls	r4, r3, #17
 80042e6:	197b      	adds	r3, r7, r5
 80042e8:	8819      	ldrh	r1, [r3, #0]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <I2C_RequestMemoryWrite+0xc4>)
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	0023      	movs	r3, r4
 80042f2:	f000 fa83 	bl	80047fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	6a39      	ldr	r1, [r7, #32]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f000 f902 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 8004302:	1e03      	subs	r3, r0, #0
 8004304:	d001      	beq.n	800430a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e033      	b.n	8004372 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800430a:	1dbb      	adds	r3, r7, #6
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d107      	bne.n	8004322 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004312:	2308      	movs	r3, #8
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
 8004320:	e019      	b.n	8004356 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004322:	2308      	movs	r3, #8
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	b29b      	uxth	r3, r3
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	6a39      	ldr	r1, [r7, #32]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	0018      	movs	r0, r3
 800433c:	f000 f8e3 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e014      	b.n	8004372 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004348:	2308      	movs	r3, #8
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004356:	6a3a      	ldr	r2, [r7, #32]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	0013      	movs	r3, r2
 8004360:	2200      	movs	r2, #0
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	f000 f890 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8004368:	1e03      	subs	r3, r0, #0
 800436a:	d001      	beq.n	8004370 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	0018      	movs	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	b004      	add	sp, #16
 8004378:	bdb0      	pop	{r4, r5, r7, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	80002000 	.word	0x80002000

08004380 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004380:	b5b0      	push	{r4, r5, r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	000c      	movs	r4, r1
 800438a:	0010      	movs	r0, r2
 800438c:	0019      	movs	r1, r3
 800438e:	250a      	movs	r5, #10
 8004390:	197b      	adds	r3, r7, r5
 8004392:	1c22      	adds	r2, r4, #0
 8004394:	801a      	strh	r2, [r3, #0]
 8004396:	2308      	movs	r3, #8
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	1c02      	adds	r2, r0, #0
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	1dbb      	adds	r3, r7, #6
 80043a0:	1c0a      	adds	r2, r1, #0
 80043a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043a4:	1dbb      	adds	r3, r7, #6
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	197b      	adds	r3, r7, r5
 80043ac:	8819      	ldrh	r1, [r3, #0]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <I2C_RequestMemoryRead+0xc0>)
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2300      	movs	r3, #0
 80043b6:	f000 fa21 	bl	80047fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	6a39      	ldr	r1, [r7, #32]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f000 f8a0 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d001      	beq.n	80043ce <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e033      	b.n	8004436 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ce:	1dbb      	adds	r3, r7, #6
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d107      	bne.n	80043e6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043d6:	2308      	movs	r3, #8
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
 80043e4:	e019      	b.n	800441a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043e6:	2308      	movs	r3, #8
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	6a39      	ldr	r1, [r7, #32]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f881 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 8004404:	1e03      	subs	r3, r0, #0
 8004406:	d001      	beq.n	800440c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e014      	b.n	8004436 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800440c:	2308      	movs	r3, #8
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	0013      	movs	r3, r2
 8004424:	2200      	movs	r2, #0
 8004426:	2140      	movs	r1, #64	; 0x40
 8004428:	f000 f82e 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d001      	beq.n	8004434 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b004      	add	sp, #16
 800443c:	bdb0      	pop	{r4, r5, r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	80002000 	.word	0x80002000

08004444 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2202      	movs	r2, #2
 8004454:	4013      	ands	r3, r2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d103      	bne.n	8004462 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2201      	movs	r2, #1
 800446a:	4013      	ands	r3, r2
 800446c:	2b01      	cmp	r3, #1
 800446e:	d007      	beq.n	8004480 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2101      	movs	r1, #1
 800447c:	430a      	orrs	r2, r1
 800447e:	619a      	str	r2, [r3, #24]
  }
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004498:	e021      	b.n	80044de <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	d01e      	beq.n	80044de <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7ff f992 	bl	80037c8 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d113      	bne.n	80044de <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	2220      	movs	r2, #32
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2241      	movs	r2, #65	; 0x41
 80044c6:	2120      	movs	r1, #32
 80044c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2242      	movs	r2, #66	; 0x42
 80044ce:	2100      	movs	r1, #0
 80044d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2240      	movs	r2, #64	; 0x40
 80044d6:	2100      	movs	r1, #0
 80044d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e00f      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	425a      	negs	r2, r3
 80044ee:	4153      	adcs	r3, r2
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	001a      	movs	r2, r3
 80044f4:	1dfb      	adds	r3, r7, #7
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d0ce      	beq.n	800449a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}

08004506 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004512:	e02b      	b.n	800456c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	0018      	movs	r0, r3
 800451c:	f000 f86e 	bl	80045fc <I2C_IsErrorOccurred>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d001      	beq.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e029      	b.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	3301      	adds	r3, #1
 800452c:	d01e      	beq.n	800456c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452e:	f7ff f94b 	bl	80037c8 <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	429a      	cmp	r2, r3
 800453c:	d302      	bcc.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d113      	bne.n	800456c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	2220      	movs	r2, #32
 800454a:	431a      	orrs	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2241      	movs	r2, #65	; 0x41
 8004554:	2120      	movs	r1, #32
 8004556:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2242      	movs	r2, #66	; 0x42
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2240      	movs	r2, #64	; 0x40
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2202      	movs	r2, #2
 8004574:	4013      	ands	r3, r2
 8004576:	2b02      	cmp	r3, #2
 8004578:	d1cc      	bne.n	8004514 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004590:	e028      	b.n	80045e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 f82f 	bl	80045fc <I2C_IsErrorOccurred>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d001      	beq.n	80045a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e026      	b.n	80045f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7ff f90f 	bl	80037c8 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d113      	bne.n	80045e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	2220      	movs	r2, #32
 80045c2:	431a      	orrs	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2241      	movs	r2, #65	; 0x41
 80045cc:	2120      	movs	r1, #32
 80045ce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2242      	movs	r2, #66	; 0x42
 80045d4:	2100      	movs	r1, #0
 80045d6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2240      	movs	r2, #64	; 0x40
 80045dc:	2100      	movs	r1, #0
 80045de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e007      	b.n	80045f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2220      	movs	r2, #32
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d1cf      	bne.n	8004592 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b004      	add	sp, #16
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b08b      	sub	sp, #44	; 0x2c
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2327      	movs	r3, #39	; 0x27
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2210      	movs	r2, #16
 8004624:	4013      	ands	r3, r2
 8004626:	d100      	bne.n	800462a <I2C_IsErrorOccurred+0x2e>
 8004628:	e082      	b.n	8004730 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2210      	movs	r2, #16
 8004630:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004632:	e060      	b.n	80046f6 <I2C_IsErrorOccurred+0xfa>
 8004634:	2427      	movs	r4, #39	; 0x27
 8004636:	193b      	adds	r3, r7, r4
 8004638:	193a      	adds	r2, r7, r4
 800463a:	7812      	ldrb	r2, [r2, #0]
 800463c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3301      	adds	r3, #1
 8004642:	d058      	beq.n	80046f6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004644:	f7ff f8c0 	bl	80037c8 <HAL_GetTick>
 8004648:	0002      	movs	r2, r0
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	429a      	cmp	r2, r3
 8004652:	d306      	bcc.n	8004662 <I2C_IsErrorOccurred+0x66>
 8004654:	193b      	adds	r3, r7, r4
 8004656:	193a      	adds	r2, r7, r4
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d149      	bne.n	80046f6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	01db      	lsls	r3, r3, #7
 800466c:	4013      	ands	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004670:	2013      	movs	r0, #19
 8004672:	183b      	adds	r3, r7, r0
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	2142      	movs	r1, #66	; 0x42
 8004678:	5c52      	ldrb	r2, [r2, r1]
 800467a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	401a      	ands	r2, r3
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	429a      	cmp	r2, r3
 800468e:	d126      	bne.n	80046de <I2C_IsErrorOccurred+0xe2>
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	01db      	lsls	r3, r3, #7
 8004696:	429a      	cmp	r2, r3
 8004698:	d021      	beq.n	80046de <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800469a:	183b      	adds	r3, r7, r0
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d01d      	beq.n	80046de <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	01c9      	lsls	r1, r1, #7
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046b4:	f7ff f888 	bl	80037c8 <HAL_GetTick>
 80046b8:	0003      	movs	r3, r0
 80046ba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046bc:	e00f      	b.n	80046de <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046be:	f7ff f883 	bl	80037c8 <HAL_GetTick>
 80046c2:	0002      	movs	r2, r0
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b19      	cmp	r3, #25
 80046ca:	d908      	bls.n	80046de <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2220      	movs	r2, #32
 80046d0:	4313      	orrs	r3, r2
 80046d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046d4:	2327      	movs	r3, #39	; 0x27
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]

              break;
 80046dc:	e00b      	b.n	80046f6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2220      	movs	r2, #32
 80046e6:	4013      	ands	r3, r2
 80046e8:	2127      	movs	r1, #39	; 0x27
 80046ea:	187a      	adds	r2, r7, r1
 80046ec:	1879      	adds	r1, r7, r1
 80046ee:	7809      	ldrb	r1, [r1, #0]
 80046f0:	7011      	strb	r1, [r2, #0]
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d1e3      	bne.n	80046be <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2220      	movs	r2, #32
 80046fe:	4013      	ands	r3, r2
 8004700:	2b20      	cmp	r3, #32
 8004702:	d004      	beq.n	800470e <I2C_IsErrorOccurred+0x112>
 8004704:	2327      	movs	r3, #39	; 0x27
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d092      	beq.n	8004634 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800470e:	2327      	movs	r3, #39	; 0x27
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2220      	movs	r2, #32
 800471e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	2204      	movs	r2, #4
 8004724:	4313      	orrs	r3, r2
 8004726:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004728:	2327      	movs	r3, #39	; 0x27
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4013      	ands	r3, r2
 8004740:	d00c      	beq.n	800475c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	2201      	movs	r2, #1
 8004746:	4313      	orrs	r3, r2
 8004748:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	0052      	lsls	r2, r2, #1
 8004752:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004754:	2327      	movs	r3, #39	; 0x27
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4013      	ands	r3, r2
 8004764:	d00c      	beq.n	8004780 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	2208      	movs	r2, #8
 800476a:	4313      	orrs	r3, r2
 800476c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	00d2      	lsls	r2, r2, #3
 8004776:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004778:	2327      	movs	r3, #39	; 0x27
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4013      	ands	r3, r2
 8004788:	d00c      	beq.n	80047a4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2202      	movs	r2, #2
 800478e:	4313      	orrs	r3, r2
 8004790:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	0092      	lsls	r2, r2, #2
 800479a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800479c:	2327      	movs	r3, #39	; 0x27
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80047a4:	2327      	movs	r3, #39	; 0x27
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01d      	beq.n	80047ea <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7ff fe47 	bl	8004444 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	490d      	ldr	r1, [pc, #52]	; (80047f8 <I2C_IsErrorOccurred+0x1fc>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2241      	movs	r2, #65	; 0x41
 80047d6:	2120      	movs	r1, #32
 80047d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2242      	movs	r2, #66	; 0x42
 80047de:	2100      	movs	r1, #0
 80047e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2240      	movs	r2, #64	; 0x40
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80047ea:	2327      	movs	r3, #39	; 0x27
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	781b      	ldrb	r3, [r3, #0]
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b00b      	add	sp, #44	; 0x2c
 80047f6:	bd90      	pop	{r4, r7, pc}
 80047f8:	fe00e800 	.word	0xfe00e800

080047fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	0008      	movs	r0, r1
 8004806:	0011      	movs	r1, r2
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	240a      	movs	r4, #10
 800480c:	193b      	adds	r3, r7, r4
 800480e:	1c02      	adds	r2, r0, #0
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	2009      	movs	r0, #9
 8004814:	183b      	adds	r3, r7, r0
 8004816:	1c0a      	adds	r2, r1, #0
 8004818:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800481a:	193b      	adds	r3, r7, r4
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	059b      	lsls	r3, r3, #22
 8004820:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004822:	183b      	adds	r3, r7, r0
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	0419      	lsls	r1, r3, #16
 8004828:	23ff      	movs	r3, #255	; 0xff
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800482e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	4313      	orrs	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004846:	0d51      	lsrs	r1, r2, #21
 8004848:	2280      	movs	r2, #128	; 0x80
 800484a:	00d2      	lsls	r2, r2, #3
 800484c:	400a      	ands	r2, r1
 800484e:	4907      	ldr	r1, [pc, #28]	; (800486c <I2C_TransferConfig+0x70>)
 8004850:	430a      	orrs	r2, r1
 8004852:	43d2      	mvns	r2, r2
 8004854:	401a      	ands	r2, r3
 8004856:	0011      	movs	r1, r2
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b007      	add	sp, #28
 8004868:	bd90      	pop	{r4, r7, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	03ff63ff 	.word	0x03ff63ff

08004870 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2241      	movs	r2, #65	; 0x41
 800487e:	5c9b      	ldrb	r3, [r3, r2]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b20      	cmp	r3, #32
 8004884:	d138      	bne.n	80048f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2240      	movs	r2, #64	; 0x40
 800488a:	5c9b      	ldrb	r3, [r3, r2]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004890:	2302      	movs	r3, #2
 8004892:	e032      	b.n	80048fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2240      	movs	r2, #64	; 0x40
 8004898:	2101      	movs	r1, #1
 800489a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2241      	movs	r2, #65	; 0x41
 80048a0:	2124      	movs	r1, #36	; 0x24
 80048a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2101      	movs	r1, #1
 80048b0:	438a      	bics	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4911      	ldr	r1, [pc, #68]	; (8004904 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80048c0:	400a      	ands	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6819      	ldr	r1, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2241      	movs	r2, #65	; 0x41
 80048e8:	2120      	movs	r1, #32
 80048ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2240      	movs	r2, #64	; 0x40
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	ffffefff 	.word	0xffffefff

08004908 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2241      	movs	r2, #65	; 0x41
 8004916:	5c9b      	ldrb	r3, [r3, r2]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b20      	cmp	r3, #32
 800491c:	d139      	bne.n	8004992 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2240      	movs	r2, #64	; 0x40
 8004922:	5c9b      	ldrb	r3, [r3, r2]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004928:	2302      	movs	r3, #2
 800492a:	e033      	b.n	8004994 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	2101      	movs	r1, #1
 8004932:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2241      	movs	r2, #65	; 0x41
 8004938:	2124      	movs	r1, #36	; 0x24
 800493a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2101      	movs	r1, #1
 8004948:	438a      	bics	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2101      	movs	r1, #1
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2241      	movs	r2, #65	; 0x41
 8004982:	2120      	movs	r1, #32
 8004984:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2240      	movs	r2, #64	; 0x40
 800498a:	2100      	movs	r1, #0
 800498c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
  }
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b004      	add	sp, #16
 800499a:	bd80      	pop	{r7, pc}
 800499c:	fffff0ff 	.word	0xfffff0ff

080049a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	0019      	movs	r1, r3
 80049b2:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d11f      	bne.n	8004a04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	0013      	movs	r3, r2
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4912      	ldr	r1, [pc, #72]	; (8004a1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7fb fbb0 	bl	8000138 <__udivsi3>
 80049d8:	0003      	movs	r3, r0
 80049da:	3301      	adds	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049de:	e008      	b.n	80049f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e001      	b.n	80049f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e009      	b.n	8004a06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	401a      	ands	r2, r3
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d0ed      	beq.n	80049e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b004      	add	sp, #16
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	40007000 	.word	0x40007000
 8004a14:	fffff9ff 	.word	0xfffff9ff
 8004a18:	20000074 	.word	0x20000074
 8004a1c:	000f4240 	.word	0x000f4240

08004a20 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	23e0      	movs	r3, #224	; 0xe0
 8004a2a:	01db      	lsls	r3, r3, #7
 8004a2c:	4013      	ands	r3, r2
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000

08004a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e2f3      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4013      	ands	r3, r2
 8004a52:	d100      	bne.n	8004a56 <HAL_RCC_OscConfig+0x1e>
 8004a54:	e07c      	b.n	8004b50 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a56:	4bc3      	ldr	r3, [pc, #780]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2238      	movs	r2, #56	; 0x38
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a60:	4bc0      	ldr	r3, [pc, #768]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2203      	movs	r2, #3
 8004a66:	4013      	ands	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d102      	bne.n	8004a76 <HAL_RCC_OscConfig+0x3e>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d002      	beq.n	8004a7c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	4bb9      	ldr	r3, [pc, #740]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	029b      	lsls	r3, r3, #10
 8004a84:	4013      	ands	r3, r2
 8004a86:	d062      	beq.n	8004b4e <HAL_RCC_OscConfig+0x116>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d15e      	bne.n	8004b4e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e2ce      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	025b      	lsls	r3, r3, #9
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x78>
 8004aa0:	4bb0      	ldr	r3, [pc, #704]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4baf      	ldr	r3, [pc, #700]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	0249      	lsls	r1, r1, #9
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e020      	b.n	8004af2 <HAL_RCC_OscConfig+0xba>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	23a0      	movs	r3, #160	; 0xa0
 8004ab6:	02db      	lsls	r3, r3, #11
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d10e      	bne.n	8004ada <HAL_RCC_OscConfig+0xa2>
 8004abc:	4ba9      	ldr	r3, [pc, #676]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4ba8      	ldr	r3, [pc, #672]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	2180      	movs	r1, #128	; 0x80
 8004ac4:	02c9      	lsls	r1, r1, #11
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	4ba6      	ldr	r3, [pc, #664]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4ba5      	ldr	r3, [pc, #660]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004ad0:	2180      	movs	r1, #128	; 0x80
 8004ad2:	0249      	lsls	r1, r1, #9
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e00b      	b.n	8004af2 <HAL_RCC_OscConfig+0xba>
 8004ada:	4ba2      	ldr	r3, [pc, #648]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4ba1      	ldr	r3, [pc, #644]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004ae0:	49a1      	ldr	r1, [pc, #644]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004ae2:	400a      	ands	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	4b9f      	ldr	r3, [pc, #636]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b9e      	ldr	r3, [pc, #632]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004aec:	499f      	ldr	r1, [pc, #636]	; (8004d6c <HAL_RCC_OscConfig+0x334>)
 8004aee:	400a      	ands	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fe fe65 	bl	80037c8 <HAL_GetTick>
 8004afe:	0003      	movs	r3, r0
 8004b00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fe fe60 	bl	80037c8 <HAL_GetTick>
 8004b08:	0002      	movs	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e28d      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b16:	4b93      	ldr	r3, [pc, #588]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	029b      	lsls	r3, r3, #10
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0xcc>
 8004b22:	e015      	b.n	8004b50 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fe fe50 	bl	80037c8 <HAL_GetTick>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b2e:	f7fe fe4b 	bl	80037c8 <HAL_GetTick>
 8004b32:	0002      	movs	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b64      	cmp	r3, #100	; 0x64
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e278      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b40:	4b88      	ldr	r3, [pc, #544]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	029b      	lsls	r3, r3, #10
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d1f0      	bne.n	8004b2e <HAL_RCC_OscConfig+0xf6>
 8004b4c:	e000      	b.n	8004b50 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2202      	movs	r2, #2
 8004b56:	4013      	ands	r3, r2
 8004b58:	d100      	bne.n	8004b5c <HAL_RCC_OscConfig+0x124>
 8004b5a:	e099      	b.n	8004c90 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5c:	4b81      	ldr	r3, [pc, #516]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2238      	movs	r2, #56	; 0x38
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b66:	4b7f      	ldr	r3, [pc, #508]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d102      	bne.n	8004b7c <HAL_RCC_OscConfig+0x144>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d002      	beq.n	8004b82 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d135      	bne.n	8004bee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b82:	4b78      	ldr	r3, [pc, #480]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d005      	beq.n	8004b9a <HAL_RCC_OscConfig+0x162>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e24b      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9a:	4b72      	ldr	r3, [pc, #456]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4a74      	ldr	r2, [pc, #464]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	021a      	lsls	r2, r3, #8
 8004baa:	4b6e      	ldr	r3, [pc, #440]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d112      	bne.n	8004bdc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bb6:	4b6b      	ldr	r3, [pc, #428]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6e      	ldr	r2, [pc, #440]	; (8004d74 <HAL_RCC_OscConfig+0x33c>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	0019      	movs	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	4b67      	ldr	r3, [pc, #412]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004bca:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	0adb      	lsrs	r3, r3, #11
 8004bd0:	2207      	movs	r2, #7
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	4a68      	ldr	r2, [pc, #416]	; (8004d78 <HAL_RCC_OscConfig+0x340>)
 8004bd6:	40da      	lsrs	r2, r3
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCC_OscConfig+0x344>)
 8004bda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bdc:	4b68      	ldr	r3, [pc, #416]	; (8004d80 <HAL_RCC_OscConfig+0x348>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7fe fd95 	bl	8003710 <HAL_InitTick>
 8004be6:	1e03      	subs	r3, r0, #0
 8004be8:	d051      	beq.n	8004c8e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e221      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d030      	beq.n	8004c58 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bf6:	4b5b      	ldr	r3, [pc, #364]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5e      	ldr	r2, [pc, #376]	; (8004d74 <HAL_RCC_OscConfig+0x33c>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	0019      	movs	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	4b57      	ldr	r3, [pc, #348]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004c0a:	4b56      	ldr	r3, [pc, #344]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b55      	ldr	r3, [pc, #340]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	0049      	lsls	r1, r1, #1
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fe fdd6 	bl	80037c8 <HAL_GetTick>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c22:	f7fe fdd1 	bl	80037c8 <HAL_GetTick>
 8004c26:	0002      	movs	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e1fe      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c34:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c40:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a4a      	ldr	r2, [pc, #296]	; (8004d70 <HAL_RCC_OscConfig+0x338>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	021a      	lsls	r2, r3, #8
 8004c50:	4b44      	ldr	r3, [pc, #272]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	e01b      	b.n	8004c90 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004c58:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b41      	ldr	r3, [pc, #260]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c5e:	4949      	ldr	r1, [pc, #292]	; (8004d84 <HAL_RCC_OscConfig+0x34c>)
 8004c60:	400a      	ands	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fe fdb0 	bl	80037c8 <HAL_GetTick>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6e:	f7fe fdab 	bl	80037c8 <HAL_GetTick>
 8004c72:	0002      	movs	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e1d8      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c80:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x236>
 8004c8c:	e000      	b.n	8004c90 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c8e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2208      	movs	r2, #8
 8004c96:	4013      	ands	r3, r2
 8004c98:	d047      	beq.n	8004d2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c9a:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2238      	movs	r2, #56	; 0x38
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b18      	cmp	r3, #24
 8004ca4:	d10a      	bne.n	8004cbc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004caa:	2202      	movs	r2, #2
 8004cac:	4013      	ands	r3, r2
 8004cae:	d03c      	beq.n	8004d2a <HAL_RCC_OscConfig+0x2f2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d138      	bne.n	8004d2a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e1ba      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d019      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cc8:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fd7a 	bl	80037c8 <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fe fd75 	bl	80037c8 <HAL_GetTick>
 8004cde:	0002      	movs	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e1a2      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d0f1      	beq.n	8004cda <HAL_RCC_OscConfig+0x2a2>
 8004cf6:	e018      	b.n	8004d2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004cfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004cfe:	2101      	movs	r1, #1
 8004d00:	438a      	bics	r2, r1
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fe fd60 	bl	80037c8 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fe fd5b 	bl	80037c8 <HAL_GetTick>
 8004d12:	0002      	movs	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e188      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d24:	2202      	movs	r2, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d1f1      	bne.n	8004d0e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	4013      	ands	r3, r2
 8004d32:	d100      	bne.n	8004d36 <HAL_RCC_OscConfig+0x2fe>
 8004d34:	e0c6      	b.n	8004ec4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d36:	231f      	movs	r3, #31
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2238      	movs	r2, #56	; 0x38
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d11e      	bne.n	8004d88 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d4a:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <HAL_RCC_OscConfig+0x32c>)
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	2202      	movs	r2, #2
 8004d50:	4013      	ands	r3, r2
 8004d52:	d100      	bne.n	8004d56 <HAL_RCC_OscConfig+0x31e>
 8004d54:	e0b6      	b.n	8004ec4 <HAL_RCC_OscConfig+0x48c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d000      	beq.n	8004d60 <HAL_RCC_OscConfig+0x328>
 8004d5e:	e0b1      	b.n	8004ec4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e166      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
 8004d64:	40021000 	.word	0x40021000
 8004d68:	fffeffff 	.word	0xfffeffff
 8004d6c:	fffbffff 	.word	0xfffbffff
 8004d70:	ffff80ff 	.word	0xffff80ff
 8004d74:	ffffc7ff 	.word	0xffffc7ff
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	20000074 	.word	0x20000074
 8004d80:	20000078 	.word	0x20000078
 8004d84:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d88:	4bac      	ldr	r3, [pc, #688]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	055b      	lsls	r3, r3, #21
 8004d90:	4013      	ands	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_OscConfig+0x360>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <HAL_RCC_OscConfig+0x362>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d011      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d9e:	4ba7      	ldr	r3, [pc, #668]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004da2:	4ba6      	ldr	r3, [pc, #664]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	0549      	lsls	r1, r1, #21
 8004da8:	430a      	orrs	r2, r1
 8004daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dac:	4ba3      	ldr	r3, [pc, #652]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db0:	2380      	movs	r3, #128	; 0x80
 8004db2:	055b      	lsls	r3, r3, #21
 8004db4:	4013      	ands	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004dba:	231f      	movs	r3, #31
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc2:	4b9f      	ldr	r3, [pc, #636]	; (8005040 <HAL_RCC_OscConfig+0x608>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	2380      	movs	r3, #128	; 0x80
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d11a      	bne.n	8004e04 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dce:	4b9c      	ldr	r3, [pc, #624]	; (8005040 <HAL_RCC_OscConfig+0x608>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b9b      	ldr	r3, [pc, #620]	; (8005040 <HAL_RCC_OscConfig+0x608>)
 8004dd4:	2180      	movs	r1, #128	; 0x80
 8004dd6:	0049      	lsls	r1, r1, #1
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ddc:	f7fe fcf4 	bl	80037c8 <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fe fcef 	bl	80037c8 <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e11c      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4b91      	ldr	r3, [pc, #580]	; (8005040 <HAL_RCC_OscConfig+0x608>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4013      	ands	r3, r2
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x3e2>
 8004e0c:	4b8b      	ldr	r3, [pc, #556]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e10:	4b8a      	ldr	r3, [pc, #552]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e12:	2101      	movs	r1, #1
 8004e14:	430a      	orrs	r2, r1
 8004e16:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e18:	e01c      	b.n	8004e54 <HAL_RCC_OscConfig+0x41c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b05      	cmp	r3, #5
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x404>
 8004e22:	4b86      	ldr	r3, [pc, #536]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e26:	4b85      	ldr	r3, [pc, #532]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e28:	2104      	movs	r1, #4
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e2e:	4b83      	ldr	r3, [pc, #524]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e32:	4b82      	ldr	r3, [pc, #520]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e34:	2101      	movs	r1, #1
 8004e36:	430a      	orrs	r2, r1
 8004e38:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e3a:	e00b      	b.n	8004e54 <HAL_RCC_OscConfig+0x41c>
 8004e3c:	4b7f      	ldr	r3, [pc, #508]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e40:	4b7e      	ldr	r3, [pc, #504]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e42:	2101      	movs	r1, #1
 8004e44:	438a      	bics	r2, r1
 8004e46:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e48:	4b7c      	ldr	r3, [pc, #496]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e4c:	4b7b      	ldr	r3, [pc, #492]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e4e:	2104      	movs	r1, #4
 8004e50:	438a      	bics	r2, r1
 8004e52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d014      	beq.n	8004e86 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fe fcb4 	bl	80037c8 <HAL_GetTick>
 8004e60:	0003      	movs	r3, r0
 8004e62:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e64:	e009      	b.n	8004e7a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e66:	f7fe fcaf 	bl	80037c8 <HAL_GetTick>
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	4a74      	ldr	r2, [pc, #464]	; (8005044 <HAL_RCC_OscConfig+0x60c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e0db      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e7a:	4b70      	ldr	r3, [pc, #448]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	2202      	movs	r2, #2
 8004e80:	4013      	ands	r3, r2
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x42e>
 8004e84:	e013      	b.n	8004eae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fe fc9f 	bl	80037c8 <HAL_GetTick>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e8e:	e009      	b.n	8004ea4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e90:	f7fe fc9a 	bl	80037c8 <HAL_GetTick>
 8004e94:	0002      	movs	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	4a6a      	ldr	r2, [pc, #424]	; (8005044 <HAL_RCC_OscConfig+0x60c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0c6      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea4:	4b65      	ldr	r3, [pc, #404]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004eae:	231f      	movs	r3, #31
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004eb8:	4b60      	ldr	r3, [pc, #384]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ebc:	4b5f      	ldr	r3, [pc, #380]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004ebe:	4962      	ldr	r1, [pc, #392]	; (8005048 <HAL_RCC_OscConfig+0x610>)
 8004ec0:	400a      	ands	r2, r1
 8004ec2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d100      	bne.n	8004ece <HAL_RCC_OscConfig+0x496>
 8004ecc:	e0b0      	b.n	8005030 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ece:	4b5b      	ldr	r3, [pc, #364]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2238      	movs	r2, #56	; 0x38
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d100      	bne.n	8004edc <HAL_RCC_OscConfig+0x4a4>
 8004eda:	e078      	b.n	8004fce <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d153      	bne.n	8004f8c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee4:	4b55      	ldr	r3, [pc, #340]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b54      	ldr	r3, [pc, #336]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004eea:	4958      	ldr	r1, [pc, #352]	; (800504c <HAL_RCC_OscConfig+0x614>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fe fc6a 	bl	80037c8 <HAL_GetTick>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efa:	f7fe fc65 	bl	80037c8 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e092      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0c:	4b4b      	ldr	r3, [pc, #300]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	049b      	lsls	r3, r3, #18
 8004f14:	4013      	ands	r3, r2
 8004f16:	d1f0      	bne.n	8004efa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f18:	4b48      	ldr	r3, [pc, #288]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a4c      	ldr	r2, [pc, #304]	; (8005050 <HAL_RCC_OscConfig+0x618>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	4b3e      	ldr	r3, [pc, #248]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f42:	430a      	orrs	r2, r1
 8004f44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f46:	4b3d      	ldr	r3, [pc, #244]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b3c      	ldr	r3, [pc, #240]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	0449      	lsls	r1, r1, #17
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f54:	4b39      	ldr	r3, [pc, #228]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	4b38      	ldr	r3, [pc, #224]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	0549      	lsls	r1, r1, #21
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f62:	f7fe fc31 	bl	80037c8 <HAL_GetTick>
 8004f66:	0003      	movs	r3, r0
 8004f68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fe fc2c 	bl	80037c8 <HAL_GetTick>
 8004f70:	0002      	movs	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e059      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7e:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	049b      	lsls	r3, r3, #18
 8004f86:	4013      	ands	r3, r2
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x534>
 8004f8a:	e051      	b.n	8005030 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004f92:	492e      	ldr	r1, [pc, #184]	; (800504c <HAL_RCC_OscConfig+0x614>)
 8004f94:	400a      	ands	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fe fc16 	bl	80037c8 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fe fc11 	bl	80037c8 <HAL_GetTick>
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e03e      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb4:	4b21      	ldr	r3, [pc, #132]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	049b      	lsls	r3, r3, #18
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d1f0      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004fc0:	4b1e      	ldr	r3, [pc, #120]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004fc6:	4923      	ldr	r1, [pc, #140]	; (8005054 <HAL_RCC_OscConfig+0x61c>)
 8004fc8:	400a      	ands	r2, r1
 8004fca:	60da      	str	r2, [r3, #12]
 8004fcc:	e030      	b.n	8005030 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e02b      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004fda:	4b18      	ldr	r3, [pc, #96]	; (800503c <HAL_RCC_OscConfig+0x604>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	401a      	ands	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d11e      	bne.n	800502c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2270      	movs	r2, #112	; 0x70
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d117      	bne.n	800502c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	23fe      	movs	r3, #254	; 0xfe
 8005000:	01db      	lsls	r3, r3, #7
 8005002:	401a      	ands	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d10e      	bne.n	800502c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	23f8      	movs	r3, #248	; 0xf8
 8005012:	039b      	lsls	r3, r3, #14
 8005014:	401a      	ands	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d106      	bne.n	800502c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	0f5b      	lsrs	r3, r3, #29
 8005022:	075a      	lsls	r2, r3, #29
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b008      	add	sp, #32
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	40021000 	.word	0x40021000
 8005040:	40007000 	.word	0x40007000
 8005044:	00001388 	.word	0x00001388
 8005048:	efffffff 	.word	0xefffffff
 800504c:	feffffff 	.word	0xfeffffff
 8005050:	1fc1808c 	.word	0x1fc1808c
 8005054:	effefffc 	.word	0xeffefffc

08005058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0e9      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800506c:	4b76      	ldr	r3, [pc, #472]	; (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2207      	movs	r2, #7
 8005072:	4013      	ands	r3, r2
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d91e      	bls.n	80050b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b73      	ldr	r3, [pc, #460]	; (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2207      	movs	r2, #7
 8005080:	4393      	bics	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	4b70      	ldr	r3, [pc, #448]	; (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800508c:	f7fe fb9c 	bl	80037c8 <HAL_GetTick>
 8005090:	0003      	movs	r3, r0
 8005092:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005094:	e009      	b.n	80050aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005096:	f7fe fb97 	bl	80037c8 <HAL_GetTick>
 800509a:	0002      	movs	r2, r0
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	4a6a      	ldr	r2, [pc, #424]	; (800524c <HAL_RCC_ClockConfig+0x1f4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e0ca      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050aa:	4b67      	ldr	r3, [pc, #412]	; (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2207      	movs	r2, #7
 80050b0:	4013      	ands	r3, r2
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d1ee      	bne.n	8005096 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2202      	movs	r2, #2
 80050be:	4013      	ands	r3, r2
 80050c0:	d015      	beq.n	80050ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2204      	movs	r2, #4
 80050c8:	4013      	ands	r3, r2
 80050ca:	d006      	beq.n	80050da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050cc:	4b60      	ldr	r3, [pc, #384]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	4b5f      	ldr	r3, [pc, #380]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 80050d2:	21e0      	movs	r1, #224	; 0xe0
 80050d4:	01c9      	lsls	r1, r1, #7
 80050d6:	430a      	orrs	r2, r1
 80050d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050da:	4b5d      	ldr	r3, [pc, #372]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4a5d      	ldr	r2, [pc, #372]	; (8005254 <HAL_RCC_ClockConfig+0x1fc>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	0019      	movs	r1, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	4b59      	ldr	r3, [pc, #356]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2201      	movs	r2, #1
 80050f4:	4013      	ands	r3, r2
 80050f6:	d057      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d107      	bne.n	8005110 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005100:	4b53      	ldr	r3, [pc, #332]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	029b      	lsls	r3, r3, #10
 8005108:	4013      	ands	r3, r2
 800510a:	d12b      	bne.n	8005164 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e097      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d107      	bne.n	8005128 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005118:	4b4d      	ldr	r3, [pc, #308]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	049b      	lsls	r3, r3, #18
 8005120:	4013      	ands	r3, r2
 8005122:	d11f      	bne.n	8005164 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e08b      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d107      	bne.n	8005140 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005130:	4b47      	ldr	r3, [pc, #284]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4013      	ands	r3, r2
 800513a:	d113      	bne.n	8005164 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e07f      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d106      	bne.n	8005156 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005148:	4b41      	ldr	r3, [pc, #260]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 800514a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514c:	2202      	movs	r2, #2
 800514e:	4013      	ands	r3, r2
 8005150:	d108      	bne.n	8005164 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e074      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005156:	4b3e      	ldr	r3, [pc, #248]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 8005158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515a:	2202      	movs	r2, #2
 800515c:	4013      	ands	r3, r2
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e06d      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005164:	4b3a      	ldr	r3, [pc, #232]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2207      	movs	r2, #7
 800516a:	4393      	bics	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	4b37      	ldr	r3, [pc, #220]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 8005174:	430a      	orrs	r2, r1
 8005176:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005178:	f7fe fb26 	bl	80037c8 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005180:	e009      	b.n	8005196 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005182:	f7fe fb21 	bl	80037c8 <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	4a2f      	ldr	r2, [pc, #188]	; (800524c <HAL_RCC_ClockConfig+0x1f4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e054      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	4b2e      	ldr	r3, [pc, #184]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2238      	movs	r2, #56	; 0x38
 800519c:	401a      	ands	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d1ec      	bne.n	8005182 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a8:	4b27      	ldr	r3, [pc, #156]	; (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2207      	movs	r2, #7
 80051ae:	4013      	ands	r3, r2
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d21e      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2207      	movs	r2, #7
 80051bc:	4393      	bics	r3, r2
 80051be:	0019      	movs	r1, r3
 80051c0:	4b21      	ldr	r3, [pc, #132]	; (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051c8:	f7fe fafe 	bl	80037c8 <HAL_GetTick>
 80051cc:	0003      	movs	r3, r0
 80051ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051d0:	e009      	b.n	80051e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d2:	f7fe faf9 	bl	80037c8 <HAL_GetTick>
 80051d6:	0002      	movs	r2, r0
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	4a1b      	ldr	r2, [pc, #108]	; (800524c <HAL_RCC_ClockConfig+0x1f4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e02c      	b.n	8005240 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2207      	movs	r2, #7
 80051ec:	4013      	ands	r3, r2
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d1ee      	bne.n	80051d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2204      	movs	r2, #4
 80051fa:	4013      	ands	r3, r2
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051fe:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	4a15      	ldr	r2, [pc, #84]	; (8005258 <HAL_RCC_ClockConfig+0x200>)
 8005204:	4013      	ands	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005212:	f000 f829 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005216:	0001      	movs	r1, r0
 8005218:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	220f      	movs	r2, #15
 8005220:	401a      	ands	r2, r3
 8005222:	4b0e      	ldr	r3, [pc, #56]	; (800525c <HAL_RCC_ClockConfig+0x204>)
 8005224:	0092      	lsls	r2, r2, #2
 8005226:	58d3      	ldr	r3, [r2, r3]
 8005228:	221f      	movs	r2, #31
 800522a:	4013      	ands	r3, r2
 800522c:	000a      	movs	r2, r1
 800522e:	40da      	lsrs	r2, r3
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <HAL_RCC_ClockConfig+0x208>)
 8005232:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_ClockConfig+0x20c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	0018      	movs	r0, r3
 800523a:	f7fe fa69 	bl	8003710 <HAL_InitTick>
 800523e:	0003      	movs	r3, r0
}
 8005240:	0018      	movs	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	b004      	add	sp, #16
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40022000 	.word	0x40022000
 800524c:	00001388 	.word	0x00001388
 8005250:	40021000 	.word	0x40021000
 8005254:	fffff0ff 	.word	0xfffff0ff
 8005258:	ffff8fff 	.word	0xffff8fff
 800525c:	080096e8 	.word	0x080096e8
 8005260:	20000074 	.word	0x20000074
 8005264:	20000078 	.word	0x20000078

08005268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800526e:	4b3c      	ldr	r3, [pc, #240]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2238      	movs	r2, #56	; 0x38
 8005274:	4013      	ands	r3, r2
 8005276:	d10f      	bne.n	8005298 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005278:	4b39      	ldr	r3, [pc, #228]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	0adb      	lsrs	r3, r3, #11
 800527e:	2207      	movs	r2, #7
 8005280:	4013      	ands	r3, r2
 8005282:	2201      	movs	r2, #1
 8005284:	409a      	lsls	r2, r3
 8005286:	0013      	movs	r3, r2
 8005288:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	4835      	ldr	r0, [pc, #212]	; (8005364 <HAL_RCC_GetSysClockFreq+0xfc>)
 800528e:	f7fa ff53 	bl	8000138 <__udivsi3>
 8005292:	0003      	movs	r3, r0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	e05d      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005298:	4b31      	ldr	r3, [pc, #196]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2238      	movs	r2, #56	; 0x38
 800529e:	4013      	ands	r3, r2
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d102      	bne.n	80052aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052a4:	4b30      	ldr	r3, [pc, #192]	; (8005368 <HAL_RCC_GetSysClockFreq+0x100>)
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	e054      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052aa:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2238      	movs	r2, #56	; 0x38
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d138      	bne.n	8005328 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80052b6:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2203      	movs	r2, #3
 80052bc:	4013      	ands	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c0:	4b27      	ldr	r3, [pc, #156]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	2207      	movs	r2, #7
 80052c8:	4013      	ands	r3, r2
 80052ca:	3301      	adds	r3, #1
 80052cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d10d      	bne.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4824      	ldr	r0, [pc, #144]	; (8005368 <HAL_RCC_GetSysClockFreq+0x100>)
 80052d8:	f7fa ff2e 	bl	8000138 <__udivsi3>
 80052dc:	0003      	movs	r3, r0
 80052de:	0019      	movs	r1, r3
 80052e0:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	227f      	movs	r2, #127	; 0x7f
 80052e8:	4013      	ands	r3, r2
 80052ea:	434b      	muls	r3, r1
 80052ec:	617b      	str	r3, [r7, #20]
        break;
 80052ee:	e00d      	b.n	800530c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	481c      	ldr	r0, [pc, #112]	; (8005364 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052f4:	f7fa ff20 	bl	8000138 <__udivsi3>
 80052f8:	0003      	movs	r3, r0
 80052fa:	0019      	movs	r1, r3
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	227f      	movs	r2, #127	; 0x7f
 8005304:	4013      	ands	r3, r2
 8005306:	434b      	muls	r3, r1
 8005308:	617b      	str	r3, [r7, #20]
        break;
 800530a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	0f5b      	lsrs	r3, r3, #29
 8005312:	2207      	movs	r2, #7
 8005314:	4013      	ands	r3, r2
 8005316:	3301      	adds	r3, #1
 8005318:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	6978      	ldr	r0, [r7, #20]
 800531e:	f7fa ff0b 	bl	8000138 <__udivsi3>
 8005322:	0003      	movs	r3, r0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	e015      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005328:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2238      	movs	r2, #56	; 0x38
 800532e:	4013      	ands	r3, r2
 8005330:	2b20      	cmp	r3, #32
 8005332:	d103      	bne.n	800533c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e00b      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_RCC_GetSysClockFreq+0xf8>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2238      	movs	r2, #56	; 0x38
 8005342:	4013      	ands	r3, r2
 8005344:	2b18      	cmp	r3, #24
 8005346:	d103      	bne.n	8005350 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005348:	23fa      	movs	r3, #250	; 0xfa
 800534a:	01db      	lsls	r3, r3, #7
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	e001      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005354:	693b      	ldr	r3, [r7, #16]
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b006      	add	sp, #24
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	40021000 	.word	0x40021000
 8005364:	00f42400 	.word	0x00f42400
 8005368:	007a1200 	.word	0x007a1200

0800536c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005370:	4b02      	ldr	r3, [pc, #8]	; (800537c <HAL_RCC_GetHCLKFreq+0x10>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	20000074 	.word	0x20000074

08005380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005380:	b5b0      	push	{r4, r5, r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005384:	f7ff fff2 	bl	800536c <HAL_RCC_GetHCLKFreq>
 8005388:	0004      	movs	r4, r0
 800538a:	f7ff fb49 	bl	8004a20 <LL_RCC_GetAPB1Prescaler>
 800538e:	0003      	movs	r3, r0
 8005390:	0b1a      	lsrs	r2, r3, #12
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005394:	0092      	lsls	r2, r2, #2
 8005396:	58d3      	ldr	r3, [r2, r3]
 8005398:	221f      	movs	r2, #31
 800539a:	4013      	ands	r3, r2
 800539c:	40dc      	lsrs	r4, r3
 800539e:	0023      	movs	r3, r4
}
 80053a0:	0018      	movs	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bdb0      	pop	{r4, r5, r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	08009728 	.word	0x08009728

080053ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80053b4:	2313      	movs	r3, #19
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053bc:	2312      	movs	r3, #18
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	4013      	ands	r3, r2
 80053ce:	d100      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80053d0:	e0a3      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d2:	2011      	movs	r0, #17
 80053d4:	183b      	adds	r3, r7, r0
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053da:	4b7f      	ldr	r3, [pc, #508]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	055b      	lsls	r3, r3, #21
 80053e2:	4013      	ands	r3, r2
 80053e4:	d110      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e6:	4b7c      	ldr	r3, [pc, #496]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ea:	4b7b      	ldr	r3, [pc, #492]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	0549      	lsls	r1, r1, #21
 80053f0:	430a      	orrs	r2, r1
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80053f4:	4b78      	ldr	r3, [pc, #480]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80053f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	055b      	lsls	r3, r3, #21
 80053fc:	4013      	ands	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005402:	183b      	adds	r3, r7, r0
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005408:	4b74      	ldr	r3, [pc, #464]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b73      	ldr	r3, [pc, #460]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	0049      	lsls	r1, r1, #1
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005416:	f7fe f9d7 	bl	80037c8 <HAL_GetTick>
 800541a:	0003      	movs	r3, r0
 800541c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800541e:	e00b      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005420:	f7fe f9d2 	bl	80037c8 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d904      	bls.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800542e:	2313      	movs	r3, #19
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	2203      	movs	r2, #3
 8005434:	701a      	strb	r2, [r3, #0]
        break;
 8005436:	e005      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005438:	4b68      	ldr	r3, [pc, #416]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	4013      	ands	r3, r2
 8005442:	d0ed      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005444:	2313      	movs	r3, #19
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d154      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800544e:	4b62      	ldr	r3, [pc, #392]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005452:	23c0      	movs	r3, #192	; 0xc0
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4013      	ands	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d019      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	429a      	cmp	r2, r3
 8005468:	d014      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800546a:	4b5b      	ldr	r3, [pc, #364]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	4a5c      	ldr	r2, [pc, #368]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005470:	4013      	ands	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005474:	4b58      	ldr	r3, [pc, #352]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005476:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005478:	4b57      	ldr	r3, [pc, #348]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	0249      	lsls	r1, r1, #9
 800547e:	430a      	orrs	r2, r1
 8005480:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005482:	4b55      	ldr	r3, [pc, #340]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005484:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005486:	4b54      	ldr	r3, [pc, #336]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005488:	4956      	ldr	r1, [pc, #344]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800548a:	400a      	ands	r2, r1
 800548c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800548e:	4b52      	ldr	r3, [pc, #328]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2201      	movs	r2, #1
 8005498:	4013      	ands	r3, r2
 800549a:	d016      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fe f994 	bl	80037c8 <HAL_GetTick>
 80054a0:	0003      	movs	r3, r0
 80054a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a4:	e00c      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a6:	f7fe f98f 	bl	80037c8 <HAL_GetTick>
 80054aa:	0002      	movs	r2, r0
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	4a4d      	ldr	r2, [pc, #308]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d904      	bls.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80054b6:	2313      	movs	r3, #19
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	2203      	movs	r2, #3
 80054bc:	701a      	strb	r2, [r3, #0]
            break;
 80054be:	e004      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c0:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c4:	2202      	movs	r2, #2
 80054c6:	4013      	ands	r3, r2
 80054c8:	d0ed      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80054ca:	2313      	movs	r3, #19
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054d4:	4b40      	ldr	r3, [pc, #256]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d8:	4a41      	ldr	r2, [pc, #260]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80054da:	4013      	ands	r3, r2
 80054dc:	0019      	movs	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	4b3d      	ldr	r3, [pc, #244]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054e4:	430a      	orrs	r2, r1
 80054e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80054e8:	e00c      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ea:	2312      	movs	r3, #18
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2213      	movs	r2, #19
 80054f0:	18ba      	adds	r2, r7, r2
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e005      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	2312      	movs	r3, #18
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	2213      	movs	r2, #19
 80054fe:	18ba      	adds	r2, r7, r2
 8005500:	7812      	ldrb	r2, [r2, #0]
 8005502:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005504:	2311      	movs	r3, #17
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d105      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550e:	4b32      	ldr	r3, [pc, #200]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005512:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005514:	4935      	ldr	r1, [pc, #212]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005516:	400a      	ands	r2, r1
 8005518:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	4013      	ands	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005524:	4b2c      	ldr	r3, [pc, #176]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	2203      	movs	r2, #3
 800552a:	4393      	bics	r3, r2
 800552c:	0019      	movs	r1, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005534:	430a      	orrs	r2, r1
 8005536:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2220      	movs	r2, #32
 800553e:	4013      	ands	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005542:	4b25      	ldr	r3, [pc, #148]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005548:	4013      	ands	r3, r2
 800554a:	0019      	movs	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	4b21      	ldr	r3, [pc, #132]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005552:	430a      	orrs	r2, r1
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	01db      	lsls	r3, r3, #7
 800555e:	4013      	ands	r3, r2
 8005560:	d015      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	0899      	lsrs	r1, r3, #2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005570:	430a      	orrs	r2, r1
 8005572:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	05db      	lsls	r3, r3, #23
 800557c:	429a      	cmp	r2, r3
 800557e:	d106      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005580:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005586:	2180      	movs	r1, #128	; 0x80
 8005588:	0249      	lsls	r1, r1, #9
 800558a:	430a      	orrs	r2, r1
 800558c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4013      	ands	r3, r2
 8005598:	d016      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800559a:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	01db      	lsls	r3, r3, #7
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d106      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055c0:	2180      	movs	r1, #128	; 0x80
 80055c2:	0249      	lsls	r1, r1, #9
 80055c4:	430a      	orrs	r2, r1
 80055c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80055c8:	2312      	movs	r3, #18
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
}
 80055ce:	0018      	movs	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b006      	add	sp, #24
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40007000 	.word	0x40007000
 80055e0:	fffffcff 	.word	0xfffffcff
 80055e4:	fffeffff 	.word	0xfffeffff
 80055e8:	00001388 	.word	0x00001388
 80055ec:	efffffff 	.word	0xefffffff
 80055f0:	ffffcfff 	.word	0xffffcfff
 80055f4:	ffff3fff 	.word	0xffff3fff

080055f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e04a      	b.n	80056a0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	223d      	movs	r2, #61	; 0x3d
 800560e:	5c9b      	ldrb	r3, [r3, r2]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	223c      	movs	r2, #60	; 0x3c
 800561a:	2100      	movs	r1, #0
 800561c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0018      	movs	r0, r3
 8005622:	f7fd fee7 	bl	80033f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	223d      	movs	r2, #61	; 0x3d
 800562a:	2102      	movs	r1, #2
 800562c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3304      	adds	r3, #4
 8005636:	0019      	movs	r1, r3
 8005638:	0010      	movs	r0, r2
 800563a:	f000 f951 	bl	80058e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2248      	movs	r2, #72	; 0x48
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	223e      	movs	r2, #62	; 0x3e
 800564a:	2101      	movs	r1, #1
 800564c:	5499      	strb	r1, [r3, r2]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	223f      	movs	r2, #63	; 0x3f
 8005652:	2101      	movs	r1, #1
 8005654:	5499      	strb	r1, [r3, r2]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2240      	movs	r2, #64	; 0x40
 800565a:	2101      	movs	r1, #1
 800565c:	5499      	strb	r1, [r3, r2]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2241      	movs	r2, #65	; 0x41
 8005662:	2101      	movs	r1, #1
 8005664:	5499      	strb	r1, [r3, r2]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2242      	movs	r2, #66	; 0x42
 800566a:	2101      	movs	r1, #1
 800566c:	5499      	strb	r1, [r3, r2]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2243      	movs	r2, #67	; 0x43
 8005672:	2101      	movs	r1, #1
 8005674:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2244      	movs	r2, #68	; 0x44
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2245      	movs	r2, #69	; 0x45
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2246      	movs	r2, #70	; 0x46
 800568a:	2101      	movs	r1, #1
 800568c:	5499      	strb	r1, [r3, r2]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2247      	movs	r2, #71	; 0x47
 8005692:	2101      	movs	r1, #1
 8005694:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	223d      	movs	r2, #61	; 0x3d
 800569a:	2101      	movs	r1, #1
 800569c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	0018      	movs	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b002      	add	sp, #8
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	223d      	movs	r2, #61	; 0x3d
 80056b4:	5c9b      	ldrb	r3, [r3, r2]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e02f      	b.n	8005720 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	223d      	movs	r2, #61	; 0x3d
 80056c4:	2102      	movs	r1, #2
 80056c6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a16      	ldr	r2, [pc, #88]	; (8005728 <HAL_TIM_Base_Start+0x80>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_TIM_Base_Start+0x34>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a15      	ldr	r2, [pc, #84]	; (800572c <HAL_TIM_Base_Start+0x84>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d116      	bne.n	800570a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4a13      	ldr	r2, [pc, #76]	; (8005730 <HAL_TIM_Base_Start+0x88>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d016      	beq.n	800571c <HAL_TIM_Base_Start+0x74>
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	025b      	lsls	r3, r3, #9
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d011      	beq.n	800571c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2101      	movs	r1, #1
 8005704:	430a      	orrs	r2, r1
 8005706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005708:	e008      	b.n	800571c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2101      	movs	r1, #1
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e000      	b.n	800571e <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b004      	add	sp, #16
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40000400 	.word	0x40000400
 8005730:	00010007 	.word	0x00010007

08005734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	230f      	movs	r3, #15
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	223c      	movs	r2, #60	; 0x3c
 800574a:	5c9b      	ldrb	r3, [r3, r2]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_TIM_ConfigClockSource+0x20>
 8005750:	2302      	movs	r3, #2
 8005752:	e0bc      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x19a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	223c      	movs	r2, #60	; 0x3c
 8005758:	2101      	movs	r1, #1
 800575a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	223d      	movs	r2, #61	; 0x3d
 8005760:	2102      	movs	r1, #2
 8005762:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4a5a      	ldr	r2, [pc, #360]	; (80058d8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005770:	4013      	ands	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4a59      	ldr	r2, [pc, #356]	; (80058dc <HAL_TIM_ConfigClockSource+0x1a8>)
 8005778:	4013      	ands	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2280      	movs	r2, #128	; 0x80
 800578a:	0192      	lsls	r2, r2, #6
 800578c:	4293      	cmp	r3, r2
 800578e:	d040      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0xde>
 8005790:	2280      	movs	r2, #128	; 0x80
 8005792:	0192      	lsls	r2, r2, #6
 8005794:	4293      	cmp	r3, r2
 8005796:	d900      	bls.n	800579a <HAL_TIM_ConfigClockSource+0x66>
 8005798:	e088      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	0152      	lsls	r2, r2, #5
 800579e:	4293      	cmp	r3, r2
 80057a0:	d100      	bne.n	80057a4 <HAL_TIM_ConfigClockSource+0x70>
 80057a2:	e088      	b.n	80058b6 <HAL_TIM_ConfigClockSource+0x182>
 80057a4:	2280      	movs	r2, #128	; 0x80
 80057a6:	0152      	lsls	r2, r2, #5
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d900      	bls.n	80057ae <HAL_TIM_ConfigClockSource+0x7a>
 80057ac:	e07e      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
 80057ae:	2b70      	cmp	r3, #112	; 0x70
 80057b0:	d018      	beq.n	80057e4 <HAL_TIM_ConfigClockSource+0xb0>
 80057b2:	d900      	bls.n	80057b6 <HAL_TIM_ConfigClockSource+0x82>
 80057b4:	e07a      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
 80057b6:	2b60      	cmp	r3, #96	; 0x60
 80057b8:	d04f      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x126>
 80057ba:	d900      	bls.n	80057be <HAL_TIM_ConfigClockSource+0x8a>
 80057bc:	e076      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
 80057be:	2b50      	cmp	r3, #80	; 0x50
 80057c0:	d03b      	beq.n	800583a <HAL_TIM_ConfigClockSource+0x106>
 80057c2:	d900      	bls.n	80057c6 <HAL_TIM_ConfigClockSource+0x92>
 80057c4:	e072      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
 80057c6:	2b40      	cmp	r3, #64	; 0x40
 80057c8:	d057      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x146>
 80057ca:	d900      	bls.n	80057ce <HAL_TIM_ConfigClockSource+0x9a>
 80057cc:	e06e      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
 80057ce:	2b30      	cmp	r3, #48	; 0x30
 80057d0:	d063      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x166>
 80057d2:	d86b      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d060      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x166>
 80057d8:	d868      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d05d      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x166>
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d05b      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x166>
 80057e2:	e063      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6899      	ldr	r1, [r3, #8]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f000 f95c 	bl	8005ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2277      	movs	r2, #119	; 0x77
 8005804:	4313      	orrs	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	609a      	str	r2, [r3, #8]
      break;
 8005810:	e052      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f000 f945 	bl	8005ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	01c9      	lsls	r1, r1, #7
 8005834:	430a      	orrs	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
      break;
 8005838:	e03e      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6859      	ldr	r1, [r3, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	001a      	movs	r2, r3
 8005848:	f000 f8b6 	bl	80059b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2150      	movs	r1, #80	; 0x50
 8005852:	0018      	movs	r0, r3
 8005854:	f000 f910 	bl	8005a78 <TIM_ITRx_SetConfig>
      break;
 8005858:	e02e      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	001a      	movs	r2, r3
 8005868:	f000 f8d4 	bl	8005a14 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2160      	movs	r1, #96	; 0x60
 8005872:	0018      	movs	r0, r3
 8005874:	f000 f900 	bl	8005a78 <TIM_ITRx_SetConfig>
      break;
 8005878:	e01e      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	001a      	movs	r2, r3
 8005888:	f000 f896 	bl	80059b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	0018      	movs	r0, r3
 8005894:	f000 f8f0 	bl	8005a78 <TIM_ITRx_SetConfig>
      break;
 8005898:	e00e      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	0019      	movs	r1, r3
 80058a4:	0010      	movs	r0, r2
 80058a6:	f000 f8e7 	bl	8005a78 <TIM_ITRx_SetConfig>
      break;
 80058aa:	e005      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80058ac:	230f      	movs	r3, #15
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
      break;
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80058b6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	223d      	movs	r2, #61	; 0x3d
 80058bc:	2101      	movs	r1, #1
 80058be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	223c      	movs	r2, #60	; 0x3c
 80058c4:	2100      	movs	r1, #0
 80058c6:	5499      	strb	r1, [r3, r2]

  return status;
 80058c8:	230f      	movs	r3, #15
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	781b      	ldrb	r3, [r3, #0]
}
 80058ce:	0018      	movs	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b004      	add	sp, #16
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	ffceff88 	.word	0xffceff88
 80058dc:	ffff00ff 	.word	0xffff00ff

080058e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <TIM_Base_SetConfig+0xc0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0x20>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <TIM_Base_SetConfig+0xc4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d108      	bne.n	8005912 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2270      	movs	r2, #112	; 0x70
 8005904:	4393      	bics	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <TIM_Base_SetConfig+0xc0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_Base_SetConfig+0x5a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <TIM_Base_SetConfig+0xc4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_Base_SetConfig+0x5a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a20      	ldr	r2, [pc, #128]	; (80059a8 <TIM_Base_SetConfig+0xc8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_Base_SetConfig+0x5a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <TIM_Base_SetConfig+0xcc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_Base_SetConfig+0x5a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <TIM_Base_SetConfig+0xd0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <TIM_Base_SetConfig+0xd4>)
 800593e:	4013      	ands	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	4393      	bics	r3, r2
 8005952:	001a      	movs	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <TIM_Base_SetConfig+0xc0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <TIM_Base_SetConfig+0xaa>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a0b      	ldr	r2, [pc, #44]	; (80059ac <TIM_Base_SetConfig+0xcc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_Base_SetConfig+0xaa>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a0a      	ldr	r2, [pc, #40]	; (80059b0 <TIM_Base_SetConfig+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d103      	bne.n	8005992 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	615a      	str	r2, [r3, #20]
}
 8005998:	46c0      	nop			; (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b004      	add	sp, #16
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40002000 	.word	0x40002000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800
 80059b4:	fffffcff 	.word	0xfffffcff

080059b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	2201      	movs	r2, #1
 80059d0:	4393      	bics	r3, r2
 80059d2:	001a      	movs	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	22f0      	movs	r2, #240	; 0xf0
 80059e2:	4393      	bics	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	220a      	movs	r2, #10
 80059f4:	4393      	bics	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	621a      	str	r2, [r3, #32]
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b006      	add	sp, #24
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	2210      	movs	r2, #16
 8005a26:	4393      	bics	r3, r2
 8005a28:	001a      	movs	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4a0d      	ldr	r2, [pc, #52]	; (8005a74 <TIM_TI2_ConfigInputStage+0x60>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	22a0      	movs	r2, #160	; 0xa0
 8005a50:	4393      	bics	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b006      	add	sp, #24
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	ffff0fff 	.word	0xffff0fff

08005a78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a08      	ldr	r2, [pc, #32]	; (8005aac <TIM_ITRx_SetConfig+0x34>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	2207      	movs	r2, #7
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	609a      	str	r2, [r3, #8]
}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b004      	add	sp, #16
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	ffcfff8f 	.word	0xffcfff8f

08005ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <TIM_ETR_SetConfig+0x3c>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	021a      	lsls	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b006      	add	sp, #24
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	ffff00ff 	.word	0xffff00ff

08005af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	223c      	movs	r2, #60	; 0x3c
 8005afe:	5c9b      	ldrb	r3, [r3, r2]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e04a      	b.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	223c      	movs	r2, #60	; 0x3c
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	223d      	movs	r2, #61	; 0x3d
 8005b14:	2102      	movs	r1, #2
 8005b16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d108      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2270      	movs	r2, #112	; 0x70
 8005b48:	4393      	bics	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10c      	bne.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2280      	movs	r2, #128	; 0x80
 8005b76:	4393      	bics	r3, r2
 8005b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	223d      	movs	r2, #61	; 0x3d
 8005b90:	2101      	movs	r1, #1
 8005b92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	223c      	movs	r2, #60	; 0x3c
 8005b98:	2100      	movs	r1, #0
 8005b9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b004      	add	sp, #16
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	ff0fffff 	.word	0xff0fffff
 8005bb0:	40000400 	.word	0x40000400

08005bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e046      	b.n	8005c54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2288      	movs	r2, #136	; 0x88
 8005bca:	589b      	ldr	r3, [r3, r2]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2284      	movs	r2, #132	; 0x84
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f7fd fc2a 	bl	8003434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2288      	movs	r2, #136	; 0x88
 8005be4:	2124      	movs	r1, #36	; 0x24
 8005be6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	438a      	bics	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 f8cc 	bl	8005d98 <UART_SetConfig>
 8005c00:	0003      	movs	r3, r0
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e024      	b.n	8005c54 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 fa29 	bl	800606c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	490d      	ldr	r1, [pc, #52]	; (8005c5c <HAL_UART_Init+0xa8>)
 8005c26:	400a      	ands	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	212a      	movs	r1, #42	; 0x2a
 8005c36:	438a      	bics	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2101      	movs	r1, #1
 8005c46:	430a      	orrs	r2, r1
 8005c48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f000 fac1 	bl	80061d4 <UART_CheckIdleState>
 8005c52:	0003      	movs	r3, r0
}
 8005c54:	0018      	movs	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	ffffb7ff 	.word	0xffffb7ff

08005c60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	; 0x28
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	1dbb      	adds	r3, r7, #6
 8005c6e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2288      	movs	r2, #136	; 0x88
 8005c74:	589b      	ldr	r3, [r3, r2]
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d000      	beq.n	8005c7c <HAL_UART_Transmit+0x1c>
 8005c7a:	e088      	b.n	8005d8e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_UART_Transmit+0x2a>
 8005c82:	1dbb      	adds	r3, r7, #6
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e080      	b.n	8005d90 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	015b      	lsls	r3, r3, #5
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d109      	bne.n	8005cae <HAL_UART_Transmit+0x4e>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d105      	bne.n	8005cae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d001      	beq.n	8005cae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e070      	b.n	8005d90 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2290      	movs	r2, #144	; 0x90
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2288      	movs	r2, #136	; 0x88
 8005cba:	2121      	movs	r1, #33	; 0x21
 8005cbc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cbe:	f7fd fd83 	bl	80037c8 <HAL_GetTick>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1dba      	adds	r2, r7, #6
 8005cca:	2154      	movs	r1, #84	; 0x54
 8005ccc:	8812      	ldrh	r2, [r2, #0]
 8005cce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1dba      	adds	r2, r7, #6
 8005cd4:	2156      	movs	r1, #86	; 0x56
 8005cd6:	8812      	ldrh	r2, [r2, #0]
 8005cd8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	015b      	lsls	r3, r3, #5
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d108      	bne.n	8005cf8 <HAL_UART_Transmit+0x98>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	e003      	b.n	8005d00 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d00:	e02c      	b.n	8005d5c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	0013      	movs	r3, r2
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2180      	movs	r1, #128	; 0x80
 8005d10:	f000 faae 	bl	8006270 <UART_WaitOnFlagUntilTimeout>
 8005d14:	1e03      	subs	r3, r0, #0
 8005d16:	d001      	beq.n	8005d1c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e039      	b.n	8005d90 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	001a      	movs	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	05d2      	lsls	r2, r2, #23
 8005d2e:	0dd2      	lsrs	r2, r2, #23
 8005d30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	3302      	adds	r3, #2
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	e007      	b.n	8005d4a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	781a      	ldrb	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2256      	movs	r2, #86	; 0x56
 8005d4e:	5a9b      	ldrh	r3, [r3, r2]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b299      	uxth	r1, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2256      	movs	r2, #86	; 0x56
 8005d5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2256      	movs	r2, #86	; 0x56
 8005d60:	5a9b      	ldrh	r3, [r3, r2]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1cc      	bne.n	8005d02 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	0013      	movs	r3, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	2140      	movs	r1, #64	; 0x40
 8005d76:	f000 fa7b 	bl	8006270 <UART_WaitOnFlagUntilTimeout>
 8005d7a:	1e03      	subs	r3, r0, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e006      	b.n	8005d90 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2288      	movs	r2, #136	; 0x88
 8005d86:	2120      	movs	r1, #32
 8005d88:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e000      	b.n	8005d90 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005d8e:	2302      	movs	r3, #2
  }
}
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b008      	add	sp, #32
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005da0:	231a      	movs	r3, #26
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4aa1      	ldr	r2, [pc, #644]	; (800604c <UART_SetConfig+0x2b4>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	0019      	movs	r1, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4a9c      	ldr	r2, [pc, #624]	; (8006050 <UART_SetConfig+0x2b8>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	0019      	movs	r1, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	4a93      	ldr	r2, [pc, #588]	; (8006054 <UART_SetConfig+0x2bc>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	220f      	movs	r2, #15
 8005e1c:	4393      	bics	r3, r2
 8005e1e:	0019      	movs	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a89      	ldr	r2, [pc, #548]	; (8006058 <UART_SetConfig+0x2c0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d127      	bne.n	8005e86 <UART_SetConfig+0xee>
 8005e36:	4b89      	ldr	r3, [pc, #548]	; (800605c <UART_SetConfig+0x2c4>)
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d017      	beq.n	8005e72 <UART_SetConfig+0xda>
 8005e42:	d81b      	bhi.n	8005e7c <UART_SetConfig+0xe4>
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d00a      	beq.n	8005e5e <UART_SetConfig+0xc6>
 8005e48:	d818      	bhi.n	8005e7c <UART_SetConfig+0xe4>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <UART_SetConfig+0xbc>
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d00a      	beq.n	8005e68 <UART_SetConfig+0xd0>
 8005e52:	e013      	b.n	8005e7c <UART_SetConfig+0xe4>
 8005e54:	231b      	movs	r3, #27
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	e021      	b.n	8005ea2 <UART_SetConfig+0x10a>
 8005e5e:	231b      	movs	r3, #27
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	2202      	movs	r2, #2
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e01c      	b.n	8005ea2 <UART_SetConfig+0x10a>
 8005e68:	231b      	movs	r3, #27
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	e017      	b.n	8005ea2 <UART_SetConfig+0x10a>
 8005e72:	231b      	movs	r3, #27
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	2208      	movs	r2, #8
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	e012      	b.n	8005ea2 <UART_SetConfig+0x10a>
 8005e7c:	231b      	movs	r3, #27
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	2210      	movs	r2, #16
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	e00d      	b.n	8005ea2 <UART_SetConfig+0x10a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a75      	ldr	r2, [pc, #468]	; (8006060 <UART_SetConfig+0x2c8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d104      	bne.n	8005e9a <UART_SetConfig+0x102>
 8005e90:	231b      	movs	r3, #27
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e003      	b.n	8005ea2 <UART_SetConfig+0x10a>
 8005e9a:	231b      	movs	r3, #27
 8005e9c:	18fb      	adds	r3, r7, r3
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69da      	ldr	r2, [r3, #28]
 8005ea6:	2380      	movs	r3, #128	; 0x80
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d000      	beq.n	8005eb0 <UART_SetConfig+0x118>
 8005eae:	e065      	b.n	8005f7c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8005eb0:	231b      	movs	r3, #27
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d015      	beq.n	8005ee6 <UART_SetConfig+0x14e>
 8005eba:	dc18      	bgt.n	8005eee <UART_SetConfig+0x156>
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d00d      	beq.n	8005edc <UART_SetConfig+0x144>
 8005ec0:	dc15      	bgt.n	8005eee <UART_SetConfig+0x156>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <UART_SetConfig+0x134>
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d005      	beq.n	8005ed6 <UART_SetConfig+0x13e>
 8005eca:	e010      	b.n	8005eee <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ecc:	f7ff fa58 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8005ed0:	0003      	movs	r3, r0
 8005ed2:	617b      	str	r3, [r7, #20]
        break;
 8005ed4:	e012      	b.n	8005efc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed6:	4b63      	ldr	r3, [pc, #396]	; (8006064 <UART_SetConfig+0x2cc>)
 8005ed8:	617b      	str	r3, [r7, #20]
        break;
 8005eda:	e00f      	b.n	8005efc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005edc:	f7ff f9c4 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	617b      	str	r3, [r7, #20]
        break;
 8005ee4:	e00a      	b.n	8005efc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	617b      	str	r3, [r7, #20]
        break;
 8005eec:	e006      	b.n	8005efc <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ef2:	231a      	movs	r3, #26
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
        break;
 8005efa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d100      	bne.n	8005f04 <UART_SetConfig+0x16c>
 8005f02:	e08d      	b.n	8006020 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f08:	4b57      	ldr	r3, [pc, #348]	; (8006068 <UART_SetConfig+0x2d0>)
 8005f0a:	0052      	lsls	r2, r2, #1
 8005f0c:	5ad3      	ldrh	r3, [r2, r3]
 8005f0e:	0019      	movs	r1, r3
 8005f10:	6978      	ldr	r0, [r7, #20]
 8005f12:	f7fa f911 	bl	8000138 <__udivsi3>
 8005f16:	0003      	movs	r3, r0
 8005f18:	005a      	lsls	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	18d2      	adds	r2, r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	0019      	movs	r1, r3
 8005f28:	0010      	movs	r0, r2
 8005f2a:	f7fa f905 	bl	8000138 <__udivsi3>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d91c      	bls.n	8005f72 <UART_SetConfig+0x1da>
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	025b      	lsls	r3, r3, #9
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d217      	bcs.n	8005f72 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	200e      	movs	r0, #14
 8005f48:	183b      	adds	r3, r7, r0
 8005f4a:	210f      	movs	r1, #15
 8005f4c:	438a      	bics	r2, r1
 8005f4e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2207      	movs	r2, #7
 8005f58:	4013      	ands	r3, r2
 8005f5a:	b299      	uxth	r1, r3
 8005f5c:	183b      	adds	r3, r7, r0
 8005f5e:	183a      	adds	r2, r7, r0
 8005f60:	8812      	ldrh	r2, [r2, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	183a      	adds	r2, r7, r0
 8005f6c:	8812      	ldrh	r2, [r2, #0]
 8005f6e:	60da      	str	r2, [r3, #12]
 8005f70:	e056      	b.n	8006020 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005f72:	231a      	movs	r3, #26
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	2201      	movs	r2, #1
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	e051      	b.n	8006020 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f7c:	231b      	movs	r3, #27
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d015      	beq.n	8005fb2 <UART_SetConfig+0x21a>
 8005f86:	dc18      	bgt.n	8005fba <UART_SetConfig+0x222>
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d00d      	beq.n	8005fa8 <UART_SetConfig+0x210>
 8005f8c:	dc15      	bgt.n	8005fba <UART_SetConfig+0x222>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <UART_SetConfig+0x200>
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d005      	beq.n	8005fa2 <UART_SetConfig+0x20a>
 8005f96:	e010      	b.n	8005fba <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f98:	f7ff f9f2 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	617b      	str	r3, [r7, #20]
        break;
 8005fa0:	e012      	b.n	8005fc8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa2:	4b30      	ldr	r3, [pc, #192]	; (8006064 <UART_SetConfig+0x2cc>)
 8005fa4:	617b      	str	r3, [r7, #20]
        break;
 8005fa6:	e00f      	b.n	8005fc8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa8:	f7ff f95e 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005fac:	0003      	movs	r3, r0
 8005fae:	617b      	str	r3, [r7, #20]
        break;
 8005fb0:	e00a      	b.n	8005fc8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
        break;
 8005fb8:	e006      	b.n	8005fc8 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fbe:	231a      	movs	r3, #26
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]
        break;
 8005fc6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d028      	beq.n	8006020 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd2:	4b25      	ldr	r3, [pc, #148]	; (8006068 <UART_SetConfig+0x2d0>)
 8005fd4:	0052      	lsls	r2, r2, #1
 8005fd6:	5ad3      	ldrh	r3, [r2, r3]
 8005fd8:	0019      	movs	r1, r3
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f7fa f8ac 	bl	8000138 <__udivsi3>
 8005fe0:	0003      	movs	r3, r0
 8005fe2:	001a      	movs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	085b      	lsrs	r3, r3, #1
 8005fea:	18d2      	adds	r2, r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	0019      	movs	r1, r3
 8005ff2:	0010      	movs	r0, r2
 8005ff4:	f7fa f8a0 	bl	8000138 <__udivsi3>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	d90a      	bls.n	8006018 <UART_SetConfig+0x280>
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	025b      	lsls	r3, r3, #9
 8006008:	429a      	cmp	r2, r3
 800600a:	d205      	bcs.n	8006018 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	e003      	b.n	8006020 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006018:	231a      	movs	r3, #26
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	2201      	movs	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	226a      	movs	r2, #106	; 0x6a
 8006024:	2101      	movs	r1, #1
 8006026:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2268      	movs	r2, #104	; 0x68
 800602c:	2101      	movs	r1, #1
 800602e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800603c:	231a      	movs	r3, #26
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	781b      	ldrb	r3, [r3, #0]
}
 8006042:	0018      	movs	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	b008      	add	sp, #32
 8006048:	bd80      	pop	{r7, pc}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	cfff69f3 	.word	0xcfff69f3
 8006050:	ffffcfff 	.word	0xffffcfff
 8006054:	11fff4ff 	.word	0x11fff4ff
 8006058:	40013800 	.word	0x40013800
 800605c:	40021000 	.word	0x40021000
 8006060:	40004400 	.word	0x40004400
 8006064:	00f42400 	.word	0x00f42400
 8006068:	08009748 	.word	0x08009748

0800606c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	2201      	movs	r2, #1
 800607a:	4013      	ands	r3, r2
 800607c:	d00b      	beq.n	8006096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a4a      	ldr	r2, [pc, #296]	; (80061b0 <UART_AdvFeatureConfig+0x144>)
 8006086:	4013      	ands	r3, r2
 8006088:	0019      	movs	r1, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	2202      	movs	r2, #2
 800609c:	4013      	ands	r3, r2
 800609e:	d00b      	beq.n	80060b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4a43      	ldr	r2, [pc, #268]	; (80061b4 <UART_AdvFeatureConfig+0x148>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	0019      	movs	r1, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	2204      	movs	r2, #4
 80060be:	4013      	ands	r3, r2
 80060c0:	d00b      	beq.n	80060da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	4a3b      	ldr	r2, [pc, #236]	; (80061b8 <UART_AdvFeatureConfig+0x14c>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	0019      	movs	r1, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	2208      	movs	r2, #8
 80060e0:	4013      	ands	r3, r2
 80060e2:	d00b      	beq.n	80060fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4a34      	ldr	r2, [pc, #208]	; (80061bc <UART_AdvFeatureConfig+0x150>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	0019      	movs	r1, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006100:	2210      	movs	r2, #16
 8006102:	4013      	ands	r3, r2
 8006104:	d00b      	beq.n	800611e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a2c      	ldr	r2, [pc, #176]	; (80061c0 <UART_AdvFeatureConfig+0x154>)
 800610e:	4013      	ands	r3, r2
 8006110:	0019      	movs	r1, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	2220      	movs	r2, #32
 8006124:	4013      	ands	r3, r2
 8006126:	d00b      	beq.n	8006140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	4a25      	ldr	r2, [pc, #148]	; (80061c4 <UART_AdvFeatureConfig+0x158>)
 8006130:	4013      	ands	r3, r2
 8006132:	0019      	movs	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	2240      	movs	r2, #64	; 0x40
 8006146:	4013      	ands	r3, r2
 8006148:	d01d      	beq.n	8006186 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <UART_AdvFeatureConfig+0x15c>)
 8006152:	4013      	ands	r3, r2
 8006154:	0019      	movs	r1, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006166:	2380      	movs	r3, #128	; 0x80
 8006168:	035b      	lsls	r3, r3, #13
 800616a:	429a      	cmp	r2, r3
 800616c:	d10b      	bne.n	8006186 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4a15      	ldr	r2, [pc, #84]	; (80061cc <UART_AdvFeatureConfig+0x160>)
 8006176:	4013      	ands	r3, r2
 8006178:	0019      	movs	r1, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	2280      	movs	r2, #128	; 0x80
 800618c:	4013      	ands	r3, r2
 800618e:	d00b      	beq.n	80061a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <UART_AdvFeatureConfig+0x164>)
 8006198:	4013      	ands	r3, r2
 800619a:	0019      	movs	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }
}
 80061a8:	46c0      	nop			; (mov r8, r8)
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b002      	add	sp, #8
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	fffdffff 	.word	0xfffdffff
 80061b4:	fffeffff 	.word	0xfffeffff
 80061b8:	fffbffff 	.word	0xfffbffff
 80061bc:	ffff7fff 	.word	0xffff7fff
 80061c0:	ffffefff 	.word	0xffffefff
 80061c4:	ffffdfff 	.word	0xffffdfff
 80061c8:	ffefffff 	.word	0xffefffff
 80061cc:	ff9fffff 	.word	0xff9fffff
 80061d0:	fff7ffff 	.word	0xfff7ffff

080061d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2290      	movs	r2, #144	; 0x90
 80061e0:	2100      	movs	r1, #0
 80061e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e4:	f7fd faf0 	bl	80037c8 <HAL_GetTick>
 80061e8:	0003      	movs	r3, r0
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2208      	movs	r2, #8
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d10c      	bne.n	8006214 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2280      	movs	r2, #128	; 0x80
 80061fe:	0391      	lsls	r1, r2, #14
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4a1a      	ldr	r2, [pc, #104]	; (800626c <UART_CheckIdleState+0x98>)
 8006204:	9200      	str	r2, [sp, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	f000 f832 	bl	8006270 <UART_WaitOnFlagUntilTimeout>
 800620c:	1e03      	subs	r3, r0, #0
 800620e:	d001      	beq.n	8006214 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e026      	b.n	8006262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2204      	movs	r2, #4
 800621c:	4013      	ands	r3, r2
 800621e:	2b04      	cmp	r3, #4
 8006220:	d10c      	bne.n	800623c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2280      	movs	r2, #128	; 0x80
 8006226:	03d1      	lsls	r1, r2, #15
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4a10      	ldr	r2, [pc, #64]	; (800626c <UART_CheckIdleState+0x98>)
 800622c:	9200      	str	r2, [sp, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	f000 f81e 	bl	8006270 <UART_WaitOnFlagUntilTimeout>
 8006234:	1e03      	subs	r3, r0, #0
 8006236:	d001      	beq.n	800623c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e012      	b.n	8006262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2288      	movs	r2, #136	; 0x88
 8006240:	2120      	movs	r1, #32
 8006242:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	228c      	movs	r2, #140	; 0x8c
 8006248:	2120      	movs	r1, #32
 800624a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2284      	movs	r2, #132	; 0x84
 800625c:	2100      	movs	r1, #0
 800625e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	0018      	movs	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	b004      	add	sp, #16
 8006268:	bd80      	pop	{r7, pc}
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	01ffffff 	.word	0x01ffffff

08006270 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b094      	sub	sp, #80	; 0x50
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	1dfb      	adds	r3, r7, #7
 800627e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006280:	e0a7      	b.n	80063d2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006284:	3301      	adds	r3, #1
 8006286:	d100      	bne.n	800628a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006288:	e0a3      	b.n	80063d2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7fd fa9d 	bl	80037c8 <HAL_GetTick>
 800628e:	0002      	movs	r2, r0
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800629a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800629c:	2b00      	cmp	r3, #0
 800629e:	d13f      	bne.n	8006320 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a0:	f3ef 8310 	mrs	r3, PRIMASK
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
 80062aa:	2301      	movs	r3, #1
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	f383 8810 	msr	PRIMASK, r3
}
 80062b4:	46c0      	nop			; (mov r8, r8)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	494e      	ldr	r1, [pc, #312]	; (80063fc <UART_WaitOnFlagUntilTimeout+0x18c>)
 80062c2:	400a      	ands	r2, r1
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	f383 8810 	msr	PRIMASK, r3
}
 80062d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d2:	f3ef 8310 	mrs	r3, PRIMASK
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80062d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062da:	643b      	str	r3, [r7, #64]	; 0x40
 80062dc:	2301      	movs	r3, #1
 80062de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	f383 8810 	msr	PRIMASK, r3
}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2101      	movs	r1, #1
 80062f4:	438a      	bics	r2, r1
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fe:	f383 8810 	msr	PRIMASK, r3
}
 8006302:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2288      	movs	r2, #136	; 0x88
 8006308:	2120      	movs	r1, #32
 800630a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	228c      	movs	r2, #140	; 0x8c
 8006310:	2120      	movs	r1, #32
 8006312:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2284      	movs	r2, #132	; 0x84
 8006318:	2100      	movs	r1, #0
 800631a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e069      	b.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2204      	movs	r2, #4
 8006328:	4013      	ands	r3, r2
 800632a:	d052      	beq.n	80063d2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	2380      	movs	r3, #128	; 0x80
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	401a      	ands	r2, r3
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	429a      	cmp	r2, r3
 800633e:	d148      	bne.n	80063d2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2280      	movs	r2, #128	; 0x80
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634a:	f3ef 8310 	mrs	r3, PRIMASK
 800634e:	613b      	str	r3, [r7, #16]
  return(result);
 8006350:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006354:	2301      	movs	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f383 8810 	msr	PRIMASK, r3
}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4924      	ldr	r1, [pc, #144]	; (80063fc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800636c:	400a      	ands	r2, r1
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006372:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f383 8810 	msr	PRIMASK, r3
}
 800637a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800637c:	f3ef 8310 	mrs	r3, PRIMASK
 8006380:	61fb      	str	r3, [r7, #28]
  return(result);
 8006382:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006384:	64bb      	str	r3, [r7, #72]	; 0x48
 8006386:	2301      	movs	r3, #1
 8006388:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	f383 8810 	msr	PRIMASK, r3
}
 8006390:	46c0      	nop			; (mov r8, r8)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2101      	movs	r1, #1
 800639e:	438a      	bics	r2, r1
 80063a0:	609a      	str	r2, [r3, #8]
 80063a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	f383 8810 	msr	PRIMASK, r3
}
 80063ac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2288      	movs	r2, #136	; 0x88
 80063b2:	2120      	movs	r1, #32
 80063b4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	228c      	movs	r2, #140	; 0x8c
 80063ba:	2120      	movs	r1, #32
 80063bc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2290      	movs	r2, #144	; 0x90
 80063c2:	2120      	movs	r1, #32
 80063c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2284      	movs	r2, #132	; 0x84
 80063ca:	2100      	movs	r1, #0
 80063cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e010      	b.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	4013      	ands	r3, r2
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	425a      	negs	r2, r3
 80063e2:	4153      	adcs	r3, r2
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	001a      	movs	r2, r3
 80063e8:	1dfb      	adds	r3, r7, #7
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d100      	bne.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x182>
 80063f0:	e747      	b.n	8006282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	0018      	movs	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b014      	add	sp, #80	; 0x50
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	fffffe5f 	.word	0xfffffe5f

08006400 <__errno>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <__errno+0x8>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	4770      	bx	lr
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	20000080 	.word	0x20000080

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	2600      	movs	r6, #0
 8006410:	4d0c      	ldr	r5, [pc, #48]	; (8006444 <__libc_init_array+0x38>)
 8006412:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006414:	1b64      	subs	r4, r4, r5
 8006416:	10a4      	asrs	r4, r4, #2
 8006418:	42a6      	cmp	r6, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	2600      	movs	r6, #0
 800641e:	f002 ffbb 	bl	8009398 <_init>
 8006422:	4d0a      	ldr	r5, [pc, #40]	; (800644c <__libc_init_array+0x40>)
 8006424:	4c0a      	ldr	r4, [pc, #40]	; (8006450 <__libc_init_array+0x44>)
 8006426:	1b64      	subs	r4, r4, r5
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	42a6      	cmp	r6, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	00b3      	lsls	r3, r6, #2
 8006432:	58eb      	ldr	r3, [r5, r3]
 8006434:	4798      	blx	r3
 8006436:	3601      	adds	r6, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	00b3      	lsls	r3, r6, #2
 800643c:	58eb      	ldr	r3, [r5, r3]
 800643e:	4798      	blx	r3
 8006440:	3601      	adds	r6, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	08009b3c 	.word	0x08009b3c
 8006448:	08009b3c 	.word	0x08009b3c
 800644c:	08009b3c 	.word	0x08009b3c
 8006450:	08009b40 	.word	0x08009b40

08006454 <memset>:
 8006454:	0003      	movs	r3, r0
 8006456:	1882      	adds	r2, r0, r2
 8006458:	4293      	cmp	r3, r2
 800645a:	d100      	bne.n	800645e <memset+0xa>
 800645c:	4770      	bx	lr
 800645e:	7019      	strb	r1, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	e7f9      	b.n	8006458 <memset+0x4>

08006464 <__cvt>:
 8006464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006466:	001e      	movs	r6, r3
 8006468:	2300      	movs	r3, #0
 800646a:	0014      	movs	r4, r2
 800646c:	b08b      	sub	sp, #44	; 0x2c
 800646e:	429e      	cmp	r6, r3
 8006470:	da04      	bge.n	800647c <__cvt+0x18>
 8006472:	2180      	movs	r1, #128	; 0x80
 8006474:	0609      	lsls	r1, r1, #24
 8006476:	1873      	adds	r3, r6, r1
 8006478:	001e      	movs	r6, r3
 800647a:	232d      	movs	r3, #45	; 0x2d
 800647c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800647e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006480:	7013      	strb	r3, [r2, #0]
 8006482:	2320      	movs	r3, #32
 8006484:	2203      	movs	r2, #3
 8006486:	439f      	bics	r7, r3
 8006488:	2f46      	cmp	r7, #70	; 0x46
 800648a:	d007      	beq.n	800649c <__cvt+0x38>
 800648c:	003b      	movs	r3, r7
 800648e:	3b45      	subs	r3, #69	; 0x45
 8006490:	4259      	negs	r1, r3
 8006492:	414b      	adcs	r3, r1
 8006494:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006496:	3a01      	subs	r2, #1
 8006498:	18cb      	adds	r3, r1, r3
 800649a:	9310      	str	r3, [sp, #64]	; 0x40
 800649c:	ab09      	add	r3, sp, #36	; 0x24
 800649e:	9304      	str	r3, [sp, #16]
 80064a0:	ab08      	add	r3, sp, #32
 80064a2:	9303      	str	r3, [sp, #12]
 80064a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064a6:	9200      	str	r2, [sp, #0]
 80064a8:	9302      	str	r3, [sp, #8]
 80064aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064ac:	0022      	movs	r2, r4
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	0033      	movs	r3, r6
 80064b2:	f000 fcf1 	bl	8006e98 <_dtoa_r>
 80064b6:	0005      	movs	r5, r0
 80064b8:	2f47      	cmp	r7, #71	; 0x47
 80064ba:	d102      	bne.n	80064c2 <__cvt+0x5e>
 80064bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064be:	07db      	lsls	r3, r3, #31
 80064c0:	d528      	bpl.n	8006514 <__cvt+0xb0>
 80064c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064c4:	18eb      	adds	r3, r5, r3
 80064c6:	9307      	str	r3, [sp, #28]
 80064c8:	2f46      	cmp	r7, #70	; 0x46
 80064ca:	d114      	bne.n	80064f6 <__cvt+0x92>
 80064cc:	782b      	ldrb	r3, [r5, #0]
 80064ce:	2b30      	cmp	r3, #48	; 0x30
 80064d0:	d10c      	bne.n	80064ec <__cvt+0x88>
 80064d2:	2200      	movs	r2, #0
 80064d4:	2300      	movs	r3, #0
 80064d6:	0020      	movs	r0, r4
 80064d8:	0031      	movs	r1, r6
 80064da:	f7f9 ffb3 	bl	8000444 <__aeabi_dcmpeq>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d104      	bne.n	80064ec <__cvt+0x88>
 80064e2:	2301      	movs	r3, #1
 80064e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064ee:	9a07      	ldr	r2, [sp, #28]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	18d3      	adds	r3, r2, r3
 80064f4:	9307      	str	r3, [sp, #28]
 80064f6:	2200      	movs	r2, #0
 80064f8:	2300      	movs	r3, #0
 80064fa:	0020      	movs	r0, r4
 80064fc:	0031      	movs	r1, r6
 80064fe:	f7f9 ffa1 	bl	8000444 <__aeabi_dcmpeq>
 8006502:	2800      	cmp	r0, #0
 8006504:	d001      	beq.n	800650a <__cvt+0xa6>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	9309      	str	r3, [sp, #36]	; 0x24
 800650a:	2230      	movs	r2, #48	; 0x30
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	9907      	ldr	r1, [sp, #28]
 8006510:	428b      	cmp	r3, r1
 8006512:	d306      	bcc.n	8006522 <__cvt+0xbe>
 8006514:	0028      	movs	r0, r5
 8006516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006518:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800651a:	1b5b      	subs	r3, r3, r5
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	b00b      	add	sp, #44	; 0x2c
 8006520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006522:	1c59      	adds	r1, r3, #1
 8006524:	9109      	str	r1, [sp, #36]	; 0x24
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	e7f0      	b.n	800650c <__cvt+0xa8>

0800652a <__exponent>:
 800652a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652c:	1c83      	adds	r3, r0, #2
 800652e:	b087      	sub	sp, #28
 8006530:	9303      	str	r3, [sp, #12]
 8006532:	0005      	movs	r5, r0
 8006534:	000c      	movs	r4, r1
 8006536:	232b      	movs	r3, #43	; 0x2b
 8006538:	7002      	strb	r2, [r0, #0]
 800653a:	2900      	cmp	r1, #0
 800653c:	da01      	bge.n	8006542 <__exponent+0x18>
 800653e:	424c      	negs	r4, r1
 8006540:	3302      	adds	r3, #2
 8006542:	706b      	strb	r3, [r5, #1]
 8006544:	2c09      	cmp	r4, #9
 8006546:	dd31      	ble.n	80065ac <__exponent+0x82>
 8006548:	270a      	movs	r7, #10
 800654a:	ab04      	add	r3, sp, #16
 800654c:	1dde      	adds	r6, r3, #7
 800654e:	0020      	movs	r0, r4
 8006550:	0039      	movs	r1, r7
 8006552:	9601      	str	r6, [sp, #4]
 8006554:	f7f9 ff60 	bl	8000418 <__aeabi_idivmod>
 8006558:	3e01      	subs	r6, #1
 800655a:	3130      	adds	r1, #48	; 0x30
 800655c:	0020      	movs	r0, r4
 800655e:	7031      	strb	r1, [r6, #0]
 8006560:	0039      	movs	r1, r7
 8006562:	9402      	str	r4, [sp, #8]
 8006564:	f7f9 fe72 	bl	800024c <__divsi3>
 8006568:	9b02      	ldr	r3, [sp, #8]
 800656a:	0004      	movs	r4, r0
 800656c:	2b63      	cmp	r3, #99	; 0x63
 800656e:	dcee      	bgt.n	800654e <__exponent+0x24>
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	3430      	adds	r4, #48	; 0x30
 8006574:	1e9a      	subs	r2, r3, #2
 8006576:	0013      	movs	r3, r2
 8006578:	9903      	ldr	r1, [sp, #12]
 800657a:	7014      	strb	r4, [r2, #0]
 800657c:	a804      	add	r0, sp, #16
 800657e:	3007      	adds	r0, #7
 8006580:	4298      	cmp	r0, r3
 8006582:	d80e      	bhi.n	80065a2 <__exponent+0x78>
 8006584:	ab04      	add	r3, sp, #16
 8006586:	3307      	adds	r3, #7
 8006588:	2000      	movs	r0, #0
 800658a:	429a      	cmp	r2, r3
 800658c:	d804      	bhi.n	8006598 <__exponent+0x6e>
 800658e:	ab04      	add	r3, sp, #16
 8006590:	3009      	adds	r0, #9
 8006592:	18c0      	adds	r0, r0, r3
 8006594:	9b01      	ldr	r3, [sp, #4]
 8006596:	1ac0      	subs	r0, r0, r3
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	1818      	adds	r0, r3, r0
 800659c:	1b40      	subs	r0, r0, r5
 800659e:	b007      	add	sp, #28
 80065a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a2:	7818      	ldrb	r0, [r3, #0]
 80065a4:	3301      	adds	r3, #1
 80065a6:	7008      	strb	r0, [r1, #0]
 80065a8:	3101      	adds	r1, #1
 80065aa:	e7e7      	b.n	800657c <__exponent+0x52>
 80065ac:	2330      	movs	r3, #48	; 0x30
 80065ae:	18e4      	adds	r4, r4, r3
 80065b0:	70ab      	strb	r3, [r5, #2]
 80065b2:	1d28      	adds	r0, r5, #4
 80065b4:	70ec      	strb	r4, [r5, #3]
 80065b6:	e7f1      	b.n	800659c <__exponent+0x72>

080065b8 <_printf_float>:
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	b095      	sub	sp, #84	; 0x54
 80065bc:	000c      	movs	r4, r1
 80065be:	9209      	str	r2, [sp, #36]	; 0x24
 80065c0:	001e      	movs	r6, r3
 80065c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80065c4:	0007      	movs	r7, r0
 80065c6:	f001 fa81 	bl	8007acc <_localeconv_r>
 80065ca:	6803      	ldr	r3, [r0, #0]
 80065cc:	0018      	movs	r0, r3
 80065ce:	930c      	str	r3, [sp, #48]	; 0x30
 80065d0:	f7f9 fd96 	bl	8000100 <strlen>
 80065d4:	2300      	movs	r3, #0
 80065d6:	9312      	str	r3, [sp, #72]	; 0x48
 80065d8:	7e23      	ldrb	r3, [r4, #24]
 80065da:	2207      	movs	r2, #7
 80065dc:	930a      	str	r3, [sp, #40]	; 0x28
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	900e      	str	r0, [sp, #56]	; 0x38
 80065e2:	930d      	str	r3, [sp, #52]	; 0x34
 80065e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065e6:	682b      	ldr	r3, [r5, #0]
 80065e8:	05c9      	lsls	r1, r1, #23
 80065ea:	d547      	bpl.n	800667c <_printf_float+0xc4>
 80065ec:	189b      	adds	r3, r3, r2
 80065ee:	4393      	bics	r3, r2
 80065f0:	001a      	movs	r2, r3
 80065f2:	3208      	adds	r2, #8
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	64a2      	str	r2, [r4, #72]	; 0x48
 80065fc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80065fe:	2201      	movs	r2, #1
 8006600:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006602:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006604:	930b      	str	r3, [sp, #44]	; 0x2c
 8006606:	006b      	lsls	r3, r5, #1
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	930f      	str	r3, [sp, #60]	; 0x3c
 800660c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800660e:	4ba7      	ldr	r3, [pc, #668]	; (80068ac <_printf_float+0x2f4>)
 8006610:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006612:	4252      	negs	r2, r2
 8006614:	f7fb ff00 	bl	8002418 <__aeabi_dcmpun>
 8006618:	2800      	cmp	r0, #0
 800661a:	d131      	bne.n	8006680 <_printf_float+0xc8>
 800661c:	2201      	movs	r2, #1
 800661e:	4ba3      	ldr	r3, [pc, #652]	; (80068ac <_printf_float+0x2f4>)
 8006620:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006622:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006624:	4252      	negs	r2, r2
 8006626:	f7f9 ff1d 	bl	8000464 <__aeabi_dcmple>
 800662a:	2800      	cmp	r0, #0
 800662c:	d128      	bne.n	8006680 <_printf_float+0xc8>
 800662e:	2200      	movs	r2, #0
 8006630:	2300      	movs	r3, #0
 8006632:	0029      	movs	r1, r5
 8006634:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006636:	f7f9 ff0b 	bl	8000450 <__aeabi_dcmplt>
 800663a:	2800      	cmp	r0, #0
 800663c:	d003      	beq.n	8006646 <_printf_float+0x8e>
 800663e:	0023      	movs	r3, r4
 8006640:	222d      	movs	r2, #45	; 0x2d
 8006642:	3343      	adds	r3, #67	; 0x43
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006648:	4d99      	ldr	r5, [pc, #612]	; (80068b0 <_printf_float+0x2f8>)
 800664a:	2b47      	cmp	r3, #71	; 0x47
 800664c:	d900      	bls.n	8006650 <_printf_float+0x98>
 800664e:	4d99      	ldr	r5, [pc, #612]	; (80068b4 <_printf_float+0x2fc>)
 8006650:	2303      	movs	r3, #3
 8006652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006654:	6123      	str	r3, [r4, #16]
 8006656:	3301      	adds	r3, #1
 8006658:	439a      	bics	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6022      	str	r2, [r4, #0]
 800665e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006662:	0021      	movs	r1, r4
 8006664:	0038      	movs	r0, r7
 8006666:	9600      	str	r6, [sp, #0]
 8006668:	aa13      	add	r2, sp, #76	; 0x4c
 800666a:	f000 f9e7 	bl	8006a3c <_printf_common>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	d000      	beq.n	8006674 <_printf_float+0xbc>
 8006672:	e0a2      	b.n	80067ba <_printf_float+0x202>
 8006674:	2001      	movs	r0, #1
 8006676:	4240      	negs	r0, r0
 8006678:	b015      	add	sp, #84	; 0x54
 800667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667c:	3307      	adds	r3, #7
 800667e:	e7b6      	b.n	80065ee <_printf_float+0x36>
 8006680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006682:	002b      	movs	r3, r5
 8006684:	0010      	movs	r0, r2
 8006686:	0029      	movs	r1, r5
 8006688:	f7fb fec6 	bl	8002418 <__aeabi_dcmpun>
 800668c:	2800      	cmp	r0, #0
 800668e:	d00b      	beq.n	80066a8 <_printf_float+0xf0>
 8006690:	2d00      	cmp	r5, #0
 8006692:	da03      	bge.n	800669c <_printf_float+0xe4>
 8006694:	0023      	movs	r3, r4
 8006696:	222d      	movs	r2, #45	; 0x2d
 8006698:	3343      	adds	r3, #67	; 0x43
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669e:	4d86      	ldr	r5, [pc, #536]	; (80068b8 <_printf_float+0x300>)
 80066a0:	2b47      	cmp	r3, #71	; 0x47
 80066a2:	d9d5      	bls.n	8006650 <_printf_float+0x98>
 80066a4:	4d85      	ldr	r5, [pc, #532]	; (80068bc <_printf_float+0x304>)
 80066a6:	e7d3      	b.n	8006650 <_printf_float+0x98>
 80066a8:	2220      	movs	r2, #32
 80066aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066ac:	6863      	ldr	r3, [r4, #4]
 80066ae:	4391      	bics	r1, r2
 80066b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	d149      	bne.n	800674a <_printf_float+0x192>
 80066b6:	3307      	adds	r3, #7
 80066b8:	6063      	str	r3, [r4, #4]
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4313      	orrs	r3, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	9206      	str	r2, [sp, #24]
 80066c6:	aa12      	add	r2, sp, #72	; 0x48
 80066c8:	9205      	str	r2, [sp, #20]
 80066ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066cc:	a908      	add	r1, sp, #32
 80066ce:	9204      	str	r2, [sp, #16]
 80066d0:	aa11      	add	r2, sp, #68	; 0x44
 80066d2:	9203      	str	r2, [sp, #12]
 80066d4:	2223      	movs	r2, #35	; 0x23
 80066d6:	6023      	str	r3, [r4, #0]
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	6863      	ldr	r3, [r4, #4]
 80066dc:	1852      	adds	r2, r2, r1
 80066de:	9202      	str	r2, [sp, #8]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	0038      	movs	r0, r7
 80066e4:	002b      	movs	r3, r5
 80066e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066e8:	f7ff febc 	bl	8006464 <__cvt>
 80066ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066ee:	0005      	movs	r5, r0
 80066f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066f2:	2b47      	cmp	r3, #71	; 0x47
 80066f4:	d108      	bne.n	8006708 <_printf_float+0x150>
 80066f6:	1ccb      	adds	r3, r1, #3
 80066f8:	db02      	blt.n	8006700 <_printf_float+0x148>
 80066fa:	6863      	ldr	r3, [r4, #4]
 80066fc:	4299      	cmp	r1, r3
 80066fe:	dd48      	ble.n	8006792 <_printf_float+0x1da>
 8006700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006702:	3b02      	subs	r3, #2
 8006704:	b2db      	uxtb	r3, r3
 8006706:	930a      	str	r3, [sp, #40]	; 0x28
 8006708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670a:	2b65      	cmp	r3, #101	; 0x65
 800670c:	d824      	bhi.n	8006758 <_printf_float+0x1a0>
 800670e:	0020      	movs	r0, r4
 8006710:	001a      	movs	r2, r3
 8006712:	3901      	subs	r1, #1
 8006714:	3050      	adds	r0, #80	; 0x50
 8006716:	9111      	str	r1, [sp, #68]	; 0x44
 8006718:	f7ff ff07 	bl	800652a <__exponent>
 800671c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800671e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006720:	1813      	adds	r3, r2, r0
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	2a01      	cmp	r2, #1
 8006726:	dc02      	bgt.n	800672e <_printf_float+0x176>
 8006728:	6822      	ldr	r2, [r4, #0]
 800672a:	07d2      	lsls	r2, r2, #31
 800672c:	d501      	bpl.n	8006732 <_printf_float+0x17a>
 800672e:	3301      	adds	r3, #1
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	2323      	movs	r3, #35	; 0x23
 8006734:	aa08      	add	r2, sp, #32
 8006736:	189b      	adds	r3, r3, r2
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d100      	bne.n	8006740 <_printf_float+0x188>
 800673e:	e78f      	b.n	8006660 <_printf_float+0xa8>
 8006740:	0023      	movs	r3, r4
 8006742:	222d      	movs	r2, #45	; 0x2d
 8006744:	3343      	adds	r3, #67	; 0x43
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	e78a      	b.n	8006660 <_printf_float+0xa8>
 800674a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800674c:	2a47      	cmp	r2, #71	; 0x47
 800674e:	d1b4      	bne.n	80066ba <_printf_float+0x102>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1b2      	bne.n	80066ba <_printf_float+0x102>
 8006754:	3301      	adds	r3, #1
 8006756:	e7af      	b.n	80066b8 <_printf_float+0x100>
 8006758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675a:	2b66      	cmp	r3, #102	; 0x66
 800675c:	d11b      	bne.n	8006796 <_printf_float+0x1de>
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	2900      	cmp	r1, #0
 8006762:	dd0d      	ble.n	8006780 <_printf_float+0x1c8>
 8006764:	6121      	str	r1, [r4, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <_printf_float+0x1b8>
 800676a:	6822      	ldr	r2, [r4, #0]
 800676c:	07d2      	lsls	r2, r2, #31
 800676e:	d502      	bpl.n	8006776 <_printf_float+0x1be>
 8006770:	3301      	adds	r3, #1
 8006772:	1859      	adds	r1, r3, r1
 8006774:	6121      	str	r1, [r4, #16]
 8006776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006778:	65a3      	str	r3, [r4, #88]	; 0x58
 800677a:	2300      	movs	r3, #0
 800677c:	930b      	str	r3, [sp, #44]	; 0x2c
 800677e:	e7d8      	b.n	8006732 <_printf_float+0x17a>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <_printf_float+0x1d4>
 8006784:	2201      	movs	r2, #1
 8006786:	6821      	ldr	r1, [r4, #0]
 8006788:	4211      	tst	r1, r2
 800678a:	d000      	beq.n	800678e <_printf_float+0x1d6>
 800678c:	1c9a      	adds	r2, r3, #2
 800678e:	6122      	str	r2, [r4, #16]
 8006790:	e7f1      	b.n	8006776 <_printf_float+0x1be>
 8006792:	2367      	movs	r3, #103	; 0x67
 8006794:	930a      	str	r3, [sp, #40]	; 0x28
 8006796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006798:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800679a:	4293      	cmp	r3, r2
 800679c:	db06      	blt.n	80067ac <_printf_float+0x1f4>
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	07d2      	lsls	r2, r2, #31
 80067a4:	d5e7      	bpl.n	8006776 <_printf_float+0x1be>
 80067a6:	3301      	adds	r3, #1
 80067a8:	6123      	str	r3, [r4, #16]
 80067aa:	e7e4      	b.n	8006776 <_printf_float+0x1be>
 80067ac:	2101      	movs	r1, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	dc01      	bgt.n	80067b6 <_printf_float+0x1fe>
 80067b2:	1849      	adds	r1, r1, r1
 80067b4:	1ac9      	subs	r1, r1, r3
 80067b6:	1852      	adds	r2, r2, r1
 80067b8:	e7e9      	b.n	800678e <_printf_float+0x1d6>
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	0553      	lsls	r3, r2, #21
 80067be:	d407      	bmi.n	80067d0 <_printf_float+0x218>
 80067c0:	6923      	ldr	r3, [r4, #16]
 80067c2:	002a      	movs	r2, r5
 80067c4:	0038      	movs	r0, r7
 80067c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c8:	47b0      	blx	r6
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	d128      	bne.n	8006820 <_printf_float+0x268>
 80067ce:	e751      	b.n	8006674 <_printf_float+0xbc>
 80067d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d2:	2b65      	cmp	r3, #101	; 0x65
 80067d4:	d800      	bhi.n	80067d8 <_printf_float+0x220>
 80067d6:	e0e1      	b.n	800699c <_printf_float+0x3e4>
 80067d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80067da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80067dc:	2200      	movs	r2, #0
 80067de:	2300      	movs	r3, #0
 80067e0:	f7f9 fe30 	bl	8000444 <__aeabi_dcmpeq>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d031      	beq.n	800684c <_printf_float+0x294>
 80067e8:	2301      	movs	r3, #1
 80067ea:	0038      	movs	r0, r7
 80067ec:	4a34      	ldr	r2, [pc, #208]	; (80068c0 <_printf_float+0x308>)
 80067ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f0:	47b0      	blx	r6
 80067f2:	1c43      	adds	r3, r0, #1
 80067f4:	d100      	bne.n	80067f8 <_printf_float+0x240>
 80067f6:	e73d      	b.n	8006674 <_printf_float+0xbc>
 80067f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067fc:	4293      	cmp	r3, r2
 80067fe:	db02      	blt.n	8006806 <_printf_float+0x24e>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	07db      	lsls	r3, r3, #31
 8006804:	d50c      	bpl.n	8006820 <_printf_float+0x268>
 8006806:	0038      	movs	r0, r7
 8006808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800680a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800680c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800680e:	47b0      	blx	r6
 8006810:	2500      	movs	r5, #0
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	d100      	bne.n	8006818 <_printf_float+0x260>
 8006816:	e72d      	b.n	8006674 <_printf_float+0xbc>
 8006818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800681a:	3b01      	subs	r3, #1
 800681c:	42ab      	cmp	r3, r5
 800681e:	dc0a      	bgt.n	8006836 <_printf_float+0x27e>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	079b      	lsls	r3, r3, #30
 8006824:	d500      	bpl.n	8006828 <_printf_float+0x270>
 8006826:	e106      	b.n	8006a36 <_printf_float+0x47e>
 8006828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800682a:	68e0      	ldr	r0, [r4, #12]
 800682c:	4298      	cmp	r0, r3
 800682e:	db00      	blt.n	8006832 <_printf_float+0x27a>
 8006830:	e722      	b.n	8006678 <_printf_float+0xc0>
 8006832:	0018      	movs	r0, r3
 8006834:	e720      	b.n	8006678 <_printf_float+0xc0>
 8006836:	0022      	movs	r2, r4
 8006838:	2301      	movs	r3, #1
 800683a:	0038      	movs	r0, r7
 800683c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800683e:	321a      	adds	r2, #26
 8006840:	47b0      	blx	r6
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d100      	bne.n	8006848 <_printf_float+0x290>
 8006846:	e715      	b.n	8006674 <_printf_float+0xbc>
 8006848:	3501      	adds	r5, #1
 800684a:	e7e5      	b.n	8006818 <_printf_float+0x260>
 800684c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684e:	2b00      	cmp	r3, #0
 8006850:	dc38      	bgt.n	80068c4 <_printf_float+0x30c>
 8006852:	2301      	movs	r3, #1
 8006854:	0038      	movs	r0, r7
 8006856:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <_printf_float+0x308>)
 8006858:	9909      	ldr	r1, [sp, #36]	; 0x24
 800685a:	47b0      	blx	r6
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d100      	bne.n	8006862 <_printf_float+0x2aa>
 8006860:	e708      	b.n	8006674 <_printf_float+0xbc>
 8006862:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006866:	4313      	orrs	r3, r2
 8006868:	d102      	bne.n	8006870 <_printf_float+0x2b8>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	07db      	lsls	r3, r3, #31
 800686e:	d5d7      	bpl.n	8006820 <_printf_float+0x268>
 8006870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006872:	0038      	movs	r0, r7
 8006874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006876:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006878:	47b0      	blx	r6
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	d100      	bne.n	8006880 <_printf_float+0x2c8>
 800687e:	e6f9      	b.n	8006674 <_printf_float+0xbc>
 8006880:	2300      	movs	r3, #0
 8006882:	930a      	str	r3, [sp, #40]	; 0x28
 8006884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006888:	425b      	negs	r3, r3
 800688a:	4293      	cmp	r3, r2
 800688c:	dc01      	bgt.n	8006892 <_printf_float+0x2da>
 800688e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006890:	e797      	b.n	80067c2 <_printf_float+0x20a>
 8006892:	0022      	movs	r2, r4
 8006894:	2301      	movs	r3, #1
 8006896:	0038      	movs	r0, r7
 8006898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800689a:	321a      	adds	r2, #26
 800689c:	47b0      	blx	r6
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d100      	bne.n	80068a4 <_printf_float+0x2ec>
 80068a2:	e6e7      	b.n	8006674 <_printf_float+0xbc>
 80068a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a6:	3301      	adds	r3, #1
 80068a8:	e7eb      	b.n	8006882 <_printf_float+0x2ca>
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	7fefffff 	.word	0x7fefffff
 80068b0:	08009764 	.word	0x08009764
 80068b4:	08009768 	.word	0x08009768
 80068b8:	0800976c 	.word	0x0800976c
 80068bc:	08009770 	.word	0x08009770
 80068c0:	08009774 	.word	0x08009774
 80068c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068c8:	920a      	str	r2, [sp, #40]	; 0x28
 80068ca:	429a      	cmp	r2, r3
 80068cc:	dd00      	ble.n	80068d0 <_printf_float+0x318>
 80068ce:	930a      	str	r3, [sp, #40]	; 0x28
 80068d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	dc3c      	bgt.n	8006950 <_printf_float+0x398>
 80068d6:	2300      	movs	r3, #0
 80068d8:	930d      	str	r3, [sp, #52]	; 0x34
 80068da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068dc:	43db      	mvns	r3, r3
 80068de:	17db      	asrs	r3, r3, #31
 80068e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ea:	4013      	ands	r3, r2
 80068ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068f2:	4293      	cmp	r3, r2
 80068f4:	dc34      	bgt.n	8006960 <_printf_float+0x3a8>
 80068f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068fa:	4293      	cmp	r3, r2
 80068fc:	db3d      	blt.n	800697a <_printf_float+0x3c2>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	07db      	lsls	r3, r3, #31
 8006902:	d43a      	bmi.n	800697a <_printf_float+0x3c2>
 8006904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006908:	9911      	ldr	r1, [sp, #68]	; 0x44
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	1a52      	subs	r2, r2, r1
 800690e:	920a      	str	r2, [sp, #40]	; 0x28
 8006910:	429a      	cmp	r2, r3
 8006912:	dd00      	ble.n	8006916 <_printf_float+0x35e>
 8006914:	930a      	str	r3, [sp, #40]	; 0x28
 8006916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	dc36      	bgt.n	800698a <_printf_float+0x3d2>
 800691c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691e:	2500      	movs	r5, #0
 8006920:	43db      	mvns	r3, r3
 8006922:	17db      	asrs	r3, r3, #31
 8006924:	930b      	str	r3, [sp, #44]	; 0x2c
 8006926:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800692a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800692c:	1a9b      	subs	r3, r3, r2
 800692e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006930:	400a      	ands	r2, r1
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	42ab      	cmp	r3, r5
 8006936:	dc00      	bgt.n	800693a <_printf_float+0x382>
 8006938:	e772      	b.n	8006820 <_printf_float+0x268>
 800693a:	0022      	movs	r2, r4
 800693c:	2301      	movs	r3, #1
 800693e:	0038      	movs	r0, r7
 8006940:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006942:	321a      	adds	r2, #26
 8006944:	47b0      	blx	r6
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d100      	bne.n	800694c <_printf_float+0x394>
 800694a:	e693      	b.n	8006674 <_printf_float+0xbc>
 800694c:	3501      	adds	r5, #1
 800694e:	e7ea      	b.n	8006926 <_printf_float+0x36e>
 8006950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006952:	002a      	movs	r2, r5
 8006954:	0038      	movs	r0, r7
 8006956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006958:	47b0      	blx	r6
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	d1bb      	bne.n	80068d6 <_printf_float+0x31e>
 800695e:	e689      	b.n	8006674 <_printf_float+0xbc>
 8006960:	0022      	movs	r2, r4
 8006962:	2301      	movs	r3, #1
 8006964:	0038      	movs	r0, r7
 8006966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006968:	321a      	adds	r2, #26
 800696a:	47b0      	blx	r6
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d100      	bne.n	8006972 <_printf_float+0x3ba>
 8006970:	e680      	b.n	8006674 <_printf_float+0xbc>
 8006972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006974:	3301      	adds	r3, #1
 8006976:	930d      	str	r3, [sp, #52]	; 0x34
 8006978:	e7b3      	b.n	80068e2 <_printf_float+0x32a>
 800697a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800697c:	0038      	movs	r0, r7
 800697e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006982:	47b0      	blx	r6
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d1bd      	bne.n	8006904 <_printf_float+0x34c>
 8006988:	e674      	b.n	8006674 <_printf_float+0xbc>
 800698a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800698c:	0038      	movs	r0, r7
 800698e:	18ea      	adds	r2, r5, r3
 8006990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006994:	47b0      	blx	r6
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	d1c0      	bne.n	800691c <_printf_float+0x364>
 800699a:	e66b      	b.n	8006674 <_printf_float+0xbc>
 800699c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800699e:	2b01      	cmp	r3, #1
 80069a0:	dc02      	bgt.n	80069a8 <_printf_float+0x3f0>
 80069a2:	2301      	movs	r3, #1
 80069a4:	421a      	tst	r2, r3
 80069a6:	d034      	beq.n	8006a12 <_printf_float+0x45a>
 80069a8:	2301      	movs	r3, #1
 80069aa:	002a      	movs	r2, r5
 80069ac:	0038      	movs	r0, r7
 80069ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b0:	47b0      	blx	r6
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d100      	bne.n	80069b8 <_printf_float+0x400>
 80069b6:	e65d      	b.n	8006674 <_printf_float+0xbc>
 80069b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ba:	0038      	movs	r0, r7
 80069bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c0:	47b0      	blx	r6
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	d100      	bne.n	80069c8 <_printf_float+0x410>
 80069c6:	e655      	b.n	8006674 <_printf_float+0xbc>
 80069c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80069ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80069cc:	2200      	movs	r2, #0
 80069ce:	2300      	movs	r3, #0
 80069d0:	f7f9 fd38 	bl	8000444 <__aeabi_dcmpeq>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d11a      	bne.n	8006a0e <_printf_float+0x456>
 80069d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069da:	1c6a      	adds	r2, r5, #1
 80069dc:	3b01      	subs	r3, #1
 80069de:	0038      	movs	r0, r7
 80069e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069e2:	47b0      	blx	r6
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d10e      	bne.n	8006a06 <_printf_float+0x44e>
 80069e8:	e644      	b.n	8006674 <_printf_float+0xbc>
 80069ea:	0022      	movs	r2, r4
 80069ec:	2301      	movs	r3, #1
 80069ee:	0038      	movs	r0, r7
 80069f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069f2:	321a      	adds	r2, #26
 80069f4:	47b0      	blx	r6
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	d100      	bne.n	80069fc <_printf_float+0x444>
 80069fa:	e63b      	b.n	8006674 <_printf_float+0xbc>
 80069fc:	3501      	adds	r5, #1
 80069fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a00:	3b01      	subs	r3, #1
 8006a02:	42ab      	cmp	r3, r5
 8006a04:	dcf1      	bgt.n	80069ea <_printf_float+0x432>
 8006a06:	0022      	movs	r2, r4
 8006a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0a:	3250      	adds	r2, #80	; 0x50
 8006a0c:	e6da      	b.n	80067c4 <_printf_float+0x20c>
 8006a0e:	2500      	movs	r5, #0
 8006a10:	e7f5      	b.n	80069fe <_printf_float+0x446>
 8006a12:	002a      	movs	r2, r5
 8006a14:	e7e3      	b.n	80069de <_printf_float+0x426>
 8006a16:	0022      	movs	r2, r4
 8006a18:	2301      	movs	r3, #1
 8006a1a:	0038      	movs	r0, r7
 8006a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a1e:	3219      	adds	r2, #25
 8006a20:	47b0      	blx	r6
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d100      	bne.n	8006a28 <_printf_float+0x470>
 8006a26:	e625      	b.n	8006674 <_printf_float+0xbc>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	68e3      	ldr	r3, [r4, #12]
 8006a2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	42ab      	cmp	r3, r5
 8006a32:	dcf0      	bgt.n	8006a16 <_printf_float+0x45e>
 8006a34:	e6f8      	b.n	8006828 <_printf_float+0x270>
 8006a36:	2500      	movs	r5, #0
 8006a38:	e7f7      	b.n	8006a2a <_printf_float+0x472>
 8006a3a:	46c0      	nop			; (mov r8, r8)

08006a3c <_printf_common>:
 8006a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a3e:	0015      	movs	r5, r2
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	688a      	ldr	r2, [r1, #8]
 8006a44:	690b      	ldr	r3, [r1, #16]
 8006a46:	000c      	movs	r4, r1
 8006a48:	9000      	str	r0, [sp, #0]
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	da00      	bge.n	8006a50 <_printf_common+0x14>
 8006a4e:	0013      	movs	r3, r2
 8006a50:	0022      	movs	r2, r4
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	3243      	adds	r2, #67	; 0x43
 8006a56:	7812      	ldrb	r2, [r2, #0]
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	d001      	beq.n	8006a60 <_printf_common+0x24>
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	069b      	lsls	r3, r3, #26
 8006a64:	d502      	bpl.n	8006a6c <_printf_common+0x30>
 8006a66:	682b      	ldr	r3, [r5, #0]
 8006a68:	3302      	adds	r3, #2
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	2306      	movs	r3, #6
 8006a70:	0017      	movs	r7, r2
 8006a72:	401f      	ands	r7, r3
 8006a74:	421a      	tst	r2, r3
 8006a76:	d027      	beq.n	8006ac8 <_printf_common+0x8c>
 8006a78:	0023      	movs	r3, r4
 8006a7a:	3343      	adds	r3, #67	; 0x43
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	1e5a      	subs	r2, r3, #1
 8006a80:	4193      	sbcs	r3, r2
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	0692      	lsls	r2, r2, #26
 8006a86:	d430      	bmi.n	8006aea <_printf_common+0xae>
 8006a88:	0022      	movs	r2, r4
 8006a8a:	9901      	ldr	r1, [sp, #4]
 8006a8c:	9800      	ldr	r0, [sp, #0]
 8006a8e:	9e08      	ldr	r6, [sp, #32]
 8006a90:	3243      	adds	r2, #67	; 0x43
 8006a92:	47b0      	blx	r6
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d025      	beq.n	8006ae4 <_printf_common+0xa8>
 8006a98:	2306      	movs	r3, #6
 8006a9a:	6820      	ldr	r0, [r4, #0]
 8006a9c:	682a      	ldr	r2, [r5, #0]
 8006a9e:	68e1      	ldr	r1, [r4, #12]
 8006aa0:	2500      	movs	r5, #0
 8006aa2:	4003      	ands	r3, r0
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d103      	bne.n	8006ab0 <_printf_common+0x74>
 8006aa8:	1a8d      	subs	r5, r1, r2
 8006aaa:	43eb      	mvns	r3, r5
 8006aac:	17db      	asrs	r3, r3, #31
 8006aae:	401d      	ands	r5, r3
 8006ab0:	68a3      	ldr	r3, [r4, #8]
 8006ab2:	6922      	ldr	r2, [r4, #16]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	dd01      	ble.n	8006abc <_printf_common+0x80>
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	18ed      	adds	r5, r5, r3
 8006abc:	2700      	movs	r7, #0
 8006abe:	42bd      	cmp	r5, r7
 8006ac0:	d120      	bne.n	8006b04 <_printf_common+0xc8>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e010      	b.n	8006ae8 <_printf_common+0xac>
 8006ac6:	3701      	adds	r7, #1
 8006ac8:	68e3      	ldr	r3, [r4, #12]
 8006aca:	682a      	ldr	r2, [r5, #0]
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	42bb      	cmp	r3, r7
 8006ad0:	ddd2      	ble.n	8006a78 <_printf_common+0x3c>
 8006ad2:	0022      	movs	r2, r4
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	9901      	ldr	r1, [sp, #4]
 8006ad8:	9800      	ldr	r0, [sp, #0]
 8006ada:	9e08      	ldr	r6, [sp, #32]
 8006adc:	3219      	adds	r2, #25
 8006ade:	47b0      	blx	r6
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d1f0      	bne.n	8006ac6 <_printf_common+0x8a>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	4240      	negs	r0, r0
 8006ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006aea:	2030      	movs	r0, #48	; 0x30
 8006aec:	18e1      	adds	r1, r4, r3
 8006aee:	3143      	adds	r1, #67	; 0x43
 8006af0:	7008      	strb	r0, [r1, #0]
 8006af2:	0021      	movs	r1, r4
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	3145      	adds	r1, #69	; 0x45
 8006af8:	7809      	ldrb	r1, [r1, #0]
 8006afa:	18a2      	adds	r2, r4, r2
 8006afc:	3243      	adds	r2, #67	; 0x43
 8006afe:	3302      	adds	r3, #2
 8006b00:	7011      	strb	r1, [r2, #0]
 8006b02:	e7c1      	b.n	8006a88 <_printf_common+0x4c>
 8006b04:	0022      	movs	r2, r4
 8006b06:	2301      	movs	r3, #1
 8006b08:	9901      	ldr	r1, [sp, #4]
 8006b0a:	9800      	ldr	r0, [sp, #0]
 8006b0c:	9e08      	ldr	r6, [sp, #32]
 8006b0e:	321a      	adds	r2, #26
 8006b10:	47b0      	blx	r6
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa8>
 8006b16:	3701      	adds	r7, #1
 8006b18:	e7d1      	b.n	8006abe <_printf_common+0x82>
	...

08006b1c <_printf_i>:
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	b08b      	sub	sp, #44	; 0x2c
 8006b20:	9206      	str	r2, [sp, #24]
 8006b22:	000a      	movs	r2, r1
 8006b24:	3243      	adds	r2, #67	; 0x43
 8006b26:	9307      	str	r3, [sp, #28]
 8006b28:	9005      	str	r0, [sp, #20]
 8006b2a:	9204      	str	r2, [sp, #16]
 8006b2c:	7e0a      	ldrb	r2, [r1, #24]
 8006b2e:	000c      	movs	r4, r1
 8006b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b32:	2a78      	cmp	r2, #120	; 0x78
 8006b34:	d807      	bhi.n	8006b46 <_printf_i+0x2a>
 8006b36:	2a62      	cmp	r2, #98	; 0x62
 8006b38:	d809      	bhi.n	8006b4e <_printf_i+0x32>
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d100      	bne.n	8006b40 <_printf_i+0x24>
 8006b3e:	e0c1      	b.n	8006cc4 <_printf_i+0x1a8>
 8006b40:	2a58      	cmp	r2, #88	; 0x58
 8006b42:	d100      	bne.n	8006b46 <_printf_i+0x2a>
 8006b44:	e08c      	b.n	8006c60 <_printf_i+0x144>
 8006b46:	0026      	movs	r6, r4
 8006b48:	3642      	adds	r6, #66	; 0x42
 8006b4a:	7032      	strb	r2, [r6, #0]
 8006b4c:	e022      	b.n	8006b94 <_printf_i+0x78>
 8006b4e:	0010      	movs	r0, r2
 8006b50:	3863      	subs	r0, #99	; 0x63
 8006b52:	2815      	cmp	r0, #21
 8006b54:	d8f7      	bhi.n	8006b46 <_printf_i+0x2a>
 8006b56:	f7f9 fae5 	bl	8000124 <__gnu_thumb1_case_shi>
 8006b5a:	0016      	.short	0x0016
 8006b5c:	fff6001f 	.word	0xfff6001f
 8006b60:	fff6fff6 	.word	0xfff6fff6
 8006b64:	001ffff6 	.word	0x001ffff6
 8006b68:	fff6fff6 	.word	0xfff6fff6
 8006b6c:	fff6fff6 	.word	0xfff6fff6
 8006b70:	003600a8 	.word	0x003600a8
 8006b74:	fff6009a 	.word	0xfff6009a
 8006b78:	00b9fff6 	.word	0x00b9fff6
 8006b7c:	0036fff6 	.word	0x0036fff6
 8006b80:	fff6fff6 	.word	0xfff6fff6
 8006b84:	009e      	.short	0x009e
 8006b86:	0026      	movs	r6, r4
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	3642      	adds	r6, #66	; 0x42
 8006b8c:	1d11      	adds	r1, r2, #4
 8006b8e:	6019      	str	r1, [r3, #0]
 8006b90:	6813      	ldr	r3, [r2, #0]
 8006b92:	7033      	strb	r3, [r6, #0]
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0a7      	b.n	8006ce8 <_printf_i+0x1cc>
 8006b98:	6808      	ldr	r0, [r1, #0]
 8006b9a:	6819      	ldr	r1, [r3, #0]
 8006b9c:	1d0a      	adds	r2, r1, #4
 8006b9e:	0605      	lsls	r5, r0, #24
 8006ba0:	d50b      	bpl.n	8006bba <_printf_i+0x9e>
 8006ba2:	680d      	ldr	r5, [r1, #0]
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	da03      	bge.n	8006bb2 <_printf_i+0x96>
 8006baa:	232d      	movs	r3, #45	; 0x2d
 8006bac:	9a04      	ldr	r2, [sp, #16]
 8006bae:	426d      	negs	r5, r5
 8006bb0:	7013      	strb	r3, [r2, #0]
 8006bb2:	4b61      	ldr	r3, [pc, #388]	; (8006d38 <_printf_i+0x21c>)
 8006bb4:	270a      	movs	r7, #10
 8006bb6:	9303      	str	r3, [sp, #12]
 8006bb8:	e01b      	b.n	8006bf2 <_printf_i+0xd6>
 8006bba:	680d      	ldr	r5, [r1, #0]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	0641      	lsls	r1, r0, #25
 8006bc0:	d5f1      	bpl.n	8006ba6 <_printf_i+0x8a>
 8006bc2:	b22d      	sxth	r5, r5
 8006bc4:	e7ef      	b.n	8006ba6 <_printf_i+0x8a>
 8006bc6:	680d      	ldr	r5, [r1, #0]
 8006bc8:	6819      	ldr	r1, [r3, #0]
 8006bca:	1d08      	adds	r0, r1, #4
 8006bcc:	6018      	str	r0, [r3, #0]
 8006bce:	062e      	lsls	r6, r5, #24
 8006bd0:	d501      	bpl.n	8006bd6 <_printf_i+0xba>
 8006bd2:	680d      	ldr	r5, [r1, #0]
 8006bd4:	e003      	b.n	8006bde <_printf_i+0xc2>
 8006bd6:	066d      	lsls	r5, r5, #25
 8006bd8:	d5fb      	bpl.n	8006bd2 <_printf_i+0xb6>
 8006bda:	680d      	ldr	r5, [r1, #0]
 8006bdc:	b2ad      	uxth	r5, r5
 8006bde:	4b56      	ldr	r3, [pc, #344]	; (8006d38 <_printf_i+0x21c>)
 8006be0:	2708      	movs	r7, #8
 8006be2:	9303      	str	r3, [sp, #12]
 8006be4:	2a6f      	cmp	r2, #111	; 0x6f
 8006be6:	d000      	beq.n	8006bea <_printf_i+0xce>
 8006be8:	3702      	adds	r7, #2
 8006bea:	0023      	movs	r3, r4
 8006bec:	2200      	movs	r2, #0
 8006bee:	3343      	adds	r3, #67	; 0x43
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	6863      	ldr	r3, [r4, #4]
 8006bf4:	60a3      	str	r3, [r4, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	db03      	blt.n	8006c02 <_printf_i+0xe6>
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	6821      	ldr	r1, [r4, #0]
 8006bfe:	4391      	bics	r1, r2
 8006c00:	6021      	str	r1, [r4, #0]
 8006c02:	2d00      	cmp	r5, #0
 8006c04:	d102      	bne.n	8006c0c <_printf_i+0xf0>
 8006c06:	9e04      	ldr	r6, [sp, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <_printf_i+0x10a>
 8006c0c:	9e04      	ldr	r6, [sp, #16]
 8006c0e:	0028      	movs	r0, r5
 8006c10:	0039      	movs	r1, r7
 8006c12:	f7f9 fb17 	bl	8000244 <__aeabi_uidivmod>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	3e01      	subs	r6, #1
 8006c1a:	5c5b      	ldrb	r3, [r3, r1]
 8006c1c:	7033      	strb	r3, [r6, #0]
 8006c1e:	002b      	movs	r3, r5
 8006c20:	0005      	movs	r5, r0
 8006c22:	429f      	cmp	r7, r3
 8006c24:	d9f3      	bls.n	8006c0e <_printf_i+0xf2>
 8006c26:	2f08      	cmp	r7, #8
 8006c28:	d109      	bne.n	8006c3e <_printf_i+0x122>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	07db      	lsls	r3, r3, #31
 8006c2e:	d506      	bpl.n	8006c3e <_printf_i+0x122>
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	6922      	ldr	r2, [r4, #16]
 8006c34:	4293      	cmp	r3, r2
 8006c36:	dc02      	bgt.n	8006c3e <_printf_i+0x122>
 8006c38:	2330      	movs	r3, #48	; 0x30
 8006c3a:	3e01      	subs	r6, #1
 8006c3c:	7033      	strb	r3, [r6, #0]
 8006c3e:	9b04      	ldr	r3, [sp, #16]
 8006c40:	1b9b      	subs	r3, r3, r6
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	0021      	movs	r1, r4
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	9805      	ldr	r0, [sp, #20]
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	aa09      	add	r2, sp, #36	; 0x24
 8006c50:	f7ff fef4 	bl	8006a3c <_printf_common>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d14c      	bne.n	8006cf2 <_printf_i+0x1d6>
 8006c58:	2001      	movs	r0, #1
 8006c5a:	4240      	negs	r0, r0
 8006c5c:	b00b      	add	sp, #44	; 0x2c
 8006c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c60:	3145      	adds	r1, #69	; 0x45
 8006c62:	700a      	strb	r2, [r1, #0]
 8006c64:	4a34      	ldr	r2, [pc, #208]	; (8006d38 <_printf_i+0x21c>)
 8006c66:	9203      	str	r2, [sp, #12]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	6821      	ldr	r1, [r4, #0]
 8006c6c:	ca20      	ldmia	r2!, {r5}
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	0608      	lsls	r0, r1, #24
 8006c72:	d516      	bpl.n	8006ca2 <_printf_i+0x186>
 8006c74:	07cb      	lsls	r3, r1, #31
 8006c76:	d502      	bpl.n	8006c7e <_printf_i+0x162>
 8006c78:	2320      	movs	r3, #32
 8006c7a:	4319      	orrs	r1, r3
 8006c7c:	6021      	str	r1, [r4, #0]
 8006c7e:	2710      	movs	r7, #16
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	d1b2      	bne.n	8006bea <_printf_i+0xce>
 8006c84:	2320      	movs	r3, #32
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	439a      	bics	r2, r3
 8006c8a:	6022      	str	r2, [r4, #0]
 8006c8c:	e7ad      	b.n	8006bea <_printf_i+0xce>
 8006c8e:	2220      	movs	r2, #32
 8006c90:	6809      	ldr	r1, [r1, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	6022      	str	r2, [r4, #0]
 8006c96:	0022      	movs	r2, r4
 8006c98:	2178      	movs	r1, #120	; 0x78
 8006c9a:	3245      	adds	r2, #69	; 0x45
 8006c9c:	7011      	strb	r1, [r2, #0]
 8006c9e:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <_printf_i+0x220>)
 8006ca0:	e7e1      	b.n	8006c66 <_printf_i+0x14a>
 8006ca2:	0648      	lsls	r0, r1, #25
 8006ca4:	d5e6      	bpl.n	8006c74 <_printf_i+0x158>
 8006ca6:	b2ad      	uxth	r5, r5
 8006ca8:	e7e4      	b.n	8006c74 <_printf_i+0x158>
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	680d      	ldr	r5, [r1, #0]
 8006cae:	1d10      	adds	r0, r2, #4
 8006cb0:	6949      	ldr	r1, [r1, #20]
 8006cb2:	6018      	str	r0, [r3, #0]
 8006cb4:	6813      	ldr	r3, [r2, #0]
 8006cb6:	062e      	lsls	r6, r5, #24
 8006cb8:	d501      	bpl.n	8006cbe <_printf_i+0x1a2>
 8006cba:	6019      	str	r1, [r3, #0]
 8006cbc:	e002      	b.n	8006cc4 <_printf_i+0x1a8>
 8006cbe:	066d      	lsls	r5, r5, #25
 8006cc0:	d5fb      	bpl.n	8006cba <_printf_i+0x19e>
 8006cc2:	8019      	strh	r1, [r3, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9e04      	ldr	r6, [sp, #16]
 8006cc8:	6123      	str	r3, [r4, #16]
 8006cca:	e7bb      	b.n	8006c44 <_printf_i+0x128>
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	1d11      	adds	r1, r2, #4
 8006cd0:	6019      	str	r1, [r3, #0]
 8006cd2:	6816      	ldr	r6, [r2, #0]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	0030      	movs	r0, r6
 8006cd8:	6862      	ldr	r2, [r4, #4]
 8006cda:	f000 ff05 	bl	8007ae8 <memchr>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d001      	beq.n	8006ce6 <_printf_i+0x1ca>
 8006ce2:	1b80      	subs	r0, r0, r6
 8006ce4:	6060      	str	r0, [r4, #4]
 8006ce6:	6863      	ldr	r3, [r4, #4]
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	2300      	movs	r3, #0
 8006cec:	9a04      	ldr	r2, [sp, #16]
 8006cee:	7013      	strb	r3, [r2, #0]
 8006cf0:	e7a8      	b.n	8006c44 <_printf_i+0x128>
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	0032      	movs	r2, r6
 8006cf6:	9906      	ldr	r1, [sp, #24]
 8006cf8:	9805      	ldr	r0, [sp, #20]
 8006cfa:	9d07      	ldr	r5, [sp, #28]
 8006cfc:	47a8      	blx	r5
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	d0aa      	beq.n	8006c58 <_printf_i+0x13c>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	079b      	lsls	r3, r3, #30
 8006d06:	d415      	bmi.n	8006d34 <_printf_i+0x218>
 8006d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0a:	68e0      	ldr	r0, [r4, #12]
 8006d0c:	4298      	cmp	r0, r3
 8006d0e:	daa5      	bge.n	8006c5c <_printf_i+0x140>
 8006d10:	0018      	movs	r0, r3
 8006d12:	e7a3      	b.n	8006c5c <_printf_i+0x140>
 8006d14:	0022      	movs	r2, r4
 8006d16:	2301      	movs	r3, #1
 8006d18:	9906      	ldr	r1, [sp, #24]
 8006d1a:	9805      	ldr	r0, [sp, #20]
 8006d1c:	9e07      	ldr	r6, [sp, #28]
 8006d1e:	3219      	adds	r2, #25
 8006d20:	47b0      	blx	r6
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	d098      	beq.n	8006c58 <_printf_i+0x13c>
 8006d26:	3501      	adds	r5, #1
 8006d28:	68e3      	ldr	r3, [r4, #12]
 8006d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	42ab      	cmp	r3, r5
 8006d30:	dcf0      	bgt.n	8006d14 <_printf_i+0x1f8>
 8006d32:	e7e9      	b.n	8006d08 <_printf_i+0x1ec>
 8006d34:	2500      	movs	r5, #0
 8006d36:	e7f7      	b.n	8006d28 <_printf_i+0x20c>
 8006d38:	08009776 	.word	0x08009776
 8006d3c:	08009787 	.word	0x08009787

08006d40 <siprintf>:
 8006d40:	b40e      	push	{r1, r2, r3}
 8006d42:	b500      	push	{lr}
 8006d44:	490b      	ldr	r1, [pc, #44]	; (8006d74 <siprintf+0x34>)
 8006d46:	b09c      	sub	sp, #112	; 0x70
 8006d48:	ab1d      	add	r3, sp, #116	; 0x74
 8006d4a:	9002      	str	r0, [sp, #8]
 8006d4c:	9006      	str	r0, [sp, #24]
 8006d4e:	9107      	str	r1, [sp, #28]
 8006d50:	9104      	str	r1, [sp, #16]
 8006d52:	4809      	ldr	r0, [pc, #36]	; (8006d78 <siprintf+0x38>)
 8006d54:	4909      	ldr	r1, [pc, #36]	; (8006d7c <siprintf+0x3c>)
 8006d56:	cb04      	ldmia	r3!, {r2}
 8006d58:	9105      	str	r1, [sp, #20]
 8006d5a:	6800      	ldr	r0, [r0, #0]
 8006d5c:	a902      	add	r1, sp, #8
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	f001 fbe2 	bl	8008528 <_svfiprintf_r>
 8006d64:	2300      	movs	r3, #0
 8006d66:	9a02      	ldr	r2, [sp, #8]
 8006d68:	7013      	strb	r3, [r2, #0]
 8006d6a:	b01c      	add	sp, #112	; 0x70
 8006d6c:	bc08      	pop	{r3}
 8006d6e:	b003      	add	sp, #12
 8006d70:	4718      	bx	r3
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	7fffffff 	.word	0x7fffffff
 8006d78:	20000080 	.word	0x20000080
 8006d7c:	ffff0208 	.word	0xffff0208

08006d80 <quorem>:
 8006d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d82:	0006      	movs	r6, r0
 8006d84:	690b      	ldr	r3, [r1, #16]
 8006d86:	6932      	ldr	r2, [r6, #16]
 8006d88:	b087      	sub	sp, #28
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	9103      	str	r1, [sp, #12]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	db65      	blt.n	8006e5e <quorem+0xde>
 8006d92:	3b01      	subs	r3, #1
 8006d94:	009c      	lsls	r4, r3, #2
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	000b      	movs	r3, r1
 8006d9a:	3314      	adds	r3, #20
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	191b      	adds	r3, r3, r4
 8006da0:	9304      	str	r3, [sp, #16]
 8006da2:	0033      	movs	r3, r6
 8006da4:	3314      	adds	r3, #20
 8006da6:	9302      	str	r3, [sp, #8]
 8006da8:	191c      	adds	r4, r3, r4
 8006daa:	9b04      	ldr	r3, [sp, #16]
 8006dac:	6827      	ldr	r7, [r4, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	0038      	movs	r0, r7
 8006db2:	1c5d      	adds	r5, r3, #1
 8006db4:	0029      	movs	r1, r5
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	f7f9 f9be 	bl	8000138 <__udivsi3>
 8006dbc:	9001      	str	r0, [sp, #4]
 8006dbe:	42af      	cmp	r7, r5
 8006dc0:	d324      	bcc.n	8006e0c <quorem+0x8c>
 8006dc2:	2500      	movs	r5, #0
 8006dc4:	46ac      	mov	ip, r5
 8006dc6:	9802      	ldr	r0, [sp, #8]
 8006dc8:	9f05      	ldr	r7, [sp, #20]
 8006dca:	cf08      	ldmia	r7!, {r3}
 8006dcc:	9a01      	ldr	r2, [sp, #4]
 8006dce:	b299      	uxth	r1, r3
 8006dd0:	4351      	muls	r1, r2
 8006dd2:	0c1b      	lsrs	r3, r3, #16
 8006dd4:	4353      	muls	r3, r2
 8006dd6:	1949      	adds	r1, r1, r5
 8006dd8:	0c0a      	lsrs	r2, r1, #16
 8006dda:	189b      	adds	r3, r3, r2
 8006ddc:	6802      	ldr	r2, [r0, #0]
 8006dde:	b289      	uxth	r1, r1
 8006de0:	b292      	uxth	r2, r2
 8006de2:	4462      	add	r2, ip
 8006de4:	1a52      	subs	r2, r2, r1
 8006de6:	6801      	ldr	r1, [r0, #0]
 8006de8:	0c1d      	lsrs	r5, r3, #16
 8006dea:	0c09      	lsrs	r1, r1, #16
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	1acb      	subs	r3, r1, r3
 8006df0:	1411      	asrs	r1, r2, #16
 8006df2:	185b      	adds	r3, r3, r1
 8006df4:	1419      	asrs	r1, r3, #16
 8006df6:	b292      	uxth	r2, r2
 8006df8:	041b      	lsls	r3, r3, #16
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	468c      	mov	ip, r1
 8006e00:	c004      	stmia	r0!, {r2}
 8006e02:	42bb      	cmp	r3, r7
 8006e04:	d2e1      	bcs.n	8006dca <quorem+0x4a>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d030      	beq.n	8006e6e <quorem+0xee>
 8006e0c:	0030      	movs	r0, r6
 8006e0e:	9903      	ldr	r1, [sp, #12]
 8006e10:	f001 f902 	bl	8008018 <__mcmp>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	db21      	blt.n	8006e5c <quorem+0xdc>
 8006e18:	0030      	movs	r0, r6
 8006e1a:	2400      	movs	r4, #0
 8006e1c:	9b01      	ldr	r3, [sp, #4]
 8006e1e:	9903      	ldr	r1, [sp, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	3014      	adds	r0, #20
 8006e26:	3114      	adds	r1, #20
 8006e28:	6803      	ldr	r3, [r0, #0]
 8006e2a:	c920      	ldmia	r1!, {r5}
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	1914      	adds	r4, r2, r4
 8006e30:	b2aa      	uxth	r2, r5
 8006e32:	1aa2      	subs	r2, r4, r2
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	0c2d      	lsrs	r5, r5, #16
 8006e38:	1414      	asrs	r4, r2, #16
 8006e3a:	1b5b      	subs	r3, r3, r5
 8006e3c:	191b      	adds	r3, r3, r4
 8006e3e:	141c      	asrs	r4, r3, #16
 8006e40:	b292      	uxth	r2, r2
 8006e42:	041b      	lsls	r3, r3, #16
 8006e44:	4313      	orrs	r3, r2
 8006e46:	c008      	stmia	r0!, {r3}
 8006e48:	9b04      	ldr	r3, [sp, #16]
 8006e4a:	428b      	cmp	r3, r1
 8006e4c:	d2ec      	bcs.n	8006e28 <quorem+0xa8>
 8006e4e:	9b00      	ldr	r3, [sp, #0]
 8006e50:	9a02      	ldr	r2, [sp, #8]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	18d3      	adds	r3, r2, r3
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	2a00      	cmp	r2, #0
 8006e5a:	d015      	beq.n	8006e88 <quorem+0x108>
 8006e5c:	9801      	ldr	r0, [sp, #4]
 8006e5e:	b007      	add	sp, #28
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <quorem+0xf6>
 8006e68:	9b00      	ldr	r3, [sp, #0]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	9b02      	ldr	r3, [sp, #8]
 8006e70:	3c04      	subs	r4, #4
 8006e72:	42a3      	cmp	r3, r4
 8006e74:	d3f5      	bcc.n	8006e62 <quorem+0xe2>
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	6133      	str	r3, [r6, #16]
 8006e7a:	e7c7      	b.n	8006e0c <quorem+0x8c>
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	d106      	bne.n	8006e90 <quorem+0x110>
 8006e82:	9a00      	ldr	r2, [sp, #0]
 8006e84:	3a01      	subs	r2, #1
 8006e86:	9200      	str	r2, [sp, #0]
 8006e88:	9a02      	ldr	r2, [sp, #8]
 8006e8a:	3b04      	subs	r3, #4
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d3f5      	bcc.n	8006e7c <quorem+0xfc>
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	6133      	str	r3, [r6, #16]
 8006e94:	e7e2      	b.n	8006e5c <quorem+0xdc>
	...

08006e98 <_dtoa_r>:
 8006e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9a:	b09d      	sub	sp, #116	; 0x74
 8006e9c:	9202      	str	r2, [sp, #8]
 8006e9e:	9303      	str	r3, [sp, #12]
 8006ea0:	9b02      	ldr	r3, [sp, #8]
 8006ea2:	9c03      	ldr	r4, [sp, #12]
 8006ea4:	9308      	str	r3, [sp, #32]
 8006ea6:	9409      	str	r4, [sp, #36]	; 0x24
 8006ea8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006eaa:	0007      	movs	r7, r0
 8006eac:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	d10e      	bne.n	8006ed0 <_dtoa_r+0x38>
 8006eb2:	2010      	movs	r0, #16
 8006eb4:	f000 fe0e 	bl	8007ad4 <malloc>
 8006eb8:	1e02      	subs	r2, r0, #0
 8006eba:	6278      	str	r0, [r7, #36]	; 0x24
 8006ebc:	d104      	bne.n	8006ec8 <_dtoa_r+0x30>
 8006ebe:	21ea      	movs	r1, #234	; 0xea
 8006ec0:	4bc7      	ldr	r3, [pc, #796]	; (80071e0 <_dtoa_r+0x348>)
 8006ec2:	48c8      	ldr	r0, [pc, #800]	; (80071e4 <_dtoa_r+0x34c>)
 8006ec4:	f001 fc42 	bl	800874c <__assert_func>
 8006ec8:	6044      	str	r4, [r0, #4]
 8006eca:	6084      	str	r4, [r0, #8]
 8006ecc:	6004      	str	r4, [r0, #0]
 8006ece:	60c4      	str	r4, [r0, #12]
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d00a      	beq.n	8006eee <_dtoa_r+0x56>
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	2301      	movs	r3, #1
 8006edc:	4093      	lsls	r3, r2
 8006ede:	604a      	str	r2, [r1, #4]
 8006ee0:	608b      	str	r3, [r1, #8]
 8006ee2:	0038      	movs	r0, r7
 8006ee4:	f000 fe58 	bl	8007b98 <_Bfree>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	9b03      	ldr	r3, [sp, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da20      	bge.n	8006f36 <_dtoa_r+0x9e>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	9b03      	ldr	r3, [sp, #12]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	9309      	str	r3, [sp, #36]	; 0x24
 8006f00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f02:	4bb9      	ldr	r3, [pc, #740]	; (80071e8 <_dtoa_r+0x350>)
 8006f04:	4ab8      	ldr	r2, [pc, #736]	; (80071e8 <_dtoa_r+0x350>)
 8006f06:	402b      	ands	r3, r5
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d117      	bne.n	8006f3c <_dtoa_r+0xa4>
 8006f0c:	4bb7      	ldr	r3, [pc, #732]	; (80071ec <_dtoa_r+0x354>)
 8006f0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f10:	0328      	lsls	r0, r5, #12
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	9b02      	ldr	r3, [sp, #8]
 8006f16:	0b00      	lsrs	r0, r0, #12
 8006f18:	4318      	orrs	r0, r3
 8006f1a:	d101      	bne.n	8006f20 <_dtoa_r+0x88>
 8006f1c:	f000 fdbf 	bl	8007a9e <_dtoa_r+0xc06>
 8006f20:	48b3      	ldr	r0, [pc, #716]	; (80071f0 <_dtoa_r+0x358>)
 8006f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f24:	9006      	str	r0, [sp, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <_dtoa_r+0x98>
 8006f2a:	4bb2      	ldr	r3, [pc, #712]	; (80071f4 <_dtoa_r+0x35c>)
 8006f2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	9806      	ldr	r0, [sp, #24]
 8006f32:	b01d      	add	sp, #116	; 0x74
 8006f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f36:	2300      	movs	r3, #0
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	e7e1      	b.n	8006f00 <_dtoa_r+0x68>
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006f40:	9312      	str	r3, [sp, #72]	; 0x48
 8006f42:	9413      	str	r4, [sp, #76]	; 0x4c
 8006f44:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f7f9 fa7a 	bl	8000444 <__aeabi_dcmpeq>
 8006f50:	1e04      	subs	r4, r0, #0
 8006f52:	d009      	beq.n	8006f68 <_dtoa_r+0xd0>
 8006f54:	2301      	movs	r3, #1
 8006f56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	4ba7      	ldr	r3, [pc, #668]	; (80071f8 <_dtoa_r+0x360>)
 8006f5c:	9306      	str	r3, [sp, #24]
 8006f5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0e5      	beq.n	8006f30 <_dtoa_r+0x98>
 8006f64:	4ba5      	ldr	r3, [pc, #660]	; (80071fc <_dtoa_r+0x364>)
 8006f66:	e7e1      	b.n	8006f2c <_dtoa_r+0x94>
 8006f68:	ab1a      	add	r3, sp, #104	; 0x68
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	0038      	movs	r0, r7
 8006f72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f76:	f001 f903 	bl	8008180 <__d2b>
 8006f7a:	006e      	lsls	r6, r5, #1
 8006f7c:	9005      	str	r0, [sp, #20]
 8006f7e:	0d76      	lsrs	r6, r6, #21
 8006f80:	d100      	bne.n	8006f84 <_dtoa_r+0xec>
 8006f82:	e07c      	b.n	800707e <_dtoa_r+0x1e6>
 8006f84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f8a:	4a9d      	ldr	r2, [pc, #628]	; (8007200 <_dtoa_r+0x368>)
 8006f8c:	031b      	lsls	r3, r3, #12
 8006f8e:	0b1b      	lsrs	r3, r3, #12
 8006f90:	431a      	orrs	r2, r3
 8006f92:	0011      	movs	r1, r2
 8006f94:	4b9b      	ldr	r3, [pc, #620]	; (8007204 <_dtoa_r+0x36c>)
 8006f96:	9418      	str	r4, [sp, #96]	; 0x60
 8006f98:	18f6      	adds	r6, r6, r3
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	4b9a      	ldr	r3, [pc, #616]	; (8007208 <_dtoa_r+0x370>)
 8006f9e:	f7fa fea9 	bl	8001cf4 <__aeabi_dsub>
 8006fa2:	4a9a      	ldr	r2, [pc, #616]	; (800720c <_dtoa_r+0x374>)
 8006fa4:	4b9a      	ldr	r3, [pc, #616]	; (8007210 <_dtoa_r+0x378>)
 8006fa6:	f7fa fc39 	bl	800181c <__aeabi_dmul>
 8006faa:	4a9a      	ldr	r2, [pc, #616]	; (8007214 <_dtoa_r+0x37c>)
 8006fac:	4b9a      	ldr	r3, [pc, #616]	; (8007218 <_dtoa_r+0x380>)
 8006fae:	f7f9 fcf7 	bl	80009a0 <__aeabi_dadd>
 8006fb2:	0004      	movs	r4, r0
 8006fb4:	0030      	movs	r0, r6
 8006fb6:	000d      	movs	r5, r1
 8006fb8:	f7fb fa82 	bl	80024c0 <__aeabi_i2d>
 8006fbc:	4a97      	ldr	r2, [pc, #604]	; (800721c <_dtoa_r+0x384>)
 8006fbe:	4b98      	ldr	r3, [pc, #608]	; (8007220 <_dtoa_r+0x388>)
 8006fc0:	f7fa fc2c 	bl	800181c <__aeabi_dmul>
 8006fc4:	0002      	movs	r2, r0
 8006fc6:	000b      	movs	r3, r1
 8006fc8:	0020      	movs	r0, r4
 8006fca:	0029      	movs	r1, r5
 8006fcc:	f7f9 fce8 	bl	80009a0 <__aeabi_dadd>
 8006fd0:	0004      	movs	r4, r0
 8006fd2:	000d      	movs	r5, r1
 8006fd4:	f7fb fa3e 	bl	8002454 <__aeabi_d2iz>
 8006fd8:	2200      	movs	r2, #0
 8006fda:	9002      	str	r0, [sp, #8]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	0020      	movs	r0, r4
 8006fe0:	0029      	movs	r1, r5
 8006fe2:	f7f9 fa35 	bl	8000450 <__aeabi_dcmplt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d00b      	beq.n	8007002 <_dtoa_r+0x16a>
 8006fea:	9802      	ldr	r0, [sp, #8]
 8006fec:	f7fb fa68 	bl	80024c0 <__aeabi_i2d>
 8006ff0:	002b      	movs	r3, r5
 8006ff2:	0022      	movs	r2, r4
 8006ff4:	f7f9 fa26 	bl	8000444 <__aeabi_dcmpeq>
 8006ff8:	4243      	negs	r3, r0
 8006ffa:	4158      	adcs	r0, r3
 8006ffc:	9b02      	ldr	r3, [sp, #8]
 8006ffe:	1a1b      	subs	r3, r3, r0
 8007000:	9302      	str	r3, [sp, #8]
 8007002:	2301      	movs	r3, #1
 8007004:	9316      	str	r3, [sp, #88]	; 0x58
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	2b16      	cmp	r3, #22
 800700a:	d80f      	bhi.n	800702c <_dtoa_r+0x194>
 800700c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800700e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007010:	00da      	lsls	r2, r3, #3
 8007012:	4b84      	ldr	r3, [pc, #528]	; (8007224 <_dtoa_r+0x38c>)
 8007014:	189b      	adds	r3, r3, r2
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f7f9 fa19 	bl	8000450 <__aeabi_dcmplt>
 800701e:	2800      	cmp	r0, #0
 8007020:	d049      	beq.n	80070b6 <_dtoa_r+0x21e>
 8007022:	9b02      	ldr	r3, [sp, #8]
 8007024:	3b01      	subs	r3, #1
 8007026:	9302      	str	r3, [sp, #8]
 8007028:	2300      	movs	r3, #0
 800702a:	9316      	str	r3, [sp, #88]	; 0x58
 800702c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800702e:	1b9e      	subs	r6, r3, r6
 8007030:	2300      	movs	r3, #0
 8007032:	930a      	str	r3, [sp, #40]	; 0x28
 8007034:	0033      	movs	r3, r6
 8007036:	3b01      	subs	r3, #1
 8007038:	930d      	str	r3, [sp, #52]	; 0x34
 800703a:	d504      	bpl.n	8007046 <_dtoa_r+0x1ae>
 800703c:	2301      	movs	r3, #1
 800703e:	1b9b      	subs	r3, r3, r6
 8007040:	930a      	str	r3, [sp, #40]	; 0x28
 8007042:	2300      	movs	r3, #0
 8007044:	930d      	str	r3, [sp, #52]	; 0x34
 8007046:	9b02      	ldr	r3, [sp, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	db36      	blt.n	80070ba <_dtoa_r+0x222>
 800704c:	9a02      	ldr	r2, [sp, #8]
 800704e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007050:	4694      	mov	ip, r2
 8007052:	4463      	add	r3, ip
 8007054:	930d      	str	r3, [sp, #52]	; 0x34
 8007056:	2300      	movs	r3, #0
 8007058:	9215      	str	r2, [sp, #84]	; 0x54
 800705a:	930e      	str	r3, [sp, #56]	; 0x38
 800705c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800705e:	2401      	movs	r4, #1
 8007060:	2b09      	cmp	r3, #9
 8007062:	d864      	bhi.n	800712e <_dtoa_r+0x296>
 8007064:	2b05      	cmp	r3, #5
 8007066:	dd02      	ble.n	800706e <_dtoa_r+0x1d6>
 8007068:	2400      	movs	r4, #0
 800706a:	3b04      	subs	r3, #4
 800706c:	9322      	str	r3, [sp, #136]	; 0x88
 800706e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007070:	1e98      	subs	r0, r3, #2
 8007072:	2803      	cmp	r0, #3
 8007074:	d864      	bhi.n	8007140 <_dtoa_r+0x2a8>
 8007076:	f7f9 f84b 	bl	8000110 <__gnu_thumb1_case_uqi>
 800707a:	3829      	.short	0x3829
 800707c:	5836      	.short	0x5836
 800707e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007080:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007082:	189e      	adds	r6, r3, r2
 8007084:	4b68      	ldr	r3, [pc, #416]	; (8007228 <_dtoa_r+0x390>)
 8007086:	18f2      	adds	r2, r6, r3
 8007088:	2a20      	cmp	r2, #32
 800708a:	dd0f      	ble.n	80070ac <_dtoa_r+0x214>
 800708c:	2340      	movs	r3, #64	; 0x40
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	409d      	lsls	r5, r3
 8007092:	4b66      	ldr	r3, [pc, #408]	; (800722c <_dtoa_r+0x394>)
 8007094:	9802      	ldr	r0, [sp, #8]
 8007096:	18f3      	adds	r3, r6, r3
 8007098:	40d8      	lsrs	r0, r3
 800709a:	4328      	orrs	r0, r5
 800709c:	f7fb fa40 	bl	8002520 <__aeabi_ui2d>
 80070a0:	2301      	movs	r3, #1
 80070a2:	4c63      	ldr	r4, [pc, #396]	; (8007230 <_dtoa_r+0x398>)
 80070a4:	3e01      	subs	r6, #1
 80070a6:	1909      	adds	r1, r1, r4
 80070a8:	9318      	str	r3, [sp, #96]	; 0x60
 80070aa:	e776      	b.n	8006f9a <_dtoa_r+0x102>
 80070ac:	2320      	movs	r3, #32
 80070ae:	9802      	ldr	r0, [sp, #8]
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	4098      	lsls	r0, r3
 80070b4:	e7f2      	b.n	800709c <_dtoa_r+0x204>
 80070b6:	9016      	str	r0, [sp, #88]	; 0x58
 80070b8:	e7b8      	b.n	800702c <_dtoa_r+0x194>
 80070ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070bc:	9a02      	ldr	r2, [sp, #8]
 80070be:	1a9b      	subs	r3, r3, r2
 80070c0:	930a      	str	r3, [sp, #40]	; 0x28
 80070c2:	4253      	negs	r3, r2
 80070c4:	930e      	str	r3, [sp, #56]	; 0x38
 80070c6:	2300      	movs	r3, #0
 80070c8:	9315      	str	r3, [sp, #84]	; 0x54
 80070ca:	e7c7      	b.n	800705c <_dtoa_r+0x1c4>
 80070cc:	2300      	movs	r3, #0
 80070ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80070d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070d2:	930c      	str	r3, [sp, #48]	; 0x30
 80070d4:	9307      	str	r3, [sp, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	dc13      	bgt.n	8007102 <_dtoa_r+0x26a>
 80070da:	2301      	movs	r3, #1
 80070dc:	001a      	movs	r2, r3
 80070de:	930c      	str	r3, [sp, #48]	; 0x30
 80070e0:	9307      	str	r3, [sp, #28]
 80070e2:	9223      	str	r2, [sp, #140]	; 0x8c
 80070e4:	e00d      	b.n	8007102 <_dtoa_r+0x26a>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e7f1      	b.n	80070ce <_dtoa_r+0x236>
 80070ea:	2300      	movs	r3, #0
 80070ec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80070ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80070f0:	4694      	mov	ip, r2
 80070f2:	9b02      	ldr	r3, [sp, #8]
 80070f4:	4463      	add	r3, ip
 80070f6:	930c      	str	r3, [sp, #48]	; 0x30
 80070f8:	3301      	adds	r3, #1
 80070fa:	9307      	str	r3, [sp, #28]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	dc00      	bgt.n	8007102 <_dtoa_r+0x26a>
 8007100:	2301      	movs	r3, #1
 8007102:	2200      	movs	r2, #0
 8007104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007106:	6042      	str	r2, [r0, #4]
 8007108:	3204      	adds	r2, #4
 800710a:	0015      	movs	r5, r2
 800710c:	3514      	adds	r5, #20
 800710e:	6841      	ldr	r1, [r0, #4]
 8007110:	429d      	cmp	r5, r3
 8007112:	d919      	bls.n	8007148 <_dtoa_r+0x2b0>
 8007114:	0038      	movs	r0, r7
 8007116:	f000 fcfb 	bl	8007b10 <_Balloc>
 800711a:	9006      	str	r0, [sp, #24]
 800711c:	2800      	cmp	r0, #0
 800711e:	d117      	bne.n	8007150 <_dtoa_r+0x2b8>
 8007120:	21d5      	movs	r1, #213	; 0xd5
 8007122:	0002      	movs	r2, r0
 8007124:	4b43      	ldr	r3, [pc, #268]	; (8007234 <_dtoa_r+0x39c>)
 8007126:	0049      	lsls	r1, r1, #1
 8007128:	e6cb      	b.n	8006ec2 <_dtoa_r+0x2a>
 800712a:	2301      	movs	r3, #1
 800712c:	e7de      	b.n	80070ec <_dtoa_r+0x254>
 800712e:	2300      	movs	r3, #0
 8007130:	940f      	str	r4, [sp, #60]	; 0x3c
 8007132:	9322      	str	r3, [sp, #136]	; 0x88
 8007134:	3b01      	subs	r3, #1
 8007136:	930c      	str	r3, [sp, #48]	; 0x30
 8007138:	9307      	str	r3, [sp, #28]
 800713a:	2200      	movs	r2, #0
 800713c:	3313      	adds	r3, #19
 800713e:	e7d0      	b.n	80070e2 <_dtoa_r+0x24a>
 8007140:	2301      	movs	r3, #1
 8007142:	930f      	str	r3, [sp, #60]	; 0x3c
 8007144:	3b02      	subs	r3, #2
 8007146:	e7f6      	b.n	8007136 <_dtoa_r+0x29e>
 8007148:	3101      	adds	r1, #1
 800714a:	6041      	str	r1, [r0, #4]
 800714c:	0052      	lsls	r2, r2, #1
 800714e:	e7dc      	b.n	800710a <_dtoa_r+0x272>
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	9a06      	ldr	r2, [sp, #24]
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	9b07      	ldr	r3, [sp, #28]
 8007158:	2b0e      	cmp	r3, #14
 800715a:	d900      	bls.n	800715e <_dtoa_r+0x2c6>
 800715c:	e0eb      	b.n	8007336 <_dtoa_r+0x49e>
 800715e:	2c00      	cmp	r4, #0
 8007160:	d100      	bne.n	8007164 <_dtoa_r+0x2cc>
 8007162:	e0e8      	b.n	8007336 <_dtoa_r+0x49e>
 8007164:	9b02      	ldr	r3, [sp, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dd68      	ble.n	800723c <_dtoa_r+0x3a4>
 800716a:	001a      	movs	r2, r3
 800716c:	210f      	movs	r1, #15
 800716e:	4b2d      	ldr	r3, [pc, #180]	; (8007224 <_dtoa_r+0x38c>)
 8007170:	400a      	ands	r2, r1
 8007172:	00d2      	lsls	r2, r2, #3
 8007174:	189b      	adds	r3, r3, r2
 8007176:	681d      	ldr	r5, [r3, #0]
 8007178:	685e      	ldr	r6, [r3, #4]
 800717a:	9b02      	ldr	r3, [sp, #8]
 800717c:	111c      	asrs	r4, r3, #4
 800717e:	2302      	movs	r3, #2
 8007180:	9310      	str	r3, [sp, #64]	; 0x40
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	05db      	lsls	r3, r3, #23
 8007186:	d50b      	bpl.n	80071a0 <_dtoa_r+0x308>
 8007188:	4b2b      	ldr	r3, [pc, #172]	; (8007238 <_dtoa_r+0x3a0>)
 800718a:	400c      	ands	r4, r1
 800718c:	6a1a      	ldr	r2, [r3, #32]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007192:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007194:	f7f9 ff40 	bl	8001018 <__aeabi_ddiv>
 8007198:	2303      	movs	r3, #3
 800719a:	9008      	str	r0, [sp, #32]
 800719c:	9109      	str	r1, [sp, #36]	; 0x24
 800719e:	9310      	str	r3, [sp, #64]	; 0x40
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <_dtoa_r+0x3a0>)
 80071a2:	9314      	str	r3, [sp, #80]	; 0x50
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	d108      	bne.n	80071ba <_dtoa_r+0x322>
 80071a8:	9808      	ldr	r0, [sp, #32]
 80071aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071ac:	002a      	movs	r2, r5
 80071ae:	0033      	movs	r3, r6
 80071b0:	f7f9 ff32 	bl	8001018 <__aeabi_ddiv>
 80071b4:	9008      	str	r0, [sp, #32]
 80071b6:	9109      	str	r1, [sp, #36]	; 0x24
 80071b8:	e05c      	b.n	8007274 <_dtoa_r+0x3dc>
 80071ba:	2301      	movs	r3, #1
 80071bc:	421c      	tst	r4, r3
 80071be:	d00b      	beq.n	80071d8 <_dtoa_r+0x340>
 80071c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071c2:	0028      	movs	r0, r5
 80071c4:	3301      	adds	r3, #1
 80071c6:	9310      	str	r3, [sp, #64]	; 0x40
 80071c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071ca:	0031      	movs	r1, r6
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f7fa fb24 	bl	800181c <__aeabi_dmul>
 80071d4:	0005      	movs	r5, r0
 80071d6:	000e      	movs	r6, r1
 80071d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071da:	1064      	asrs	r4, r4, #1
 80071dc:	3308      	adds	r3, #8
 80071de:	e7e0      	b.n	80071a2 <_dtoa_r+0x30a>
 80071e0:	080097a5 	.word	0x080097a5
 80071e4:	080097bc 	.word	0x080097bc
 80071e8:	7ff00000 	.word	0x7ff00000
 80071ec:	0000270f 	.word	0x0000270f
 80071f0:	080097a1 	.word	0x080097a1
 80071f4:	080097a4 	.word	0x080097a4
 80071f8:	08009774 	.word	0x08009774
 80071fc:	08009775 	.word	0x08009775
 8007200:	3ff00000 	.word	0x3ff00000
 8007204:	fffffc01 	.word	0xfffffc01
 8007208:	3ff80000 	.word	0x3ff80000
 800720c:	636f4361 	.word	0x636f4361
 8007210:	3fd287a7 	.word	0x3fd287a7
 8007214:	8b60c8b3 	.word	0x8b60c8b3
 8007218:	3fc68a28 	.word	0x3fc68a28
 800721c:	509f79fb 	.word	0x509f79fb
 8007220:	3fd34413 	.word	0x3fd34413
 8007224:	080098b0 	.word	0x080098b0
 8007228:	00000432 	.word	0x00000432
 800722c:	00000412 	.word	0x00000412
 8007230:	fe100000 	.word	0xfe100000
 8007234:	08009817 	.word	0x08009817
 8007238:	08009888 	.word	0x08009888
 800723c:	2302      	movs	r3, #2
 800723e:	9310      	str	r3, [sp, #64]	; 0x40
 8007240:	9b02      	ldr	r3, [sp, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d016      	beq.n	8007274 <_dtoa_r+0x3dc>
 8007246:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007248:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800724a:	425c      	negs	r4, r3
 800724c:	230f      	movs	r3, #15
 800724e:	4ab6      	ldr	r2, [pc, #728]	; (8007528 <_dtoa_r+0x690>)
 8007250:	4023      	ands	r3, r4
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	18d3      	adds	r3, r2, r3
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f7fa fadf 	bl	800181c <__aeabi_dmul>
 800725e:	2601      	movs	r6, #1
 8007260:	2300      	movs	r3, #0
 8007262:	9008      	str	r0, [sp, #32]
 8007264:	9109      	str	r1, [sp, #36]	; 0x24
 8007266:	4db1      	ldr	r5, [pc, #708]	; (800752c <_dtoa_r+0x694>)
 8007268:	1124      	asrs	r4, r4, #4
 800726a:	2c00      	cmp	r4, #0
 800726c:	d000      	beq.n	8007270 <_dtoa_r+0x3d8>
 800726e:	e094      	b.n	800739a <_dtoa_r+0x502>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d19f      	bne.n	80071b4 <_dtoa_r+0x31c>
 8007274:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007276:	2b00      	cmp	r3, #0
 8007278:	d100      	bne.n	800727c <_dtoa_r+0x3e4>
 800727a:	e09b      	b.n	80073b4 <_dtoa_r+0x51c>
 800727c:	9c08      	ldr	r4, [sp, #32]
 800727e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007280:	2200      	movs	r2, #0
 8007282:	0020      	movs	r0, r4
 8007284:	0029      	movs	r1, r5
 8007286:	4baa      	ldr	r3, [pc, #680]	; (8007530 <_dtoa_r+0x698>)
 8007288:	f7f9 f8e2 	bl	8000450 <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	d100      	bne.n	8007292 <_dtoa_r+0x3fa>
 8007290:	e090      	b.n	80073b4 <_dtoa_r+0x51c>
 8007292:	9b07      	ldr	r3, [sp, #28]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d100      	bne.n	800729a <_dtoa_r+0x402>
 8007298:	e08c      	b.n	80073b4 <_dtoa_r+0x51c>
 800729a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800729c:	2b00      	cmp	r3, #0
 800729e:	dd46      	ble.n	800732e <_dtoa_r+0x496>
 80072a0:	9b02      	ldr	r3, [sp, #8]
 80072a2:	2200      	movs	r2, #0
 80072a4:	0020      	movs	r0, r4
 80072a6:	0029      	movs	r1, r5
 80072a8:	1e5e      	subs	r6, r3, #1
 80072aa:	4ba2      	ldr	r3, [pc, #648]	; (8007534 <_dtoa_r+0x69c>)
 80072ac:	f7fa fab6 	bl	800181c <__aeabi_dmul>
 80072b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072b2:	9008      	str	r0, [sp, #32]
 80072b4:	9109      	str	r1, [sp, #36]	; 0x24
 80072b6:	3301      	adds	r3, #1
 80072b8:	9310      	str	r3, [sp, #64]	; 0x40
 80072ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80072be:	9c08      	ldr	r4, [sp, #32]
 80072c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072c2:	9314      	str	r3, [sp, #80]	; 0x50
 80072c4:	f7fb f8fc 	bl	80024c0 <__aeabi_i2d>
 80072c8:	0022      	movs	r2, r4
 80072ca:	002b      	movs	r3, r5
 80072cc:	f7fa faa6 	bl	800181c <__aeabi_dmul>
 80072d0:	2200      	movs	r2, #0
 80072d2:	4b99      	ldr	r3, [pc, #612]	; (8007538 <_dtoa_r+0x6a0>)
 80072d4:	f7f9 fb64 	bl	80009a0 <__aeabi_dadd>
 80072d8:	9010      	str	r0, [sp, #64]	; 0x40
 80072da:	9111      	str	r1, [sp, #68]	; 0x44
 80072dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072e0:	9208      	str	r2, [sp, #32]
 80072e2:	9309      	str	r3, [sp, #36]	; 0x24
 80072e4:	4a95      	ldr	r2, [pc, #596]	; (800753c <_dtoa_r+0x6a4>)
 80072e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072e8:	4694      	mov	ip, r2
 80072ea:	4463      	add	r3, ip
 80072ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80072ee:	9309      	str	r3, [sp, #36]	; 0x24
 80072f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d161      	bne.n	80073ba <_dtoa_r+0x522>
 80072f6:	2200      	movs	r2, #0
 80072f8:	0020      	movs	r0, r4
 80072fa:	0029      	movs	r1, r5
 80072fc:	4b90      	ldr	r3, [pc, #576]	; (8007540 <_dtoa_r+0x6a8>)
 80072fe:	f7fa fcf9 	bl	8001cf4 <__aeabi_dsub>
 8007302:	9a08      	ldr	r2, [sp, #32]
 8007304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007306:	0004      	movs	r4, r0
 8007308:	000d      	movs	r5, r1
 800730a:	f7f9 f8b5 	bl	8000478 <__aeabi_dcmpgt>
 800730e:	2800      	cmp	r0, #0
 8007310:	d000      	beq.n	8007314 <_dtoa_r+0x47c>
 8007312:	e2af      	b.n	8007874 <_dtoa_r+0x9dc>
 8007314:	488b      	ldr	r0, [pc, #556]	; (8007544 <_dtoa_r+0x6ac>)
 8007316:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007318:	4684      	mov	ip, r0
 800731a:	4461      	add	r1, ip
 800731c:	000b      	movs	r3, r1
 800731e:	0020      	movs	r0, r4
 8007320:	0029      	movs	r1, r5
 8007322:	9a08      	ldr	r2, [sp, #32]
 8007324:	f7f9 f894 	bl	8000450 <__aeabi_dcmplt>
 8007328:	2800      	cmp	r0, #0
 800732a:	d000      	beq.n	800732e <_dtoa_r+0x496>
 800732c:	e29f      	b.n	800786e <_dtoa_r+0x9d6>
 800732e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007330:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007332:	9308      	str	r3, [sp, #32]
 8007334:	9409      	str	r4, [sp, #36]	; 0x24
 8007336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007338:	2b00      	cmp	r3, #0
 800733a:	da00      	bge.n	800733e <_dtoa_r+0x4a6>
 800733c:	e172      	b.n	8007624 <_dtoa_r+0x78c>
 800733e:	9a02      	ldr	r2, [sp, #8]
 8007340:	2a0e      	cmp	r2, #14
 8007342:	dd00      	ble.n	8007346 <_dtoa_r+0x4ae>
 8007344:	e16e      	b.n	8007624 <_dtoa_r+0x78c>
 8007346:	4b78      	ldr	r3, [pc, #480]	; (8007528 <_dtoa_r+0x690>)
 8007348:	00d2      	lsls	r2, r2, #3
 800734a:	189b      	adds	r3, r3, r2
 800734c:	685c      	ldr	r4, [r3, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	930a      	str	r3, [sp, #40]	; 0x28
 8007352:	940b      	str	r4, [sp, #44]	; 0x2c
 8007354:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007356:	2b00      	cmp	r3, #0
 8007358:	db00      	blt.n	800735c <_dtoa_r+0x4c4>
 800735a:	e0f7      	b.n	800754c <_dtoa_r+0x6b4>
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	dd00      	ble.n	8007364 <_dtoa_r+0x4cc>
 8007362:	e0f3      	b.n	800754c <_dtoa_r+0x6b4>
 8007364:	d000      	beq.n	8007368 <_dtoa_r+0x4d0>
 8007366:	e282      	b.n	800786e <_dtoa_r+0x9d6>
 8007368:	980a      	ldr	r0, [sp, #40]	; 0x28
 800736a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800736c:	2200      	movs	r2, #0
 800736e:	4b74      	ldr	r3, [pc, #464]	; (8007540 <_dtoa_r+0x6a8>)
 8007370:	f7fa fa54 	bl	800181c <__aeabi_dmul>
 8007374:	9a08      	ldr	r2, [sp, #32]
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	f7f9 f888 	bl	800048c <__aeabi_dcmpge>
 800737c:	9e07      	ldr	r6, [sp, #28]
 800737e:	0035      	movs	r5, r6
 8007380:	2800      	cmp	r0, #0
 8007382:	d000      	beq.n	8007386 <_dtoa_r+0x4ee>
 8007384:	e259      	b.n	800783a <_dtoa_r+0x9a2>
 8007386:	9b06      	ldr	r3, [sp, #24]
 8007388:	9a06      	ldr	r2, [sp, #24]
 800738a:	3301      	adds	r3, #1
 800738c:	9308      	str	r3, [sp, #32]
 800738e:	2331      	movs	r3, #49	; 0x31
 8007390:	7013      	strb	r3, [r2, #0]
 8007392:	9b02      	ldr	r3, [sp, #8]
 8007394:	3301      	adds	r3, #1
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	e254      	b.n	8007844 <_dtoa_r+0x9ac>
 800739a:	4234      	tst	r4, r6
 800739c:	d007      	beq.n	80073ae <_dtoa_r+0x516>
 800739e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073a0:	3301      	adds	r3, #1
 80073a2:	9310      	str	r3, [sp, #64]	; 0x40
 80073a4:	682a      	ldr	r2, [r5, #0]
 80073a6:	686b      	ldr	r3, [r5, #4]
 80073a8:	f7fa fa38 	bl	800181c <__aeabi_dmul>
 80073ac:	0033      	movs	r3, r6
 80073ae:	1064      	asrs	r4, r4, #1
 80073b0:	3508      	adds	r5, #8
 80073b2:	e75a      	b.n	800726a <_dtoa_r+0x3d2>
 80073b4:	9e02      	ldr	r6, [sp, #8]
 80073b6:	9b07      	ldr	r3, [sp, #28]
 80073b8:	e780      	b.n	80072bc <_dtoa_r+0x424>
 80073ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073be:	1e5a      	subs	r2, r3, #1
 80073c0:	4b59      	ldr	r3, [pc, #356]	; (8007528 <_dtoa_r+0x690>)
 80073c2:	00d2      	lsls	r2, r2, #3
 80073c4:	189b      	adds	r3, r3, r2
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2900      	cmp	r1, #0
 80073cc:	d051      	beq.n	8007472 <_dtoa_r+0x5da>
 80073ce:	2000      	movs	r0, #0
 80073d0:	495d      	ldr	r1, [pc, #372]	; (8007548 <_dtoa_r+0x6b0>)
 80073d2:	f7f9 fe21 	bl	8001018 <__aeabi_ddiv>
 80073d6:	9a08      	ldr	r2, [sp, #32]
 80073d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073da:	f7fa fc8b 	bl	8001cf4 <__aeabi_dsub>
 80073de:	9a06      	ldr	r2, [sp, #24]
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	4694      	mov	ip, r2
 80073e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80073e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073e8:	9010      	str	r0, [sp, #64]	; 0x40
 80073ea:	9111      	str	r1, [sp, #68]	; 0x44
 80073ec:	4463      	add	r3, ip
 80073ee:	9319      	str	r3, [sp, #100]	; 0x64
 80073f0:	0029      	movs	r1, r5
 80073f2:	0020      	movs	r0, r4
 80073f4:	f7fb f82e 	bl	8002454 <__aeabi_d2iz>
 80073f8:	9014      	str	r0, [sp, #80]	; 0x50
 80073fa:	f7fb f861 	bl	80024c0 <__aeabi_i2d>
 80073fe:	0002      	movs	r2, r0
 8007400:	000b      	movs	r3, r1
 8007402:	0020      	movs	r0, r4
 8007404:	0029      	movs	r1, r5
 8007406:	f7fa fc75 	bl	8001cf4 <__aeabi_dsub>
 800740a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800740c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800740e:	3301      	adds	r3, #1
 8007410:	9308      	str	r3, [sp, #32]
 8007412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007414:	0004      	movs	r4, r0
 8007416:	3330      	adds	r3, #48	; 0x30
 8007418:	7013      	strb	r3, [r2, #0]
 800741a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800741c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800741e:	000d      	movs	r5, r1
 8007420:	f7f9 f816 	bl	8000450 <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	d175      	bne.n	8007514 <_dtoa_r+0x67c>
 8007428:	0022      	movs	r2, r4
 800742a:	002b      	movs	r3, r5
 800742c:	2000      	movs	r0, #0
 800742e:	4940      	ldr	r1, [pc, #256]	; (8007530 <_dtoa_r+0x698>)
 8007430:	f7fa fc60 	bl	8001cf4 <__aeabi_dsub>
 8007434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007438:	f7f9 f80a 	bl	8000450 <__aeabi_dcmplt>
 800743c:	2800      	cmp	r0, #0
 800743e:	d000      	beq.n	8007442 <_dtoa_r+0x5aa>
 8007440:	e0d2      	b.n	80075e8 <_dtoa_r+0x750>
 8007442:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007444:	9a08      	ldr	r2, [sp, #32]
 8007446:	4293      	cmp	r3, r2
 8007448:	d100      	bne.n	800744c <_dtoa_r+0x5b4>
 800744a:	e770      	b.n	800732e <_dtoa_r+0x496>
 800744c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800744e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007450:	2200      	movs	r2, #0
 8007452:	4b38      	ldr	r3, [pc, #224]	; (8007534 <_dtoa_r+0x69c>)
 8007454:	f7fa f9e2 	bl	800181c <__aeabi_dmul>
 8007458:	4b36      	ldr	r3, [pc, #216]	; (8007534 <_dtoa_r+0x69c>)
 800745a:	9010      	str	r0, [sp, #64]	; 0x40
 800745c:	9111      	str	r1, [sp, #68]	; 0x44
 800745e:	2200      	movs	r2, #0
 8007460:	0020      	movs	r0, r4
 8007462:	0029      	movs	r1, r5
 8007464:	f7fa f9da 	bl	800181c <__aeabi_dmul>
 8007468:	9b08      	ldr	r3, [sp, #32]
 800746a:	0004      	movs	r4, r0
 800746c:	000d      	movs	r5, r1
 800746e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007470:	e7be      	b.n	80073f0 <_dtoa_r+0x558>
 8007472:	9808      	ldr	r0, [sp, #32]
 8007474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007476:	f7fa f9d1 	bl	800181c <__aeabi_dmul>
 800747a:	9a06      	ldr	r2, [sp, #24]
 800747c:	9b06      	ldr	r3, [sp, #24]
 800747e:	4694      	mov	ip, r2
 8007480:	9308      	str	r3, [sp, #32]
 8007482:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007484:	9010      	str	r0, [sp, #64]	; 0x40
 8007486:	9111      	str	r1, [sp, #68]	; 0x44
 8007488:	4463      	add	r3, ip
 800748a:	9319      	str	r3, [sp, #100]	; 0x64
 800748c:	0029      	movs	r1, r5
 800748e:	0020      	movs	r0, r4
 8007490:	f7fa ffe0 	bl	8002454 <__aeabi_d2iz>
 8007494:	9017      	str	r0, [sp, #92]	; 0x5c
 8007496:	f7fb f813 	bl	80024c0 <__aeabi_i2d>
 800749a:	0002      	movs	r2, r0
 800749c:	000b      	movs	r3, r1
 800749e:	0020      	movs	r0, r4
 80074a0:	0029      	movs	r1, r5
 80074a2:	f7fa fc27 	bl	8001cf4 <__aeabi_dsub>
 80074a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074a8:	9a08      	ldr	r2, [sp, #32]
 80074aa:	3330      	adds	r3, #48	; 0x30
 80074ac:	7013      	strb	r3, [r2, #0]
 80074ae:	0013      	movs	r3, r2
 80074b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074b2:	3301      	adds	r3, #1
 80074b4:	0004      	movs	r4, r0
 80074b6:	000d      	movs	r5, r1
 80074b8:	9308      	str	r3, [sp, #32]
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d12c      	bne.n	8007518 <_dtoa_r+0x680>
 80074be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80074c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074c2:	9a06      	ldr	r2, [sp, #24]
 80074c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074c6:	4694      	mov	ip, r2
 80074c8:	4463      	add	r3, ip
 80074ca:	2200      	movs	r2, #0
 80074cc:	9308      	str	r3, [sp, #32]
 80074ce:	4b1e      	ldr	r3, [pc, #120]	; (8007548 <_dtoa_r+0x6b0>)
 80074d0:	f7f9 fa66 	bl	80009a0 <__aeabi_dadd>
 80074d4:	0002      	movs	r2, r0
 80074d6:	000b      	movs	r3, r1
 80074d8:	0020      	movs	r0, r4
 80074da:	0029      	movs	r1, r5
 80074dc:	f7f8 ffcc 	bl	8000478 <__aeabi_dcmpgt>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d000      	beq.n	80074e6 <_dtoa_r+0x64e>
 80074e4:	e080      	b.n	80075e8 <_dtoa_r+0x750>
 80074e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ea:	2000      	movs	r0, #0
 80074ec:	4916      	ldr	r1, [pc, #88]	; (8007548 <_dtoa_r+0x6b0>)
 80074ee:	f7fa fc01 	bl	8001cf4 <__aeabi_dsub>
 80074f2:	0002      	movs	r2, r0
 80074f4:	000b      	movs	r3, r1
 80074f6:	0020      	movs	r0, r4
 80074f8:	0029      	movs	r1, r5
 80074fa:	f7f8 ffa9 	bl	8000450 <__aeabi_dcmplt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d100      	bne.n	8007504 <_dtoa_r+0x66c>
 8007502:	e714      	b.n	800732e <_dtoa_r+0x496>
 8007504:	9b08      	ldr	r3, [sp, #32]
 8007506:	001a      	movs	r2, r3
 8007508:	3a01      	subs	r2, #1
 800750a:	9208      	str	r2, [sp, #32]
 800750c:	7812      	ldrb	r2, [r2, #0]
 800750e:	2a30      	cmp	r2, #48	; 0x30
 8007510:	d0f8      	beq.n	8007504 <_dtoa_r+0x66c>
 8007512:	9308      	str	r3, [sp, #32]
 8007514:	9602      	str	r6, [sp, #8]
 8007516:	e055      	b.n	80075c4 <_dtoa_r+0x72c>
 8007518:	2200      	movs	r2, #0
 800751a:	4b06      	ldr	r3, [pc, #24]	; (8007534 <_dtoa_r+0x69c>)
 800751c:	f7fa f97e 	bl	800181c <__aeabi_dmul>
 8007520:	0004      	movs	r4, r0
 8007522:	000d      	movs	r5, r1
 8007524:	e7b2      	b.n	800748c <_dtoa_r+0x5f4>
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	080098b0 	.word	0x080098b0
 800752c:	08009888 	.word	0x08009888
 8007530:	3ff00000 	.word	0x3ff00000
 8007534:	40240000 	.word	0x40240000
 8007538:	401c0000 	.word	0x401c0000
 800753c:	fcc00000 	.word	0xfcc00000
 8007540:	40140000 	.word	0x40140000
 8007544:	7cc00000 	.word	0x7cc00000
 8007548:	3fe00000 	.word	0x3fe00000
 800754c:	9b07      	ldr	r3, [sp, #28]
 800754e:	9e06      	ldr	r6, [sp, #24]
 8007550:	3b01      	subs	r3, #1
 8007552:	199b      	adds	r3, r3, r6
 8007554:	930c      	str	r3, [sp, #48]	; 0x30
 8007556:	9c08      	ldr	r4, [sp, #32]
 8007558:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800755a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800755c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755e:	0020      	movs	r0, r4
 8007560:	0029      	movs	r1, r5
 8007562:	f7f9 fd59 	bl	8001018 <__aeabi_ddiv>
 8007566:	f7fa ff75 	bl	8002454 <__aeabi_d2iz>
 800756a:	9007      	str	r0, [sp, #28]
 800756c:	f7fa ffa8 	bl	80024c0 <__aeabi_i2d>
 8007570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007574:	f7fa f952 	bl	800181c <__aeabi_dmul>
 8007578:	0002      	movs	r2, r0
 800757a:	000b      	movs	r3, r1
 800757c:	0020      	movs	r0, r4
 800757e:	0029      	movs	r1, r5
 8007580:	f7fa fbb8 	bl	8001cf4 <__aeabi_dsub>
 8007584:	0033      	movs	r3, r6
 8007586:	9a07      	ldr	r2, [sp, #28]
 8007588:	3601      	adds	r6, #1
 800758a:	3230      	adds	r2, #48	; 0x30
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007590:	9608      	str	r6, [sp, #32]
 8007592:	429a      	cmp	r2, r3
 8007594:	d139      	bne.n	800760a <_dtoa_r+0x772>
 8007596:	0002      	movs	r2, r0
 8007598:	000b      	movs	r3, r1
 800759a:	f7f9 fa01 	bl	80009a0 <__aeabi_dadd>
 800759e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075a2:	0004      	movs	r4, r0
 80075a4:	000d      	movs	r5, r1
 80075a6:	f7f8 ff67 	bl	8000478 <__aeabi_dcmpgt>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d11b      	bne.n	80075e6 <_dtoa_r+0x74e>
 80075ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b2:	0020      	movs	r0, r4
 80075b4:	0029      	movs	r1, r5
 80075b6:	f7f8 ff45 	bl	8000444 <__aeabi_dcmpeq>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d002      	beq.n	80075c4 <_dtoa_r+0x72c>
 80075be:	9b07      	ldr	r3, [sp, #28]
 80075c0:	07db      	lsls	r3, r3, #31
 80075c2:	d410      	bmi.n	80075e6 <_dtoa_r+0x74e>
 80075c4:	0038      	movs	r0, r7
 80075c6:	9905      	ldr	r1, [sp, #20]
 80075c8:	f000 fae6 	bl	8007b98 <_Bfree>
 80075cc:	2300      	movs	r3, #0
 80075ce:	9a08      	ldr	r2, [sp, #32]
 80075d0:	9802      	ldr	r0, [sp, #8]
 80075d2:	7013      	strb	r3, [r2, #0]
 80075d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075d6:	3001      	adds	r0, #1
 80075d8:	6018      	str	r0, [r3, #0]
 80075da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d100      	bne.n	80075e2 <_dtoa_r+0x74a>
 80075e0:	e4a6      	b.n	8006f30 <_dtoa_r+0x98>
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e4a4      	b.n	8006f30 <_dtoa_r+0x98>
 80075e6:	9e02      	ldr	r6, [sp, #8]
 80075e8:	9b08      	ldr	r3, [sp, #32]
 80075ea:	9308      	str	r3, [sp, #32]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	781a      	ldrb	r2, [r3, #0]
 80075f0:	2a39      	cmp	r2, #57	; 0x39
 80075f2:	d106      	bne.n	8007602 <_dtoa_r+0x76a>
 80075f4:	9a06      	ldr	r2, [sp, #24]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d1f7      	bne.n	80075ea <_dtoa_r+0x752>
 80075fa:	2230      	movs	r2, #48	; 0x30
 80075fc:	9906      	ldr	r1, [sp, #24]
 80075fe:	3601      	adds	r6, #1
 8007600:	700a      	strb	r2, [r1, #0]
 8007602:	781a      	ldrb	r2, [r3, #0]
 8007604:	3201      	adds	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	e784      	b.n	8007514 <_dtoa_r+0x67c>
 800760a:	2200      	movs	r2, #0
 800760c:	4baa      	ldr	r3, [pc, #680]	; (80078b8 <_dtoa_r+0xa20>)
 800760e:	f7fa f905 	bl	800181c <__aeabi_dmul>
 8007612:	2200      	movs	r2, #0
 8007614:	2300      	movs	r3, #0
 8007616:	0004      	movs	r4, r0
 8007618:	000d      	movs	r5, r1
 800761a:	f7f8 ff13 	bl	8000444 <__aeabi_dcmpeq>
 800761e:	2800      	cmp	r0, #0
 8007620:	d09b      	beq.n	800755a <_dtoa_r+0x6c2>
 8007622:	e7cf      	b.n	80075c4 <_dtoa_r+0x72c>
 8007624:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007626:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007628:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800762a:	2d00      	cmp	r5, #0
 800762c:	d012      	beq.n	8007654 <_dtoa_r+0x7bc>
 800762e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007630:	2a01      	cmp	r2, #1
 8007632:	dc66      	bgt.n	8007702 <_dtoa_r+0x86a>
 8007634:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007636:	2a00      	cmp	r2, #0
 8007638:	d05d      	beq.n	80076f6 <_dtoa_r+0x85e>
 800763a:	4aa0      	ldr	r2, [pc, #640]	; (80078bc <_dtoa_r+0xa24>)
 800763c:	189b      	adds	r3, r3, r2
 800763e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007640:	2101      	movs	r1, #1
 8007642:	18d2      	adds	r2, r2, r3
 8007644:	920a      	str	r2, [sp, #40]	; 0x28
 8007646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007648:	0038      	movs	r0, r7
 800764a:	18d3      	adds	r3, r2, r3
 800764c:	930d      	str	r3, [sp, #52]	; 0x34
 800764e:	f000 fb53 	bl	8007cf8 <__i2b>
 8007652:	0005      	movs	r5, r0
 8007654:	2c00      	cmp	r4, #0
 8007656:	dd0e      	ble.n	8007676 <_dtoa_r+0x7de>
 8007658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800765a:	2b00      	cmp	r3, #0
 800765c:	dd0b      	ble.n	8007676 <_dtoa_r+0x7de>
 800765e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007660:	0023      	movs	r3, r4
 8007662:	4294      	cmp	r4, r2
 8007664:	dd00      	ble.n	8007668 <_dtoa_r+0x7d0>
 8007666:	0013      	movs	r3, r2
 8007668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766a:	1ae4      	subs	r4, r4, r3
 800766c:	1ad2      	subs	r2, r2, r3
 800766e:	920a      	str	r2, [sp, #40]	; 0x28
 8007670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	930d      	str	r3, [sp, #52]	; 0x34
 8007676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01f      	beq.n	80076bc <_dtoa_r+0x824>
 800767c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d054      	beq.n	800772c <_dtoa_r+0x894>
 8007682:	2e00      	cmp	r6, #0
 8007684:	dd11      	ble.n	80076aa <_dtoa_r+0x812>
 8007686:	0029      	movs	r1, r5
 8007688:	0032      	movs	r2, r6
 800768a:	0038      	movs	r0, r7
 800768c:	f000 fbfa 	bl	8007e84 <__pow5mult>
 8007690:	9a05      	ldr	r2, [sp, #20]
 8007692:	0001      	movs	r1, r0
 8007694:	0005      	movs	r5, r0
 8007696:	0038      	movs	r0, r7
 8007698:	f000 fb44 	bl	8007d24 <__multiply>
 800769c:	9905      	ldr	r1, [sp, #20]
 800769e:	9014      	str	r0, [sp, #80]	; 0x50
 80076a0:	0038      	movs	r0, r7
 80076a2:	f000 fa79 	bl	8007b98 <_Bfree>
 80076a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076a8:	9305      	str	r3, [sp, #20]
 80076aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ac:	1b9a      	subs	r2, r3, r6
 80076ae:	42b3      	cmp	r3, r6
 80076b0:	d004      	beq.n	80076bc <_dtoa_r+0x824>
 80076b2:	0038      	movs	r0, r7
 80076b4:	9905      	ldr	r1, [sp, #20]
 80076b6:	f000 fbe5 	bl	8007e84 <__pow5mult>
 80076ba:	9005      	str	r0, [sp, #20]
 80076bc:	2101      	movs	r1, #1
 80076be:	0038      	movs	r0, r7
 80076c0:	f000 fb1a 	bl	8007cf8 <__i2b>
 80076c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076c6:	0006      	movs	r6, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	dd31      	ble.n	8007730 <_dtoa_r+0x898>
 80076cc:	001a      	movs	r2, r3
 80076ce:	0001      	movs	r1, r0
 80076d0:	0038      	movs	r0, r7
 80076d2:	f000 fbd7 	bl	8007e84 <__pow5mult>
 80076d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076d8:	0006      	movs	r6, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	dd2d      	ble.n	800773a <_dtoa_r+0x8a2>
 80076de:	2300      	movs	r3, #0
 80076e0:	930e      	str	r3, [sp, #56]	; 0x38
 80076e2:	6933      	ldr	r3, [r6, #16]
 80076e4:	3303      	adds	r3, #3
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	18f3      	adds	r3, r6, r3
 80076ea:	6858      	ldr	r0, [r3, #4]
 80076ec:	f000 fabc 	bl	8007c68 <__hi0bits>
 80076f0:	2320      	movs	r3, #32
 80076f2:	1a18      	subs	r0, r3, r0
 80076f4:	e039      	b.n	800776a <_dtoa_r+0x8d2>
 80076f6:	2336      	movs	r3, #54	; 0x36
 80076f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80076fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076fe:	1a9b      	subs	r3, r3, r2
 8007700:	e79d      	b.n	800763e <_dtoa_r+0x7a6>
 8007702:	9b07      	ldr	r3, [sp, #28]
 8007704:	1e5e      	subs	r6, r3, #1
 8007706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007708:	42b3      	cmp	r3, r6
 800770a:	db07      	blt.n	800771c <_dtoa_r+0x884>
 800770c:	1b9e      	subs	r6, r3, r6
 800770e:	9b07      	ldr	r3, [sp, #28]
 8007710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	da93      	bge.n	800763e <_dtoa_r+0x7a6>
 8007716:	1ae4      	subs	r4, r4, r3
 8007718:	2300      	movs	r3, #0
 800771a:	e790      	b.n	800763e <_dtoa_r+0x7a6>
 800771c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800771e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007720:	1af3      	subs	r3, r6, r3
 8007722:	18d3      	adds	r3, r2, r3
 8007724:	960e      	str	r6, [sp, #56]	; 0x38
 8007726:	9315      	str	r3, [sp, #84]	; 0x54
 8007728:	2600      	movs	r6, #0
 800772a:	e7f0      	b.n	800770e <_dtoa_r+0x876>
 800772c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800772e:	e7c0      	b.n	80076b2 <_dtoa_r+0x81a>
 8007730:	2300      	movs	r3, #0
 8007732:	930e      	str	r3, [sp, #56]	; 0x38
 8007734:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007736:	2b01      	cmp	r3, #1
 8007738:	dc13      	bgt.n	8007762 <_dtoa_r+0x8ca>
 800773a:	2300      	movs	r3, #0
 800773c:	930e      	str	r3, [sp, #56]	; 0x38
 800773e:	9b08      	ldr	r3, [sp, #32]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10e      	bne.n	8007762 <_dtoa_r+0x8ca>
 8007744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007746:	031b      	lsls	r3, r3, #12
 8007748:	d10b      	bne.n	8007762 <_dtoa_r+0x8ca>
 800774a:	4b5d      	ldr	r3, [pc, #372]	; (80078c0 <_dtoa_r+0xa28>)
 800774c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800774e:	4213      	tst	r3, r2
 8007750:	d007      	beq.n	8007762 <_dtoa_r+0x8ca>
 8007752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007754:	3301      	adds	r3, #1
 8007756:	930a      	str	r3, [sp, #40]	; 0x28
 8007758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800775a:	3301      	adds	r3, #1
 800775c:	930d      	str	r3, [sp, #52]	; 0x34
 800775e:	2301      	movs	r3, #1
 8007760:	930e      	str	r3, [sp, #56]	; 0x38
 8007762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007764:	2001      	movs	r0, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1bb      	bne.n	80076e2 <_dtoa_r+0x84a>
 800776a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800776c:	221f      	movs	r2, #31
 800776e:	1818      	adds	r0, r3, r0
 8007770:	0003      	movs	r3, r0
 8007772:	4013      	ands	r3, r2
 8007774:	4210      	tst	r0, r2
 8007776:	d046      	beq.n	8007806 <_dtoa_r+0x96e>
 8007778:	3201      	adds	r2, #1
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	2a04      	cmp	r2, #4
 800777e:	dd3f      	ble.n	8007800 <_dtoa_r+0x968>
 8007780:	221c      	movs	r2, #28
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007786:	18e4      	adds	r4, r4, r3
 8007788:	18d2      	adds	r2, r2, r3
 800778a:	920a      	str	r2, [sp, #40]	; 0x28
 800778c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800778e:	18d3      	adds	r3, r2, r3
 8007790:	930d      	str	r3, [sp, #52]	; 0x34
 8007792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	dd05      	ble.n	80077a4 <_dtoa_r+0x90c>
 8007798:	001a      	movs	r2, r3
 800779a:	0038      	movs	r0, r7
 800779c:	9905      	ldr	r1, [sp, #20]
 800779e:	f000 fbcd 	bl	8007f3c <__lshift>
 80077a2:	9005      	str	r0, [sp, #20]
 80077a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dd05      	ble.n	80077b6 <_dtoa_r+0x91e>
 80077aa:	0031      	movs	r1, r6
 80077ac:	001a      	movs	r2, r3
 80077ae:	0038      	movs	r0, r7
 80077b0:	f000 fbc4 	bl	8007f3c <__lshift>
 80077b4:	0006      	movs	r6, r0
 80077b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d026      	beq.n	800780a <_dtoa_r+0x972>
 80077bc:	0031      	movs	r1, r6
 80077be:	9805      	ldr	r0, [sp, #20]
 80077c0:	f000 fc2a 	bl	8008018 <__mcmp>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	da20      	bge.n	800780a <_dtoa_r+0x972>
 80077c8:	9b02      	ldr	r3, [sp, #8]
 80077ca:	220a      	movs	r2, #10
 80077cc:	3b01      	subs	r3, #1
 80077ce:	9302      	str	r3, [sp, #8]
 80077d0:	0038      	movs	r0, r7
 80077d2:	2300      	movs	r3, #0
 80077d4:	9905      	ldr	r1, [sp, #20]
 80077d6:	f000 fa03 	bl	8007be0 <__multadd>
 80077da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077dc:	9005      	str	r0, [sp, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d100      	bne.n	80077e4 <_dtoa_r+0x94c>
 80077e2:	e166      	b.n	8007ab2 <_dtoa_r+0xc1a>
 80077e4:	2300      	movs	r3, #0
 80077e6:	0029      	movs	r1, r5
 80077e8:	220a      	movs	r2, #10
 80077ea:	0038      	movs	r0, r7
 80077ec:	f000 f9f8 	bl	8007be0 <__multadd>
 80077f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077f2:	0005      	movs	r5, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dc47      	bgt.n	8007888 <_dtoa_r+0x9f0>
 80077f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	dc0d      	bgt.n	800781a <_dtoa_r+0x982>
 80077fe:	e043      	b.n	8007888 <_dtoa_r+0x9f0>
 8007800:	2a04      	cmp	r2, #4
 8007802:	d0c6      	beq.n	8007792 <_dtoa_r+0x8fa>
 8007804:	0013      	movs	r3, r2
 8007806:	331c      	adds	r3, #28
 8007808:	e7bc      	b.n	8007784 <_dtoa_r+0x8ec>
 800780a:	9b07      	ldr	r3, [sp, #28]
 800780c:	2b00      	cmp	r3, #0
 800780e:	dc35      	bgt.n	800787c <_dtoa_r+0x9e4>
 8007810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007812:	2b02      	cmp	r3, #2
 8007814:	dd32      	ble.n	800787c <_dtoa_r+0x9e4>
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	930c      	str	r3, [sp, #48]	; 0x30
 800781a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10c      	bne.n	800783a <_dtoa_r+0x9a2>
 8007820:	0031      	movs	r1, r6
 8007822:	2205      	movs	r2, #5
 8007824:	0038      	movs	r0, r7
 8007826:	f000 f9db 	bl	8007be0 <__multadd>
 800782a:	0006      	movs	r6, r0
 800782c:	0001      	movs	r1, r0
 800782e:	9805      	ldr	r0, [sp, #20]
 8007830:	f000 fbf2 	bl	8008018 <__mcmp>
 8007834:	2800      	cmp	r0, #0
 8007836:	dd00      	ble.n	800783a <_dtoa_r+0x9a2>
 8007838:	e5a5      	b.n	8007386 <_dtoa_r+0x4ee>
 800783a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800783c:	43db      	mvns	r3, r3
 800783e:	9302      	str	r3, [sp, #8]
 8007840:	9b06      	ldr	r3, [sp, #24]
 8007842:	9308      	str	r3, [sp, #32]
 8007844:	2400      	movs	r4, #0
 8007846:	0031      	movs	r1, r6
 8007848:	0038      	movs	r0, r7
 800784a:	f000 f9a5 	bl	8007b98 <_Bfree>
 800784e:	2d00      	cmp	r5, #0
 8007850:	d100      	bne.n	8007854 <_dtoa_r+0x9bc>
 8007852:	e6b7      	b.n	80075c4 <_dtoa_r+0x72c>
 8007854:	2c00      	cmp	r4, #0
 8007856:	d005      	beq.n	8007864 <_dtoa_r+0x9cc>
 8007858:	42ac      	cmp	r4, r5
 800785a:	d003      	beq.n	8007864 <_dtoa_r+0x9cc>
 800785c:	0021      	movs	r1, r4
 800785e:	0038      	movs	r0, r7
 8007860:	f000 f99a 	bl	8007b98 <_Bfree>
 8007864:	0029      	movs	r1, r5
 8007866:	0038      	movs	r0, r7
 8007868:	f000 f996 	bl	8007b98 <_Bfree>
 800786c:	e6aa      	b.n	80075c4 <_dtoa_r+0x72c>
 800786e:	2600      	movs	r6, #0
 8007870:	0035      	movs	r5, r6
 8007872:	e7e2      	b.n	800783a <_dtoa_r+0x9a2>
 8007874:	9602      	str	r6, [sp, #8]
 8007876:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007878:	0035      	movs	r5, r6
 800787a:	e584      	b.n	8007386 <_dtoa_r+0x4ee>
 800787c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d100      	bne.n	8007884 <_dtoa_r+0x9ec>
 8007882:	e0ce      	b.n	8007a22 <_dtoa_r+0xb8a>
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	930c      	str	r3, [sp, #48]	; 0x30
 8007888:	2c00      	cmp	r4, #0
 800788a:	dd05      	ble.n	8007898 <_dtoa_r+0xa00>
 800788c:	0029      	movs	r1, r5
 800788e:	0022      	movs	r2, r4
 8007890:	0038      	movs	r0, r7
 8007892:	f000 fb53 	bl	8007f3c <__lshift>
 8007896:	0005      	movs	r5, r0
 8007898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800789a:	0028      	movs	r0, r5
 800789c:	2b00      	cmp	r3, #0
 800789e:	d022      	beq.n	80078e6 <_dtoa_r+0xa4e>
 80078a0:	0038      	movs	r0, r7
 80078a2:	6869      	ldr	r1, [r5, #4]
 80078a4:	f000 f934 	bl	8007b10 <_Balloc>
 80078a8:	1e04      	subs	r4, r0, #0
 80078aa:	d10f      	bne.n	80078cc <_dtoa_r+0xa34>
 80078ac:	0002      	movs	r2, r0
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <_dtoa_r+0xa2c>)
 80078b0:	4905      	ldr	r1, [pc, #20]	; (80078c8 <_dtoa_r+0xa30>)
 80078b2:	f7ff fb06 	bl	8006ec2 <_dtoa_r+0x2a>
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	40240000 	.word	0x40240000
 80078bc:	00000433 	.word	0x00000433
 80078c0:	7ff00000 	.word	0x7ff00000
 80078c4:	08009817 	.word	0x08009817
 80078c8:	000002ea 	.word	0x000002ea
 80078cc:	0029      	movs	r1, r5
 80078ce:	692b      	ldr	r3, [r5, #16]
 80078d0:	310c      	adds	r1, #12
 80078d2:	1c9a      	adds	r2, r3, #2
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	300c      	adds	r0, #12
 80078d8:	f000 f911 	bl	8007afe <memcpy>
 80078dc:	2201      	movs	r2, #1
 80078de:	0021      	movs	r1, r4
 80078e0:	0038      	movs	r0, r7
 80078e2:	f000 fb2b 	bl	8007f3c <__lshift>
 80078e6:	9b06      	ldr	r3, [sp, #24]
 80078e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ea:	930a      	str	r3, [sp, #40]	; 0x28
 80078ec:	3b01      	subs	r3, #1
 80078ee:	189b      	adds	r3, r3, r2
 80078f0:	2201      	movs	r2, #1
 80078f2:	002c      	movs	r4, r5
 80078f4:	0005      	movs	r5, r0
 80078f6:	9314      	str	r3, [sp, #80]	; 0x50
 80078f8:	9b08      	ldr	r3, [sp, #32]
 80078fa:	4013      	ands	r3, r2
 80078fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80078fe:	0031      	movs	r1, r6
 8007900:	9805      	ldr	r0, [sp, #20]
 8007902:	f7ff fa3d 	bl	8006d80 <quorem>
 8007906:	0003      	movs	r3, r0
 8007908:	0021      	movs	r1, r4
 800790a:	3330      	adds	r3, #48	; 0x30
 800790c:	900d      	str	r0, [sp, #52]	; 0x34
 800790e:	9805      	ldr	r0, [sp, #20]
 8007910:	9307      	str	r3, [sp, #28]
 8007912:	f000 fb81 	bl	8008018 <__mcmp>
 8007916:	002a      	movs	r2, r5
 8007918:	900e      	str	r0, [sp, #56]	; 0x38
 800791a:	0031      	movs	r1, r6
 800791c:	0038      	movs	r0, r7
 800791e:	f000 fb97 	bl	8008050 <__mdiff>
 8007922:	68c3      	ldr	r3, [r0, #12]
 8007924:	9008      	str	r0, [sp, #32]
 8007926:	9310      	str	r3, [sp, #64]	; 0x40
 8007928:	2301      	movs	r3, #1
 800792a:	930c      	str	r3, [sp, #48]	; 0x30
 800792c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <_dtoa_r+0xaa4>
 8007932:	0001      	movs	r1, r0
 8007934:	9805      	ldr	r0, [sp, #20]
 8007936:	f000 fb6f 	bl	8008018 <__mcmp>
 800793a:	900c      	str	r0, [sp, #48]	; 0x30
 800793c:	0038      	movs	r0, r7
 800793e:	9908      	ldr	r1, [sp, #32]
 8007940:	f000 f92a 	bl	8007b98 <_Bfree>
 8007944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007948:	3301      	adds	r3, #1
 800794a:	9308      	str	r3, [sp, #32]
 800794c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800794e:	4313      	orrs	r3, r2
 8007950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007952:	4313      	orrs	r3, r2
 8007954:	d10c      	bne.n	8007970 <_dtoa_r+0xad8>
 8007956:	9b07      	ldr	r3, [sp, #28]
 8007958:	2b39      	cmp	r3, #57	; 0x39
 800795a:	d026      	beq.n	80079aa <_dtoa_r+0xb12>
 800795c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800795e:	2b00      	cmp	r3, #0
 8007960:	dd02      	ble.n	8007968 <_dtoa_r+0xad0>
 8007962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007964:	3331      	adds	r3, #49	; 0x31
 8007966:	9307      	str	r3, [sp, #28]
 8007968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800796a:	9a07      	ldr	r2, [sp, #28]
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e76a      	b.n	8007846 <_dtoa_r+0x9ae>
 8007970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007972:	2b00      	cmp	r3, #0
 8007974:	db04      	blt.n	8007980 <_dtoa_r+0xae8>
 8007976:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007978:	4313      	orrs	r3, r2
 800797a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800797c:	4313      	orrs	r3, r2
 800797e:	d11f      	bne.n	80079c0 <_dtoa_r+0xb28>
 8007980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007982:	2b00      	cmp	r3, #0
 8007984:	ddf0      	ble.n	8007968 <_dtoa_r+0xad0>
 8007986:	9905      	ldr	r1, [sp, #20]
 8007988:	2201      	movs	r2, #1
 800798a:	0038      	movs	r0, r7
 800798c:	f000 fad6 	bl	8007f3c <__lshift>
 8007990:	0031      	movs	r1, r6
 8007992:	9005      	str	r0, [sp, #20]
 8007994:	f000 fb40 	bl	8008018 <__mcmp>
 8007998:	2800      	cmp	r0, #0
 800799a:	dc03      	bgt.n	80079a4 <_dtoa_r+0xb0c>
 800799c:	d1e4      	bne.n	8007968 <_dtoa_r+0xad0>
 800799e:	9b07      	ldr	r3, [sp, #28]
 80079a0:	07db      	lsls	r3, r3, #31
 80079a2:	d5e1      	bpl.n	8007968 <_dtoa_r+0xad0>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	2b39      	cmp	r3, #57	; 0x39
 80079a8:	d1db      	bne.n	8007962 <_dtoa_r+0xaca>
 80079aa:	2339      	movs	r3, #57	; 0x39
 80079ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ae:	7013      	strb	r3, [r2, #0]
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	9308      	str	r3, [sp, #32]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	781a      	ldrb	r2, [r3, #0]
 80079b8:	2a39      	cmp	r2, #57	; 0x39
 80079ba:	d068      	beq.n	8007a8e <_dtoa_r+0xbf6>
 80079bc:	3201      	adds	r2, #1
 80079be:	e7d5      	b.n	800796c <_dtoa_r+0xad4>
 80079c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	dd07      	ble.n	80079d6 <_dtoa_r+0xb3e>
 80079c6:	9b07      	ldr	r3, [sp, #28]
 80079c8:	2b39      	cmp	r3, #57	; 0x39
 80079ca:	d0ee      	beq.n	80079aa <_dtoa_r+0xb12>
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d0:	3301      	adds	r3, #1
 80079d2:	7013      	strb	r3, [r2, #0]
 80079d4:	e737      	b.n	8007846 <_dtoa_r+0x9ae>
 80079d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d8:	9a07      	ldr	r2, [sp, #28]
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d03e      	beq.n	8007a62 <_dtoa_r+0xbca>
 80079e4:	2300      	movs	r3, #0
 80079e6:	220a      	movs	r2, #10
 80079e8:	9905      	ldr	r1, [sp, #20]
 80079ea:	0038      	movs	r0, r7
 80079ec:	f000 f8f8 	bl	8007be0 <__multadd>
 80079f0:	2300      	movs	r3, #0
 80079f2:	9005      	str	r0, [sp, #20]
 80079f4:	220a      	movs	r2, #10
 80079f6:	0021      	movs	r1, r4
 80079f8:	0038      	movs	r0, r7
 80079fa:	42ac      	cmp	r4, r5
 80079fc:	d106      	bne.n	8007a0c <_dtoa_r+0xb74>
 80079fe:	f000 f8ef 	bl	8007be0 <__multadd>
 8007a02:	0004      	movs	r4, r0
 8007a04:	0005      	movs	r5, r0
 8007a06:	9b08      	ldr	r3, [sp, #32]
 8007a08:	930a      	str	r3, [sp, #40]	; 0x28
 8007a0a:	e778      	b.n	80078fe <_dtoa_r+0xa66>
 8007a0c:	f000 f8e8 	bl	8007be0 <__multadd>
 8007a10:	0029      	movs	r1, r5
 8007a12:	0004      	movs	r4, r0
 8007a14:	2300      	movs	r3, #0
 8007a16:	220a      	movs	r2, #10
 8007a18:	0038      	movs	r0, r7
 8007a1a:	f000 f8e1 	bl	8007be0 <__multadd>
 8007a1e:	0005      	movs	r5, r0
 8007a20:	e7f1      	b.n	8007a06 <_dtoa_r+0xb6e>
 8007a22:	9b07      	ldr	r3, [sp, #28]
 8007a24:	930c      	str	r3, [sp, #48]	; 0x30
 8007a26:	2400      	movs	r4, #0
 8007a28:	0031      	movs	r1, r6
 8007a2a:	9805      	ldr	r0, [sp, #20]
 8007a2c:	f7ff f9a8 	bl	8006d80 <quorem>
 8007a30:	9b06      	ldr	r3, [sp, #24]
 8007a32:	3030      	adds	r0, #48	; 0x30
 8007a34:	5518      	strb	r0, [r3, r4]
 8007a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a38:	3401      	adds	r4, #1
 8007a3a:	9007      	str	r0, [sp, #28]
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	dd07      	ble.n	8007a50 <_dtoa_r+0xbb8>
 8007a40:	2300      	movs	r3, #0
 8007a42:	220a      	movs	r2, #10
 8007a44:	0038      	movs	r0, r7
 8007a46:	9905      	ldr	r1, [sp, #20]
 8007a48:	f000 f8ca 	bl	8007be0 <__multadd>
 8007a4c:	9005      	str	r0, [sp, #20]
 8007a4e:	e7eb      	b.n	8007a28 <_dtoa_r+0xb90>
 8007a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a52:	2001      	movs	r0, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dd00      	ble.n	8007a5a <_dtoa_r+0xbc2>
 8007a58:	0018      	movs	r0, r3
 8007a5a:	2400      	movs	r4, #0
 8007a5c:	9b06      	ldr	r3, [sp, #24]
 8007a5e:	181b      	adds	r3, r3, r0
 8007a60:	9308      	str	r3, [sp, #32]
 8007a62:	9905      	ldr	r1, [sp, #20]
 8007a64:	2201      	movs	r2, #1
 8007a66:	0038      	movs	r0, r7
 8007a68:	f000 fa68 	bl	8007f3c <__lshift>
 8007a6c:	0031      	movs	r1, r6
 8007a6e:	9005      	str	r0, [sp, #20]
 8007a70:	f000 fad2 	bl	8008018 <__mcmp>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	dc9b      	bgt.n	80079b0 <_dtoa_r+0xb18>
 8007a78:	d102      	bne.n	8007a80 <_dtoa_r+0xbe8>
 8007a7a:	9b07      	ldr	r3, [sp, #28]
 8007a7c:	07db      	lsls	r3, r3, #31
 8007a7e:	d497      	bmi.n	80079b0 <_dtoa_r+0xb18>
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	9308      	str	r3, [sp, #32]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	2a30      	cmp	r2, #48	; 0x30
 8007a8a:	d0fa      	beq.n	8007a82 <_dtoa_r+0xbea>
 8007a8c:	e6db      	b.n	8007846 <_dtoa_r+0x9ae>
 8007a8e:	9a06      	ldr	r2, [sp, #24]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d18e      	bne.n	80079b2 <_dtoa_r+0xb1a>
 8007a94:	9b02      	ldr	r3, [sp, #8]
 8007a96:	3301      	adds	r3, #1
 8007a98:	9302      	str	r3, [sp, #8]
 8007a9a:	2331      	movs	r3, #49	; 0x31
 8007a9c:	e799      	b.n	80079d2 <_dtoa_r+0xb3a>
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <_dtoa_r+0xc2c>)
 8007aa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007aa2:	9306      	str	r3, [sp, #24]
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <_dtoa_r+0xc30>)
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	d001      	beq.n	8007aae <_dtoa_r+0xc16>
 8007aaa:	f7ff fa3f 	bl	8006f2c <_dtoa_r+0x94>
 8007aae:	f7ff fa3f 	bl	8006f30 <_dtoa_r+0x98>
 8007ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dcb6      	bgt.n	8007a26 <_dtoa_r+0xb8e>
 8007ab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	dd00      	ble.n	8007ac0 <_dtoa_r+0xc28>
 8007abe:	e6ac      	b.n	800781a <_dtoa_r+0x982>
 8007ac0:	e7b1      	b.n	8007a26 <_dtoa_r+0xb8e>
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	08009798 	.word	0x08009798
 8007ac8:	080097a0 	.word	0x080097a0

08007acc <_localeconv_r>:
 8007acc:	4800      	ldr	r0, [pc, #0]	; (8007ad0 <_localeconv_r+0x4>)
 8007ace:	4770      	bx	lr
 8007ad0:	200001d4 	.word	0x200001d4

08007ad4 <malloc>:
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <malloc+0x10>)
 8007ad8:	0001      	movs	r1, r0
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	f000 fc4c 	bl	8008378 <_malloc_r>
 8007ae0:	bd10      	pop	{r4, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	20000080 	.word	0x20000080

08007ae8 <memchr>:
 8007ae8:	b2c9      	uxtb	r1, r1
 8007aea:	1882      	adds	r2, r0, r2
 8007aec:	4290      	cmp	r0, r2
 8007aee:	d101      	bne.n	8007af4 <memchr+0xc>
 8007af0:	2000      	movs	r0, #0
 8007af2:	4770      	bx	lr
 8007af4:	7803      	ldrb	r3, [r0, #0]
 8007af6:	428b      	cmp	r3, r1
 8007af8:	d0fb      	beq.n	8007af2 <memchr+0xa>
 8007afa:	3001      	adds	r0, #1
 8007afc:	e7f6      	b.n	8007aec <memchr+0x4>

08007afe <memcpy>:
 8007afe:	2300      	movs	r3, #0
 8007b00:	b510      	push	{r4, lr}
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d100      	bne.n	8007b08 <memcpy+0xa>
 8007b06:	bd10      	pop	{r4, pc}
 8007b08:	5ccc      	ldrb	r4, [r1, r3]
 8007b0a:	54c4      	strb	r4, [r0, r3]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	e7f8      	b.n	8007b02 <memcpy+0x4>

08007b10 <_Balloc>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b14:	0006      	movs	r6, r0
 8007b16:	000c      	movs	r4, r1
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	d10e      	bne.n	8007b3a <_Balloc+0x2a>
 8007b1c:	2010      	movs	r0, #16
 8007b1e:	f7ff ffd9 	bl	8007ad4 <malloc>
 8007b22:	1e02      	subs	r2, r0, #0
 8007b24:	6270      	str	r0, [r6, #36]	; 0x24
 8007b26:	d104      	bne.n	8007b32 <_Balloc+0x22>
 8007b28:	2166      	movs	r1, #102	; 0x66
 8007b2a:	4b19      	ldr	r3, [pc, #100]	; (8007b90 <_Balloc+0x80>)
 8007b2c:	4819      	ldr	r0, [pc, #100]	; (8007b94 <_Balloc+0x84>)
 8007b2e:	f000 fe0d 	bl	800874c <__assert_func>
 8007b32:	6045      	str	r5, [r0, #4]
 8007b34:	6085      	str	r5, [r0, #8]
 8007b36:	6005      	str	r5, [r0, #0]
 8007b38:	60c5      	str	r5, [r0, #12]
 8007b3a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007b3c:	68eb      	ldr	r3, [r5, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d013      	beq.n	8007b6a <_Balloc+0x5a>
 8007b42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b44:	00a2      	lsls	r2, r4, #2
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	189b      	adds	r3, r3, r2
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d118      	bne.n	8007b82 <_Balloc+0x72>
 8007b50:	2101      	movs	r1, #1
 8007b52:	000d      	movs	r5, r1
 8007b54:	40a5      	lsls	r5, r4
 8007b56:	1d6a      	adds	r2, r5, #5
 8007b58:	0030      	movs	r0, r6
 8007b5a:	0092      	lsls	r2, r2, #2
 8007b5c:	f000 fb74 	bl	8008248 <_calloc_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d00c      	beq.n	8007b7e <_Balloc+0x6e>
 8007b64:	6044      	str	r4, [r0, #4]
 8007b66:	6085      	str	r5, [r0, #8]
 8007b68:	e00d      	b.n	8007b86 <_Balloc+0x76>
 8007b6a:	2221      	movs	r2, #33	; 0x21
 8007b6c:	2104      	movs	r1, #4
 8007b6e:	0030      	movs	r0, r6
 8007b70:	f000 fb6a 	bl	8008248 <_calloc_r>
 8007b74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b76:	60e8      	str	r0, [r5, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e1      	bne.n	8007b42 <_Balloc+0x32>
 8007b7e:	2000      	movs	r0, #0
 8007b80:	bd70      	pop	{r4, r5, r6, pc}
 8007b82:	6802      	ldr	r2, [r0, #0]
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	2300      	movs	r3, #0
 8007b88:	6103      	str	r3, [r0, #16]
 8007b8a:	60c3      	str	r3, [r0, #12]
 8007b8c:	e7f8      	b.n	8007b80 <_Balloc+0x70>
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	080097a5 	.word	0x080097a5
 8007b94:	08009828 	.word	0x08009828

08007b98 <_Bfree>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b9c:	0005      	movs	r5, r0
 8007b9e:	000c      	movs	r4, r1
 8007ba0:	2e00      	cmp	r6, #0
 8007ba2:	d10e      	bne.n	8007bc2 <_Bfree+0x2a>
 8007ba4:	2010      	movs	r0, #16
 8007ba6:	f7ff ff95 	bl	8007ad4 <malloc>
 8007baa:	1e02      	subs	r2, r0, #0
 8007bac:	6268      	str	r0, [r5, #36]	; 0x24
 8007bae:	d104      	bne.n	8007bba <_Bfree+0x22>
 8007bb0:	218a      	movs	r1, #138	; 0x8a
 8007bb2:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <_Bfree+0x40>)
 8007bb4:	4809      	ldr	r0, [pc, #36]	; (8007bdc <_Bfree+0x44>)
 8007bb6:	f000 fdc9 	bl	800874c <__assert_func>
 8007bba:	6046      	str	r6, [r0, #4]
 8007bbc:	6086      	str	r6, [r0, #8]
 8007bbe:	6006      	str	r6, [r0, #0]
 8007bc0:	60c6      	str	r6, [r0, #12]
 8007bc2:	2c00      	cmp	r4, #0
 8007bc4:	d007      	beq.n	8007bd6 <_Bfree+0x3e>
 8007bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bc8:	6862      	ldr	r2, [r4, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	0092      	lsls	r2, r2, #2
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	6022      	str	r2, [r4, #0]
 8007bd4:	601c      	str	r4, [r3, #0]
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	080097a5 	.word	0x080097a5
 8007bdc:	08009828 	.word	0x08009828

08007be0 <__multadd>:
 8007be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007be2:	000e      	movs	r6, r1
 8007be4:	9001      	str	r0, [sp, #4]
 8007be6:	000c      	movs	r4, r1
 8007be8:	001d      	movs	r5, r3
 8007bea:	2000      	movs	r0, #0
 8007bec:	690f      	ldr	r7, [r1, #16]
 8007bee:	3614      	adds	r6, #20
 8007bf0:	6833      	ldr	r3, [r6, #0]
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	b299      	uxth	r1, r3
 8007bf6:	4351      	muls	r1, r2
 8007bf8:	0c1b      	lsrs	r3, r3, #16
 8007bfa:	4353      	muls	r3, r2
 8007bfc:	1949      	adds	r1, r1, r5
 8007bfe:	0c0d      	lsrs	r5, r1, #16
 8007c00:	195b      	adds	r3, r3, r5
 8007c02:	0c1d      	lsrs	r5, r3, #16
 8007c04:	b289      	uxth	r1, r1
 8007c06:	041b      	lsls	r3, r3, #16
 8007c08:	185b      	adds	r3, r3, r1
 8007c0a:	c608      	stmia	r6!, {r3}
 8007c0c:	4287      	cmp	r7, r0
 8007c0e:	dcef      	bgt.n	8007bf0 <__multadd+0x10>
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	d022      	beq.n	8007c5a <__multadd+0x7a>
 8007c14:	68a3      	ldr	r3, [r4, #8]
 8007c16:	42bb      	cmp	r3, r7
 8007c18:	dc19      	bgt.n	8007c4e <__multadd+0x6e>
 8007c1a:	6863      	ldr	r3, [r4, #4]
 8007c1c:	9801      	ldr	r0, [sp, #4]
 8007c1e:	1c59      	adds	r1, r3, #1
 8007c20:	f7ff ff76 	bl	8007b10 <_Balloc>
 8007c24:	1e06      	subs	r6, r0, #0
 8007c26:	d105      	bne.n	8007c34 <__multadd+0x54>
 8007c28:	0002      	movs	r2, r0
 8007c2a:	21b5      	movs	r1, #181	; 0xb5
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <__multadd+0x80>)
 8007c2e:	480d      	ldr	r0, [pc, #52]	; (8007c64 <__multadd+0x84>)
 8007c30:	f000 fd8c 	bl	800874c <__assert_func>
 8007c34:	0021      	movs	r1, r4
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	310c      	adds	r1, #12
 8007c3a:	1c9a      	adds	r2, r3, #2
 8007c3c:	0092      	lsls	r2, r2, #2
 8007c3e:	300c      	adds	r0, #12
 8007c40:	f7ff ff5d 	bl	8007afe <memcpy>
 8007c44:	0021      	movs	r1, r4
 8007c46:	9801      	ldr	r0, [sp, #4]
 8007c48:	f7ff ffa6 	bl	8007b98 <_Bfree>
 8007c4c:	0034      	movs	r4, r6
 8007c4e:	1d3b      	adds	r3, r7, #4
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	18e3      	adds	r3, r4, r3
 8007c54:	605d      	str	r5, [r3, #4]
 8007c56:	1c7b      	adds	r3, r7, #1
 8007c58:	6123      	str	r3, [r4, #16]
 8007c5a:	0020      	movs	r0, r4
 8007c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	08009817 	.word	0x08009817
 8007c64:	08009828 	.word	0x08009828

08007c68 <__hi0bits>:
 8007c68:	0003      	movs	r3, r0
 8007c6a:	0c02      	lsrs	r2, r0, #16
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	4282      	cmp	r2, r0
 8007c70:	d101      	bne.n	8007c76 <__hi0bits+0xe>
 8007c72:	041b      	lsls	r3, r3, #16
 8007c74:	3010      	adds	r0, #16
 8007c76:	0e1a      	lsrs	r2, r3, #24
 8007c78:	d101      	bne.n	8007c7e <__hi0bits+0x16>
 8007c7a:	3008      	adds	r0, #8
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	0f1a      	lsrs	r2, r3, #28
 8007c80:	d101      	bne.n	8007c86 <__hi0bits+0x1e>
 8007c82:	3004      	adds	r0, #4
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	0f9a      	lsrs	r2, r3, #30
 8007c88:	d101      	bne.n	8007c8e <__hi0bits+0x26>
 8007c8a:	3002      	adds	r0, #2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	db03      	blt.n	8007c9a <__hi0bits+0x32>
 8007c92:	3001      	adds	r0, #1
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	d400      	bmi.n	8007c9a <__hi0bits+0x32>
 8007c98:	2020      	movs	r0, #32
 8007c9a:	4770      	bx	lr

08007c9c <__lo0bits>:
 8007c9c:	6803      	ldr	r3, [r0, #0]
 8007c9e:	0002      	movs	r2, r0
 8007ca0:	2107      	movs	r1, #7
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	4008      	ands	r0, r1
 8007ca6:	420b      	tst	r3, r1
 8007ca8:	d00d      	beq.n	8007cc6 <__lo0bits+0x2a>
 8007caa:	3906      	subs	r1, #6
 8007cac:	2000      	movs	r0, #0
 8007cae:	420b      	tst	r3, r1
 8007cb0:	d105      	bne.n	8007cbe <__lo0bits+0x22>
 8007cb2:	3002      	adds	r0, #2
 8007cb4:	4203      	tst	r3, r0
 8007cb6:	d003      	beq.n	8007cc0 <__lo0bits+0x24>
 8007cb8:	40cb      	lsrs	r3, r1
 8007cba:	0008      	movs	r0, r1
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	4770      	bx	lr
 8007cc0:	089b      	lsrs	r3, r3, #2
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	e7fb      	b.n	8007cbe <__lo0bits+0x22>
 8007cc6:	b299      	uxth	r1, r3
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	d101      	bne.n	8007cd0 <__lo0bits+0x34>
 8007ccc:	2010      	movs	r0, #16
 8007cce:	0c1b      	lsrs	r3, r3, #16
 8007cd0:	b2d9      	uxtb	r1, r3
 8007cd2:	2900      	cmp	r1, #0
 8007cd4:	d101      	bne.n	8007cda <__lo0bits+0x3e>
 8007cd6:	3008      	adds	r0, #8
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	0719      	lsls	r1, r3, #28
 8007cdc:	d101      	bne.n	8007ce2 <__lo0bits+0x46>
 8007cde:	3004      	adds	r0, #4
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	0799      	lsls	r1, r3, #30
 8007ce4:	d101      	bne.n	8007cea <__lo0bits+0x4e>
 8007ce6:	3002      	adds	r0, #2
 8007ce8:	089b      	lsrs	r3, r3, #2
 8007cea:	07d9      	lsls	r1, r3, #31
 8007cec:	d4e9      	bmi.n	8007cc2 <__lo0bits+0x26>
 8007cee:	3001      	adds	r0, #1
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	d1e6      	bne.n	8007cc2 <__lo0bits+0x26>
 8007cf4:	2020      	movs	r0, #32
 8007cf6:	e7e2      	b.n	8007cbe <__lo0bits+0x22>

08007cf8 <__i2b>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	000c      	movs	r4, r1
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	f7ff ff07 	bl	8007b10 <_Balloc>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d106      	bne.n	8007d14 <__i2b+0x1c>
 8007d06:	21a0      	movs	r1, #160	; 0xa0
 8007d08:	0002      	movs	r2, r0
 8007d0a:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <__i2b+0x24>)
 8007d0c:	4804      	ldr	r0, [pc, #16]	; (8007d20 <__i2b+0x28>)
 8007d0e:	0049      	lsls	r1, r1, #1
 8007d10:	f000 fd1c 	bl	800874c <__assert_func>
 8007d14:	2301      	movs	r3, #1
 8007d16:	6144      	str	r4, [r0, #20]
 8007d18:	6103      	str	r3, [r0, #16]
 8007d1a:	bd10      	pop	{r4, pc}
 8007d1c:	08009817 	.word	0x08009817
 8007d20:	08009828 	.word	0x08009828

08007d24 <__multiply>:
 8007d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d26:	690b      	ldr	r3, [r1, #16]
 8007d28:	0014      	movs	r4, r2
 8007d2a:	6912      	ldr	r2, [r2, #16]
 8007d2c:	000d      	movs	r5, r1
 8007d2e:	b089      	sub	sp, #36	; 0x24
 8007d30:	4293      	cmp	r3, r2
 8007d32:	da01      	bge.n	8007d38 <__multiply+0x14>
 8007d34:	0025      	movs	r5, r4
 8007d36:	000c      	movs	r4, r1
 8007d38:	692f      	ldr	r7, [r5, #16]
 8007d3a:	6926      	ldr	r6, [r4, #16]
 8007d3c:	6869      	ldr	r1, [r5, #4]
 8007d3e:	19bb      	adds	r3, r7, r6
 8007d40:	9302      	str	r3, [sp, #8]
 8007d42:	68ab      	ldr	r3, [r5, #8]
 8007d44:	19ba      	adds	r2, r7, r6
 8007d46:	4293      	cmp	r3, r2
 8007d48:	da00      	bge.n	8007d4c <__multiply+0x28>
 8007d4a:	3101      	adds	r1, #1
 8007d4c:	f7ff fee0 	bl	8007b10 <_Balloc>
 8007d50:	9001      	str	r0, [sp, #4]
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d106      	bne.n	8007d64 <__multiply+0x40>
 8007d56:	215e      	movs	r1, #94	; 0x5e
 8007d58:	0002      	movs	r2, r0
 8007d5a:	4b48      	ldr	r3, [pc, #288]	; (8007e7c <__multiply+0x158>)
 8007d5c:	4848      	ldr	r0, [pc, #288]	; (8007e80 <__multiply+0x15c>)
 8007d5e:	31ff      	adds	r1, #255	; 0xff
 8007d60:	f000 fcf4 	bl	800874c <__assert_func>
 8007d64:	9b01      	ldr	r3, [sp, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	3314      	adds	r3, #20
 8007d6a:	469c      	mov	ip, r3
 8007d6c:	19bb      	adds	r3, r7, r6
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4463      	add	r3, ip
 8007d72:	9303      	str	r3, [sp, #12]
 8007d74:	4663      	mov	r3, ip
 8007d76:	9903      	ldr	r1, [sp, #12]
 8007d78:	428b      	cmp	r3, r1
 8007d7a:	d32c      	bcc.n	8007dd6 <__multiply+0xb2>
 8007d7c:	002b      	movs	r3, r5
 8007d7e:	0022      	movs	r2, r4
 8007d80:	3314      	adds	r3, #20
 8007d82:	00bf      	lsls	r7, r7, #2
 8007d84:	3214      	adds	r2, #20
 8007d86:	9306      	str	r3, [sp, #24]
 8007d88:	00b6      	lsls	r6, r6, #2
 8007d8a:	19db      	adds	r3, r3, r7
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	1993      	adds	r3, r2, r6
 8007d90:	9307      	str	r3, [sp, #28]
 8007d92:	2304      	movs	r3, #4
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	002b      	movs	r3, r5
 8007d98:	9904      	ldr	r1, [sp, #16]
 8007d9a:	3315      	adds	r3, #21
 8007d9c:	9200      	str	r2, [sp, #0]
 8007d9e:	4299      	cmp	r1, r3
 8007da0:	d305      	bcc.n	8007dae <__multiply+0x8a>
 8007da2:	1b4b      	subs	r3, r1, r5
 8007da4:	3b15      	subs	r3, #21
 8007da6:	089b      	lsrs	r3, r3, #2
 8007da8:	3301      	adds	r3, #1
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	9305      	str	r3, [sp, #20]
 8007dae:	9b07      	ldr	r3, [sp, #28]
 8007db0:	9a00      	ldr	r2, [sp, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d311      	bcc.n	8007dda <__multiply+0xb6>
 8007db6:	9b02      	ldr	r3, [sp, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dd06      	ble.n	8007dca <__multiply+0xa6>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	3b04      	subs	r3, #4
 8007dc0:	9303      	str	r3, [sp, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d053      	beq.n	8007e72 <__multiply+0x14e>
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	9a02      	ldr	r2, [sp, #8]
 8007dce:	0018      	movs	r0, r3
 8007dd0:	611a      	str	r2, [r3, #16]
 8007dd2:	b009      	add	sp, #36	; 0x24
 8007dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd6:	c304      	stmia	r3!, {r2}
 8007dd8:	e7cd      	b.n	8007d76 <__multiply+0x52>
 8007dda:	9b00      	ldr	r3, [sp, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	b298      	uxth	r0, r3
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d01b      	beq.n	8007e1c <__multiply+0xf8>
 8007de4:	4667      	mov	r7, ip
 8007de6:	2400      	movs	r4, #0
 8007de8:	9e06      	ldr	r6, [sp, #24]
 8007dea:	ce02      	ldmia	r6!, {r1}
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	b28b      	uxth	r3, r1
 8007df0:	4343      	muls	r3, r0
 8007df2:	b292      	uxth	r2, r2
 8007df4:	189b      	adds	r3, r3, r2
 8007df6:	191b      	adds	r3, r3, r4
 8007df8:	0c0c      	lsrs	r4, r1, #16
 8007dfa:	4344      	muls	r4, r0
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	0c11      	lsrs	r1, r2, #16
 8007e00:	1861      	adds	r1, r4, r1
 8007e02:	0c1c      	lsrs	r4, r3, #16
 8007e04:	1909      	adds	r1, r1, r4
 8007e06:	0c0c      	lsrs	r4, r1, #16
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	0409      	lsls	r1, r1, #16
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	c708      	stmia	r7!, {r3}
 8007e10:	9b04      	ldr	r3, [sp, #16]
 8007e12:	42b3      	cmp	r3, r6
 8007e14:	d8e9      	bhi.n	8007dea <__multiply+0xc6>
 8007e16:	4663      	mov	r3, ip
 8007e18:	9a05      	ldr	r2, [sp, #20]
 8007e1a:	509c      	str	r4, [r3, r2]
 8007e1c:	9b00      	ldr	r3, [sp, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	0c1e      	lsrs	r6, r3, #16
 8007e22:	d020      	beq.n	8007e66 <__multiply+0x142>
 8007e24:	4663      	mov	r3, ip
 8007e26:	002c      	movs	r4, r5
 8007e28:	4660      	mov	r0, ip
 8007e2a:	2700      	movs	r7, #0
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3414      	adds	r4, #20
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	b291      	uxth	r1, r2
 8007e36:	4371      	muls	r1, r6
 8007e38:	6802      	ldr	r2, [r0, #0]
 8007e3a:	0c12      	lsrs	r2, r2, #16
 8007e3c:	1889      	adds	r1, r1, r2
 8007e3e:	19cf      	adds	r7, r1, r7
 8007e40:	0439      	lsls	r1, r7, #16
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6003      	str	r3, [r0, #0]
 8007e46:	cc02      	ldmia	r4!, {r1}
 8007e48:	6843      	ldr	r3, [r0, #4]
 8007e4a:	0c09      	lsrs	r1, r1, #16
 8007e4c:	4371      	muls	r1, r6
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	0c3f      	lsrs	r7, r7, #16
 8007e52:	18cb      	adds	r3, r1, r3
 8007e54:	9a04      	ldr	r2, [sp, #16]
 8007e56:	19db      	adds	r3, r3, r7
 8007e58:	0c1f      	lsrs	r7, r3, #16
 8007e5a:	3004      	adds	r0, #4
 8007e5c:	42a2      	cmp	r2, r4
 8007e5e:	d8e7      	bhi.n	8007e30 <__multiply+0x10c>
 8007e60:	4662      	mov	r2, ip
 8007e62:	9905      	ldr	r1, [sp, #20]
 8007e64:	5053      	str	r3, [r2, r1]
 8007e66:	9b00      	ldr	r3, [sp, #0]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	2304      	movs	r3, #4
 8007e6e:	449c      	add	ip, r3
 8007e70:	e79d      	b.n	8007dae <__multiply+0x8a>
 8007e72:	9b02      	ldr	r3, [sp, #8]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	9302      	str	r3, [sp, #8]
 8007e78:	e79d      	b.n	8007db6 <__multiply+0x92>
 8007e7a:	46c0      	nop			; (mov r8, r8)
 8007e7c:	08009817 	.word	0x08009817
 8007e80:	08009828 	.word	0x08009828

08007e84 <__pow5mult>:
 8007e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e86:	2303      	movs	r3, #3
 8007e88:	0015      	movs	r5, r2
 8007e8a:	0007      	movs	r7, r0
 8007e8c:	000e      	movs	r6, r1
 8007e8e:	401a      	ands	r2, r3
 8007e90:	421d      	tst	r5, r3
 8007e92:	d008      	beq.n	8007ea6 <__pow5mult+0x22>
 8007e94:	4925      	ldr	r1, [pc, #148]	; (8007f2c <__pow5mult+0xa8>)
 8007e96:	3a01      	subs	r2, #1
 8007e98:	0092      	lsls	r2, r2, #2
 8007e9a:	5852      	ldr	r2, [r2, r1]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	0031      	movs	r1, r6
 8007ea0:	f7ff fe9e 	bl	8007be0 <__multadd>
 8007ea4:	0006      	movs	r6, r0
 8007ea6:	10ad      	asrs	r5, r5, #2
 8007ea8:	d03d      	beq.n	8007f26 <__pow5mult+0xa2>
 8007eaa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007eac:	2c00      	cmp	r4, #0
 8007eae:	d10f      	bne.n	8007ed0 <__pow5mult+0x4c>
 8007eb0:	2010      	movs	r0, #16
 8007eb2:	f7ff fe0f 	bl	8007ad4 <malloc>
 8007eb6:	1e02      	subs	r2, r0, #0
 8007eb8:	6278      	str	r0, [r7, #36]	; 0x24
 8007eba:	d105      	bne.n	8007ec8 <__pow5mult+0x44>
 8007ebc:	21d7      	movs	r1, #215	; 0xd7
 8007ebe:	4b1c      	ldr	r3, [pc, #112]	; (8007f30 <__pow5mult+0xac>)
 8007ec0:	481c      	ldr	r0, [pc, #112]	; (8007f34 <__pow5mult+0xb0>)
 8007ec2:	0049      	lsls	r1, r1, #1
 8007ec4:	f000 fc42 	bl	800874c <__assert_func>
 8007ec8:	6044      	str	r4, [r0, #4]
 8007eca:	6084      	str	r4, [r0, #8]
 8007ecc:	6004      	str	r4, [r0, #0]
 8007ece:	60c4      	str	r4, [r0, #12]
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	689c      	ldr	r4, [r3, #8]
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	2c00      	cmp	r4, #0
 8007ed8:	d108      	bne.n	8007eec <__pow5mult+0x68>
 8007eda:	0038      	movs	r0, r7
 8007edc:	4916      	ldr	r1, [pc, #88]	; (8007f38 <__pow5mult+0xb4>)
 8007ede:	f7ff ff0b 	bl	8007cf8 <__i2b>
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	0004      	movs	r4, r0
 8007ee6:	6098      	str	r0, [r3, #8]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6003      	str	r3, [r0, #0]
 8007eec:	2301      	movs	r3, #1
 8007eee:	421d      	tst	r5, r3
 8007ef0:	d00a      	beq.n	8007f08 <__pow5mult+0x84>
 8007ef2:	0031      	movs	r1, r6
 8007ef4:	0022      	movs	r2, r4
 8007ef6:	0038      	movs	r0, r7
 8007ef8:	f7ff ff14 	bl	8007d24 <__multiply>
 8007efc:	0031      	movs	r1, r6
 8007efe:	9001      	str	r0, [sp, #4]
 8007f00:	0038      	movs	r0, r7
 8007f02:	f7ff fe49 	bl	8007b98 <_Bfree>
 8007f06:	9e01      	ldr	r6, [sp, #4]
 8007f08:	106d      	asrs	r5, r5, #1
 8007f0a:	d00c      	beq.n	8007f26 <__pow5mult+0xa2>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d107      	bne.n	8007f22 <__pow5mult+0x9e>
 8007f12:	0022      	movs	r2, r4
 8007f14:	0021      	movs	r1, r4
 8007f16:	0038      	movs	r0, r7
 8007f18:	f7ff ff04 	bl	8007d24 <__multiply>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6020      	str	r0, [r4, #0]
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	0004      	movs	r4, r0
 8007f24:	e7e2      	b.n	8007eec <__pow5mult+0x68>
 8007f26:	0030      	movs	r0, r6
 8007f28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	08009978 	.word	0x08009978
 8007f30:	080097a5 	.word	0x080097a5
 8007f34:	08009828 	.word	0x08009828
 8007f38:	00000271 	.word	0x00000271

08007f3c <__lshift>:
 8007f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3e:	000c      	movs	r4, r1
 8007f40:	0017      	movs	r7, r2
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	1155      	asrs	r5, r2, #5
 8007f46:	b087      	sub	sp, #28
 8007f48:	18eb      	adds	r3, r5, r3
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	6849      	ldr	r1, [r1, #4]
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	9004      	str	r0, [sp, #16]
 8007f56:	9a01      	ldr	r2, [sp, #4]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	db10      	blt.n	8007f7e <__lshift+0x42>
 8007f5c:	9804      	ldr	r0, [sp, #16]
 8007f5e:	f7ff fdd7 	bl	8007b10 <_Balloc>
 8007f62:	2300      	movs	r3, #0
 8007f64:	0002      	movs	r2, r0
 8007f66:	0006      	movs	r6, r0
 8007f68:	0019      	movs	r1, r3
 8007f6a:	3214      	adds	r2, #20
 8007f6c:	4298      	cmp	r0, r3
 8007f6e:	d10c      	bne.n	8007f8a <__lshift+0x4e>
 8007f70:	21da      	movs	r1, #218	; 0xda
 8007f72:	0002      	movs	r2, r0
 8007f74:	4b26      	ldr	r3, [pc, #152]	; (8008010 <__lshift+0xd4>)
 8007f76:	4827      	ldr	r0, [pc, #156]	; (8008014 <__lshift+0xd8>)
 8007f78:	31ff      	adds	r1, #255	; 0xff
 8007f7a:	f000 fbe7 	bl	800874c <__assert_func>
 8007f7e:	3101      	adds	r1, #1
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	e7e8      	b.n	8007f56 <__lshift+0x1a>
 8007f84:	0098      	lsls	r0, r3, #2
 8007f86:	5011      	str	r1, [r2, r0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	42ab      	cmp	r3, r5
 8007f8c:	dbfa      	blt.n	8007f84 <__lshift+0x48>
 8007f8e:	43eb      	mvns	r3, r5
 8007f90:	17db      	asrs	r3, r3, #31
 8007f92:	401d      	ands	r5, r3
 8007f94:	211f      	movs	r1, #31
 8007f96:	0023      	movs	r3, r4
 8007f98:	0038      	movs	r0, r7
 8007f9a:	00ad      	lsls	r5, r5, #2
 8007f9c:	1955      	adds	r5, r2, r5
 8007f9e:	6922      	ldr	r2, [r4, #16]
 8007fa0:	3314      	adds	r3, #20
 8007fa2:	0092      	lsls	r2, r2, #2
 8007fa4:	4008      	ands	r0, r1
 8007fa6:	4684      	mov	ip, r0
 8007fa8:	189a      	adds	r2, r3, r2
 8007faa:	420f      	tst	r7, r1
 8007fac:	d02a      	beq.n	8008004 <__lshift+0xc8>
 8007fae:	3101      	adds	r1, #1
 8007fb0:	1a09      	subs	r1, r1, r0
 8007fb2:	9105      	str	r1, [sp, #20]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	9503      	str	r5, [sp, #12]
 8007fb8:	4667      	mov	r7, ip
 8007fba:	6818      	ldr	r0, [r3, #0]
 8007fbc:	40b8      	lsls	r0, r7
 8007fbe:	4301      	orrs	r1, r0
 8007fc0:	9803      	ldr	r0, [sp, #12]
 8007fc2:	c002      	stmia	r0!, {r1}
 8007fc4:	cb02      	ldmia	r3!, {r1}
 8007fc6:	9003      	str	r0, [sp, #12]
 8007fc8:	9805      	ldr	r0, [sp, #20]
 8007fca:	40c1      	lsrs	r1, r0
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d8f3      	bhi.n	8007fb8 <__lshift+0x7c>
 8007fd0:	0020      	movs	r0, r4
 8007fd2:	3015      	adds	r0, #21
 8007fd4:	2304      	movs	r3, #4
 8007fd6:	4282      	cmp	r2, r0
 8007fd8:	d304      	bcc.n	8007fe4 <__lshift+0xa8>
 8007fda:	1b13      	subs	r3, r2, r4
 8007fdc:	3b15      	subs	r3, #21
 8007fde:	089b      	lsrs	r3, r3, #2
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	50e9      	str	r1, [r5, r3]
 8007fe6:	2900      	cmp	r1, #0
 8007fe8:	d002      	beq.n	8007ff0 <__lshift+0xb4>
 8007fea:	9b02      	ldr	r3, [sp, #8]
 8007fec:	3302      	adds	r3, #2
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	9b01      	ldr	r3, [sp, #4]
 8007ff2:	9804      	ldr	r0, [sp, #16]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	0021      	movs	r1, r4
 8007ff8:	6133      	str	r3, [r6, #16]
 8007ffa:	f7ff fdcd 	bl	8007b98 <_Bfree>
 8007ffe:	0030      	movs	r0, r6
 8008000:	b007      	add	sp, #28
 8008002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008004:	cb02      	ldmia	r3!, {r1}
 8008006:	c502      	stmia	r5!, {r1}
 8008008:	429a      	cmp	r2, r3
 800800a:	d8fb      	bhi.n	8008004 <__lshift+0xc8>
 800800c:	e7f0      	b.n	8007ff0 <__lshift+0xb4>
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	08009817 	.word	0x08009817
 8008014:	08009828 	.word	0x08009828

08008018 <__mcmp>:
 8008018:	6902      	ldr	r2, [r0, #16]
 800801a:	690b      	ldr	r3, [r1, #16]
 800801c:	b530      	push	{r4, r5, lr}
 800801e:	0004      	movs	r4, r0
 8008020:	1ad0      	subs	r0, r2, r3
 8008022:	429a      	cmp	r2, r3
 8008024:	d10d      	bne.n	8008042 <__mcmp+0x2a>
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	3414      	adds	r4, #20
 800802a:	3114      	adds	r1, #20
 800802c:	18e2      	adds	r2, r4, r3
 800802e:	18c9      	adds	r1, r1, r3
 8008030:	3a04      	subs	r2, #4
 8008032:	3904      	subs	r1, #4
 8008034:	6815      	ldr	r5, [r2, #0]
 8008036:	680b      	ldr	r3, [r1, #0]
 8008038:	429d      	cmp	r5, r3
 800803a:	d003      	beq.n	8008044 <__mcmp+0x2c>
 800803c:	2001      	movs	r0, #1
 800803e:	429d      	cmp	r5, r3
 8008040:	d303      	bcc.n	800804a <__mcmp+0x32>
 8008042:	bd30      	pop	{r4, r5, pc}
 8008044:	4294      	cmp	r4, r2
 8008046:	d3f3      	bcc.n	8008030 <__mcmp+0x18>
 8008048:	e7fb      	b.n	8008042 <__mcmp+0x2a>
 800804a:	4240      	negs	r0, r0
 800804c:	e7f9      	b.n	8008042 <__mcmp+0x2a>
	...

08008050 <__mdiff>:
 8008050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008052:	000e      	movs	r6, r1
 8008054:	0007      	movs	r7, r0
 8008056:	0011      	movs	r1, r2
 8008058:	0030      	movs	r0, r6
 800805a:	b087      	sub	sp, #28
 800805c:	0014      	movs	r4, r2
 800805e:	f7ff ffdb 	bl	8008018 <__mcmp>
 8008062:	1e05      	subs	r5, r0, #0
 8008064:	d110      	bne.n	8008088 <__mdiff+0x38>
 8008066:	0001      	movs	r1, r0
 8008068:	0038      	movs	r0, r7
 800806a:	f7ff fd51 	bl	8007b10 <_Balloc>
 800806e:	1e02      	subs	r2, r0, #0
 8008070:	d104      	bne.n	800807c <__mdiff+0x2c>
 8008072:	4b40      	ldr	r3, [pc, #256]	; (8008174 <__mdiff+0x124>)
 8008074:	4940      	ldr	r1, [pc, #256]	; (8008178 <__mdiff+0x128>)
 8008076:	4841      	ldr	r0, [pc, #260]	; (800817c <__mdiff+0x12c>)
 8008078:	f000 fb68 	bl	800874c <__assert_func>
 800807c:	2301      	movs	r3, #1
 800807e:	6145      	str	r5, [r0, #20]
 8008080:	6103      	str	r3, [r0, #16]
 8008082:	0010      	movs	r0, r2
 8008084:	b007      	add	sp, #28
 8008086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008088:	2301      	movs	r3, #1
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	2800      	cmp	r0, #0
 800808e:	db04      	blt.n	800809a <__mdiff+0x4a>
 8008090:	0023      	movs	r3, r4
 8008092:	0034      	movs	r4, r6
 8008094:	001e      	movs	r6, r3
 8008096:	2300      	movs	r3, #0
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	0038      	movs	r0, r7
 800809c:	6861      	ldr	r1, [r4, #4]
 800809e:	f7ff fd37 	bl	8007b10 <_Balloc>
 80080a2:	1e02      	subs	r2, r0, #0
 80080a4:	d103      	bne.n	80080ae <__mdiff+0x5e>
 80080a6:	2190      	movs	r1, #144	; 0x90
 80080a8:	4b32      	ldr	r3, [pc, #200]	; (8008174 <__mdiff+0x124>)
 80080aa:	0089      	lsls	r1, r1, #2
 80080ac:	e7e3      	b.n	8008076 <__mdiff+0x26>
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	2700      	movs	r7, #0
 80080b2:	60c3      	str	r3, [r0, #12]
 80080b4:	6920      	ldr	r0, [r4, #16]
 80080b6:	3414      	adds	r4, #20
 80080b8:	9401      	str	r4, [sp, #4]
 80080ba:	9b01      	ldr	r3, [sp, #4]
 80080bc:	0084      	lsls	r4, r0, #2
 80080be:	191b      	adds	r3, r3, r4
 80080c0:	0034      	movs	r4, r6
 80080c2:	9302      	str	r3, [sp, #8]
 80080c4:	6933      	ldr	r3, [r6, #16]
 80080c6:	3414      	adds	r4, #20
 80080c8:	0099      	lsls	r1, r3, #2
 80080ca:	1863      	adds	r3, r4, r1
 80080cc:	9303      	str	r3, [sp, #12]
 80080ce:	0013      	movs	r3, r2
 80080d0:	3314      	adds	r3, #20
 80080d2:	469c      	mov	ip, r3
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	9b01      	ldr	r3, [sp, #4]
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	9b04      	ldr	r3, [sp, #16]
 80080dc:	cc02      	ldmia	r4!, {r1}
 80080de:	cb20      	ldmia	r3!, {r5}
 80080e0:	9304      	str	r3, [sp, #16]
 80080e2:	b2ab      	uxth	r3, r5
 80080e4:	19df      	adds	r7, r3, r7
 80080e6:	b28b      	uxth	r3, r1
 80080e8:	1afb      	subs	r3, r7, r3
 80080ea:	0c09      	lsrs	r1, r1, #16
 80080ec:	0c2d      	lsrs	r5, r5, #16
 80080ee:	1a6d      	subs	r5, r5, r1
 80080f0:	1419      	asrs	r1, r3, #16
 80080f2:	186d      	adds	r5, r5, r1
 80080f4:	4661      	mov	r1, ip
 80080f6:	142f      	asrs	r7, r5, #16
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	042d      	lsls	r5, r5, #16
 80080fc:	432b      	orrs	r3, r5
 80080fe:	c108      	stmia	r1!, {r3}
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	468c      	mov	ip, r1
 8008104:	42a3      	cmp	r3, r4
 8008106:	d8e8      	bhi.n	80080da <__mdiff+0x8a>
 8008108:	0031      	movs	r1, r6
 800810a:	9c03      	ldr	r4, [sp, #12]
 800810c:	3115      	adds	r1, #21
 800810e:	2304      	movs	r3, #4
 8008110:	428c      	cmp	r4, r1
 8008112:	d304      	bcc.n	800811e <__mdiff+0xce>
 8008114:	1ba3      	subs	r3, r4, r6
 8008116:	3b15      	subs	r3, #21
 8008118:	089b      	lsrs	r3, r3, #2
 800811a:	3301      	adds	r3, #1
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	9901      	ldr	r1, [sp, #4]
 8008120:	18cc      	adds	r4, r1, r3
 8008122:	9905      	ldr	r1, [sp, #20]
 8008124:	0026      	movs	r6, r4
 8008126:	18cb      	adds	r3, r1, r3
 8008128:	469c      	mov	ip, r3
 800812a:	9902      	ldr	r1, [sp, #8]
 800812c:	428e      	cmp	r6, r1
 800812e:	d310      	bcc.n	8008152 <__mdiff+0x102>
 8008130:	9e02      	ldr	r6, [sp, #8]
 8008132:	1ee1      	subs	r1, r4, #3
 8008134:	2500      	movs	r5, #0
 8008136:	428e      	cmp	r6, r1
 8008138:	d304      	bcc.n	8008144 <__mdiff+0xf4>
 800813a:	0031      	movs	r1, r6
 800813c:	3103      	adds	r1, #3
 800813e:	1b0c      	subs	r4, r1, r4
 8008140:	08a4      	lsrs	r4, r4, #2
 8008142:	00a5      	lsls	r5, r4, #2
 8008144:	195b      	adds	r3, r3, r5
 8008146:	3b04      	subs	r3, #4
 8008148:	6819      	ldr	r1, [r3, #0]
 800814a:	2900      	cmp	r1, #0
 800814c:	d00f      	beq.n	800816e <__mdiff+0x11e>
 800814e:	6110      	str	r0, [r2, #16]
 8008150:	e797      	b.n	8008082 <__mdiff+0x32>
 8008152:	ce02      	ldmia	r6!, {r1}
 8008154:	b28d      	uxth	r5, r1
 8008156:	19ed      	adds	r5, r5, r7
 8008158:	0c0f      	lsrs	r7, r1, #16
 800815a:	1429      	asrs	r1, r5, #16
 800815c:	1879      	adds	r1, r7, r1
 800815e:	140f      	asrs	r7, r1, #16
 8008160:	b2ad      	uxth	r5, r5
 8008162:	0409      	lsls	r1, r1, #16
 8008164:	430d      	orrs	r5, r1
 8008166:	4661      	mov	r1, ip
 8008168:	c120      	stmia	r1!, {r5}
 800816a:	468c      	mov	ip, r1
 800816c:	e7dd      	b.n	800812a <__mdiff+0xda>
 800816e:	3801      	subs	r0, #1
 8008170:	e7e9      	b.n	8008146 <__mdiff+0xf6>
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	08009817 	.word	0x08009817
 8008178:	00000232 	.word	0x00000232
 800817c:	08009828 	.word	0x08009828

08008180 <__d2b>:
 8008180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008182:	2101      	movs	r1, #1
 8008184:	0014      	movs	r4, r2
 8008186:	001e      	movs	r6, r3
 8008188:	9f08      	ldr	r7, [sp, #32]
 800818a:	f7ff fcc1 	bl	8007b10 <_Balloc>
 800818e:	1e05      	subs	r5, r0, #0
 8008190:	d105      	bne.n	800819e <__d2b+0x1e>
 8008192:	0002      	movs	r2, r0
 8008194:	4b26      	ldr	r3, [pc, #152]	; (8008230 <__d2b+0xb0>)
 8008196:	4927      	ldr	r1, [pc, #156]	; (8008234 <__d2b+0xb4>)
 8008198:	4827      	ldr	r0, [pc, #156]	; (8008238 <__d2b+0xb8>)
 800819a:	f000 fad7 	bl	800874c <__assert_func>
 800819e:	0333      	lsls	r3, r6, #12
 80081a0:	0076      	lsls	r6, r6, #1
 80081a2:	0b1b      	lsrs	r3, r3, #12
 80081a4:	0d76      	lsrs	r6, r6, #21
 80081a6:	d124      	bne.n	80081f2 <__d2b+0x72>
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	2c00      	cmp	r4, #0
 80081ac:	d027      	beq.n	80081fe <__d2b+0x7e>
 80081ae:	4668      	mov	r0, sp
 80081b0:	9400      	str	r4, [sp, #0]
 80081b2:	f7ff fd73 	bl	8007c9c <__lo0bits>
 80081b6:	9c00      	ldr	r4, [sp, #0]
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d01e      	beq.n	80081fa <__d2b+0x7a>
 80081bc:	9b01      	ldr	r3, [sp, #4]
 80081be:	2120      	movs	r1, #32
 80081c0:	001a      	movs	r2, r3
 80081c2:	1a09      	subs	r1, r1, r0
 80081c4:	408a      	lsls	r2, r1
 80081c6:	40c3      	lsrs	r3, r0
 80081c8:	4322      	orrs	r2, r4
 80081ca:	616a      	str	r2, [r5, #20]
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	9c01      	ldr	r4, [sp, #4]
 80081d0:	61ac      	str	r4, [r5, #24]
 80081d2:	1e63      	subs	r3, r4, #1
 80081d4:	419c      	sbcs	r4, r3
 80081d6:	3401      	adds	r4, #1
 80081d8:	612c      	str	r4, [r5, #16]
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d018      	beq.n	8008210 <__d2b+0x90>
 80081de:	4b17      	ldr	r3, [pc, #92]	; (800823c <__d2b+0xbc>)
 80081e0:	18f6      	adds	r6, r6, r3
 80081e2:	2335      	movs	r3, #53	; 0x35
 80081e4:	1836      	adds	r6, r6, r0
 80081e6:	1a18      	subs	r0, r3, r0
 80081e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ea:	603e      	str	r6, [r7, #0]
 80081ec:	6018      	str	r0, [r3, #0]
 80081ee:	0028      	movs	r0, r5
 80081f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081f2:	2280      	movs	r2, #128	; 0x80
 80081f4:	0352      	lsls	r2, r2, #13
 80081f6:	4313      	orrs	r3, r2
 80081f8:	e7d6      	b.n	80081a8 <__d2b+0x28>
 80081fa:	616c      	str	r4, [r5, #20]
 80081fc:	e7e7      	b.n	80081ce <__d2b+0x4e>
 80081fe:	a801      	add	r0, sp, #4
 8008200:	f7ff fd4c 	bl	8007c9c <__lo0bits>
 8008204:	2401      	movs	r4, #1
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	612c      	str	r4, [r5, #16]
 800820a:	616b      	str	r3, [r5, #20]
 800820c:	3020      	adds	r0, #32
 800820e:	e7e4      	b.n	80081da <__d2b+0x5a>
 8008210:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <__d2b+0xc0>)
 8008212:	18c0      	adds	r0, r0, r3
 8008214:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <__d2b+0xc4>)
 8008216:	6038      	str	r0, [r7, #0]
 8008218:	18e3      	adds	r3, r4, r3
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	18eb      	adds	r3, r5, r3
 800821e:	6958      	ldr	r0, [r3, #20]
 8008220:	f7ff fd22 	bl	8007c68 <__hi0bits>
 8008224:	0164      	lsls	r4, r4, #5
 8008226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008228:	1a24      	subs	r4, r4, r0
 800822a:	601c      	str	r4, [r3, #0]
 800822c:	e7df      	b.n	80081ee <__d2b+0x6e>
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	08009817 	.word	0x08009817
 8008234:	0000030a 	.word	0x0000030a
 8008238:	08009828 	.word	0x08009828
 800823c:	fffffbcd 	.word	0xfffffbcd
 8008240:	fffffbce 	.word	0xfffffbce
 8008244:	3fffffff 	.word	0x3fffffff

08008248 <_calloc_r>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	0c13      	lsrs	r3, r2, #16
 800824c:	0c0d      	lsrs	r5, r1, #16
 800824e:	d11e      	bne.n	800828e <_calloc_r+0x46>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10c      	bne.n	800826e <_calloc_r+0x26>
 8008254:	b289      	uxth	r1, r1
 8008256:	b294      	uxth	r4, r2
 8008258:	434c      	muls	r4, r1
 800825a:	0021      	movs	r1, r4
 800825c:	f000 f88c 	bl	8008378 <_malloc_r>
 8008260:	1e05      	subs	r5, r0, #0
 8008262:	d01b      	beq.n	800829c <_calloc_r+0x54>
 8008264:	0022      	movs	r2, r4
 8008266:	2100      	movs	r1, #0
 8008268:	f7fe f8f4 	bl	8006454 <memset>
 800826c:	e016      	b.n	800829c <_calloc_r+0x54>
 800826e:	1c1d      	adds	r5, r3, #0
 8008270:	1c0b      	adds	r3, r1, #0
 8008272:	b292      	uxth	r2, r2
 8008274:	b289      	uxth	r1, r1
 8008276:	b29c      	uxth	r4, r3
 8008278:	4351      	muls	r1, r2
 800827a:	b2ab      	uxth	r3, r5
 800827c:	4363      	muls	r3, r4
 800827e:	0c0c      	lsrs	r4, r1, #16
 8008280:	191c      	adds	r4, r3, r4
 8008282:	0c22      	lsrs	r2, r4, #16
 8008284:	d107      	bne.n	8008296 <_calloc_r+0x4e>
 8008286:	0424      	lsls	r4, r4, #16
 8008288:	b289      	uxth	r1, r1
 800828a:	430c      	orrs	r4, r1
 800828c:	e7e5      	b.n	800825a <_calloc_r+0x12>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <_calloc_r+0x4e>
 8008292:	1c13      	adds	r3, r2, #0
 8008294:	e7ed      	b.n	8008272 <_calloc_r+0x2a>
 8008296:	230c      	movs	r3, #12
 8008298:	2500      	movs	r5, #0
 800829a:	6003      	str	r3, [r0, #0]
 800829c:	0028      	movs	r0, r5
 800829e:	bd70      	pop	{r4, r5, r6, pc}

080082a0 <_free_r>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	0005      	movs	r5, r0
 80082a4:	2900      	cmp	r1, #0
 80082a6:	d010      	beq.n	80082ca <_free_r+0x2a>
 80082a8:	1f0c      	subs	r4, r1, #4
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	da00      	bge.n	80082b2 <_free_r+0x12>
 80082b0:	18e4      	adds	r4, r4, r3
 80082b2:	0028      	movs	r0, r5
 80082b4:	f000 fa9e 	bl	80087f4 <__malloc_lock>
 80082b8:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <_free_r+0x90>)
 80082ba:	6813      	ldr	r3, [r2, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d105      	bne.n	80082cc <_free_r+0x2c>
 80082c0:	6063      	str	r3, [r4, #4]
 80082c2:	6014      	str	r4, [r2, #0]
 80082c4:	0028      	movs	r0, r5
 80082c6:	f000 fa9d 	bl	8008804 <__malloc_unlock>
 80082ca:	bd70      	pop	{r4, r5, r6, pc}
 80082cc:	42a3      	cmp	r3, r4
 80082ce:	d908      	bls.n	80082e2 <_free_r+0x42>
 80082d0:	6821      	ldr	r1, [r4, #0]
 80082d2:	1860      	adds	r0, r4, r1
 80082d4:	4283      	cmp	r3, r0
 80082d6:	d1f3      	bne.n	80082c0 <_free_r+0x20>
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	1841      	adds	r1, r0, r1
 80082de:	6021      	str	r1, [r4, #0]
 80082e0:	e7ee      	b.n	80082c0 <_free_r+0x20>
 80082e2:	001a      	movs	r2, r3
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <_free_r+0x4e>
 80082ea:	42a3      	cmp	r3, r4
 80082ec:	d9f9      	bls.n	80082e2 <_free_r+0x42>
 80082ee:	6811      	ldr	r1, [r2, #0]
 80082f0:	1850      	adds	r0, r2, r1
 80082f2:	42a0      	cmp	r0, r4
 80082f4:	d10b      	bne.n	800830e <_free_r+0x6e>
 80082f6:	6820      	ldr	r0, [r4, #0]
 80082f8:	1809      	adds	r1, r1, r0
 80082fa:	1850      	adds	r0, r2, r1
 80082fc:	6011      	str	r1, [r2, #0]
 80082fe:	4283      	cmp	r3, r0
 8008300:	d1e0      	bne.n	80082c4 <_free_r+0x24>
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	1841      	adds	r1, r0, r1
 8008308:	6011      	str	r1, [r2, #0]
 800830a:	6053      	str	r3, [r2, #4]
 800830c:	e7da      	b.n	80082c4 <_free_r+0x24>
 800830e:	42a0      	cmp	r0, r4
 8008310:	d902      	bls.n	8008318 <_free_r+0x78>
 8008312:	230c      	movs	r3, #12
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	e7d5      	b.n	80082c4 <_free_r+0x24>
 8008318:	6821      	ldr	r1, [r4, #0]
 800831a:	1860      	adds	r0, r4, r1
 800831c:	4283      	cmp	r3, r0
 800831e:	d103      	bne.n	8008328 <_free_r+0x88>
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	1841      	adds	r1, r0, r1
 8008326:	6021      	str	r1, [r4, #0]
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	6054      	str	r4, [r2, #4]
 800832c:	e7ca      	b.n	80082c4 <_free_r+0x24>
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	200004c8 	.word	0x200004c8

08008334 <sbrk_aligned>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4e0f      	ldr	r6, [pc, #60]	; (8008374 <sbrk_aligned+0x40>)
 8008338:	000d      	movs	r5, r1
 800833a:	6831      	ldr	r1, [r6, #0]
 800833c:	0004      	movs	r4, r0
 800833e:	2900      	cmp	r1, #0
 8008340:	d102      	bne.n	8008348 <sbrk_aligned+0x14>
 8008342:	f000 f9f1 	bl	8008728 <_sbrk_r>
 8008346:	6030      	str	r0, [r6, #0]
 8008348:	0029      	movs	r1, r5
 800834a:	0020      	movs	r0, r4
 800834c:	f000 f9ec 	bl	8008728 <_sbrk_r>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d00a      	beq.n	800836a <sbrk_aligned+0x36>
 8008354:	2303      	movs	r3, #3
 8008356:	1cc5      	adds	r5, r0, #3
 8008358:	439d      	bics	r5, r3
 800835a:	42a8      	cmp	r0, r5
 800835c:	d007      	beq.n	800836e <sbrk_aligned+0x3a>
 800835e:	1a29      	subs	r1, r5, r0
 8008360:	0020      	movs	r0, r4
 8008362:	f000 f9e1 	bl	8008728 <_sbrk_r>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d101      	bne.n	800836e <sbrk_aligned+0x3a>
 800836a:	2501      	movs	r5, #1
 800836c:	426d      	negs	r5, r5
 800836e:	0028      	movs	r0, r5
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	200004cc 	.word	0x200004cc

08008378 <_malloc_r>:
 8008378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800837a:	2203      	movs	r2, #3
 800837c:	1ccb      	adds	r3, r1, #3
 800837e:	4393      	bics	r3, r2
 8008380:	3308      	adds	r3, #8
 8008382:	0006      	movs	r6, r0
 8008384:	001f      	movs	r7, r3
 8008386:	2b0c      	cmp	r3, #12
 8008388:	d232      	bcs.n	80083f0 <_malloc_r+0x78>
 800838a:	270c      	movs	r7, #12
 800838c:	42b9      	cmp	r1, r7
 800838e:	d831      	bhi.n	80083f4 <_malloc_r+0x7c>
 8008390:	0030      	movs	r0, r6
 8008392:	f000 fa2f 	bl	80087f4 <__malloc_lock>
 8008396:	4d32      	ldr	r5, [pc, #200]	; (8008460 <_malloc_r+0xe8>)
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	001c      	movs	r4, r3
 800839c:	2c00      	cmp	r4, #0
 800839e:	d12e      	bne.n	80083fe <_malloc_r+0x86>
 80083a0:	0039      	movs	r1, r7
 80083a2:	0030      	movs	r0, r6
 80083a4:	f7ff ffc6 	bl	8008334 <sbrk_aligned>
 80083a8:	0004      	movs	r4, r0
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	d11e      	bne.n	80083ec <_malloc_r+0x74>
 80083ae:	682c      	ldr	r4, [r5, #0]
 80083b0:	0025      	movs	r5, r4
 80083b2:	2d00      	cmp	r5, #0
 80083b4:	d14a      	bne.n	800844c <_malloc_r+0xd4>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	0029      	movs	r1, r5
 80083ba:	18e3      	adds	r3, r4, r3
 80083bc:	0030      	movs	r0, r6
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	f000 f9b2 	bl	8008728 <_sbrk_r>
 80083c4:	9b01      	ldr	r3, [sp, #4]
 80083c6:	4283      	cmp	r3, r0
 80083c8:	d143      	bne.n	8008452 <_malloc_r+0xda>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	3703      	adds	r7, #3
 80083ce:	1aff      	subs	r7, r7, r3
 80083d0:	2303      	movs	r3, #3
 80083d2:	439f      	bics	r7, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	2f0c      	cmp	r7, #12
 80083d8:	d200      	bcs.n	80083dc <_malloc_r+0x64>
 80083da:	270c      	movs	r7, #12
 80083dc:	0039      	movs	r1, r7
 80083de:	0030      	movs	r0, r6
 80083e0:	f7ff ffa8 	bl	8008334 <sbrk_aligned>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d034      	beq.n	8008452 <_malloc_r+0xda>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	19df      	adds	r7, r3, r7
 80083ec:	6027      	str	r7, [r4, #0]
 80083ee:	e013      	b.n	8008418 <_malloc_r+0xa0>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dacb      	bge.n	800838c <_malloc_r+0x14>
 80083f4:	230c      	movs	r3, #12
 80083f6:	2500      	movs	r5, #0
 80083f8:	6033      	str	r3, [r6, #0]
 80083fa:	0028      	movs	r0, r5
 80083fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	1bd1      	subs	r1, r2, r7
 8008402:	d420      	bmi.n	8008446 <_malloc_r+0xce>
 8008404:	290b      	cmp	r1, #11
 8008406:	d917      	bls.n	8008438 <_malloc_r+0xc0>
 8008408:	19e2      	adds	r2, r4, r7
 800840a:	6027      	str	r7, [r4, #0]
 800840c:	42a3      	cmp	r3, r4
 800840e:	d111      	bne.n	8008434 <_malloc_r+0xbc>
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	6011      	str	r1, [r2, #0]
 8008416:	6053      	str	r3, [r2, #4]
 8008418:	0030      	movs	r0, r6
 800841a:	0025      	movs	r5, r4
 800841c:	f000 f9f2 	bl	8008804 <__malloc_unlock>
 8008420:	2207      	movs	r2, #7
 8008422:	350b      	adds	r5, #11
 8008424:	1d23      	adds	r3, r4, #4
 8008426:	4395      	bics	r5, r2
 8008428:	1aea      	subs	r2, r5, r3
 800842a:	429d      	cmp	r5, r3
 800842c:	d0e5      	beq.n	80083fa <_malloc_r+0x82>
 800842e:	1b5b      	subs	r3, r3, r5
 8008430:	50a3      	str	r3, [r4, r2]
 8008432:	e7e2      	b.n	80083fa <_malloc_r+0x82>
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	e7ec      	b.n	8008412 <_malloc_r+0x9a>
 8008438:	6862      	ldr	r2, [r4, #4]
 800843a:	42a3      	cmp	r3, r4
 800843c:	d101      	bne.n	8008442 <_malloc_r+0xca>
 800843e:	602a      	str	r2, [r5, #0]
 8008440:	e7ea      	b.n	8008418 <_malloc_r+0xa0>
 8008442:	605a      	str	r2, [r3, #4]
 8008444:	e7e8      	b.n	8008418 <_malloc_r+0xa0>
 8008446:	0023      	movs	r3, r4
 8008448:	6864      	ldr	r4, [r4, #4]
 800844a:	e7a7      	b.n	800839c <_malloc_r+0x24>
 800844c:	002c      	movs	r4, r5
 800844e:	686d      	ldr	r5, [r5, #4]
 8008450:	e7af      	b.n	80083b2 <_malloc_r+0x3a>
 8008452:	230c      	movs	r3, #12
 8008454:	0030      	movs	r0, r6
 8008456:	6033      	str	r3, [r6, #0]
 8008458:	f000 f9d4 	bl	8008804 <__malloc_unlock>
 800845c:	e7cd      	b.n	80083fa <_malloc_r+0x82>
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	200004c8 	.word	0x200004c8

08008464 <__ssputs_r>:
 8008464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008466:	688e      	ldr	r6, [r1, #8]
 8008468:	b085      	sub	sp, #20
 800846a:	0007      	movs	r7, r0
 800846c:	000c      	movs	r4, r1
 800846e:	9203      	str	r2, [sp, #12]
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	429e      	cmp	r6, r3
 8008474:	d83c      	bhi.n	80084f0 <__ssputs_r+0x8c>
 8008476:	2390      	movs	r3, #144	; 0x90
 8008478:	898a      	ldrh	r2, [r1, #12]
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	421a      	tst	r2, r3
 800847e:	d034      	beq.n	80084ea <__ssputs_r+0x86>
 8008480:	6909      	ldr	r1, [r1, #16]
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	6960      	ldr	r0, [r4, #20]
 8008486:	1a5b      	subs	r3, r3, r1
 8008488:	9302      	str	r3, [sp, #8]
 800848a:	2303      	movs	r3, #3
 800848c:	4343      	muls	r3, r0
 800848e:	0fdd      	lsrs	r5, r3, #31
 8008490:	18ed      	adds	r5, r5, r3
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	9802      	ldr	r0, [sp, #8]
 8008496:	3301      	adds	r3, #1
 8008498:	181b      	adds	r3, r3, r0
 800849a:	106d      	asrs	r5, r5, #1
 800849c:	42ab      	cmp	r3, r5
 800849e:	d900      	bls.n	80084a2 <__ssputs_r+0x3e>
 80084a0:	001d      	movs	r5, r3
 80084a2:	0553      	lsls	r3, r2, #21
 80084a4:	d532      	bpl.n	800850c <__ssputs_r+0xa8>
 80084a6:	0029      	movs	r1, r5
 80084a8:	0038      	movs	r0, r7
 80084aa:	f7ff ff65 	bl	8008378 <_malloc_r>
 80084ae:	1e06      	subs	r6, r0, #0
 80084b0:	d109      	bne.n	80084c6 <__ssputs_r+0x62>
 80084b2:	230c      	movs	r3, #12
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	2340      	movs	r3, #64	; 0x40
 80084b8:	2001      	movs	r0, #1
 80084ba:	89a2      	ldrh	r2, [r4, #12]
 80084bc:	4240      	negs	r0, r0
 80084be:	4313      	orrs	r3, r2
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	b005      	add	sp, #20
 80084c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c6:	9a02      	ldr	r2, [sp, #8]
 80084c8:	6921      	ldr	r1, [r4, #16]
 80084ca:	f7ff fb18 	bl	8007afe <memcpy>
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	4a14      	ldr	r2, [pc, #80]	; (8008524 <__ssputs_r+0xc0>)
 80084d2:	401a      	ands	r2, r3
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	4313      	orrs	r3, r2
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	9b02      	ldr	r3, [sp, #8]
 80084dc:	6126      	str	r6, [r4, #16]
 80084de:	18f6      	adds	r6, r6, r3
 80084e0:	6026      	str	r6, [r4, #0]
 80084e2:	6165      	str	r5, [r4, #20]
 80084e4:	9e01      	ldr	r6, [sp, #4]
 80084e6:	1aed      	subs	r5, r5, r3
 80084e8:	60a5      	str	r5, [r4, #8]
 80084ea:	9b01      	ldr	r3, [sp, #4]
 80084ec:	429e      	cmp	r6, r3
 80084ee:	d900      	bls.n	80084f2 <__ssputs_r+0x8e>
 80084f0:	9e01      	ldr	r6, [sp, #4]
 80084f2:	0032      	movs	r2, r6
 80084f4:	9903      	ldr	r1, [sp, #12]
 80084f6:	6820      	ldr	r0, [r4, #0]
 80084f8:	f000 f968 	bl	80087cc <memmove>
 80084fc:	68a3      	ldr	r3, [r4, #8]
 80084fe:	2000      	movs	r0, #0
 8008500:	1b9b      	subs	r3, r3, r6
 8008502:	60a3      	str	r3, [r4, #8]
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	199e      	adds	r6, r3, r6
 8008508:	6026      	str	r6, [r4, #0]
 800850a:	e7da      	b.n	80084c2 <__ssputs_r+0x5e>
 800850c:	002a      	movs	r2, r5
 800850e:	0038      	movs	r0, r7
 8008510:	f000 f980 	bl	8008814 <_realloc_r>
 8008514:	1e06      	subs	r6, r0, #0
 8008516:	d1e0      	bne.n	80084da <__ssputs_r+0x76>
 8008518:	0038      	movs	r0, r7
 800851a:	6921      	ldr	r1, [r4, #16]
 800851c:	f7ff fec0 	bl	80082a0 <_free_r>
 8008520:	e7c7      	b.n	80084b2 <__ssputs_r+0x4e>
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	fffffb7f 	.word	0xfffffb7f

08008528 <_svfiprintf_r>:
 8008528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800852a:	b0a1      	sub	sp, #132	; 0x84
 800852c:	9003      	str	r0, [sp, #12]
 800852e:	001d      	movs	r5, r3
 8008530:	898b      	ldrh	r3, [r1, #12]
 8008532:	000f      	movs	r7, r1
 8008534:	0016      	movs	r6, r2
 8008536:	061b      	lsls	r3, r3, #24
 8008538:	d511      	bpl.n	800855e <_svfiprintf_r+0x36>
 800853a:	690b      	ldr	r3, [r1, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10e      	bne.n	800855e <_svfiprintf_r+0x36>
 8008540:	2140      	movs	r1, #64	; 0x40
 8008542:	f7ff ff19 	bl	8008378 <_malloc_r>
 8008546:	6038      	str	r0, [r7, #0]
 8008548:	6138      	str	r0, [r7, #16]
 800854a:	2800      	cmp	r0, #0
 800854c:	d105      	bne.n	800855a <_svfiprintf_r+0x32>
 800854e:	230c      	movs	r3, #12
 8008550:	9a03      	ldr	r2, [sp, #12]
 8008552:	3801      	subs	r0, #1
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	b021      	add	sp, #132	; 0x84
 8008558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855a:	2340      	movs	r3, #64	; 0x40
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	2300      	movs	r3, #0
 8008560:	ac08      	add	r4, sp, #32
 8008562:	6163      	str	r3, [r4, #20]
 8008564:	3320      	adds	r3, #32
 8008566:	7663      	strb	r3, [r4, #25]
 8008568:	3310      	adds	r3, #16
 800856a:	76a3      	strb	r3, [r4, #26]
 800856c:	9507      	str	r5, [sp, #28]
 800856e:	0035      	movs	r5, r6
 8008570:	782b      	ldrb	r3, [r5, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <_svfiprintf_r+0x52>
 8008576:	2b25      	cmp	r3, #37	; 0x25
 8008578:	d147      	bne.n	800860a <_svfiprintf_r+0xe2>
 800857a:	1bab      	subs	r3, r5, r6
 800857c:	9305      	str	r3, [sp, #20]
 800857e:	42b5      	cmp	r5, r6
 8008580:	d00c      	beq.n	800859c <_svfiprintf_r+0x74>
 8008582:	0032      	movs	r2, r6
 8008584:	0039      	movs	r1, r7
 8008586:	9803      	ldr	r0, [sp, #12]
 8008588:	f7ff ff6c 	bl	8008464 <__ssputs_r>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d100      	bne.n	8008592 <_svfiprintf_r+0x6a>
 8008590:	e0ae      	b.n	80086f0 <_svfiprintf_r+0x1c8>
 8008592:	6962      	ldr	r2, [r4, #20]
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	4694      	mov	ip, r2
 8008598:	4463      	add	r3, ip
 800859a:	6163      	str	r3, [r4, #20]
 800859c:	782b      	ldrb	r3, [r5, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d100      	bne.n	80085a4 <_svfiprintf_r+0x7c>
 80085a2:	e0a5      	b.n	80086f0 <_svfiprintf_r+0x1c8>
 80085a4:	2201      	movs	r2, #1
 80085a6:	2300      	movs	r3, #0
 80085a8:	4252      	negs	r2, r2
 80085aa:	6062      	str	r2, [r4, #4]
 80085ac:	a904      	add	r1, sp, #16
 80085ae:	3254      	adds	r2, #84	; 0x54
 80085b0:	1852      	adds	r2, r2, r1
 80085b2:	1c6e      	adds	r6, r5, #1
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	60e3      	str	r3, [r4, #12]
 80085b8:	60a3      	str	r3, [r4, #8]
 80085ba:	7013      	strb	r3, [r2, #0]
 80085bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80085be:	2205      	movs	r2, #5
 80085c0:	7831      	ldrb	r1, [r6, #0]
 80085c2:	4854      	ldr	r0, [pc, #336]	; (8008714 <_svfiprintf_r+0x1ec>)
 80085c4:	f7ff fa90 	bl	8007ae8 <memchr>
 80085c8:	1c75      	adds	r5, r6, #1
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d11f      	bne.n	800860e <_svfiprintf_r+0xe6>
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	06d3      	lsls	r3, r2, #27
 80085d2:	d504      	bpl.n	80085de <_svfiprintf_r+0xb6>
 80085d4:	2353      	movs	r3, #83	; 0x53
 80085d6:	a904      	add	r1, sp, #16
 80085d8:	185b      	adds	r3, r3, r1
 80085da:	2120      	movs	r1, #32
 80085dc:	7019      	strb	r1, [r3, #0]
 80085de:	0713      	lsls	r3, r2, #28
 80085e0:	d504      	bpl.n	80085ec <_svfiprintf_r+0xc4>
 80085e2:	2353      	movs	r3, #83	; 0x53
 80085e4:	a904      	add	r1, sp, #16
 80085e6:	185b      	adds	r3, r3, r1
 80085e8:	212b      	movs	r1, #43	; 0x2b
 80085ea:	7019      	strb	r1, [r3, #0]
 80085ec:	7833      	ldrb	r3, [r6, #0]
 80085ee:	2b2a      	cmp	r3, #42	; 0x2a
 80085f0:	d016      	beq.n	8008620 <_svfiprintf_r+0xf8>
 80085f2:	0035      	movs	r5, r6
 80085f4:	2100      	movs	r1, #0
 80085f6:	200a      	movs	r0, #10
 80085f8:	68e3      	ldr	r3, [r4, #12]
 80085fa:	782a      	ldrb	r2, [r5, #0]
 80085fc:	1c6e      	adds	r6, r5, #1
 80085fe:	3a30      	subs	r2, #48	; 0x30
 8008600:	2a09      	cmp	r2, #9
 8008602:	d94e      	bls.n	80086a2 <_svfiprintf_r+0x17a>
 8008604:	2900      	cmp	r1, #0
 8008606:	d111      	bne.n	800862c <_svfiprintf_r+0x104>
 8008608:	e017      	b.n	800863a <_svfiprintf_r+0x112>
 800860a:	3501      	adds	r5, #1
 800860c:	e7b0      	b.n	8008570 <_svfiprintf_r+0x48>
 800860e:	4b41      	ldr	r3, [pc, #260]	; (8008714 <_svfiprintf_r+0x1ec>)
 8008610:	6822      	ldr	r2, [r4, #0]
 8008612:	1ac0      	subs	r0, r0, r3
 8008614:	2301      	movs	r3, #1
 8008616:	4083      	lsls	r3, r0
 8008618:	4313      	orrs	r3, r2
 800861a:	002e      	movs	r6, r5
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	e7ce      	b.n	80085be <_svfiprintf_r+0x96>
 8008620:	9b07      	ldr	r3, [sp, #28]
 8008622:	1d19      	adds	r1, r3, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	9107      	str	r1, [sp, #28]
 8008628:	2b00      	cmp	r3, #0
 800862a:	db01      	blt.n	8008630 <_svfiprintf_r+0x108>
 800862c:	930b      	str	r3, [sp, #44]	; 0x2c
 800862e:	e004      	b.n	800863a <_svfiprintf_r+0x112>
 8008630:	425b      	negs	r3, r3
 8008632:	60e3      	str	r3, [r4, #12]
 8008634:	2302      	movs	r3, #2
 8008636:	4313      	orrs	r3, r2
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	782b      	ldrb	r3, [r5, #0]
 800863c:	2b2e      	cmp	r3, #46	; 0x2e
 800863e:	d10a      	bne.n	8008656 <_svfiprintf_r+0x12e>
 8008640:	786b      	ldrb	r3, [r5, #1]
 8008642:	2b2a      	cmp	r3, #42	; 0x2a
 8008644:	d135      	bne.n	80086b2 <_svfiprintf_r+0x18a>
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	3502      	adds	r5, #2
 800864a:	1d1a      	adds	r2, r3, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	9207      	str	r2, [sp, #28]
 8008650:	2b00      	cmp	r3, #0
 8008652:	db2b      	blt.n	80086ac <_svfiprintf_r+0x184>
 8008654:	9309      	str	r3, [sp, #36]	; 0x24
 8008656:	4e30      	ldr	r6, [pc, #192]	; (8008718 <_svfiprintf_r+0x1f0>)
 8008658:	2203      	movs	r2, #3
 800865a:	0030      	movs	r0, r6
 800865c:	7829      	ldrb	r1, [r5, #0]
 800865e:	f7ff fa43 	bl	8007ae8 <memchr>
 8008662:	2800      	cmp	r0, #0
 8008664:	d006      	beq.n	8008674 <_svfiprintf_r+0x14c>
 8008666:	2340      	movs	r3, #64	; 0x40
 8008668:	1b80      	subs	r0, r0, r6
 800866a:	4083      	lsls	r3, r0
 800866c:	6822      	ldr	r2, [r4, #0]
 800866e:	3501      	adds	r5, #1
 8008670:	4313      	orrs	r3, r2
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	7829      	ldrb	r1, [r5, #0]
 8008676:	2206      	movs	r2, #6
 8008678:	4828      	ldr	r0, [pc, #160]	; (800871c <_svfiprintf_r+0x1f4>)
 800867a:	1c6e      	adds	r6, r5, #1
 800867c:	7621      	strb	r1, [r4, #24]
 800867e:	f7ff fa33 	bl	8007ae8 <memchr>
 8008682:	2800      	cmp	r0, #0
 8008684:	d03c      	beq.n	8008700 <_svfiprintf_r+0x1d8>
 8008686:	4b26      	ldr	r3, [pc, #152]	; (8008720 <_svfiprintf_r+0x1f8>)
 8008688:	2b00      	cmp	r3, #0
 800868a:	d125      	bne.n	80086d8 <_svfiprintf_r+0x1b0>
 800868c:	2207      	movs	r2, #7
 800868e:	9b07      	ldr	r3, [sp, #28]
 8008690:	3307      	adds	r3, #7
 8008692:	4393      	bics	r3, r2
 8008694:	3308      	adds	r3, #8
 8008696:	9307      	str	r3, [sp, #28]
 8008698:	6963      	ldr	r3, [r4, #20]
 800869a:	9a04      	ldr	r2, [sp, #16]
 800869c:	189b      	adds	r3, r3, r2
 800869e:	6163      	str	r3, [r4, #20]
 80086a0:	e765      	b.n	800856e <_svfiprintf_r+0x46>
 80086a2:	4343      	muls	r3, r0
 80086a4:	0035      	movs	r5, r6
 80086a6:	2101      	movs	r1, #1
 80086a8:	189b      	adds	r3, r3, r2
 80086aa:	e7a6      	b.n	80085fa <_svfiprintf_r+0xd2>
 80086ac:	2301      	movs	r3, #1
 80086ae:	425b      	negs	r3, r3
 80086b0:	e7d0      	b.n	8008654 <_svfiprintf_r+0x12c>
 80086b2:	2300      	movs	r3, #0
 80086b4:	200a      	movs	r0, #10
 80086b6:	001a      	movs	r2, r3
 80086b8:	3501      	adds	r5, #1
 80086ba:	6063      	str	r3, [r4, #4]
 80086bc:	7829      	ldrb	r1, [r5, #0]
 80086be:	1c6e      	adds	r6, r5, #1
 80086c0:	3930      	subs	r1, #48	; 0x30
 80086c2:	2909      	cmp	r1, #9
 80086c4:	d903      	bls.n	80086ce <_svfiprintf_r+0x1a6>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0c5      	beq.n	8008656 <_svfiprintf_r+0x12e>
 80086ca:	9209      	str	r2, [sp, #36]	; 0x24
 80086cc:	e7c3      	b.n	8008656 <_svfiprintf_r+0x12e>
 80086ce:	4342      	muls	r2, r0
 80086d0:	0035      	movs	r5, r6
 80086d2:	2301      	movs	r3, #1
 80086d4:	1852      	adds	r2, r2, r1
 80086d6:	e7f1      	b.n	80086bc <_svfiprintf_r+0x194>
 80086d8:	ab07      	add	r3, sp, #28
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	003a      	movs	r2, r7
 80086de:	0021      	movs	r1, r4
 80086e0:	4b10      	ldr	r3, [pc, #64]	; (8008724 <_svfiprintf_r+0x1fc>)
 80086e2:	9803      	ldr	r0, [sp, #12]
 80086e4:	f7fd ff68 	bl	80065b8 <_printf_float>
 80086e8:	9004      	str	r0, [sp, #16]
 80086ea:	9b04      	ldr	r3, [sp, #16]
 80086ec:	3301      	adds	r3, #1
 80086ee:	d1d3      	bne.n	8008698 <_svfiprintf_r+0x170>
 80086f0:	89bb      	ldrh	r3, [r7, #12]
 80086f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80086f4:	065b      	lsls	r3, r3, #25
 80086f6:	d400      	bmi.n	80086fa <_svfiprintf_r+0x1d2>
 80086f8:	e72d      	b.n	8008556 <_svfiprintf_r+0x2e>
 80086fa:	2001      	movs	r0, #1
 80086fc:	4240      	negs	r0, r0
 80086fe:	e72a      	b.n	8008556 <_svfiprintf_r+0x2e>
 8008700:	ab07      	add	r3, sp, #28
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	003a      	movs	r2, r7
 8008706:	0021      	movs	r1, r4
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <_svfiprintf_r+0x1fc>)
 800870a:	9803      	ldr	r0, [sp, #12]
 800870c:	f7fe fa06 	bl	8006b1c <_printf_i>
 8008710:	e7ea      	b.n	80086e8 <_svfiprintf_r+0x1c0>
 8008712:	46c0      	nop			; (mov r8, r8)
 8008714:	08009984 	.word	0x08009984
 8008718:	0800998a 	.word	0x0800998a
 800871c:	0800998e 	.word	0x0800998e
 8008720:	080065b9 	.word	0x080065b9
 8008724:	08008465 	.word	0x08008465

08008728 <_sbrk_r>:
 8008728:	2300      	movs	r3, #0
 800872a:	b570      	push	{r4, r5, r6, lr}
 800872c:	4d06      	ldr	r5, [pc, #24]	; (8008748 <_sbrk_r+0x20>)
 800872e:	0004      	movs	r4, r0
 8008730:	0008      	movs	r0, r1
 8008732:	602b      	str	r3, [r5, #0]
 8008734:	f7fa ff66 	bl	8003604 <_sbrk>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d103      	bne.n	8008744 <_sbrk_r+0x1c>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d000      	beq.n	8008744 <_sbrk_r+0x1c>
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	bd70      	pop	{r4, r5, r6, pc}
 8008746:	46c0      	nop			; (mov r8, r8)
 8008748:	200004d0 	.word	0x200004d0

0800874c <__assert_func>:
 800874c:	b530      	push	{r4, r5, lr}
 800874e:	0014      	movs	r4, r2
 8008750:	001a      	movs	r2, r3
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <__assert_func+0x2c>)
 8008754:	0005      	movs	r5, r0
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	b085      	sub	sp, #20
 800875a:	68d8      	ldr	r0, [r3, #12]
 800875c:	4b07      	ldr	r3, [pc, #28]	; (800877c <__assert_func+0x30>)
 800875e:	2c00      	cmp	r4, #0
 8008760:	d101      	bne.n	8008766 <__assert_func+0x1a>
 8008762:	4b07      	ldr	r3, [pc, #28]	; (8008780 <__assert_func+0x34>)
 8008764:	001c      	movs	r4, r3
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	9100      	str	r1, [sp, #0]
 800876a:	002b      	movs	r3, r5
 800876c:	4905      	ldr	r1, [pc, #20]	; (8008784 <__assert_func+0x38>)
 800876e:	9402      	str	r4, [sp, #8]
 8008770:	f000 f80a 	bl	8008788 <fiprintf>
 8008774:	f000 faba 	bl	8008cec <abort>
 8008778:	20000080 	.word	0x20000080
 800877c:	08009995 	.word	0x08009995
 8008780:	080099d0 	.word	0x080099d0
 8008784:	080099a2 	.word	0x080099a2

08008788 <fiprintf>:
 8008788:	b40e      	push	{r1, r2, r3}
 800878a:	b503      	push	{r0, r1, lr}
 800878c:	0001      	movs	r1, r0
 800878e:	ab03      	add	r3, sp, #12
 8008790:	4804      	ldr	r0, [pc, #16]	; (80087a4 <fiprintf+0x1c>)
 8008792:	cb04      	ldmia	r3!, {r2}
 8008794:	6800      	ldr	r0, [r0, #0]
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	f000 f892 	bl	80088c0 <_vfiprintf_r>
 800879c:	b002      	add	sp, #8
 800879e:	bc08      	pop	{r3}
 80087a0:	b003      	add	sp, #12
 80087a2:	4718      	bx	r3
 80087a4:	20000080 	.word	0x20000080

080087a8 <__ascii_mbtowc>:
 80087a8:	b082      	sub	sp, #8
 80087aa:	2900      	cmp	r1, #0
 80087ac:	d100      	bne.n	80087b0 <__ascii_mbtowc+0x8>
 80087ae:	a901      	add	r1, sp, #4
 80087b0:	1e10      	subs	r0, r2, #0
 80087b2:	d006      	beq.n	80087c2 <__ascii_mbtowc+0x1a>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d006      	beq.n	80087c6 <__ascii_mbtowc+0x1e>
 80087b8:	7813      	ldrb	r3, [r2, #0]
 80087ba:	600b      	str	r3, [r1, #0]
 80087bc:	7810      	ldrb	r0, [r2, #0]
 80087be:	1e43      	subs	r3, r0, #1
 80087c0:	4198      	sbcs	r0, r3
 80087c2:	b002      	add	sp, #8
 80087c4:	4770      	bx	lr
 80087c6:	2002      	movs	r0, #2
 80087c8:	4240      	negs	r0, r0
 80087ca:	e7fa      	b.n	80087c2 <__ascii_mbtowc+0x1a>

080087cc <memmove>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	4288      	cmp	r0, r1
 80087d0:	d902      	bls.n	80087d8 <memmove+0xc>
 80087d2:	188b      	adds	r3, r1, r2
 80087d4:	4298      	cmp	r0, r3
 80087d6:	d303      	bcc.n	80087e0 <memmove+0x14>
 80087d8:	2300      	movs	r3, #0
 80087da:	e007      	b.n	80087ec <memmove+0x20>
 80087dc:	5c8b      	ldrb	r3, [r1, r2]
 80087de:	5483      	strb	r3, [r0, r2]
 80087e0:	3a01      	subs	r2, #1
 80087e2:	d2fb      	bcs.n	80087dc <memmove+0x10>
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	5ccc      	ldrb	r4, [r1, r3]
 80087e8:	54c4      	strb	r4, [r0, r3]
 80087ea:	3301      	adds	r3, #1
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d1fa      	bne.n	80087e6 <memmove+0x1a>
 80087f0:	e7f8      	b.n	80087e4 <memmove+0x18>
	...

080087f4 <__malloc_lock>:
 80087f4:	b510      	push	{r4, lr}
 80087f6:	4802      	ldr	r0, [pc, #8]	; (8008800 <__malloc_lock+0xc>)
 80087f8:	f000 fc4f 	bl	800909a <__retarget_lock_acquire_recursive>
 80087fc:	bd10      	pop	{r4, pc}
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	200004d4 	.word	0x200004d4

08008804 <__malloc_unlock>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4802      	ldr	r0, [pc, #8]	; (8008810 <__malloc_unlock+0xc>)
 8008808:	f000 fc48 	bl	800909c <__retarget_lock_release_recursive>
 800880c:	bd10      	pop	{r4, pc}
 800880e:	46c0      	nop			; (mov r8, r8)
 8008810:	200004d4 	.word	0x200004d4

08008814 <_realloc_r>:
 8008814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008816:	0007      	movs	r7, r0
 8008818:	000e      	movs	r6, r1
 800881a:	0014      	movs	r4, r2
 800881c:	2900      	cmp	r1, #0
 800881e:	d105      	bne.n	800882c <_realloc_r+0x18>
 8008820:	0011      	movs	r1, r2
 8008822:	f7ff fda9 	bl	8008378 <_malloc_r>
 8008826:	0005      	movs	r5, r0
 8008828:	0028      	movs	r0, r5
 800882a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800882c:	2a00      	cmp	r2, #0
 800882e:	d103      	bne.n	8008838 <_realloc_r+0x24>
 8008830:	f7ff fd36 	bl	80082a0 <_free_r>
 8008834:	0025      	movs	r5, r4
 8008836:	e7f7      	b.n	8008828 <_realloc_r+0x14>
 8008838:	f000 fc9e 	bl	8009178 <_malloc_usable_size_r>
 800883c:	9001      	str	r0, [sp, #4]
 800883e:	4284      	cmp	r4, r0
 8008840:	d803      	bhi.n	800884a <_realloc_r+0x36>
 8008842:	0035      	movs	r5, r6
 8008844:	0843      	lsrs	r3, r0, #1
 8008846:	42a3      	cmp	r3, r4
 8008848:	d3ee      	bcc.n	8008828 <_realloc_r+0x14>
 800884a:	0021      	movs	r1, r4
 800884c:	0038      	movs	r0, r7
 800884e:	f7ff fd93 	bl	8008378 <_malloc_r>
 8008852:	1e05      	subs	r5, r0, #0
 8008854:	d0e8      	beq.n	8008828 <_realloc_r+0x14>
 8008856:	9b01      	ldr	r3, [sp, #4]
 8008858:	0022      	movs	r2, r4
 800885a:	429c      	cmp	r4, r3
 800885c:	d900      	bls.n	8008860 <_realloc_r+0x4c>
 800885e:	001a      	movs	r2, r3
 8008860:	0031      	movs	r1, r6
 8008862:	0028      	movs	r0, r5
 8008864:	f7ff f94b 	bl	8007afe <memcpy>
 8008868:	0031      	movs	r1, r6
 800886a:	0038      	movs	r0, r7
 800886c:	f7ff fd18 	bl	80082a0 <_free_r>
 8008870:	e7da      	b.n	8008828 <_realloc_r+0x14>

08008872 <__sfputc_r>:
 8008872:	6893      	ldr	r3, [r2, #8]
 8008874:	b510      	push	{r4, lr}
 8008876:	3b01      	subs	r3, #1
 8008878:	6093      	str	r3, [r2, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	da04      	bge.n	8008888 <__sfputc_r+0x16>
 800887e:	6994      	ldr	r4, [r2, #24]
 8008880:	42a3      	cmp	r3, r4
 8008882:	db07      	blt.n	8008894 <__sfputc_r+0x22>
 8008884:	290a      	cmp	r1, #10
 8008886:	d005      	beq.n	8008894 <__sfputc_r+0x22>
 8008888:	6813      	ldr	r3, [r2, #0]
 800888a:	1c58      	adds	r0, r3, #1
 800888c:	6010      	str	r0, [r2, #0]
 800888e:	7019      	strb	r1, [r3, #0]
 8008890:	0008      	movs	r0, r1
 8008892:	bd10      	pop	{r4, pc}
 8008894:	f000 f94e 	bl	8008b34 <__swbuf_r>
 8008898:	0001      	movs	r1, r0
 800889a:	e7f9      	b.n	8008890 <__sfputc_r+0x1e>

0800889c <__sfputs_r>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	0006      	movs	r6, r0
 80088a0:	000f      	movs	r7, r1
 80088a2:	0014      	movs	r4, r2
 80088a4:	18d5      	adds	r5, r2, r3
 80088a6:	42ac      	cmp	r4, r5
 80088a8:	d101      	bne.n	80088ae <__sfputs_r+0x12>
 80088aa:	2000      	movs	r0, #0
 80088ac:	e007      	b.n	80088be <__sfputs_r+0x22>
 80088ae:	7821      	ldrb	r1, [r4, #0]
 80088b0:	003a      	movs	r2, r7
 80088b2:	0030      	movs	r0, r6
 80088b4:	f7ff ffdd 	bl	8008872 <__sfputc_r>
 80088b8:	3401      	adds	r4, #1
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	d1f3      	bne.n	80088a6 <__sfputs_r+0xa>
 80088be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088c0 <_vfiprintf_r>:
 80088c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c2:	b0a1      	sub	sp, #132	; 0x84
 80088c4:	0006      	movs	r6, r0
 80088c6:	000c      	movs	r4, r1
 80088c8:	001f      	movs	r7, r3
 80088ca:	9203      	str	r2, [sp, #12]
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d004      	beq.n	80088da <_vfiprintf_r+0x1a>
 80088d0:	6983      	ldr	r3, [r0, #24]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <_vfiprintf_r+0x1a>
 80088d6:	f000 fb3f 	bl	8008f58 <__sinit>
 80088da:	4b8e      	ldr	r3, [pc, #568]	; (8008b14 <_vfiprintf_r+0x254>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	d11c      	bne.n	800891a <_vfiprintf_r+0x5a>
 80088e0:	6874      	ldr	r4, [r6, #4]
 80088e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088e4:	07db      	lsls	r3, r3, #31
 80088e6:	d405      	bmi.n	80088f4 <_vfiprintf_r+0x34>
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	059b      	lsls	r3, r3, #22
 80088ec:	d402      	bmi.n	80088f4 <_vfiprintf_r+0x34>
 80088ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f0:	f000 fbd3 	bl	800909a <__retarget_lock_acquire_recursive>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	071b      	lsls	r3, r3, #28
 80088f8:	d502      	bpl.n	8008900 <_vfiprintf_r+0x40>
 80088fa:	6923      	ldr	r3, [r4, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d11d      	bne.n	800893c <_vfiprintf_r+0x7c>
 8008900:	0021      	movs	r1, r4
 8008902:	0030      	movs	r0, r6
 8008904:	f000 f97a 	bl	8008bfc <__swsetup_r>
 8008908:	2800      	cmp	r0, #0
 800890a:	d017      	beq.n	800893c <_vfiprintf_r+0x7c>
 800890c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800890e:	07db      	lsls	r3, r3, #31
 8008910:	d50d      	bpl.n	800892e <_vfiprintf_r+0x6e>
 8008912:	2001      	movs	r0, #1
 8008914:	4240      	negs	r0, r0
 8008916:	b021      	add	sp, #132	; 0x84
 8008918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800891a:	4b7f      	ldr	r3, [pc, #508]	; (8008b18 <_vfiprintf_r+0x258>)
 800891c:	429c      	cmp	r4, r3
 800891e:	d101      	bne.n	8008924 <_vfiprintf_r+0x64>
 8008920:	68b4      	ldr	r4, [r6, #8]
 8008922:	e7de      	b.n	80088e2 <_vfiprintf_r+0x22>
 8008924:	4b7d      	ldr	r3, [pc, #500]	; (8008b1c <_vfiprintf_r+0x25c>)
 8008926:	429c      	cmp	r4, r3
 8008928:	d1db      	bne.n	80088e2 <_vfiprintf_r+0x22>
 800892a:	68f4      	ldr	r4, [r6, #12]
 800892c:	e7d9      	b.n	80088e2 <_vfiprintf_r+0x22>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	059b      	lsls	r3, r3, #22
 8008932:	d4ee      	bmi.n	8008912 <_vfiprintf_r+0x52>
 8008934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008936:	f000 fbb1 	bl	800909c <__retarget_lock_release_recursive>
 800893a:	e7ea      	b.n	8008912 <_vfiprintf_r+0x52>
 800893c:	2300      	movs	r3, #0
 800893e:	ad08      	add	r5, sp, #32
 8008940:	616b      	str	r3, [r5, #20]
 8008942:	3320      	adds	r3, #32
 8008944:	766b      	strb	r3, [r5, #25]
 8008946:	3310      	adds	r3, #16
 8008948:	76ab      	strb	r3, [r5, #26]
 800894a:	9707      	str	r7, [sp, #28]
 800894c:	9f03      	ldr	r7, [sp, #12]
 800894e:	783b      	ldrb	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <_vfiprintf_r+0x98>
 8008954:	2b25      	cmp	r3, #37	; 0x25
 8008956:	d14e      	bne.n	80089f6 <_vfiprintf_r+0x136>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	1afb      	subs	r3, r7, r3
 800895c:	9305      	str	r3, [sp, #20]
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	429f      	cmp	r7, r3
 8008962:	d00d      	beq.n	8008980 <_vfiprintf_r+0xc0>
 8008964:	9b05      	ldr	r3, [sp, #20]
 8008966:	0021      	movs	r1, r4
 8008968:	0030      	movs	r0, r6
 800896a:	9a03      	ldr	r2, [sp, #12]
 800896c:	f7ff ff96 	bl	800889c <__sfputs_r>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d100      	bne.n	8008976 <_vfiprintf_r+0xb6>
 8008974:	e0b5      	b.n	8008ae2 <_vfiprintf_r+0x222>
 8008976:	696a      	ldr	r2, [r5, #20]
 8008978:	9b05      	ldr	r3, [sp, #20]
 800897a:	4694      	mov	ip, r2
 800897c:	4463      	add	r3, ip
 800897e:	616b      	str	r3, [r5, #20]
 8008980:	783b      	ldrb	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d100      	bne.n	8008988 <_vfiprintf_r+0xc8>
 8008986:	e0ac      	b.n	8008ae2 <_vfiprintf_r+0x222>
 8008988:	2201      	movs	r2, #1
 800898a:	1c7b      	adds	r3, r7, #1
 800898c:	9303      	str	r3, [sp, #12]
 800898e:	2300      	movs	r3, #0
 8008990:	4252      	negs	r2, r2
 8008992:	606a      	str	r2, [r5, #4]
 8008994:	a904      	add	r1, sp, #16
 8008996:	3254      	adds	r2, #84	; 0x54
 8008998:	1852      	adds	r2, r2, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	60eb      	str	r3, [r5, #12]
 800899e:	60ab      	str	r3, [r5, #8]
 80089a0:	7013      	strb	r3, [r2, #0]
 80089a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	2205      	movs	r2, #5
 80089a8:	7819      	ldrb	r1, [r3, #0]
 80089aa:	485d      	ldr	r0, [pc, #372]	; (8008b20 <_vfiprintf_r+0x260>)
 80089ac:	f7ff f89c 	bl	8007ae8 <memchr>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	1c5f      	adds	r7, r3, #1
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d120      	bne.n	80089fa <_vfiprintf_r+0x13a>
 80089b8:	682a      	ldr	r2, [r5, #0]
 80089ba:	06d3      	lsls	r3, r2, #27
 80089bc:	d504      	bpl.n	80089c8 <_vfiprintf_r+0x108>
 80089be:	2353      	movs	r3, #83	; 0x53
 80089c0:	a904      	add	r1, sp, #16
 80089c2:	185b      	adds	r3, r3, r1
 80089c4:	2120      	movs	r1, #32
 80089c6:	7019      	strb	r1, [r3, #0]
 80089c8:	0713      	lsls	r3, r2, #28
 80089ca:	d504      	bpl.n	80089d6 <_vfiprintf_r+0x116>
 80089cc:	2353      	movs	r3, #83	; 0x53
 80089ce:	a904      	add	r1, sp, #16
 80089d0:	185b      	adds	r3, r3, r1
 80089d2:	212b      	movs	r1, #43	; 0x2b
 80089d4:	7019      	strb	r1, [r3, #0]
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b2a      	cmp	r3, #42	; 0x2a
 80089dc:	d016      	beq.n	8008a0c <_vfiprintf_r+0x14c>
 80089de:	2100      	movs	r1, #0
 80089e0:	68eb      	ldr	r3, [r5, #12]
 80089e2:	9f03      	ldr	r7, [sp, #12]
 80089e4:	783a      	ldrb	r2, [r7, #0]
 80089e6:	1c78      	adds	r0, r7, #1
 80089e8:	3a30      	subs	r2, #48	; 0x30
 80089ea:	4684      	mov	ip, r0
 80089ec:	2a09      	cmp	r2, #9
 80089ee:	d94f      	bls.n	8008a90 <_vfiprintf_r+0x1d0>
 80089f0:	2900      	cmp	r1, #0
 80089f2:	d111      	bne.n	8008a18 <_vfiprintf_r+0x158>
 80089f4:	e017      	b.n	8008a26 <_vfiprintf_r+0x166>
 80089f6:	3701      	adds	r7, #1
 80089f8:	e7a9      	b.n	800894e <_vfiprintf_r+0x8e>
 80089fa:	4b49      	ldr	r3, [pc, #292]	; (8008b20 <_vfiprintf_r+0x260>)
 80089fc:	682a      	ldr	r2, [r5, #0]
 80089fe:	1ac0      	subs	r0, r0, r3
 8008a00:	2301      	movs	r3, #1
 8008a02:	4083      	lsls	r3, r0
 8008a04:	4313      	orrs	r3, r2
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	9703      	str	r7, [sp, #12]
 8008a0a:	e7cb      	b.n	80089a4 <_vfiprintf_r+0xe4>
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	1d19      	adds	r1, r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	9107      	str	r1, [sp, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	db01      	blt.n	8008a1c <_vfiprintf_r+0x15c>
 8008a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a1a:	e004      	b.n	8008a26 <_vfiprintf_r+0x166>
 8008a1c:	425b      	negs	r3, r3
 8008a1e:	60eb      	str	r3, [r5, #12]
 8008a20:	2302      	movs	r3, #2
 8008a22:	4313      	orrs	r3, r2
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	783b      	ldrb	r3, [r7, #0]
 8008a28:	2b2e      	cmp	r3, #46	; 0x2e
 8008a2a:	d10a      	bne.n	8008a42 <_vfiprintf_r+0x182>
 8008a2c:	787b      	ldrb	r3, [r7, #1]
 8008a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a30:	d137      	bne.n	8008aa2 <_vfiprintf_r+0x1e2>
 8008a32:	9b07      	ldr	r3, [sp, #28]
 8008a34:	3702      	adds	r7, #2
 8008a36:	1d1a      	adds	r2, r3, #4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	9207      	str	r2, [sp, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	db2d      	blt.n	8008a9c <_vfiprintf_r+0x1dc>
 8008a40:	9309      	str	r3, [sp, #36]	; 0x24
 8008a42:	2203      	movs	r2, #3
 8008a44:	7839      	ldrb	r1, [r7, #0]
 8008a46:	4837      	ldr	r0, [pc, #220]	; (8008b24 <_vfiprintf_r+0x264>)
 8008a48:	f7ff f84e 	bl	8007ae8 <memchr>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d007      	beq.n	8008a60 <_vfiprintf_r+0x1a0>
 8008a50:	4b34      	ldr	r3, [pc, #208]	; (8008b24 <_vfiprintf_r+0x264>)
 8008a52:	682a      	ldr	r2, [r5, #0]
 8008a54:	1ac0      	subs	r0, r0, r3
 8008a56:	2340      	movs	r3, #64	; 0x40
 8008a58:	4083      	lsls	r3, r0
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	3701      	adds	r7, #1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	7839      	ldrb	r1, [r7, #0]
 8008a62:	1c7b      	adds	r3, r7, #1
 8008a64:	2206      	movs	r2, #6
 8008a66:	4830      	ldr	r0, [pc, #192]	; (8008b28 <_vfiprintf_r+0x268>)
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	7629      	strb	r1, [r5, #24]
 8008a6c:	f7ff f83c 	bl	8007ae8 <memchr>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d045      	beq.n	8008b00 <_vfiprintf_r+0x240>
 8008a74:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <_vfiprintf_r+0x26c>)
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d127      	bne.n	8008aca <_vfiprintf_r+0x20a>
 8008a7a:	2207      	movs	r2, #7
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	3307      	adds	r3, #7
 8008a80:	4393      	bics	r3, r2
 8008a82:	3308      	adds	r3, #8
 8008a84:	9307      	str	r3, [sp, #28]
 8008a86:	696b      	ldr	r3, [r5, #20]
 8008a88:	9a04      	ldr	r2, [sp, #16]
 8008a8a:	189b      	adds	r3, r3, r2
 8008a8c:	616b      	str	r3, [r5, #20]
 8008a8e:	e75d      	b.n	800894c <_vfiprintf_r+0x8c>
 8008a90:	210a      	movs	r1, #10
 8008a92:	434b      	muls	r3, r1
 8008a94:	4667      	mov	r7, ip
 8008a96:	189b      	adds	r3, r3, r2
 8008a98:	3909      	subs	r1, #9
 8008a9a:	e7a3      	b.n	80089e4 <_vfiprintf_r+0x124>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	425b      	negs	r3, r3
 8008aa0:	e7ce      	b.n	8008a40 <_vfiprintf_r+0x180>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	001a      	movs	r2, r3
 8008aa6:	3701      	adds	r7, #1
 8008aa8:	606b      	str	r3, [r5, #4]
 8008aaa:	7839      	ldrb	r1, [r7, #0]
 8008aac:	1c78      	adds	r0, r7, #1
 8008aae:	3930      	subs	r1, #48	; 0x30
 8008ab0:	4684      	mov	ip, r0
 8008ab2:	2909      	cmp	r1, #9
 8008ab4:	d903      	bls.n	8008abe <_vfiprintf_r+0x1fe>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0c3      	beq.n	8008a42 <_vfiprintf_r+0x182>
 8008aba:	9209      	str	r2, [sp, #36]	; 0x24
 8008abc:	e7c1      	b.n	8008a42 <_vfiprintf_r+0x182>
 8008abe:	230a      	movs	r3, #10
 8008ac0:	435a      	muls	r2, r3
 8008ac2:	4667      	mov	r7, ip
 8008ac4:	1852      	adds	r2, r2, r1
 8008ac6:	3b09      	subs	r3, #9
 8008ac8:	e7ef      	b.n	8008aaa <_vfiprintf_r+0x1ea>
 8008aca:	ab07      	add	r3, sp, #28
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	0022      	movs	r2, r4
 8008ad0:	0029      	movs	r1, r5
 8008ad2:	0030      	movs	r0, r6
 8008ad4:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <_vfiprintf_r+0x270>)
 8008ad6:	f7fd fd6f 	bl	80065b8 <_printf_float>
 8008ada:	9004      	str	r0, [sp, #16]
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	d1d1      	bne.n	8008a86 <_vfiprintf_r+0x1c6>
 8008ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ae4:	07db      	lsls	r3, r3, #31
 8008ae6:	d405      	bmi.n	8008af4 <_vfiprintf_r+0x234>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	059b      	lsls	r3, r3, #22
 8008aec:	d402      	bmi.n	8008af4 <_vfiprintf_r+0x234>
 8008aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008af0:	f000 fad4 	bl	800909c <__retarget_lock_release_recursive>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	065b      	lsls	r3, r3, #25
 8008af8:	d500      	bpl.n	8008afc <_vfiprintf_r+0x23c>
 8008afa:	e70a      	b.n	8008912 <_vfiprintf_r+0x52>
 8008afc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008afe:	e70a      	b.n	8008916 <_vfiprintf_r+0x56>
 8008b00:	ab07      	add	r3, sp, #28
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	0022      	movs	r2, r4
 8008b06:	0029      	movs	r1, r5
 8008b08:	0030      	movs	r0, r6
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <_vfiprintf_r+0x270>)
 8008b0c:	f7fe f806 	bl	8006b1c <_printf_i>
 8008b10:	e7e3      	b.n	8008ada <_vfiprintf_r+0x21a>
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	08009afc 	.word	0x08009afc
 8008b18:	08009b1c 	.word	0x08009b1c
 8008b1c:	08009adc 	.word	0x08009adc
 8008b20:	08009984 	.word	0x08009984
 8008b24:	0800998a 	.word	0x0800998a
 8008b28:	0800998e 	.word	0x0800998e
 8008b2c:	080065b9 	.word	0x080065b9
 8008b30:	0800889d 	.word	0x0800889d

08008b34 <__swbuf_r>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	0005      	movs	r5, r0
 8008b38:	000e      	movs	r6, r1
 8008b3a:	0014      	movs	r4, r2
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d004      	beq.n	8008b4a <__swbuf_r+0x16>
 8008b40:	6983      	ldr	r3, [r0, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <__swbuf_r+0x16>
 8008b46:	f000 fa07 	bl	8008f58 <__sinit>
 8008b4a:	4b22      	ldr	r3, [pc, #136]	; (8008bd4 <__swbuf_r+0xa0>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d12e      	bne.n	8008bae <__swbuf_r+0x7a>
 8008b50:	686c      	ldr	r4, [r5, #4]
 8008b52:	69a3      	ldr	r3, [r4, #24]
 8008b54:	60a3      	str	r3, [r4, #8]
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	071b      	lsls	r3, r3, #28
 8008b5a:	d532      	bpl.n	8008bc2 <__swbuf_r+0x8e>
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d02f      	beq.n	8008bc2 <__swbuf_r+0x8e>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	6922      	ldr	r2, [r4, #16]
 8008b66:	b2f7      	uxtb	r7, r6
 8008b68:	1a98      	subs	r0, r3, r2
 8008b6a:	6963      	ldr	r3, [r4, #20]
 8008b6c:	b2f6      	uxtb	r6, r6
 8008b6e:	4283      	cmp	r3, r0
 8008b70:	dc05      	bgt.n	8008b7e <__swbuf_r+0x4a>
 8008b72:	0021      	movs	r1, r4
 8008b74:	0028      	movs	r0, r5
 8008b76:	f000 f94d 	bl	8008e14 <_fflush_r>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d127      	bne.n	8008bce <__swbuf_r+0x9a>
 8008b7e:	68a3      	ldr	r3, [r4, #8]
 8008b80:	3001      	adds	r0, #1
 8008b82:	3b01      	subs	r3, #1
 8008b84:	60a3      	str	r3, [r4, #8]
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	6022      	str	r2, [r4, #0]
 8008b8c:	701f      	strb	r7, [r3, #0]
 8008b8e:	6963      	ldr	r3, [r4, #20]
 8008b90:	4283      	cmp	r3, r0
 8008b92:	d004      	beq.n	8008b9e <__swbuf_r+0x6a>
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	07db      	lsls	r3, r3, #31
 8008b98:	d507      	bpl.n	8008baa <__swbuf_r+0x76>
 8008b9a:	2e0a      	cmp	r6, #10
 8008b9c:	d105      	bne.n	8008baa <__swbuf_r+0x76>
 8008b9e:	0021      	movs	r1, r4
 8008ba0:	0028      	movs	r0, r5
 8008ba2:	f000 f937 	bl	8008e14 <_fflush_r>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d111      	bne.n	8008bce <__swbuf_r+0x9a>
 8008baa:	0030      	movs	r0, r6
 8008bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bae:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <__swbuf_r+0xa4>)
 8008bb0:	429c      	cmp	r4, r3
 8008bb2:	d101      	bne.n	8008bb8 <__swbuf_r+0x84>
 8008bb4:	68ac      	ldr	r4, [r5, #8]
 8008bb6:	e7cc      	b.n	8008b52 <__swbuf_r+0x1e>
 8008bb8:	4b08      	ldr	r3, [pc, #32]	; (8008bdc <__swbuf_r+0xa8>)
 8008bba:	429c      	cmp	r4, r3
 8008bbc:	d1c9      	bne.n	8008b52 <__swbuf_r+0x1e>
 8008bbe:	68ec      	ldr	r4, [r5, #12]
 8008bc0:	e7c7      	b.n	8008b52 <__swbuf_r+0x1e>
 8008bc2:	0021      	movs	r1, r4
 8008bc4:	0028      	movs	r0, r5
 8008bc6:	f000 f819 	bl	8008bfc <__swsetup_r>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d0c9      	beq.n	8008b62 <__swbuf_r+0x2e>
 8008bce:	2601      	movs	r6, #1
 8008bd0:	4276      	negs	r6, r6
 8008bd2:	e7ea      	b.n	8008baa <__swbuf_r+0x76>
 8008bd4:	08009afc 	.word	0x08009afc
 8008bd8:	08009b1c 	.word	0x08009b1c
 8008bdc:	08009adc 	.word	0x08009adc

08008be0 <__ascii_wctomb>:
 8008be0:	0003      	movs	r3, r0
 8008be2:	1e08      	subs	r0, r1, #0
 8008be4:	d005      	beq.n	8008bf2 <__ascii_wctomb+0x12>
 8008be6:	2aff      	cmp	r2, #255	; 0xff
 8008be8:	d904      	bls.n	8008bf4 <__ascii_wctomb+0x14>
 8008bea:	228a      	movs	r2, #138	; 0x8a
 8008bec:	2001      	movs	r0, #1
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	4240      	negs	r0, r0
 8008bf2:	4770      	bx	lr
 8008bf4:	2001      	movs	r0, #1
 8008bf6:	700a      	strb	r2, [r1, #0]
 8008bf8:	e7fb      	b.n	8008bf2 <__ascii_wctomb+0x12>
	...

08008bfc <__swsetup_r>:
 8008bfc:	4b37      	ldr	r3, [pc, #220]	; (8008cdc <__swsetup_r+0xe0>)
 8008bfe:	b570      	push	{r4, r5, r6, lr}
 8008c00:	681d      	ldr	r5, [r3, #0]
 8008c02:	0006      	movs	r6, r0
 8008c04:	000c      	movs	r4, r1
 8008c06:	2d00      	cmp	r5, #0
 8008c08:	d005      	beq.n	8008c16 <__swsetup_r+0x1a>
 8008c0a:	69ab      	ldr	r3, [r5, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d102      	bne.n	8008c16 <__swsetup_r+0x1a>
 8008c10:	0028      	movs	r0, r5
 8008c12:	f000 f9a1 	bl	8008f58 <__sinit>
 8008c16:	4b32      	ldr	r3, [pc, #200]	; (8008ce0 <__swsetup_r+0xe4>)
 8008c18:	429c      	cmp	r4, r3
 8008c1a:	d10f      	bne.n	8008c3c <__swsetup_r+0x40>
 8008c1c:	686c      	ldr	r4, [r5, #4]
 8008c1e:	230c      	movs	r3, #12
 8008c20:	5ee2      	ldrsh	r2, [r4, r3]
 8008c22:	b293      	uxth	r3, r2
 8008c24:	0711      	lsls	r1, r2, #28
 8008c26:	d42d      	bmi.n	8008c84 <__swsetup_r+0x88>
 8008c28:	06d9      	lsls	r1, r3, #27
 8008c2a:	d411      	bmi.n	8008c50 <__swsetup_r+0x54>
 8008c2c:	2309      	movs	r3, #9
 8008c2e:	2001      	movs	r0, #1
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	3337      	adds	r3, #55	; 0x37
 8008c34:	4313      	orrs	r3, r2
 8008c36:	81a3      	strh	r3, [r4, #12]
 8008c38:	4240      	negs	r0, r0
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	4b29      	ldr	r3, [pc, #164]	; (8008ce4 <__swsetup_r+0xe8>)
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	d101      	bne.n	8008c46 <__swsetup_r+0x4a>
 8008c42:	68ac      	ldr	r4, [r5, #8]
 8008c44:	e7eb      	b.n	8008c1e <__swsetup_r+0x22>
 8008c46:	4b28      	ldr	r3, [pc, #160]	; (8008ce8 <__swsetup_r+0xec>)
 8008c48:	429c      	cmp	r4, r3
 8008c4a:	d1e8      	bne.n	8008c1e <__swsetup_r+0x22>
 8008c4c:	68ec      	ldr	r4, [r5, #12]
 8008c4e:	e7e6      	b.n	8008c1e <__swsetup_r+0x22>
 8008c50:	075b      	lsls	r3, r3, #29
 8008c52:	d513      	bpl.n	8008c7c <__swsetup_r+0x80>
 8008c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c56:	2900      	cmp	r1, #0
 8008c58:	d008      	beq.n	8008c6c <__swsetup_r+0x70>
 8008c5a:	0023      	movs	r3, r4
 8008c5c:	3344      	adds	r3, #68	; 0x44
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	d002      	beq.n	8008c68 <__swsetup_r+0x6c>
 8008c62:	0030      	movs	r0, r6
 8008c64:	f7ff fb1c 	bl	80082a0 <_free_r>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6363      	str	r3, [r4, #52]	; 0x34
 8008c6c:	2224      	movs	r2, #36	; 0x24
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	4393      	bics	r3, r2
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	2300      	movs	r3, #0
 8008c76:	6063      	str	r3, [r4, #4]
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	2308      	movs	r3, #8
 8008c7e:	89a2      	ldrh	r2, [r4, #12]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10b      	bne.n	8008ca2 <__swsetup_r+0xa6>
 8008c8a:	21a0      	movs	r1, #160	; 0xa0
 8008c8c:	2280      	movs	r2, #128	; 0x80
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	0089      	lsls	r1, r1, #2
 8008c92:	0092      	lsls	r2, r2, #2
 8008c94:	400b      	ands	r3, r1
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d003      	beq.n	8008ca2 <__swsetup_r+0xa6>
 8008c9a:	0021      	movs	r1, r4
 8008c9c:	0030      	movs	r0, r6
 8008c9e:	f000 fa27 	bl	80090f0 <__smakebuf_r>
 8008ca2:	220c      	movs	r2, #12
 8008ca4:	5ea3      	ldrsh	r3, [r4, r2]
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	001a      	movs	r2, r3
 8008caa:	b299      	uxth	r1, r3
 8008cac:	4002      	ands	r2, r0
 8008cae:	4203      	tst	r3, r0
 8008cb0:	d00f      	beq.n	8008cd2 <__swsetup_r+0xd6>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	60a2      	str	r2, [r4, #8]
 8008cb6:	6962      	ldr	r2, [r4, #20]
 8008cb8:	4252      	negs	r2, r2
 8008cba:	61a2      	str	r2, [r4, #24]
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	6922      	ldr	r2, [r4, #16]
 8008cc0:	4282      	cmp	r2, r0
 8008cc2:	d1ba      	bne.n	8008c3a <__swsetup_r+0x3e>
 8008cc4:	060a      	lsls	r2, r1, #24
 8008cc6:	d5b8      	bpl.n	8008c3a <__swsetup_r+0x3e>
 8008cc8:	2240      	movs	r2, #64	; 0x40
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	3801      	subs	r0, #1
 8008cd0:	e7b3      	b.n	8008c3a <__swsetup_r+0x3e>
 8008cd2:	0788      	lsls	r0, r1, #30
 8008cd4:	d400      	bmi.n	8008cd8 <__swsetup_r+0xdc>
 8008cd6:	6962      	ldr	r2, [r4, #20]
 8008cd8:	60a2      	str	r2, [r4, #8]
 8008cda:	e7ef      	b.n	8008cbc <__swsetup_r+0xc0>
 8008cdc:	20000080 	.word	0x20000080
 8008ce0:	08009afc 	.word	0x08009afc
 8008ce4:	08009b1c 	.word	0x08009b1c
 8008ce8:	08009adc 	.word	0x08009adc

08008cec <abort>:
 8008cec:	2006      	movs	r0, #6
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	f000 fa74 	bl	80091dc <raise>
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	f7fa fc14 	bl	8003522 <_exit>
	...

08008cfc <__sflush_r>:
 8008cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cfe:	898b      	ldrh	r3, [r1, #12]
 8008d00:	0005      	movs	r5, r0
 8008d02:	000c      	movs	r4, r1
 8008d04:	071a      	lsls	r2, r3, #28
 8008d06:	d45f      	bmi.n	8008dc8 <__sflush_r+0xcc>
 8008d08:	684a      	ldr	r2, [r1, #4]
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	dc04      	bgt.n	8008d18 <__sflush_r+0x1c>
 8008d0e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	dc01      	bgt.n	8008d18 <__sflush_r+0x1c>
 8008d14:	2000      	movs	r0, #0
 8008d16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008d1a:	2f00      	cmp	r7, #0
 8008d1c:	d0fa      	beq.n	8008d14 <__sflush_r+0x18>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2180      	movs	r1, #128	; 0x80
 8008d22:	682e      	ldr	r6, [r5, #0]
 8008d24:	602a      	str	r2, [r5, #0]
 8008d26:	001a      	movs	r2, r3
 8008d28:	0149      	lsls	r1, r1, #5
 8008d2a:	400a      	ands	r2, r1
 8008d2c:	420b      	tst	r3, r1
 8008d2e:	d034      	beq.n	8008d9a <__sflush_r+0x9e>
 8008d30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	075b      	lsls	r3, r3, #29
 8008d36:	d506      	bpl.n	8008d46 <__sflush_r+0x4a>
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	1ac0      	subs	r0, r0, r3
 8008d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <__sflush_r+0x4a>
 8008d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d44:	1ac0      	subs	r0, r0, r3
 8008d46:	0002      	movs	r2, r0
 8008d48:	6a21      	ldr	r1, [r4, #32]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	0028      	movs	r0, r5
 8008d4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008d50:	47b8      	blx	r7
 8008d52:	89a1      	ldrh	r1, [r4, #12]
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d106      	bne.n	8008d66 <__sflush_r+0x6a>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	2b1d      	cmp	r3, #29
 8008d5c:	d831      	bhi.n	8008dc2 <__sflush_r+0xc6>
 8008d5e:	4a2c      	ldr	r2, [pc, #176]	; (8008e10 <__sflush_r+0x114>)
 8008d60:	40da      	lsrs	r2, r3
 8008d62:	07d3      	lsls	r3, r2, #31
 8008d64:	d52d      	bpl.n	8008dc2 <__sflush_r+0xc6>
 8008d66:	2300      	movs	r3, #0
 8008d68:	6063      	str	r3, [r4, #4]
 8008d6a:	6923      	ldr	r3, [r4, #16]
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	04cb      	lsls	r3, r1, #19
 8008d70:	d505      	bpl.n	8008d7e <__sflush_r+0x82>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	d102      	bne.n	8008d7c <__sflush_r+0x80>
 8008d76:	682b      	ldr	r3, [r5, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d100      	bne.n	8008d7e <__sflush_r+0x82>
 8008d7c:	6560      	str	r0, [r4, #84]	; 0x54
 8008d7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d80:	602e      	str	r6, [r5, #0]
 8008d82:	2900      	cmp	r1, #0
 8008d84:	d0c6      	beq.n	8008d14 <__sflush_r+0x18>
 8008d86:	0023      	movs	r3, r4
 8008d88:	3344      	adds	r3, #68	; 0x44
 8008d8a:	4299      	cmp	r1, r3
 8008d8c:	d002      	beq.n	8008d94 <__sflush_r+0x98>
 8008d8e:	0028      	movs	r0, r5
 8008d90:	f7ff fa86 	bl	80082a0 <_free_r>
 8008d94:	2000      	movs	r0, #0
 8008d96:	6360      	str	r0, [r4, #52]	; 0x34
 8008d98:	e7bd      	b.n	8008d16 <__sflush_r+0x1a>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	0028      	movs	r0, r5
 8008d9e:	6a21      	ldr	r1, [r4, #32]
 8008da0:	47b8      	blx	r7
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d1c5      	bne.n	8008d32 <__sflush_r+0x36>
 8008da6:	682b      	ldr	r3, [r5, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0c2      	beq.n	8008d32 <__sflush_r+0x36>
 8008dac:	2b1d      	cmp	r3, #29
 8008dae:	d001      	beq.n	8008db4 <__sflush_r+0xb8>
 8008db0:	2b16      	cmp	r3, #22
 8008db2:	d101      	bne.n	8008db8 <__sflush_r+0xbc>
 8008db4:	602e      	str	r6, [r5, #0]
 8008db6:	e7ad      	b.n	8008d14 <__sflush_r+0x18>
 8008db8:	2340      	movs	r3, #64	; 0x40
 8008dba:	89a2      	ldrh	r2, [r4, #12]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	81a3      	strh	r3, [r4, #12]
 8008dc0:	e7a9      	b.n	8008d16 <__sflush_r+0x1a>
 8008dc2:	2340      	movs	r3, #64	; 0x40
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	e7fa      	b.n	8008dbe <__sflush_r+0xc2>
 8008dc8:	690f      	ldr	r7, [r1, #16]
 8008dca:	2f00      	cmp	r7, #0
 8008dcc:	d0a2      	beq.n	8008d14 <__sflush_r+0x18>
 8008dce:	680a      	ldr	r2, [r1, #0]
 8008dd0:	600f      	str	r7, [r1, #0]
 8008dd2:	1bd2      	subs	r2, r2, r7
 8008dd4:	9201      	str	r2, [sp, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	079b      	lsls	r3, r3, #30
 8008dda:	d100      	bne.n	8008dde <__sflush_r+0xe2>
 8008ddc:	694a      	ldr	r2, [r1, #20]
 8008dde:	60a2      	str	r2, [r4, #8]
 8008de0:	9b01      	ldr	r3, [sp, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dc00      	bgt.n	8008de8 <__sflush_r+0xec>
 8008de6:	e795      	b.n	8008d14 <__sflush_r+0x18>
 8008de8:	003a      	movs	r2, r7
 8008dea:	0028      	movs	r0, r5
 8008dec:	9b01      	ldr	r3, [sp, #4]
 8008dee:	6a21      	ldr	r1, [r4, #32]
 8008df0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df2:	47b0      	blx	r6
 8008df4:	2800      	cmp	r0, #0
 8008df6:	dc06      	bgt.n	8008e06 <__sflush_r+0x10a>
 8008df8:	2340      	movs	r3, #64	; 0x40
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	89a2      	ldrh	r2, [r4, #12]
 8008dfe:	4240      	negs	r0, r0
 8008e00:	4313      	orrs	r3, r2
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	e787      	b.n	8008d16 <__sflush_r+0x1a>
 8008e06:	9b01      	ldr	r3, [sp, #4]
 8008e08:	183f      	adds	r7, r7, r0
 8008e0a:	1a1b      	subs	r3, r3, r0
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	e7e7      	b.n	8008de0 <__sflush_r+0xe4>
 8008e10:	20400001 	.word	0x20400001

08008e14 <_fflush_r>:
 8008e14:	690b      	ldr	r3, [r1, #16]
 8008e16:	b570      	push	{r4, r5, r6, lr}
 8008e18:	0005      	movs	r5, r0
 8008e1a:	000c      	movs	r4, r1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <_fflush_r+0x12>
 8008e20:	2500      	movs	r5, #0
 8008e22:	0028      	movs	r0, r5
 8008e24:	bd70      	pop	{r4, r5, r6, pc}
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d004      	beq.n	8008e34 <_fflush_r+0x20>
 8008e2a:	6983      	ldr	r3, [r0, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <_fflush_r+0x20>
 8008e30:	f000 f892 	bl	8008f58 <__sinit>
 8008e34:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <_fflush_r+0x74>)
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d11b      	bne.n	8008e72 <_fflush_r+0x5e>
 8008e3a:	686c      	ldr	r4, [r5, #4]
 8008e3c:	220c      	movs	r2, #12
 8008e3e:	5ea3      	ldrsh	r3, [r4, r2]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0ed      	beq.n	8008e20 <_fflush_r+0xc>
 8008e44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e46:	07d2      	lsls	r2, r2, #31
 8008e48:	d404      	bmi.n	8008e54 <_fflush_r+0x40>
 8008e4a:	059b      	lsls	r3, r3, #22
 8008e4c:	d402      	bmi.n	8008e54 <_fflush_r+0x40>
 8008e4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e50:	f000 f923 	bl	800909a <__retarget_lock_acquire_recursive>
 8008e54:	0028      	movs	r0, r5
 8008e56:	0021      	movs	r1, r4
 8008e58:	f7ff ff50 	bl	8008cfc <__sflush_r>
 8008e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e5e:	0005      	movs	r5, r0
 8008e60:	07db      	lsls	r3, r3, #31
 8008e62:	d4de      	bmi.n	8008e22 <_fflush_r+0xe>
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	059b      	lsls	r3, r3, #22
 8008e68:	d4db      	bmi.n	8008e22 <_fflush_r+0xe>
 8008e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6c:	f000 f916 	bl	800909c <__retarget_lock_release_recursive>
 8008e70:	e7d7      	b.n	8008e22 <_fflush_r+0xe>
 8008e72:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <_fflush_r+0x78>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	d101      	bne.n	8008e7c <_fflush_r+0x68>
 8008e78:	68ac      	ldr	r4, [r5, #8]
 8008e7a:	e7df      	b.n	8008e3c <_fflush_r+0x28>
 8008e7c:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <_fflush_r+0x7c>)
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d1dc      	bne.n	8008e3c <_fflush_r+0x28>
 8008e82:	68ec      	ldr	r4, [r5, #12]
 8008e84:	e7da      	b.n	8008e3c <_fflush_r+0x28>
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	08009afc 	.word	0x08009afc
 8008e8c:	08009b1c 	.word	0x08009b1c
 8008e90:	08009adc 	.word	0x08009adc

08008e94 <std>:
 8008e94:	2300      	movs	r3, #0
 8008e96:	b510      	push	{r4, lr}
 8008e98:	0004      	movs	r4, r0
 8008e9a:	6003      	str	r3, [r0, #0]
 8008e9c:	6043      	str	r3, [r0, #4]
 8008e9e:	6083      	str	r3, [r0, #8]
 8008ea0:	8181      	strh	r1, [r0, #12]
 8008ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	81c2      	strh	r2, [r0, #14]
 8008ea8:	6103      	str	r3, [r0, #16]
 8008eaa:	6143      	str	r3, [r0, #20]
 8008eac:	6183      	str	r3, [r0, #24]
 8008eae:	2208      	movs	r2, #8
 8008eb0:	305c      	adds	r0, #92	; 0x5c
 8008eb2:	f7fd facf 	bl	8006454 <memset>
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <std+0x38>)
 8008eb8:	6224      	str	r4, [r4, #32]
 8008eba:	6263      	str	r3, [r4, #36]	; 0x24
 8008ebc:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <std+0x3c>)
 8008ebe:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ec0:	4b04      	ldr	r3, [pc, #16]	; (8008ed4 <std+0x40>)
 8008ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ec4:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <std+0x44>)
 8008ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ec8:	bd10      	pop	{r4, pc}
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	0800921d 	.word	0x0800921d
 8008ed0:	08009245 	.word	0x08009245
 8008ed4:	0800927d 	.word	0x0800927d
 8008ed8:	080092a9 	.word	0x080092a9

08008edc <_cleanup_r>:
 8008edc:	b510      	push	{r4, lr}
 8008ede:	4902      	ldr	r1, [pc, #8]	; (8008ee8 <_cleanup_r+0xc>)
 8008ee0:	f000 f8ba 	bl	8009058 <_fwalk_reent>
 8008ee4:	bd10      	pop	{r4, pc}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	08008e15 	.word	0x08008e15

08008eec <__sfmoreglue>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	2568      	movs	r5, #104	; 0x68
 8008ef0:	1e4a      	subs	r2, r1, #1
 8008ef2:	4355      	muls	r5, r2
 8008ef4:	000e      	movs	r6, r1
 8008ef6:	0029      	movs	r1, r5
 8008ef8:	3174      	adds	r1, #116	; 0x74
 8008efa:	f7ff fa3d 	bl	8008378 <_malloc_r>
 8008efe:	1e04      	subs	r4, r0, #0
 8008f00:	d008      	beq.n	8008f14 <__sfmoreglue+0x28>
 8008f02:	2100      	movs	r1, #0
 8008f04:	002a      	movs	r2, r5
 8008f06:	6001      	str	r1, [r0, #0]
 8008f08:	6046      	str	r6, [r0, #4]
 8008f0a:	300c      	adds	r0, #12
 8008f0c:	60a0      	str	r0, [r4, #8]
 8008f0e:	3268      	adds	r2, #104	; 0x68
 8008f10:	f7fd faa0 	bl	8006454 <memset>
 8008f14:	0020      	movs	r0, r4
 8008f16:	bd70      	pop	{r4, r5, r6, pc}

08008f18 <__sfp_lock_acquire>:
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	4802      	ldr	r0, [pc, #8]	; (8008f24 <__sfp_lock_acquire+0xc>)
 8008f1c:	f000 f8bd 	bl	800909a <__retarget_lock_acquire_recursive>
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	200004d5 	.word	0x200004d5

08008f28 <__sfp_lock_release>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	4802      	ldr	r0, [pc, #8]	; (8008f34 <__sfp_lock_release+0xc>)
 8008f2c:	f000 f8b6 	bl	800909c <__retarget_lock_release_recursive>
 8008f30:	bd10      	pop	{r4, pc}
 8008f32:	46c0      	nop			; (mov r8, r8)
 8008f34:	200004d5 	.word	0x200004d5

08008f38 <__sinit_lock_acquire>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	4802      	ldr	r0, [pc, #8]	; (8008f44 <__sinit_lock_acquire+0xc>)
 8008f3c:	f000 f8ad 	bl	800909a <__retarget_lock_acquire_recursive>
 8008f40:	bd10      	pop	{r4, pc}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	200004d6 	.word	0x200004d6

08008f48 <__sinit_lock_release>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	4802      	ldr	r0, [pc, #8]	; (8008f54 <__sinit_lock_release+0xc>)
 8008f4c:	f000 f8a6 	bl	800909c <__retarget_lock_release_recursive>
 8008f50:	bd10      	pop	{r4, pc}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	200004d6 	.word	0x200004d6

08008f58 <__sinit>:
 8008f58:	b513      	push	{r0, r1, r4, lr}
 8008f5a:	0004      	movs	r4, r0
 8008f5c:	f7ff ffec 	bl	8008f38 <__sinit_lock_acquire>
 8008f60:	69a3      	ldr	r3, [r4, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d002      	beq.n	8008f6c <__sinit+0x14>
 8008f66:	f7ff ffef 	bl	8008f48 <__sinit_lock_release>
 8008f6a:	bd13      	pop	{r0, r1, r4, pc}
 8008f6c:	64a3      	str	r3, [r4, #72]	; 0x48
 8008f6e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008f70:	6523      	str	r3, [r4, #80]	; 0x50
 8008f72:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <__sinit+0x68>)
 8008f74:	4a13      	ldr	r2, [pc, #76]	; (8008fc4 <__sinit+0x6c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	d101      	bne.n	8008f84 <__sinit+0x2c>
 8008f80:	2301      	movs	r3, #1
 8008f82:	61a3      	str	r3, [r4, #24]
 8008f84:	0020      	movs	r0, r4
 8008f86:	f000 f81f 	bl	8008fc8 <__sfp>
 8008f8a:	6060      	str	r0, [r4, #4]
 8008f8c:	0020      	movs	r0, r4
 8008f8e:	f000 f81b 	bl	8008fc8 <__sfp>
 8008f92:	60a0      	str	r0, [r4, #8]
 8008f94:	0020      	movs	r0, r4
 8008f96:	f000 f817 	bl	8008fc8 <__sfp>
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2104      	movs	r1, #4
 8008f9e:	60e0      	str	r0, [r4, #12]
 8008fa0:	6860      	ldr	r0, [r4, #4]
 8008fa2:	f7ff ff77 	bl	8008e94 <std>
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	2109      	movs	r1, #9
 8008faa:	68a0      	ldr	r0, [r4, #8]
 8008fac:	f7ff ff72 	bl	8008e94 <std>
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	2112      	movs	r1, #18
 8008fb4:	68e0      	ldr	r0, [r4, #12]
 8008fb6:	f7ff ff6d 	bl	8008e94 <std>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61a3      	str	r3, [r4, #24]
 8008fbe:	e7d2      	b.n	8008f66 <__sinit+0xe>
 8008fc0:	08009760 	.word	0x08009760
 8008fc4:	08008edd 	.word	0x08008edd

08008fc8 <__sfp>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	0007      	movs	r7, r0
 8008fcc:	f7ff ffa4 	bl	8008f18 <__sfp_lock_acquire>
 8008fd0:	4b1f      	ldr	r3, [pc, #124]	; (8009050 <__sfp+0x88>)
 8008fd2:	681e      	ldr	r6, [r3, #0]
 8008fd4:	69b3      	ldr	r3, [r6, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <__sfp+0x18>
 8008fda:	0030      	movs	r0, r6
 8008fdc:	f7ff ffbc 	bl	8008f58 <__sinit>
 8008fe0:	3648      	adds	r6, #72	; 0x48
 8008fe2:	68b4      	ldr	r4, [r6, #8]
 8008fe4:	6873      	ldr	r3, [r6, #4]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	d504      	bpl.n	8008ff4 <__sfp+0x2c>
 8008fea:	6833      	ldr	r3, [r6, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d022      	beq.n	8009036 <__sfp+0x6e>
 8008ff0:	6836      	ldr	r6, [r6, #0]
 8008ff2:	e7f6      	b.n	8008fe2 <__sfp+0x1a>
 8008ff4:	220c      	movs	r2, #12
 8008ff6:	5ea5      	ldrsh	r5, [r4, r2]
 8008ff8:	2d00      	cmp	r5, #0
 8008ffa:	d11a      	bne.n	8009032 <__sfp+0x6a>
 8008ffc:	0020      	movs	r0, r4
 8008ffe:	4b15      	ldr	r3, [pc, #84]	; (8009054 <__sfp+0x8c>)
 8009000:	3058      	adds	r0, #88	; 0x58
 8009002:	60e3      	str	r3, [r4, #12]
 8009004:	6665      	str	r5, [r4, #100]	; 0x64
 8009006:	f000 f847 	bl	8009098 <__retarget_lock_init_recursive>
 800900a:	f7ff ff8d 	bl	8008f28 <__sfp_lock_release>
 800900e:	0020      	movs	r0, r4
 8009010:	2208      	movs	r2, #8
 8009012:	0029      	movs	r1, r5
 8009014:	6025      	str	r5, [r4, #0]
 8009016:	60a5      	str	r5, [r4, #8]
 8009018:	6065      	str	r5, [r4, #4]
 800901a:	6125      	str	r5, [r4, #16]
 800901c:	6165      	str	r5, [r4, #20]
 800901e:	61a5      	str	r5, [r4, #24]
 8009020:	305c      	adds	r0, #92	; 0x5c
 8009022:	f7fd fa17 	bl	8006454 <memset>
 8009026:	6365      	str	r5, [r4, #52]	; 0x34
 8009028:	63a5      	str	r5, [r4, #56]	; 0x38
 800902a:	64a5      	str	r5, [r4, #72]	; 0x48
 800902c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800902e:	0020      	movs	r0, r4
 8009030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009032:	3468      	adds	r4, #104	; 0x68
 8009034:	e7d7      	b.n	8008fe6 <__sfp+0x1e>
 8009036:	2104      	movs	r1, #4
 8009038:	0038      	movs	r0, r7
 800903a:	f7ff ff57 	bl	8008eec <__sfmoreglue>
 800903e:	1e04      	subs	r4, r0, #0
 8009040:	6030      	str	r0, [r6, #0]
 8009042:	d1d5      	bne.n	8008ff0 <__sfp+0x28>
 8009044:	f7ff ff70 	bl	8008f28 <__sfp_lock_release>
 8009048:	230c      	movs	r3, #12
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	e7ef      	b.n	800902e <__sfp+0x66>
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	08009760 	.word	0x08009760
 8009054:	ffff0001 	.word	0xffff0001

08009058 <_fwalk_reent>:
 8009058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800905a:	0004      	movs	r4, r0
 800905c:	0006      	movs	r6, r0
 800905e:	2700      	movs	r7, #0
 8009060:	9101      	str	r1, [sp, #4]
 8009062:	3448      	adds	r4, #72	; 0x48
 8009064:	6863      	ldr	r3, [r4, #4]
 8009066:	68a5      	ldr	r5, [r4, #8]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	9b00      	ldr	r3, [sp, #0]
 800906c:	3b01      	subs	r3, #1
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	d504      	bpl.n	800907c <_fwalk_reent+0x24>
 8009072:	6824      	ldr	r4, [r4, #0]
 8009074:	2c00      	cmp	r4, #0
 8009076:	d1f5      	bne.n	8009064 <_fwalk_reent+0xc>
 8009078:	0038      	movs	r0, r7
 800907a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800907c:	89ab      	ldrh	r3, [r5, #12]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d908      	bls.n	8009094 <_fwalk_reent+0x3c>
 8009082:	220e      	movs	r2, #14
 8009084:	5eab      	ldrsh	r3, [r5, r2]
 8009086:	3301      	adds	r3, #1
 8009088:	d004      	beq.n	8009094 <_fwalk_reent+0x3c>
 800908a:	0029      	movs	r1, r5
 800908c:	0030      	movs	r0, r6
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	4798      	blx	r3
 8009092:	4307      	orrs	r7, r0
 8009094:	3568      	adds	r5, #104	; 0x68
 8009096:	e7e8      	b.n	800906a <_fwalk_reent+0x12>

08009098 <__retarget_lock_init_recursive>:
 8009098:	4770      	bx	lr

0800909a <__retarget_lock_acquire_recursive>:
 800909a:	4770      	bx	lr

0800909c <__retarget_lock_release_recursive>:
 800909c:	4770      	bx	lr
	...

080090a0 <__swhatbuf_r>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	000e      	movs	r6, r1
 80090a4:	001d      	movs	r5, r3
 80090a6:	230e      	movs	r3, #14
 80090a8:	5ec9      	ldrsh	r1, [r1, r3]
 80090aa:	0014      	movs	r4, r2
 80090ac:	b096      	sub	sp, #88	; 0x58
 80090ae:	2900      	cmp	r1, #0
 80090b0:	da08      	bge.n	80090c4 <__swhatbuf_r+0x24>
 80090b2:	220c      	movs	r2, #12
 80090b4:	5eb3      	ldrsh	r3, [r6, r2]
 80090b6:	2200      	movs	r2, #0
 80090b8:	602a      	str	r2, [r5, #0]
 80090ba:	061b      	lsls	r3, r3, #24
 80090bc:	d411      	bmi.n	80090e2 <__swhatbuf_r+0x42>
 80090be:	2380      	movs	r3, #128	; 0x80
 80090c0:	00db      	lsls	r3, r3, #3
 80090c2:	e00f      	b.n	80090e4 <__swhatbuf_r+0x44>
 80090c4:	466a      	mov	r2, sp
 80090c6:	f000 f91b 	bl	8009300 <_fstat_r>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	dbf1      	blt.n	80090b2 <__swhatbuf_r+0x12>
 80090ce:	23f0      	movs	r3, #240	; 0xf0
 80090d0:	9901      	ldr	r1, [sp, #4]
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	4019      	ands	r1, r3
 80090d6:	4b05      	ldr	r3, [pc, #20]	; (80090ec <__swhatbuf_r+0x4c>)
 80090d8:	18c9      	adds	r1, r1, r3
 80090da:	424b      	negs	r3, r1
 80090dc:	4159      	adcs	r1, r3
 80090de:	6029      	str	r1, [r5, #0]
 80090e0:	e7ed      	b.n	80090be <__swhatbuf_r+0x1e>
 80090e2:	2340      	movs	r3, #64	; 0x40
 80090e4:	2000      	movs	r0, #0
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	b016      	add	sp, #88	; 0x58
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	ffffe000 	.word	0xffffe000

080090f0 <__smakebuf_r>:
 80090f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f2:	2602      	movs	r6, #2
 80090f4:	898b      	ldrh	r3, [r1, #12]
 80090f6:	0005      	movs	r5, r0
 80090f8:	000c      	movs	r4, r1
 80090fa:	4233      	tst	r3, r6
 80090fc:	d006      	beq.n	800910c <__smakebuf_r+0x1c>
 80090fe:	0023      	movs	r3, r4
 8009100:	3347      	adds	r3, #71	; 0x47
 8009102:	6023      	str	r3, [r4, #0]
 8009104:	6123      	str	r3, [r4, #16]
 8009106:	2301      	movs	r3, #1
 8009108:	6163      	str	r3, [r4, #20]
 800910a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800910c:	466a      	mov	r2, sp
 800910e:	ab01      	add	r3, sp, #4
 8009110:	f7ff ffc6 	bl	80090a0 <__swhatbuf_r>
 8009114:	9900      	ldr	r1, [sp, #0]
 8009116:	0007      	movs	r7, r0
 8009118:	0028      	movs	r0, r5
 800911a:	f7ff f92d 	bl	8008378 <_malloc_r>
 800911e:	2800      	cmp	r0, #0
 8009120:	d108      	bne.n	8009134 <__smakebuf_r+0x44>
 8009122:	220c      	movs	r2, #12
 8009124:	5ea3      	ldrsh	r3, [r4, r2]
 8009126:	059a      	lsls	r2, r3, #22
 8009128:	d4ef      	bmi.n	800910a <__smakebuf_r+0x1a>
 800912a:	2203      	movs	r2, #3
 800912c:	4393      	bics	r3, r2
 800912e:	431e      	orrs	r6, r3
 8009130:	81a6      	strh	r6, [r4, #12]
 8009132:	e7e4      	b.n	80090fe <__smakebuf_r+0xe>
 8009134:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <__smakebuf_r+0x84>)
 8009136:	62ab      	str	r3, [r5, #40]	; 0x28
 8009138:	2380      	movs	r3, #128	; 0x80
 800913a:	89a2      	ldrh	r2, [r4, #12]
 800913c:	6020      	str	r0, [r4, #0]
 800913e:	4313      	orrs	r3, r2
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	9b00      	ldr	r3, [sp, #0]
 8009144:	6120      	str	r0, [r4, #16]
 8009146:	6163      	str	r3, [r4, #20]
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00d      	beq.n	800916a <__smakebuf_r+0x7a>
 800914e:	0028      	movs	r0, r5
 8009150:	230e      	movs	r3, #14
 8009152:	5ee1      	ldrsh	r1, [r4, r3]
 8009154:	f000 f8e6 	bl	8009324 <_isatty_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	d006      	beq.n	800916a <__smakebuf_r+0x7a>
 800915c:	2203      	movs	r2, #3
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	4393      	bics	r3, r2
 8009162:	001a      	movs	r2, r3
 8009164:	2301      	movs	r3, #1
 8009166:	4313      	orrs	r3, r2
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	89a0      	ldrh	r0, [r4, #12]
 800916c:	4307      	orrs	r7, r0
 800916e:	81a7      	strh	r7, [r4, #12]
 8009170:	e7cb      	b.n	800910a <__smakebuf_r+0x1a>
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	08008edd 	.word	0x08008edd

08009178 <_malloc_usable_size_r>:
 8009178:	1f0b      	subs	r3, r1, #4
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	1f18      	subs	r0, r3, #4
 800917e:	2b00      	cmp	r3, #0
 8009180:	da01      	bge.n	8009186 <_malloc_usable_size_r+0xe>
 8009182:	580b      	ldr	r3, [r1, r0]
 8009184:	18c0      	adds	r0, r0, r3
 8009186:	4770      	bx	lr

08009188 <_raise_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	0004      	movs	r4, r0
 800918c:	000d      	movs	r5, r1
 800918e:	291f      	cmp	r1, #31
 8009190:	d904      	bls.n	800919c <_raise_r+0x14>
 8009192:	2316      	movs	r3, #22
 8009194:	6003      	str	r3, [r0, #0]
 8009196:	2001      	movs	r0, #1
 8009198:	4240      	negs	r0, r0
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <_raise_r+0x24>
 80091a2:	008a      	lsls	r2, r1, #2
 80091a4:	189b      	adds	r3, r3, r2
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	2a00      	cmp	r2, #0
 80091aa:	d108      	bne.n	80091be <_raise_r+0x36>
 80091ac:	0020      	movs	r0, r4
 80091ae:	f000 f831 	bl	8009214 <_getpid_r>
 80091b2:	002a      	movs	r2, r5
 80091b4:	0001      	movs	r1, r0
 80091b6:	0020      	movs	r0, r4
 80091b8:	f000 f81a 	bl	80091f0 <_kill_r>
 80091bc:	e7ed      	b.n	800919a <_raise_r+0x12>
 80091be:	2000      	movs	r0, #0
 80091c0:	2a01      	cmp	r2, #1
 80091c2:	d0ea      	beq.n	800919a <_raise_r+0x12>
 80091c4:	1c51      	adds	r1, r2, #1
 80091c6:	d103      	bne.n	80091d0 <_raise_r+0x48>
 80091c8:	2316      	movs	r3, #22
 80091ca:	3001      	adds	r0, #1
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	e7e4      	b.n	800919a <_raise_r+0x12>
 80091d0:	2400      	movs	r4, #0
 80091d2:	0028      	movs	r0, r5
 80091d4:	601c      	str	r4, [r3, #0]
 80091d6:	4790      	blx	r2
 80091d8:	0020      	movs	r0, r4
 80091da:	e7de      	b.n	800919a <_raise_r+0x12>

080091dc <raise>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	4b03      	ldr	r3, [pc, #12]	; (80091ec <raise+0x10>)
 80091e0:	0001      	movs	r1, r0
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	f7ff ffd0 	bl	8009188 <_raise_r>
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	20000080 	.word	0x20000080

080091f0 <_kill_r>:
 80091f0:	2300      	movs	r3, #0
 80091f2:	b570      	push	{r4, r5, r6, lr}
 80091f4:	4d06      	ldr	r5, [pc, #24]	; (8009210 <_kill_r+0x20>)
 80091f6:	0004      	movs	r4, r0
 80091f8:	0008      	movs	r0, r1
 80091fa:	0011      	movs	r1, r2
 80091fc:	602b      	str	r3, [r5, #0]
 80091fe:	f7fa f980 	bl	8003502 <_kill>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	d103      	bne.n	800920e <_kill_r+0x1e>
 8009206:	682b      	ldr	r3, [r5, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d000      	beq.n	800920e <_kill_r+0x1e>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	200004d0 	.word	0x200004d0

08009214 <_getpid_r>:
 8009214:	b510      	push	{r4, lr}
 8009216:	f7fa f96e 	bl	80034f6 <_getpid>
 800921a:	bd10      	pop	{r4, pc}

0800921c <__sread>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	000c      	movs	r4, r1
 8009220:	250e      	movs	r5, #14
 8009222:	5f49      	ldrsh	r1, [r1, r5]
 8009224:	f000 f8a4 	bl	8009370 <_read_r>
 8009228:	2800      	cmp	r0, #0
 800922a:	db03      	blt.n	8009234 <__sread+0x18>
 800922c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800922e:	181b      	adds	r3, r3, r0
 8009230:	6563      	str	r3, [r4, #84]	; 0x54
 8009232:	bd70      	pop	{r4, r5, r6, pc}
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	4a02      	ldr	r2, [pc, #8]	; (8009240 <__sread+0x24>)
 8009238:	4013      	ands	r3, r2
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	e7f9      	b.n	8009232 <__sread+0x16>
 800923e:	46c0      	nop			; (mov r8, r8)
 8009240:	ffffefff 	.word	0xffffefff

08009244 <__swrite>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	001f      	movs	r7, r3
 8009248:	898b      	ldrh	r3, [r1, #12]
 800924a:	0005      	movs	r5, r0
 800924c:	000c      	movs	r4, r1
 800924e:	0016      	movs	r6, r2
 8009250:	05db      	lsls	r3, r3, #23
 8009252:	d505      	bpl.n	8009260 <__swrite+0x1c>
 8009254:	230e      	movs	r3, #14
 8009256:	5ec9      	ldrsh	r1, [r1, r3]
 8009258:	2200      	movs	r2, #0
 800925a:	2302      	movs	r3, #2
 800925c:	f000 f874 	bl	8009348 <_lseek_r>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	4a05      	ldr	r2, [pc, #20]	; (8009278 <__swrite+0x34>)
 8009264:	0028      	movs	r0, r5
 8009266:	4013      	ands	r3, r2
 8009268:	81a3      	strh	r3, [r4, #12]
 800926a:	0032      	movs	r2, r6
 800926c:	230e      	movs	r3, #14
 800926e:	5ee1      	ldrsh	r1, [r4, r3]
 8009270:	003b      	movs	r3, r7
 8009272:	f000 f81f 	bl	80092b4 <_write_r>
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009278:	ffffefff 	.word	0xffffefff

0800927c <__sseek>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	000c      	movs	r4, r1
 8009280:	250e      	movs	r5, #14
 8009282:	5f49      	ldrsh	r1, [r1, r5]
 8009284:	f000 f860 	bl	8009348 <_lseek_r>
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	1c42      	adds	r2, r0, #1
 800928c:	d103      	bne.n	8009296 <__sseek+0x1a>
 800928e:	4a05      	ldr	r2, [pc, #20]	; (80092a4 <__sseek+0x28>)
 8009290:	4013      	ands	r3, r2
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	bd70      	pop	{r4, r5, r6, pc}
 8009296:	2280      	movs	r2, #128	; 0x80
 8009298:	0152      	lsls	r2, r2, #5
 800929a:	4313      	orrs	r3, r2
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	6560      	str	r0, [r4, #84]	; 0x54
 80092a0:	e7f8      	b.n	8009294 <__sseek+0x18>
 80092a2:	46c0      	nop			; (mov r8, r8)
 80092a4:	ffffefff 	.word	0xffffefff

080092a8 <__sclose>:
 80092a8:	b510      	push	{r4, lr}
 80092aa:	230e      	movs	r3, #14
 80092ac:	5ec9      	ldrsh	r1, [r1, r3]
 80092ae:	f000 f815 	bl	80092dc <_close_r>
 80092b2:	bd10      	pop	{r4, pc}

080092b4 <_write_r>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	0004      	movs	r4, r0
 80092b8:	0008      	movs	r0, r1
 80092ba:	0011      	movs	r1, r2
 80092bc:	001a      	movs	r2, r3
 80092be:	2300      	movs	r3, #0
 80092c0:	4d05      	ldr	r5, [pc, #20]	; (80092d8 <_write_r+0x24>)
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7fa f956 	bl	8003574 <_write>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d103      	bne.n	80092d4 <_write_r+0x20>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d000      	beq.n	80092d4 <_write_r+0x20>
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	bd70      	pop	{r4, r5, r6, pc}
 80092d6:	46c0      	nop			; (mov r8, r8)
 80092d8:	200004d0 	.word	0x200004d0

080092dc <_close_r>:
 80092dc:	2300      	movs	r3, #0
 80092de:	b570      	push	{r4, r5, r6, lr}
 80092e0:	4d06      	ldr	r5, [pc, #24]	; (80092fc <_close_r+0x20>)
 80092e2:	0004      	movs	r4, r0
 80092e4:	0008      	movs	r0, r1
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	f7fa f960 	bl	80035ac <_close>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d103      	bne.n	80092f8 <_close_r+0x1c>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d000      	beq.n	80092f8 <_close_r+0x1c>
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	bd70      	pop	{r4, r5, r6, pc}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	200004d0 	.word	0x200004d0

08009300 <_fstat_r>:
 8009300:	2300      	movs	r3, #0
 8009302:	b570      	push	{r4, r5, r6, lr}
 8009304:	4d06      	ldr	r5, [pc, #24]	; (8009320 <_fstat_r+0x20>)
 8009306:	0004      	movs	r4, r0
 8009308:	0008      	movs	r0, r1
 800930a:	0011      	movs	r1, r2
 800930c:	602b      	str	r3, [r5, #0]
 800930e:	f7fa f957 	bl	80035c0 <_fstat>
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	d103      	bne.n	800931e <_fstat_r+0x1e>
 8009316:	682b      	ldr	r3, [r5, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d000      	beq.n	800931e <_fstat_r+0x1e>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd70      	pop	{r4, r5, r6, pc}
 8009320:	200004d0 	.word	0x200004d0

08009324 <_isatty_r>:
 8009324:	2300      	movs	r3, #0
 8009326:	b570      	push	{r4, r5, r6, lr}
 8009328:	4d06      	ldr	r5, [pc, #24]	; (8009344 <_isatty_r+0x20>)
 800932a:	0004      	movs	r4, r0
 800932c:	0008      	movs	r0, r1
 800932e:	602b      	str	r3, [r5, #0]
 8009330:	f7fa f954 	bl	80035dc <_isatty>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d103      	bne.n	8009340 <_isatty_r+0x1c>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d000      	beq.n	8009340 <_isatty_r+0x1c>
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	bd70      	pop	{r4, r5, r6, pc}
 8009342:	46c0      	nop			; (mov r8, r8)
 8009344:	200004d0 	.word	0x200004d0

08009348 <_lseek_r>:
 8009348:	b570      	push	{r4, r5, r6, lr}
 800934a:	0004      	movs	r4, r0
 800934c:	0008      	movs	r0, r1
 800934e:	0011      	movs	r1, r2
 8009350:	001a      	movs	r2, r3
 8009352:	2300      	movs	r3, #0
 8009354:	4d05      	ldr	r5, [pc, #20]	; (800936c <_lseek_r+0x24>)
 8009356:	602b      	str	r3, [r5, #0]
 8009358:	f7fa f949 	bl	80035ee <_lseek>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d103      	bne.n	8009368 <_lseek_r+0x20>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d000      	beq.n	8009368 <_lseek_r+0x20>
 8009366:	6023      	str	r3, [r4, #0]
 8009368:	bd70      	pop	{r4, r5, r6, pc}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	200004d0 	.word	0x200004d0

08009370 <_read_r>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	0004      	movs	r4, r0
 8009374:	0008      	movs	r0, r1
 8009376:	0011      	movs	r1, r2
 8009378:	001a      	movs	r2, r3
 800937a:	2300      	movs	r3, #0
 800937c:	4d05      	ldr	r5, [pc, #20]	; (8009394 <_read_r+0x24>)
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7fa f8db 	bl	800353a <_read>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d103      	bne.n	8009390 <_read_r+0x20>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d000      	beq.n	8009390 <_read_r+0x20>
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	bd70      	pop	{r4, r5, r6, pc}
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	200004d0 	.word	0x200004d0

08009398 <_init>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr

080093a4 <_fini>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	46c0      	nop			; (mov r8, r8)
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr
