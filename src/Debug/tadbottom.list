
tadbottom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093ac  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08009468  08009468  00019468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf4  08009bf4  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  08009bf4  08009bf4  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bf4  08009bf4  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08009bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000250  08009e4c  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08009e4c  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012981  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235b  00000000  00000000  00032bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00034f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00035fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ea6  00000000  00000000  00036f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e84  00000000  00000000  0004ddd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec39  00000000  00000000  00061c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  000f08e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000250 	.word	0x20000250
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800944c 	.word	0x0800944c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000254 	.word	0x20000254
 80000fc:	0800944c 	.word	0x0800944c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f98d 	bl	8001754 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8dd 	bl	8001604 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f97f 	bl	8001754 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f975 	bl	8001754 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f905 	bl	8001688 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f8fb 	bl	8001688 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fdiv>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	0245      	lsls	r5, r0, #9
 80004aa:	b5c0      	push	{r6, r7, lr}
 80004ac:	0047      	lsls	r7, r0, #1
 80004ae:	1c0c      	adds	r4, r1, #0
 80004b0:	0a6d      	lsrs	r5, r5, #9
 80004b2:	0e3f      	lsrs	r7, r7, #24
 80004b4:	0fc6      	lsrs	r6, r0, #31
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	d100      	bne.n	80004bc <__aeabi_fdiv+0x1c>
 80004ba:	e070      	b.n	800059e <__aeabi_fdiv+0xfe>
 80004bc:	2fff      	cmp	r7, #255	; 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fdiv+0x22>
 80004c0:	e075      	b.n	80005ae <__aeabi_fdiv+0x10e>
 80004c2:	00eb      	lsls	r3, r5, #3
 80004c4:	2580      	movs	r5, #128	; 0x80
 80004c6:	04ed      	lsls	r5, r5, #19
 80004c8:	431d      	orrs	r5, r3
 80004ca:	2300      	movs	r3, #0
 80004cc:	4699      	mov	r9, r3
 80004ce:	469a      	mov	sl, r3
 80004d0:	3f7f      	subs	r7, #127	; 0x7f
 80004d2:	0260      	lsls	r0, r4, #9
 80004d4:	0a43      	lsrs	r3, r0, #9
 80004d6:	4698      	mov	r8, r3
 80004d8:	0063      	lsls	r3, r4, #1
 80004da:	0e1b      	lsrs	r3, r3, #24
 80004dc:	0fe4      	lsrs	r4, r4, #31
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d04e      	beq.n	8000580 <__aeabi_fdiv+0xe0>
 80004e2:	2bff      	cmp	r3, #255	; 0xff
 80004e4:	d046      	beq.n	8000574 <__aeabi_fdiv+0xd4>
 80004e6:	4642      	mov	r2, r8
 80004e8:	00d0      	lsls	r0, r2, #3
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	04d2      	lsls	r2, r2, #19
 80004ee:	4302      	orrs	r2, r0
 80004f0:	4690      	mov	r8, r2
 80004f2:	2200      	movs	r2, #0
 80004f4:	3b7f      	subs	r3, #127	; 0x7f
 80004f6:	0031      	movs	r1, r6
 80004f8:	1aff      	subs	r7, r7, r3
 80004fa:	464b      	mov	r3, r9
 80004fc:	4061      	eors	r1, r4
 80004fe:	b2c9      	uxtb	r1, r1
 8000500:	4313      	orrs	r3, r2
 8000502:	2b0f      	cmp	r3, #15
 8000504:	d900      	bls.n	8000508 <__aeabi_fdiv+0x68>
 8000506:	e0b5      	b.n	8000674 <__aeabi_fdiv+0x1d4>
 8000508:	486e      	ldr	r0, [pc, #440]	; (80006c4 <__aeabi_fdiv+0x224>)
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	58c3      	ldr	r3, [r0, r3]
 800050e:	469f      	mov	pc, r3
 8000510:	2300      	movs	r3, #0
 8000512:	4698      	mov	r8, r3
 8000514:	0026      	movs	r6, r4
 8000516:	4645      	mov	r5, r8
 8000518:	4692      	mov	sl, r2
 800051a:	4653      	mov	r3, sl
 800051c:	2b02      	cmp	r3, #2
 800051e:	d100      	bne.n	8000522 <__aeabi_fdiv+0x82>
 8000520:	e089      	b.n	8000636 <__aeabi_fdiv+0x196>
 8000522:	2b03      	cmp	r3, #3
 8000524:	d100      	bne.n	8000528 <__aeabi_fdiv+0x88>
 8000526:	e09e      	b.n	8000666 <__aeabi_fdiv+0x1c6>
 8000528:	2b01      	cmp	r3, #1
 800052a:	d018      	beq.n	800055e <__aeabi_fdiv+0xbe>
 800052c:	003b      	movs	r3, r7
 800052e:	337f      	adds	r3, #127	; 0x7f
 8000530:	2b00      	cmp	r3, #0
 8000532:	dd69      	ble.n	8000608 <__aeabi_fdiv+0x168>
 8000534:	076a      	lsls	r2, r5, #29
 8000536:	d004      	beq.n	8000542 <__aeabi_fdiv+0xa2>
 8000538:	220f      	movs	r2, #15
 800053a:	402a      	ands	r2, r5
 800053c:	2a04      	cmp	r2, #4
 800053e:	d000      	beq.n	8000542 <__aeabi_fdiv+0xa2>
 8000540:	3504      	adds	r5, #4
 8000542:	012a      	lsls	r2, r5, #4
 8000544:	d503      	bpl.n	800054e <__aeabi_fdiv+0xae>
 8000546:	4b60      	ldr	r3, [pc, #384]	; (80006c8 <__aeabi_fdiv+0x228>)
 8000548:	401d      	ands	r5, r3
 800054a:	003b      	movs	r3, r7
 800054c:	3380      	adds	r3, #128	; 0x80
 800054e:	2bfe      	cmp	r3, #254	; 0xfe
 8000550:	dd00      	ble.n	8000554 <__aeabi_fdiv+0xb4>
 8000552:	e070      	b.n	8000636 <__aeabi_fdiv+0x196>
 8000554:	01ad      	lsls	r5, r5, #6
 8000556:	0a6d      	lsrs	r5, r5, #9
 8000558:	b2d8      	uxtb	r0, r3
 800055a:	e002      	b.n	8000562 <__aeabi_fdiv+0xc2>
 800055c:	000e      	movs	r6, r1
 800055e:	2000      	movs	r0, #0
 8000560:	2500      	movs	r5, #0
 8000562:	05c0      	lsls	r0, r0, #23
 8000564:	4328      	orrs	r0, r5
 8000566:	07f6      	lsls	r6, r6, #31
 8000568:	4330      	orrs	r0, r6
 800056a:	bce0      	pop	{r5, r6, r7}
 800056c:	46ba      	mov	sl, r7
 800056e:	46b1      	mov	r9, r6
 8000570:	46a8      	mov	r8, r5
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4643      	mov	r3, r8
 8000576:	2b00      	cmp	r3, #0
 8000578:	d13f      	bne.n	80005fa <__aeabi_fdiv+0x15a>
 800057a:	2202      	movs	r2, #2
 800057c:	3fff      	subs	r7, #255	; 0xff
 800057e:	e003      	b.n	8000588 <__aeabi_fdiv+0xe8>
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d12d      	bne.n	80005e2 <__aeabi_fdiv+0x142>
 8000586:	2201      	movs	r2, #1
 8000588:	0031      	movs	r1, r6
 800058a:	464b      	mov	r3, r9
 800058c:	4061      	eors	r1, r4
 800058e:	b2c9      	uxtb	r1, r1
 8000590:	4313      	orrs	r3, r2
 8000592:	2b0f      	cmp	r3, #15
 8000594:	d834      	bhi.n	8000600 <__aeabi_fdiv+0x160>
 8000596:	484d      	ldr	r0, [pc, #308]	; (80006cc <__aeabi_fdiv+0x22c>)
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	58c3      	ldr	r3, [r0, r3]
 800059c:	469f      	mov	pc, r3
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d113      	bne.n	80005ca <__aeabi_fdiv+0x12a>
 80005a2:	2304      	movs	r3, #4
 80005a4:	4699      	mov	r9, r3
 80005a6:	3b03      	subs	r3, #3
 80005a8:	2700      	movs	r7, #0
 80005aa:	469a      	mov	sl, r3
 80005ac:	e791      	b.n	80004d2 <__aeabi_fdiv+0x32>
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d105      	bne.n	80005be <__aeabi_fdiv+0x11e>
 80005b2:	2308      	movs	r3, #8
 80005b4:	4699      	mov	r9, r3
 80005b6:	3b06      	subs	r3, #6
 80005b8:	27ff      	movs	r7, #255	; 0xff
 80005ba:	469a      	mov	sl, r3
 80005bc:	e789      	b.n	80004d2 <__aeabi_fdiv+0x32>
 80005be:	230c      	movs	r3, #12
 80005c0:	4699      	mov	r9, r3
 80005c2:	3b09      	subs	r3, #9
 80005c4:	27ff      	movs	r7, #255	; 0xff
 80005c6:	469a      	mov	sl, r3
 80005c8:	e783      	b.n	80004d2 <__aeabi_fdiv+0x32>
 80005ca:	0028      	movs	r0, r5
 80005cc:	f002 f816 	bl	80025fc <__clzsi2>
 80005d0:	2776      	movs	r7, #118	; 0x76
 80005d2:	1f43      	subs	r3, r0, #5
 80005d4:	409d      	lsls	r5, r3
 80005d6:	2300      	movs	r3, #0
 80005d8:	427f      	negs	r7, r7
 80005da:	4699      	mov	r9, r3
 80005dc:	469a      	mov	sl, r3
 80005de:	1a3f      	subs	r7, r7, r0
 80005e0:	e777      	b.n	80004d2 <__aeabi_fdiv+0x32>
 80005e2:	4640      	mov	r0, r8
 80005e4:	f002 f80a 	bl	80025fc <__clzsi2>
 80005e8:	4642      	mov	r2, r8
 80005ea:	1f43      	subs	r3, r0, #5
 80005ec:	409a      	lsls	r2, r3
 80005ee:	2376      	movs	r3, #118	; 0x76
 80005f0:	425b      	negs	r3, r3
 80005f2:	4690      	mov	r8, r2
 80005f4:	1a1b      	subs	r3, r3, r0
 80005f6:	2200      	movs	r2, #0
 80005f8:	e77d      	b.n	80004f6 <__aeabi_fdiv+0x56>
 80005fa:	23ff      	movs	r3, #255	; 0xff
 80005fc:	2203      	movs	r2, #3
 80005fe:	e77a      	b.n	80004f6 <__aeabi_fdiv+0x56>
 8000600:	000e      	movs	r6, r1
 8000602:	20ff      	movs	r0, #255	; 0xff
 8000604:	2500      	movs	r5, #0
 8000606:	e7ac      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000608:	2001      	movs	r0, #1
 800060a:	1ac0      	subs	r0, r0, r3
 800060c:	281b      	cmp	r0, #27
 800060e:	dca6      	bgt.n	800055e <__aeabi_fdiv+0xbe>
 8000610:	379e      	adds	r7, #158	; 0x9e
 8000612:	002a      	movs	r2, r5
 8000614:	40bd      	lsls	r5, r7
 8000616:	40c2      	lsrs	r2, r0
 8000618:	1e6b      	subs	r3, r5, #1
 800061a:	419d      	sbcs	r5, r3
 800061c:	4315      	orrs	r5, r2
 800061e:	076b      	lsls	r3, r5, #29
 8000620:	d004      	beq.n	800062c <__aeabi_fdiv+0x18c>
 8000622:	230f      	movs	r3, #15
 8000624:	402b      	ands	r3, r5
 8000626:	2b04      	cmp	r3, #4
 8000628:	d000      	beq.n	800062c <__aeabi_fdiv+0x18c>
 800062a:	3504      	adds	r5, #4
 800062c:	016b      	lsls	r3, r5, #5
 800062e:	d544      	bpl.n	80006ba <__aeabi_fdiv+0x21a>
 8000630:	2001      	movs	r0, #1
 8000632:	2500      	movs	r5, #0
 8000634:	e795      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000636:	20ff      	movs	r0, #255	; 0xff
 8000638:	2500      	movs	r5, #0
 800063a:	e792      	b.n	8000562 <__aeabi_fdiv+0xc2>
 800063c:	2580      	movs	r5, #128	; 0x80
 800063e:	2600      	movs	r6, #0
 8000640:	20ff      	movs	r0, #255	; 0xff
 8000642:	03ed      	lsls	r5, r5, #15
 8000644:	e78d      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000646:	2300      	movs	r3, #0
 8000648:	4698      	mov	r8, r3
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	03c0      	lsls	r0, r0, #15
 800064e:	4205      	tst	r5, r0
 8000650:	d009      	beq.n	8000666 <__aeabi_fdiv+0x1c6>
 8000652:	4643      	mov	r3, r8
 8000654:	4203      	tst	r3, r0
 8000656:	d106      	bne.n	8000666 <__aeabi_fdiv+0x1c6>
 8000658:	4645      	mov	r5, r8
 800065a:	4305      	orrs	r5, r0
 800065c:	026d      	lsls	r5, r5, #9
 800065e:	0026      	movs	r6, r4
 8000660:	20ff      	movs	r0, #255	; 0xff
 8000662:	0a6d      	lsrs	r5, r5, #9
 8000664:	e77d      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000666:	2080      	movs	r0, #128	; 0x80
 8000668:	03c0      	lsls	r0, r0, #15
 800066a:	4305      	orrs	r5, r0
 800066c:	026d      	lsls	r5, r5, #9
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	0a6d      	lsrs	r5, r5, #9
 8000672:	e776      	b.n	8000562 <__aeabi_fdiv+0xc2>
 8000674:	4642      	mov	r2, r8
 8000676:	016b      	lsls	r3, r5, #5
 8000678:	0150      	lsls	r0, r2, #5
 800067a:	4283      	cmp	r3, r0
 800067c:	d219      	bcs.n	80006b2 <__aeabi_fdiv+0x212>
 800067e:	221b      	movs	r2, #27
 8000680:	2500      	movs	r5, #0
 8000682:	3f01      	subs	r7, #1
 8000684:	2601      	movs	r6, #1
 8000686:	001c      	movs	r4, r3
 8000688:	006d      	lsls	r5, r5, #1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	2c00      	cmp	r4, #0
 800068e:	db01      	blt.n	8000694 <__aeabi_fdiv+0x1f4>
 8000690:	4298      	cmp	r0, r3
 8000692:	d801      	bhi.n	8000698 <__aeabi_fdiv+0x1f8>
 8000694:	1a1b      	subs	r3, r3, r0
 8000696:	4335      	orrs	r5, r6
 8000698:	3a01      	subs	r2, #1
 800069a:	2a00      	cmp	r2, #0
 800069c:	d1f3      	bne.n	8000686 <__aeabi_fdiv+0x1e6>
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	4193      	sbcs	r3, r2
 80006a2:	431d      	orrs	r5, r3
 80006a4:	003b      	movs	r3, r7
 80006a6:	337f      	adds	r3, #127	; 0x7f
 80006a8:	000e      	movs	r6, r1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_fdiv+0x210>
 80006ae:	e741      	b.n	8000534 <__aeabi_fdiv+0x94>
 80006b0:	e7aa      	b.n	8000608 <__aeabi_fdiv+0x168>
 80006b2:	221a      	movs	r2, #26
 80006b4:	2501      	movs	r5, #1
 80006b6:	1a1b      	subs	r3, r3, r0
 80006b8:	e7e4      	b.n	8000684 <__aeabi_fdiv+0x1e4>
 80006ba:	01ad      	lsls	r5, r5, #6
 80006bc:	2000      	movs	r0, #0
 80006be:	0a6d      	lsrs	r5, r5, #9
 80006c0:	e74f      	b.n	8000562 <__aeabi_fdiv+0xc2>
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	0800964c 	.word	0x0800964c
 80006c8:	f7ffffff 	.word	0xf7ffffff
 80006cc:	0800968c 	.word	0x0800968c

080006d0 <__aeabi_fmul>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	4646      	mov	r6, r8
 80006d6:	46d6      	mov	lr, sl
 80006d8:	0244      	lsls	r4, r0, #9
 80006da:	0045      	lsls	r5, r0, #1
 80006dc:	b5c0      	push	{r6, r7, lr}
 80006de:	0a64      	lsrs	r4, r4, #9
 80006e0:	1c0f      	adds	r7, r1, #0
 80006e2:	0e2d      	lsrs	r5, r5, #24
 80006e4:	0fc6      	lsrs	r6, r0, #31
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d100      	bne.n	80006ec <__aeabi_fmul+0x1c>
 80006ea:	e08d      	b.n	8000808 <__aeabi_fmul+0x138>
 80006ec:	2dff      	cmp	r5, #255	; 0xff
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fmul+0x22>
 80006f0:	e092      	b.n	8000818 <__aeabi_fmul+0x148>
 80006f2:	2300      	movs	r3, #0
 80006f4:	2080      	movs	r0, #128	; 0x80
 80006f6:	4699      	mov	r9, r3
 80006f8:	469a      	mov	sl, r3
 80006fa:	00e4      	lsls	r4, r4, #3
 80006fc:	04c0      	lsls	r0, r0, #19
 80006fe:	4304      	orrs	r4, r0
 8000700:	3d7f      	subs	r5, #127	; 0x7f
 8000702:	0278      	lsls	r0, r7, #9
 8000704:	0a43      	lsrs	r3, r0, #9
 8000706:	4698      	mov	r8, r3
 8000708:	007b      	lsls	r3, r7, #1
 800070a:	0e1b      	lsrs	r3, r3, #24
 800070c:	0fff      	lsrs	r7, r7, #31
 800070e:	2b00      	cmp	r3, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fmul+0x44>
 8000712:	e070      	b.n	80007f6 <__aeabi_fmul+0x126>
 8000714:	2bff      	cmp	r3, #255	; 0xff
 8000716:	d100      	bne.n	800071a <__aeabi_fmul+0x4a>
 8000718:	e086      	b.n	8000828 <__aeabi_fmul+0x158>
 800071a:	4642      	mov	r2, r8
 800071c:	00d0      	lsls	r0, r2, #3
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	3b7f      	subs	r3, #127	; 0x7f
 8000722:	18ed      	adds	r5, r5, r3
 8000724:	2300      	movs	r3, #0
 8000726:	04d2      	lsls	r2, r2, #19
 8000728:	4302      	orrs	r2, r0
 800072a:	4690      	mov	r8, r2
 800072c:	469c      	mov	ip, r3
 800072e:	0031      	movs	r1, r6
 8000730:	464b      	mov	r3, r9
 8000732:	4079      	eors	r1, r7
 8000734:	1c68      	adds	r0, r5, #1
 8000736:	2b0f      	cmp	r3, #15
 8000738:	d81c      	bhi.n	8000774 <__aeabi_fmul+0xa4>
 800073a:	4a76      	ldr	r2, [pc, #472]	; (8000914 <__aeabi_fmul+0x244>)
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	58d3      	ldr	r3, [r2, r3]
 8000740:	469f      	mov	pc, r3
 8000742:	0039      	movs	r1, r7
 8000744:	4644      	mov	r4, r8
 8000746:	46e2      	mov	sl, ip
 8000748:	4653      	mov	r3, sl
 800074a:	2b02      	cmp	r3, #2
 800074c:	d00f      	beq.n	800076e <__aeabi_fmul+0x9e>
 800074e:	2b03      	cmp	r3, #3
 8000750:	d100      	bne.n	8000754 <__aeabi_fmul+0x84>
 8000752:	e0d7      	b.n	8000904 <__aeabi_fmul+0x234>
 8000754:	2b01      	cmp	r3, #1
 8000756:	d137      	bne.n	80007c8 <__aeabi_fmul+0xf8>
 8000758:	2000      	movs	r0, #0
 800075a:	2400      	movs	r4, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4320      	orrs	r0, r4
 8000760:	07c9      	lsls	r1, r1, #31
 8000762:	4308      	orrs	r0, r1
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	20ff      	movs	r0, #255	; 0xff
 8000770:	2400      	movs	r4, #0
 8000772:	e7f3      	b.n	800075c <__aeabi_fmul+0x8c>
 8000774:	0c26      	lsrs	r6, r4, #16
 8000776:	0424      	lsls	r4, r4, #16
 8000778:	0c22      	lsrs	r2, r4, #16
 800077a:	4644      	mov	r4, r8
 800077c:	0424      	lsls	r4, r4, #16
 800077e:	0c24      	lsrs	r4, r4, #16
 8000780:	4643      	mov	r3, r8
 8000782:	0027      	movs	r7, r4
 8000784:	0c1b      	lsrs	r3, r3, #16
 8000786:	4357      	muls	r7, r2
 8000788:	4374      	muls	r4, r6
 800078a:	435a      	muls	r2, r3
 800078c:	435e      	muls	r6, r3
 800078e:	1912      	adds	r2, r2, r4
 8000790:	0c3b      	lsrs	r3, r7, #16
 8000792:	189b      	adds	r3, r3, r2
 8000794:	429c      	cmp	r4, r3
 8000796:	d903      	bls.n	80007a0 <__aeabi_fmul+0xd0>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0252      	lsls	r2, r2, #9
 800079c:	4694      	mov	ip, r2
 800079e:	4466      	add	r6, ip
 80007a0:	043f      	lsls	r7, r7, #16
 80007a2:	041a      	lsls	r2, r3, #16
 80007a4:	0c3f      	lsrs	r7, r7, #16
 80007a6:	19d2      	adds	r2, r2, r7
 80007a8:	0194      	lsls	r4, r2, #6
 80007aa:	1e67      	subs	r7, r4, #1
 80007ac:	41bc      	sbcs	r4, r7
 80007ae:	0c1b      	lsrs	r3, r3, #16
 80007b0:	0e92      	lsrs	r2, r2, #26
 80007b2:	199b      	adds	r3, r3, r6
 80007b4:	4314      	orrs	r4, r2
 80007b6:	019b      	lsls	r3, r3, #6
 80007b8:	431c      	orrs	r4, r3
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	d400      	bmi.n	80007c0 <__aeabi_fmul+0xf0>
 80007be:	e09b      	b.n	80008f8 <__aeabi_fmul+0x228>
 80007c0:	2301      	movs	r3, #1
 80007c2:	0862      	lsrs	r2, r4, #1
 80007c4:	401c      	ands	r4, r3
 80007c6:	4314      	orrs	r4, r2
 80007c8:	0002      	movs	r2, r0
 80007ca:	327f      	adds	r2, #127	; 0x7f
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	dd64      	ble.n	800089a <__aeabi_fmul+0x1ca>
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d004      	beq.n	80007de <__aeabi_fmul+0x10e>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d000      	beq.n	80007de <__aeabi_fmul+0x10e>
 80007dc:	3404      	adds	r4, #4
 80007de:	0123      	lsls	r3, r4, #4
 80007e0:	d503      	bpl.n	80007ea <__aeabi_fmul+0x11a>
 80007e2:	0002      	movs	r2, r0
 80007e4:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <__aeabi_fmul+0x248>)
 80007e6:	3280      	adds	r2, #128	; 0x80
 80007e8:	401c      	ands	r4, r3
 80007ea:	2afe      	cmp	r2, #254	; 0xfe
 80007ec:	dcbf      	bgt.n	800076e <__aeabi_fmul+0x9e>
 80007ee:	01a4      	lsls	r4, r4, #6
 80007f0:	0a64      	lsrs	r4, r4, #9
 80007f2:	b2d0      	uxtb	r0, r2
 80007f4:	e7b2      	b.n	800075c <__aeabi_fmul+0x8c>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d13d      	bne.n	8000878 <__aeabi_fmul+0x1a8>
 80007fc:	464a      	mov	r2, r9
 80007fe:	3301      	adds	r3, #1
 8000800:	431a      	orrs	r2, r3
 8000802:	4691      	mov	r9, r2
 8000804:	469c      	mov	ip, r3
 8000806:	e792      	b.n	800072e <__aeabi_fmul+0x5e>
 8000808:	2c00      	cmp	r4, #0
 800080a:	d129      	bne.n	8000860 <__aeabi_fmul+0x190>
 800080c:	2304      	movs	r3, #4
 800080e:	4699      	mov	r9, r3
 8000810:	3b03      	subs	r3, #3
 8000812:	2500      	movs	r5, #0
 8000814:	469a      	mov	sl, r3
 8000816:	e774      	b.n	8000702 <__aeabi_fmul+0x32>
 8000818:	2c00      	cmp	r4, #0
 800081a:	d11b      	bne.n	8000854 <__aeabi_fmul+0x184>
 800081c:	2308      	movs	r3, #8
 800081e:	4699      	mov	r9, r3
 8000820:	3b06      	subs	r3, #6
 8000822:	25ff      	movs	r5, #255	; 0xff
 8000824:	469a      	mov	sl, r3
 8000826:	e76c      	b.n	8000702 <__aeabi_fmul+0x32>
 8000828:	4643      	mov	r3, r8
 800082a:	35ff      	adds	r5, #255	; 0xff
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10b      	bne.n	8000848 <__aeabi_fmul+0x178>
 8000830:	2302      	movs	r3, #2
 8000832:	464a      	mov	r2, r9
 8000834:	431a      	orrs	r2, r3
 8000836:	4691      	mov	r9, r2
 8000838:	469c      	mov	ip, r3
 800083a:	e778      	b.n	800072e <__aeabi_fmul+0x5e>
 800083c:	4653      	mov	r3, sl
 800083e:	0031      	movs	r1, r6
 8000840:	2b02      	cmp	r3, #2
 8000842:	d000      	beq.n	8000846 <__aeabi_fmul+0x176>
 8000844:	e783      	b.n	800074e <__aeabi_fmul+0x7e>
 8000846:	e792      	b.n	800076e <__aeabi_fmul+0x9e>
 8000848:	2303      	movs	r3, #3
 800084a:	464a      	mov	r2, r9
 800084c:	431a      	orrs	r2, r3
 800084e:	4691      	mov	r9, r2
 8000850:	469c      	mov	ip, r3
 8000852:	e76c      	b.n	800072e <__aeabi_fmul+0x5e>
 8000854:	230c      	movs	r3, #12
 8000856:	4699      	mov	r9, r3
 8000858:	3b09      	subs	r3, #9
 800085a:	25ff      	movs	r5, #255	; 0xff
 800085c:	469a      	mov	sl, r3
 800085e:	e750      	b.n	8000702 <__aeabi_fmul+0x32>
 8000860:	0020      	movs	r0, r4
 8000862:	f001 fecb 	bl	80025fc <__clzsi2>
 8000866:	2576      	movs	r5, #118	; 0x76
 8000868:	1f43      	subs	r3, r0, #5
 800086a:	409c      	lsls	r4, r3
 800086c:	2300      	movs	r3, #0
 800086e:	426d      	negs	r5, r5
 8000870:	4699      	mov	r9, r3
 8000872:	469a      	mov	sl, r3
 8000874:	1a2d      	subs	r5, r5, r0
 8000876:	e744      	b.n	8000702 <__aeabi_fmul+0x32>
 8000878:	4640      	mov	r0, r8
 800087a:	f001 febf 	bl	80025fc <__clzsi2>
 800087e:	4642      	mov	r2, r8
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409a      	lsls	r2, r3
 8000884:	2300      	movs	r3, #0
 8000886:	1a2d      	subs	r5, r5, r0
 8000888:	4690      	mov	r8, r2
 800088a:	469c      	mov	ip, r3
 800088c:	3d76      	subs	r5, #118	; 0x76
 800088e:	e74e      	b.n	800072e <__aeabi_fmul+0x5e>
 8000890:	2480      	movs	r4, #128	; 0x80
 8000892:	2100      	movs	r1, #0
 8000894:	20ff      	movs	r0, #255	; 0xff
 8000896:	03e4      	lsls	r4, r4, #15
 8000898:	e760      	b.n	800075c <__aeabi_fmul+0x8c>
 800089a:	2301      	movs	r3, #1
 800089c:	1a9b      	subs	r3, r3, r2
 800089e:	2b1b      	cmp	r3, #27
 80008a0:	dd00      	ble.n	80008a4 <__aeabi_fmul+0x1d4>
 80008a2:	e759      	b.n	8000758 <__aeabi_fmul+0x88>
 80008a4:	0022      	movs	r2, r4
 80008a6:	309e      	adds	r0, #158	; 0x9e
 80008a8:	40da      	lsrs	r2, r3
 80008aa:	4084      	lsls	r4, r0
 80008ac:	0013      	movs	r3, r2
 80008ae:	1e62      	subs	r2, r4, #1
 80008b0:	4194      	sbcs	r4, r2
 80008b2:	431c      	orrs	r4, r3
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d004      	beq.n	80008c2 <__aeabi_fmul+0x1f2>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d000      	beq.n	80008c2 <__aeabi_fmul+0x1f2>
 80008c0:	3404      	adds	r4, #4
 80008c2:	0163      	lsls	r3, r4, #5
 80008c4:	d51a      	bpl.n	80008fc <__aeabi_fmul+0x22c>
 80008c6:	2001      	movs	r0, #1
 80008c8:	2400      	movs	r4, #0
 80008ca:	e747      	b.n	800075c <__aeabi_fmul+0x8c>
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	03c0      	lsls	r0, r0, #15
 80008d0:	4204      	tst	r4, r0
 80008d2:	d009      	beq.n	80008e8 <__aeabi_fmul+0x218>
 80008d4:	4643      	mov	r3, r8
 80008d6:	4203      	tst	r3, r0
 80008d8:	d106      	bne.n	80008e8 <__aeabi_fmul+0x218>
 80008da:	4644      	mov	r4, r8
 80008dc:	4304      	orrs	r4, r0
 80008de:	0264      	lsls	r4, r4, #9
 80008e0:	0039      	movs	r1, r7
 80008e2:	20ff      	movs	r0, #255	; 0xff
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	e739      	b.n	800075c <__aeabi_fmul+0x8c>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	03c0      	lsls	r0, r0, #15
 80008ec:	4304      	orrs	r4, r0
 80008ee:	0264      	lsls	r4, r4, #9
 80008f0:	0031      	movs	r1, r6
 80008f2:	20ff      	movs	r0, #255	; 0xff
 80008f4:	0a64      	lsrs	r4, r4, #9
 80008f6:	e731      	b.n	800075c <__aeabi_fmul+0x8c>
 80008f8:	0028      	movs	r0, r5
 80008fa:	e765      	b.n	80007c8 <__aeabi_fmul+0xf8>
 80008fc:	01a4      	lsls	r4, r4, #6
 80008fe:	2000      	movs	r0, #0
 8000900:	0a64      	lsrs	r4, r4, #9
 8000902:	e72b      	b.n	800075c <__aeabi_fmul+0x8c>
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	03c0      	lsls	r0, r0, #15
 8000908:	4304      	orrs	r4, r0
 800090a:	0264      	lsls	r4, r4, #9
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	0a64      	lsrs	r4, r4, #9
 8000910:	e724      	b.n	800075c <__aeabi_fmul+0x8c>
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	080096cc 	.word	0x080096cc
 8000918:	f7ffffff 	.word	0xf7ffffff

0800091c <__aeabi_ui2f>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	1e05      	subs	r5, r0, #0
 8000920:	d00e      	beq.n	8000940 <__aeabi_ui2f+0x24>
 8000922:	f001 fe6b 	bl	80025fc <__clzsi2>
 8000926:	239e      	movs	r3, #158	; 0x9e
 8000928:	0004      	movs	r4, r0
 800092a:	1a1b      	subs	r3, r3, r0
 800092c:	2b96      	cmp	r3, #150	; 0x96
 800092e:	dc0c      	bgt.n	800094a <__aeabi_ui2f+0x2e>
 8000930:	2808      	cmp	r0, #8
 8000932:	dd01      	ble.n	8000938 <__aeabi_ui2f+0x1c>
 8000934:	3c08      	subs	r4, #8
 8000936:	40a5      	lsls	r5, r4
 8000938:	026d      	lsls	r5, r5, #9
 800093a:	0a6d      	lsrs	r5, r5, #9
 800093c:	b2d8      	uxtb	r0, r3
 800093e:	e001      	b.n	8000944 <__aeabi_ui2f+0x28>
 8000940:	2000      	movs	r0, #0
 8000942:	2500      	movs	r5, #0
 8000944:	05c0      	lsls	r0, r0, #23
 8000946:	4328      	orrs	r0, r5
 8000948:	bd70      	pop	{r4, r5, r6, pc}
 800094a:	2b99      	cmp	r3, #153	; 0x99
 800094c:	dd09      	ble.n	8000962 <__aeabi_ui2f+0x46>
 800094e:	0002      	movs	r2, r0
 8000950:	0029      	movs	r1, r5
 8000952:	321b      	adds	r2, #27
 8000954:	4091      	lsls	r1, r2
 8000956:	1e4a      	subs	r2, r1, #1
 8000958:	4191      	sbcs	r1, r2
 800095a:	2205      	movs	r2, #5
 800095c:	1a12      	subs	r2, r2, r0
 800095e:	40d5      	lsrs	r5, r2
 8000960:	430d      	orrs	r5, r1
 8000962:	2c05      	cmp	r4, #5
 8000964:	dc12      	bgt.n	800098c <__aeabi_ui2f+0x70>
 8000966:	0029      	movs	r1, r5
 8000968:	4e0c      	ldr	r6, [pc, #48]	; (800099c <__aeabi_ui2f+0x80>)
 800096a:	4031      	ands	r1, r6
 800096c:	076a      	lsls	r2, r5, #29
 800096e:	d009      	beq.n	8000984 <__aeabi_ui2f+0x68>
 8000970:	200f      	movs	r0, #15
 8000972:	4028      	ands	r0, r5
 8000974:	2804      	cmp	r0, #4
 8000976:	d005      	beq.n	8000984 <__aeabi_ui2f+0x68>
 8000978:	3104      	adds	r1, #4
 800097a:	014a      	lsls	r2, r1, #5
 800097c:	d502      	bpl.n	8000984 <__aeabi_ui2f+0x68>
 800097e:	239f      	movs	r3, #159	; 0x9f
 8000980:	4031      	ands	r1, r6
 8000982:	1b1b      	subs	r3, r3, r4
 8000984:	0189      	lsls	r1, r1, #6
 8000986:	0a4d      	lsrs	r5, r1, #9
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	e7db      	b.n	8000944 <__aeabi_ui2f+0x28>
 800098c:	1f62      	subs	r2, r4, #5
 800098e:	4095      	lsls	r5, r2
 8000990:	0029      	movs	r1, r5
 8000992:	4e02      	ldr	r6, [pc, #8]	; (800099c <__aeabi_ui2f+0x80>)
 8000994:	4031      	ands	r1, r6
 8000996:	076a      	lsls	r2, r5, #29
 8000998:	d0f4      	beq.n	8000984 <__aeabi_ui2f+0x68>
 800099a:	e7e9      	b.n	8000970 <__aeabi_ui2f+0x54>
 800099c:	fbffffff 	.word	0xfbffffff

080009a0 <__aeabi_dadd>:
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a2:	464f      	mov	r7, r9
 80009a4:	4646      	mov	r6, r8
 80009a6:	46d6      	mov	lr, sl
 80009a8:	000d      	movs	r5, r1
 80009aa:	0004      	movs	r4, r0
 80009ac:	b5c0      	push	{r6, r7, lr}
 80009ae:	001f      	movs	r7, r3
 80009b0:	0011      	movs	r1, r2
 80009b2:	0328      	lsls	r0, r5, #12
 80009b4:	0f62      	lsrs	r2, r4, #29
 80009b6:	0a40      	lsrs	r0, r0, #9
 80009b8:	4310      	orrs	r0, r2
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0d52      	lsrs	r2, r2, #21
 80009be:	00e3      	lsls	r3, r4, #3
 80009c0:	033c      	lsls	r4, r7, #12
 80009c2:	4691      	mov	r9, r2
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	0ffa      	lsrs	r2, r7, #31
 80009c8:	0f4f      	lsrs	r7, r1, #29
 80009ca:	006e      	lsls	r6, r5, #1
 80009cc:	4327      	orrs	r7, r4
 80009ce:	4692      	mov	sl, r2
 80009d0:	46b8      	mov	r8, r7
 80009d2:	0d76      	lsrs	r6, r6, #21
 80009d4:	0fed      	lsrs	r5, r5, #31
 80009d6:	00c9      	lsls	r1, r1, #3
 80009d8:	4295      	cmp	r5, r2
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x3e>
 80009dc:	e099      	b.n	8000b12 <__aeabi_dadd+0x172>
 80009de:	464c      	mov	r4, r9
 80009e0:	1b34      	subs	r4, r6, r4
 80009e2:	46a4      	mov	ip, r4
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	dc00      	bgt.n	80009ea <__aeabi_dadd+0x4a>
 80009e8:	e07c      	b.n	8000ae4 <__aeabi_dadd+0x144>
 80009ea:	464a      	mov	r2, r9
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x52>
 80009f0:	e0b8      	b.n	8000b64 <__aeabi_dadd+0x1c4>
 80009f2:	4ac5      	ldr	r2, [pc, #788]	; (8000d08 <__aeabi_dadd+0x368>)
 80009f4:	4296      	cmp	r6, r2
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x5a>
 80009f8:	e11c      	b.n	8000c34 <__aeabi_dadd+0x294>
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	003c      	movs	r4, r7
 80009fe:	0412      	lsls	r2, r2, #16
 8000a00:	4314      	orrs	r4, r2
 8000a02:	46a0      	mov	r8, r4
 8000a04:	4662      	mov	r2, ip
 8000a06:	2a38      	cmp	r2, #56	; 0x38
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x6c>
 8000a0a:	e161      	b.n	8000cd0 <__aeabi_dadd+0x330>
 8000a0c:	2a1f      	cmp	r2, #31
 8000a0e:	dd00      	ble.n	8000a12 <__aeabi_dadd+0x72>
 8000a10:	e1cc      	b.n	8000dac <__aeabi_dadd+0x40c>
 8000a12:	4664      	mov	r4, ip
 8000a14:	2220      	movs	r2, #32
 8000a16:	1b12      	subs	r2, r2, r4
 8000a18:	4644      	mov	r4, r8
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	000f      	movs	r7, r1
 8000a1e:	46a1      	mov	r9, r4
 8000a20:	4664      	mov	r4, ip
 8000a22:	4091      	lsls	r1, r2
 8000a24:	40e7      	lsrs	r7, r4
 8000a26:	464c      	mov	r4, r9
 8000a28:	1e4a      	subs	r2, r1, #1
 8000a2a:	4191      	sbcs	r1, r2
 8000a2c:	433c      	orrs	r4, r7
 8000a2e:	4642      	mov	r2, r8
 8000a30:	4321      	orrs	r1, r4
 8000a32:	4664      	mov	r4, ip
 8000a34:	40e2      	lsrs	r2, r4
 8000a36:	1a80      	subs	r0, r0, r2
 8000a38:	1a5c      	subs	r4, r3, r1
 8000a3a:	42a3      	cmp	r3, r4
 8000a3c:	419b      	sbcs	r3, r3
 8000a3e:	425f      	negs	r7, r3
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	023b      	lsls	r3, r7, #8
 8000a44:	d400      	bmi.n	8000a48 <__aeabi_dadd+0xa8>
 8000a46:	e0d0      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000a48:	027f      	lsls	r7, r7, #9
 8000a4a:	0a7f      	lsrs	r7, r7, #9
 8000a4c:	2f00      	cmp	r7, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0xb2>
 8000a50:	e0ff      	b.n	8000c52 <__aeabi_dadd+0x2b2>
 8000a52:	0038      	movs	r0, r7
 8000a54:	f001 fdd2 	bl	80025fc <__clzsi2>
 8000a58:	0001      	movs	r1, r0
 8000a5a:	3908      	subs	r1, #8
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	0022      	movs	r2, r4
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	408f      	lsls	r7, r1
 8000a64:	40da      	lsrs	r2, r3
 8000a66:	408c      	lsls	r4, r1
 8000a68:	4317      	orrs	r7, r2
 8000a6a:	42b1      	cmp	r1, r6
 8000a6c:	da00      	bge.n	8000a70 <__aeabi_dadd+0xd0>
 8000a6e:	e0ff      	b.n	8000c70 <__aeabi_dadd+0x2d0>
 8000a70:	1b89      	subs	r1, r1, r6
 8000a72:	1c4b      	adds	r3, r1, #1
 8000a74:	2b1f      	cmp	r3, #31
 8000a76:	dd00      	ble.n	8000a7a <__aeabi_dadd+0xda>
 8000a78:	e0a8      	b.n	8000bcc <__aeabi_dadd+0x22c>
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	0039      	movs	r1, r7
 8000a7e:	1ad2      	subs	r2, r2, r3
 8000a80:	0020      	movs	r0, r4
 8000a82:	4094      	lsls	r4, r2
 8000a84:	4091      	lsls	r1, r2
 8000a86:	40d8      	lsrs	r0, r3
 8000a88:	1e62      	subs	r2, r4, #1
 8000a8a:	4194      	sbcs	r4, r2
 8000a8c:	40df      	lsrs	r7, r3
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4301      	orrs	r1, r0
 8000a92:	430c      	orrs	r4, r1
 8000a94:	0763      	lsls	r3, r4, #29
 8000a96:	d009      	beq.n	8000aac <__aeabi_dadd+0x10c>
 8000a98:	230f      	movs	r3, #15
 8000a9a:	4023      	ands	r3, r4
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d005      	beq.n	8000aac <__aeabi_dadd+0x10c>
 8000aa0:	1d23      	adds	r3, r4, #4
 8000aa2:	42a3      	cmp	r3, r4
 8000aa4:	41a4      	sbcs	r4, r4
 8000aa6:	4264      	negs	r4, r4
 8000aa8:	193f      	adds	r7, r7, r4
 8000aaa:	001c      	movs	r4, r3
 8000aac:	023b      	lsls	r3, r7, #8
 8000aae:	d400      	bmi.n	8000ab2 <__aeabi_dadd+0x112>
 8000ab0:	e09e      	b.n	8000bf0 <__aeabi_dadd+0x250>
 8000ab2:	4b95      	ldr	r3, [pc, #596]	; (8000d08 <__aeabi_dadd+0x368>)
 8000ab4:	3601      	adds	r6, #1
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x11c>
 8000aba:	e0b7      	b.n	8000c2c <__aeabi_dadd+0x28c>
 8000abc:	4a93      	ldr	r2, [pc, #588]	; (8000d0c <__aeabi_dadd+0x36c>)
 8000abe:	08e4      	lsrs	r4, r4, #3
 8000ac0:	4017      	ands	r7, r2
 8000ac2:	077b      	lsls	r3, r7, #29
 8000ac4:	0571      	lsls	r1, r6, #21
 8000ac6:	027f      	lsls	r7, r7, #9
 8000ac8:	4323      	orrs	r3, r4
 8000aca:	0b3f      	lsrs	r7, r7, #12
 8000acc:	0d4a      	lsrs	r2, r1, #21
 8000ace:	0512      	lsls	r2, r2, #20
 8000ad0:	433a      	orrs	r2, r7
 8000ad2:	07ed      	lsls	r5, r5, #31
 8000ad4:	432a      	orrs	r2, r5
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	0011      	movs	r1, r2
 8000ada:	bce0      	pop	{r5, r6, r7}
 8000adc:	46ba      	mov	sl, r7
 8000ade:	46b1      	mov	r9, r6
 8000ae0:	46a8      	mov	r8, r5
 8000ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae4:	2c00      	cmp	r4, #0
 8000ae6:	d04b      	beq.n	8000b80 <__aeabi_dadd+0x1e0>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	1ba4      	subs	r4, r4, r6
 8000aec:	46a4      	mov	ip, r4
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d000      	beq.n	8000af4 <__aeabi_dadd+0x154>
 8000af2:	e123      	b.n	8000d3c <__aeabi_dadd+0x39c>
 8000af4:	0004      	movs	r4, r0
 8000af6:	431c      	orrs	r4, r3
 8000af8:	d100      	bne.n	8000afc <__aeabi_dadd+0x15c>
 8000afa:	e1af      	b.n	8000e5c <__aeabi_dadd+0x4bc>
 8000afc:	4662      	mov	r2, ip
 8000afe:	1e54      	subs	r4, r2, #1
 8000b00:	2a01      	cmp	r2, #1
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dadd+0x166>
 8000b04:	e215      	b.n	8000f32 <__aeabi_dadd+0x592>
 8000b06:	4d80      	ldr	r5, [pc, #512]	; (8000d08 <__aeabi_dadd+0x368>)
 8000b08:	45ac      	cmp	ip, r5
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x16e>
 8000b0c:	e1c8      	b.n	8000ea0 <__aeabi_dadd+0x500>
 8000b0e:	46a4      	mov	ip, r4
 8000b10:	e11b      	b.n	8000d4a <__aeabi_dadd+0x3aa>
 8000b12:	464a      	mov	r2, r9
 8000b14:	1ab2      	subs	r2, r6, r2
 8000b16:	4694      	mov	ip, r2
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	dc00      	bgt.n	8000b1e <__aeabi_dadd+0x17e>
 8000b1c:	e0ac      	b.n	8000c78 <__aeabi_dadd+0x2d8>
 8000b1e:	464a      	mov	r2, r9
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	d043      	beq.n	8000bac <__aeabi_dadd+0x20c>
 8000b24:	4a78      	ldr	r2, [pc, #480]	; (8000d08 <__aeabi_dadd+0x368>)
 8000b26:	4296      	cmp	r6, r2
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x18c>
 8000b2a:	e1af      	b.n	8000e8c <__aeabi_dadd+0x4ec>
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	003c      	movs	r4, r7
 8000b30:	0412      	lsls	r2, r2, #16
 8000b32:	4314      	orrs	r4, r2
 8000b34:	46a0      	mov	r8, r4
 8000b36:	4662      	mov	r2, ip
 8000b38:	2a38      	cmp	r2, #56	; 0x38
 8000b3a:	dc67      	bgt.n	8000c0c <__aeabi_dadd+0x26c>
 8000b3c:	2a1f      	cmp	r2, #31
 8000b3e:	dc00      	bgt.n	8000b42 <__aeabi_dadd+0x1a2>
 8000b40:	e15f      	b.n	8000e02 <__aeabi_dadd+0x462>
 8000b42:	4647      	mov	r7, r8
 8000b44:	3a20      	subs	r2, #32
 8000b46:	40d7      	lsrs	r7, r2
 8000b48:	4662      	mov	r2, ip
 8000b4a:	2a20      	cmp	r2, #32
 8000b4c:	d005      	beq.n	8000b5a <__aeabi_dadd+0x1ba>
 8000b4e:	4664      	mov	r4, ip
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	1b12      	subs	r2, r2, r4
 8000b54:	4644      	mov	r4, r8
 8000b56:	4094      	lsls	r4, r2
 8000b58:	4321      	orrs	r1, r4
 8000b5a:	1e4a      	subs	r2, r1, #1
 8000b5c:	4191      	sbcs	r1, r2
 8000b5e:	000c      	movs	r4, r1
 8000b60:	433c      	orrs	r4, r7
 8000b62:	e057      	b.n	8000c14 <__aeabi_dadd+0x274>
 8000b64:	003a      	movs	r2, r7
 8000b66:	430a      	orrs	r2, r1
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x1cc>
 8000b6a:	e105      	b.n	8000d78 <__aeabi_dadd+0x3d8>
 8000b6c:	0022      	movs	r2, r4
 8000b6e:	3a01      	subs	r2, #1
 8000b70:	2c01      	cmp	r4, #1
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x1d6>
 8000b74:	e182      	b.n	8000e7c <__aeabi_dadd+0x4dc>
 8000b76:	4c64      	ldr	r4, [pc, #400]	; (8000d08 <__aeabi_dadd+0x368>)
 8000b78:	45a4      	cmp	ip, r4
 8000b7a:	d05b      	beq.n	8000c34 <__aeabi_dadd+0x294>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	e741      	b.n	8000a04 <__aeabi_dadd+0x64>
 8000b80:	4c63      	ldr	r4, [pc, #396]	; (8000d10 <__aeabi_dadd+0x370>)
 8000b82:	1c77      	adds	r7, r6, #1
 8000b84:	4227      	tst	r7, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x1ea>
 8000b88:	e0c4      	b.n	8000d14 <__aeabi_dadd+0x374>
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	431c      	orrs	r4, r3
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d000      	beq.n	8000b94 <__aeabi_dadd+0x1f4>
 8000b92:	e169      	b.n	8000e68 <__aeabi_dadd+0x4c8>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x1fa>
 8000b98:	e1bf      	b.n	8000f1a <__aeabi_dadd+0x57a>
 8000b9a:	4644      	mov	r4, r8
 8000b9c:	430c      	orrs	r4, r1
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x202>
 8000ba0:	e1d0      	b.n	8000f44 <__aeabi_dadd+0x5a4>
 8000ba2:	0742      	lsls	r2, r0, #29
 8000ba4:	08db      	lsrs	r3, r3, #3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	08c0      	lsrs	r0, r0, #3
 8000baa:	e029      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000bac:	003a      	movs	r2, r7
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x214>
 8000bb2:	e170      	b.n	8000e96 <__aeabi_dadd+0x4f6>
 8000bb4:	4662      	mov	r2, ip
 8000bb6:	4664      	mov	r4, ip
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	2c01      	cmp	r4, #1
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dadd+0x220>
 8000bbe:	e0e0      	b.n	8000d82 <__aeabi_dadd+0x3e2>
 8000bc0:	4c51      	ldr	r4, [pc, #324]	; (8000d08 <__aeabi_dadd+0x368>)
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0x228>
 8000bc6:	e161      	b.n	8000e8c <__aeabi_dadd+0x4ec>
 8000bc8:	4694      	mov	ip, r2
 8000bca:	e7b4      	b.n	8000b36 <__aeabi_dadd+0x196>
 8000bcc:	003a      	movs	r2, r7
 8000bce:	391f      	subs	r1, #31
 8000bd0:	40ca      	lsrs	r2, r1
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	2b20      	cmp	r3, #32
 8000bd6:	d003      	beq.n	8000be0 <__aeabi_dadd+0x240>
 8000bd8:	2240      	movs	r2, #64	; 0x40
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	409f      	lsls	r7, r3
 8000bde:	433c      	orrs	r4, r7
 8000be0:	1e63      	subs	r3, r4, #1
 8000be2:	419c      	sbcs	r4, r3
 8000be4:	2700      	movs	r7, #0
 8000be6:	2600      	movs	r6, #0
 8000be8:	430c      	orrs	r4, r1
 8000bea:	0763      	lsls	r3, r4, #29
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_dadd+0x250>
 8000bee:	e753      	b.n	8000a98 <__aeabi_dadd+0xf8>
 8000bf0:	46b4      	mov	ip, r6
 8000bf2:	08e4      	lsrs	r4, r4, #3
 8000bf4:	077b      	lsls	r3, r7, #29
 8000bf6:	4323      	orrs	r3, r4
 8000bf8:	08f8      	lsrs	r0, r7, #3
 8000bfa:	4a43      	ldr	r2, [pc, #268]	; (8000d08 <__aeabi_dadd+0x368>)
 8000bfc:	4594      	cmp	ip, r2
 8000bfe:	d01d      	beq.n	8000c3c <__aeabi_dadd+0x29c>
 8000c00:	4662      	mov	r2, ip
 8000c02:	0307      	lsls	r7, r0, #12
 8000c04:	0552      	lsls	r2, r2, #21
 8000c06:	0b3f      	lsrs	r7, r7, #12
 8000c08:	0d52      	lsrs	r2, r2, #21
 8000c0a:	e760      	b.n	8000ace <__aeabi_dadd+0x12e>
 8000c0c:	4644      	mov	r4, r8
 8000c0e:	430c      	orrs	r4, r1
 8000c10:	1e62      	subs	r2, r4, #1
 8000c12:	4194      	sbcs	r4, r2
 8000c14:	18e4      	adds	r4, r4, r3
 8000c16:	429c      	cmp	r4, r3
 8000c18:	419b      	sbcs	r3, r3
 8000c1a:	425f      	negs	r7, r3
 8000c1c:	183f      	adds	r7, r7, r0
 8000c1e:	023b      	lsls	r3, r7, #8
 8000c20:	d5e3      	bpl.n	8000bea <__aeabi_dadd+0x24a>
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <__aeabi_dadd+0x368>)
 8000c24:	3601      	adds	r6, #1
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d000      	beq.n	8000c2c <__aeabi_dadd+0x28c>
 8000c2a:	e0b5      	b.n	8000d98 <__aeabi_dadd+0x3f8>
 8000c2c:	0032      	movs	r2, r6
 8000c2e:	2700      	movs	r7, #0
 8000c30:	2300      	movs	r3, #0
 8000c32:	e74c      	b.n	8000ace <__aeabi_dadd+0x12e>
 8000c34:	0742      	lsls	r2, r0, #29
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	08c0      	lsrs	r0, r0, #3
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4302      	orrs	r2, r0
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x2a4>
 8000c42:	e1e1      	b.n	8001008 <__aeabi_dadd+0x668>
 8000c44:	2780      	movs	r7, #128	; 0x80
 8000c46:	033f      	lsls	r7, r7, #12
 8000c48:	4307      	orrs	r7, r0
 8000c4a:	033f      	lsls	r7, r7, #12
 8000c4c:	4a2e      	ldr	r2, [pc, #184]	; (8000d08 <__aeabi_dadd+0x368>)
 8000c4e:	0b3f      	lsrs	r7, r7, #12
 8000c50:	e73d      	b.n	8000ace <__aeabi_dadd+0x12e>
 8000c52:	0020      	movs	r0, r4
 8000c54:	f001 fcd2 	bl	80025fc <__clzsi2>
 8000c58:	0001      	movs	r1, r0
 8000c5a:	3118      	adds	r1, #24
 8000c5c:	291f      	cmp	r1, #31
 8000c5e:	dc00      	bgt.n	8000c62 <__aeabi_dadd+0x2c2>
 8000c60:	e6fc      	b.n	8000a5c <__aeabi_dadd+0xbc>
 8000c62:	3808      	subs	r0, #8
 8000c64:	4084      	lsls	r4, r0
 8000c66:	0027      	movs	r7, r4
 8000c68:	2400      	movs	r4, #0
 8000c6a:	42b1      	cmp	r1, r6
 8000c6c:	db00      	blt.n	8000c70 <__aeabi_dadd+0x2d0>
 8000c6e:	e6ff      	b.n	8000a70 <__aeabi_dadd+0xd0>
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <__aeabi_dadd+0x36c>)
 8000c72:	1a76      	subs	r6, r6, r1
 8000c74:	4017      	ands	r7, r2
 8000c76:	e70d      	b.n	8000a94 <__aeabi_dadd+0xf4>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d02f      	beq.n	8000cdc <__aeabi_dadd+0x33c>
 8000c7c:	464a      	mov	r2, r9
 8000c7e:	1b92      	subs	r2, r2, r6
 8000c80:	4694      	mov	ip, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dadd+0x2e8>
 8000c86:	e0ad      	b.n	8000de4 <__aeabi_dadd+0x444>
 8000c88:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <__aeabi_dadd+0x368>)
 8000c8a:	4591      	cmp	r9, r2
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x2f0>
 8000c8e:	e10f      	b.n	8000eb0 <__aeabi_dadd+0x510>
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	0412      	lsls	r2, r2, #16
 8000c94:	4310      	orrs	r0, r2
 8000c96:	4662      	mov	r2, ip
 8000c98:	2a38      	cmp	r2, #56	; 0x38
 8000c9a:	dd00      	ble.n	8000c9e <__aeabi_dadd+0x2fe>
 8000c9c:	e10f      	b.n	8000ebe <__aeabi_dadd+0x51e>
 8000c9e:	2a1f      	cmp	r2, #31
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dadd+0x304>
 8000ca2:	e180      	b.n	8000fa6 <__aeabi_dadd+0x606>
 8000ca4:	4664      	mov	r4, ip
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	001e      	movs	r6, r3
 8000caa:	1b12      	subs	r2, r2, r4
 8000cac:	4667      	mov	r7, ip
 8000cae:	0004      	movs	r4, r0
 8000cb0:	4093      	lsls	r3, r2
 8000cb2:	4094      	lsls	r4, r2
 8000cb4:	40fe      	lsrs	r6, r7
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	4193      	sbcs	r3, r2
 8000cba:	40f8      	lsrs	r0, r7
 8000cbc:	4334      	orrs	r4, r6
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	4480      	add	r8, r0
 8000cc2:	1864      	adds	r4, r4, r1
 8000cc4:	428c      	cmp	r4, r1
 8000cc6:	41bf      	sbcs	r7, r7
 8000cc8:	427f      	negs	r7, r7
 8000cca:	464e      	mov	r6, r9
 8000ccc:	4447      	add	r7, r8
 8000cce:	e7a6      	b.n	8000c1e <__aeabi_dadd+0x27e>
 8000cd0:	4642      	mov	r2, r8
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	1e4a      	subs	r2, r1, #1
 8000cd8:	4191      	sbcs	r1, r2
 8000cda:	e6ad      	b.n	8000a38 <__aeabi_dadd+0x98>
 8000cdc:	4c0c      	ldr	r4, [pc, #48]	; (8000d10 <__aeabi_dadd+0x370>)
 8000cde:	1c72      	adds	r2, r6, #1
 8000ce0:	4222      	tst	r2, r4
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_dadd+0x346>
 8000ce4:	e0a1      	b.n	8000e2a <__aeabi_dadd+0x48a>
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_dadd+0x350>
 8000cee:	e0fa      	b.n	8000ee6 <__aeabi_dadd+0x546>
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x356>
 8000cf4:	e145      	b.n	8000f82 <__aeabi_dadd+0x5e2>
 8000cf6:	003a      	movs	r2, r7
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_dadd+0x35e>
 8000cfc:	e146      	b.n	8000f8c <__aeabi_dadd+0x5ec>
 8000cfe:	0742      	lsls	r2, r0, #29
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	08c0      	lsrs	r0, r0, #3
 8000d06:	e77b      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000d08:	000007ff 	.word	0x000007ff
 8000d0c:	ff7fffff 	.word	0xff7fffff
 8000d10:	000007fe 	.word	0x000007fe
 8000d14:	4647      	mov	r7, r8
 8000d16:	1a5c      	subs	r4, r3, r1
 8000d18:	1bc2      	subs	r2, r0, r7
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	41bf      	sbcs	r7, r7
 8000d1e:	427f      	negs	r7, r7
 8000d20:	46b9      	mov	r9, r7
 8000d22:	0017      	movs	r7, r2
 8000d24:	464a      	mov	r2, r9
 8000d26:	1abf      	subs	r7, r7, r2
 8000d28:	023a      	lsls	r2, r7, #8
 8000d2a:	d500      	bpl.n	8000d2e <__aeabi_dadd+0x38e>
 8000d2c:	e08d      	b.n	8000e4a <__aeabi_dadd+0x4aa>
 8000d2e:	0023      	movs	r3, r4
 8000d30:	433b      	orrs	r3, r7
 8000d32:	d000      	beq.n	8000d36 <__aeabi_dadd+0x396>
 8000d34:	e68a      	b.n	8000a4c <__aeabi_dadd+0xac>
 8000d36:	2000      	movs	r0, #0
 8000d38:	2500      	movs	r5, #0
 8000d3a:	e761      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000d3c:	4cb4      	ldr	r4, [pc, #720]	; (8001010 <__aeabi_dadd+0x670>)
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x3a4>
 8000d42:	e0ad      	b.n	8000ea0 <__aeabi_dadd+0x500>
 8000d44:	2480      	movs	r4, #128	; 0x80
 8000d46:	0424      	lsls	r4, r4, #16
 8000d48:	4320      	orrs	r0, r4
 8000d4a:	4664      	mov	r4, ip
 8000d4c:	2c38      	cmp	r4, #56	; 0x38
 8000d4e:	dc3d      	bgt.n	8000dcc <__aeabi_dadd+0x42c>
 8000d50:	4662      	mov	r2, ip
 8000d52:	2c1f      	cmp	r4, #31
 8000d54:	dd00      	ble.n	8000d58 <__aeabi_dadd+0x3b8>
 8000d56:	e0b7      	b.n	8000ec8 <__aeabi_dadd+0x528>
 8000d58:	2520      	movs	r5, #32
 8000d5a:	001e      	movs	r6, r3
 8000d5c:	1b2d      	subs	r5, r5, r4
 8000d5e:	0004      	movs	r4, r0
 8000d60:	40ab      	lsls	r3, r5
 8000d62:	40ac      	lsls	r4, r5
 8000d64:	40d6      	lsrs	r6, r2
 8000d66:	40d0      	lsrs	r0, r2
 8000d68:	4642      	mov	r2, r8
 8000d6a:	1e5d      	subs	r5, r3, #1
 8000d6c:	41ab      	sbcs	r3, r5
 8000d6e:	4334      	orrs	r4, r6
 8000d70:	1a12      	subs	r2, r2, r0
 8000d72:	4690      	mov	r8, r2
 8000d74:	4323      	orrs	r3, r4
 8000d76:	e02c      	b.n	8000dd2 <__aeabi_dadd+0x432>
 8000d78:	0742      	lsls	r2, r0, #29
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	08c0      	lsrs	r0, r0, #3
 8000d80:	e73b      	b.n	8000bfa <__aeabi_dadd+0x25a>
 8000d82:	185c      	adds	r4, r3, r1
 8000d84:	429c      	cmp	r4, r3
 8000d86:	419b      	sbcs	r3, r3
 8000d88:	4440      	add	r0, r8
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	18c7      	adds	r7, r0, r3
 8000d8e:	2601      	movs	r6, #1
 8000d90:	023b      	lsls	r3, r7, #8
 8000d92:	d400      	bmi.n	8000d96 <__aeabi_dadd+0x3f6>
 8000d94:	e729      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000d96:	2602      	movs	r6, #2
 8000d98:	4a9e      	ldr	r2, [pc, #632]	; (8001014 <__aeabi_dadd+0x674>)
 8000d9a:	0863      	lsrs	r3, r4, #1
 8000d9c:	4017      	ands	r7, r2
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4014      	ands	r4, r2
 8000da2:	431c      	orrs	r4, r3
 8000da4:	07fb      	lsls	r3, r7, #31
 8000da6:	431c      	orrs	r4, r3
 8000da8:	087f      	lsrs	r7, r7, #1
 8000daa:	e673      	b.n	8000a94 <__aeabi_dadd+0xf4>
 8000dac:	4644      	mov	r4, r8
 8000dae:	3a20      	subs	r2, #32
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	4662      	mov	r2, ip
 8000db4:	2a20      	cmp	r2, #32
 8000db6:	d005      	beq.n	8000dc4 <__aeabi_dadd+0x424>
 8000db8:	4667      	mov	r7, ip
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	1bd2      	subs	r2, r2, r7
 8000dbe:	4647      	mov	r7, r8
 8000dc0:	4097      	lsls	r7, r2
 8000dc2:	4339      	orrs	r1, r7
 8000dc4:	1e4a      	subs	r2, r1, #1
 8000dc6:	4191      	sbcs	r1, r2
 8000dc8:	4321      	orrs	r1, r4
 8000dca:	e635      	b.n	8000a38 <__aeabi_dadd+0x98>
 8000dcc:	4303      	orrs	r3, r0
 8000dce:	1e58      	subs	r0, r3, #1
 8000dd0:	4183      	sbcs	r3, r0
 8000dd2:	1acc      	subs	r4, r1, r3
 8000dd4:	42a1      	cmp	r1, r4
 8000dd6:	41bf      	sbcs	r7, r7
 8000dd8:	4643      	mov	r3, r8
 8000dda:	427f      	negs	r7, r7
 8000ddc:	4655      	mov	r5, sl
 8000dde:	464e      	mov	r6, r9
 8000de0:	1bdf      	subs	r7, r3, r7
 8000de2:	e62e      	b.n	8000a42 <__aeabi_dadd+0xa2>
 8000de4:	0002      	movs	r2, r0
 8000de6:	431a      	orrs	r2, r3
 8000de8:	d100      	bne.n	8000dec <__aeabi_dadd+0x44c>
 8000dea:	e0bd      	b.n	8000f68 <__aeabi_dadd+0x5c8>
 8000dec:	4662      	mov	r2, ip
 8000dee:	4664      	mov	r4, ip
 8000df0:	3a01      	subs	r2, #1
 8000df2:	2c01      	cmp	r4, #1
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x458>
 8000df6:	e0e5      	b.n	8000fc4 <__aeabi_dadd+0x624>
 8000df8:	4c85      	ldr	r4, [pc, #532]	; (8001010 <__aeabi_dadd+0x670>)
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d058      	beq.n	8000eb0 <__aeabi_dadd+0x510>
 8000dfe:	4694      	mov	ip, r2
 8000e00:	e749      	b.n	8000c96 <__aeabi_dadd+0x2f6>
 8000e02:	4664      	mov	r4, ip
 8000e04:	2220      	movs	r2, #32
 8000e06:	1b12      	subs	r2, r2, r4
 8000e08:	4644      	mov	r4, r8
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	000f      	movs	r7, r1
 8000e0e:	46a1      	mov	r9, r4
 8000e10:	4664      	mov	r4, ip
 8000e12:	4091      	lsls	r1, r2
 8000e14:	40e7      	lsrs	r7, r4
 8000e16:	464c      	mov	r4, r9
 8000e18:	1e4a      	subs	r2, r1, #1
 8000e1a:	4191      	sbcs	r1, r2
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	4642      	mov	r2, r8
 8000e20:	430c      	orrs	r4, r1
 8000e22:	4661      	mov	r1, ip
 8000e24:	40ca      	lsrs	r2, r1
 8000e26:	1880      	adds	r0, r0, r2
 8000e28:	e6f4      	b.n	8000c14 <__aeabi_dadd+0x274>
 8000e2a:	4c79      	ldr	r4, [pc, #484]	; (8001010 <__aeabi_dadd+0x670>)
 8000e2c:	42a2      	cmp	r2, r4
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dadd+0x492>
 8000e30:	e6fd      	b.n	8000c2e <__aeabi_dadd+0x28e>
 8000e32:	1859      	adds	r1, r3, r1
 8000e34:	4299      	cmp	r1, r3
 8000e36:	419b      	sbcs	r3, r3
 8000e38:	4440      	add	r0, r8
 8000e3a:	425f      	negs	r7, r3
 8000e3c:	19c7      	adds	r7, r0, r7
 8000e3e:	07fc      	lsls	r4, r7, #31
 8000e40:	0849      	lsrs	r1, r1, #1
 8000e42:	0016      	movs	r6, r2
 8000e44:	430c      	orrs	r4, r1
 8000e46:	087f      	lsrs	r7, r7, #1
 8000e48:	e6cf      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000e4a:	1acc      	subs	r4, r1, r3
 8000e4c:	42a1      	cmp	r1, r4
 8000e4e:	41bf      	sbcs	r7, r7
 8000e50:	4643      	mov	r3, r8
 8000e52:	427f      	negs	r7, r7
 8000e54:	1a18      	subs	r0, r3, r0
 8000e56:	4655      	mov	r5, sl
 8000e58:	1bc7      	subs	r7, r0, r7
 8000e5a:	e5f7      	b.n	8000a4c <__aeabi_dadd+0xac>
 8000e5c:	08c9      	lsrs	r1, r1, #3
 8000e5e:	077b      	lsls	r3, r7, #29
 8000e60:	4655      	mov	r5, sl
 8000e62:	430b      	orrs	r3, r1
 8000e64:	08f8      	lsrs	r0, r7, #3
 8000e66:	e6c8      	b.n	8000bfa <__aeabi_dadd+0x25a>
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d000      	beq.n	8000e6e <__aeabi_dadd+0x4ce>
 8000e6c:	e081      	b.n	8000f72 <__aeabi_dadd+0x5d2>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	430b      	orrs	r3, r1
 8000e72:	d115      	bne.n	8000ea0 <__aeabi_dadd+0x500>
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	2500      	movs	r5, #0
 8000e78:	0300      	lsls	r0, r0, #12
 8000e7a:	e6e3      	b.n	8000c44 <__aeabi_dadd+0x2a4>
 8000e7c:	1a5c      	subs	r4, r3, r1
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	419b      	sbcs	r3, r3
 8000e82:	1bc7      	subs	r7, r0, r7
 8000e84:	425b      	negs	r3, r3
 8000e86:	2601      	movs	r6, #1
 8000e88:	1aff      	subs	r7, r7, r3
 8000e8a:	e5da      	b.n	8000a42 <__aeabi_dadd+0xa2>
 8000e8c:	0742      	lsls	r2, r0, #29
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	08c0      	lsrs	r0, r0, #3
 8000e94:	e6d2      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000e96:	0742      	lsls	r2, r0, #29
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	08c0      	lsrs	r0, r0, #3
 8000e9e:	e6ac      	b.n	8000bfa <__aeabi_dadd+0x25a>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	4642      	mov	r2, r8
 8000ea4:	08c9      	lsrs	r1, r1, #3
 8000ea6:	075b      	lsls	r3, r3, #29
 8000ea8:	4655      	mov	r5, sl
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	08d0      	lsrs	r0, r2, #3
 8000eae:	e6c5      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000eb0:	4643      	mov	r3, r8
 8000eb2:	4642      	mov	r2, r8
 8000eb4:	075b      	lsls	r3, r3, #29
 8000eb6:	08c9      	lsrs	r1, r1, #3
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	08d0      	lsrs	r0, r2, #3
 8000ebc:	e6be      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000ebe:	4303      	orrs	r3, r0
 8000ec0:	001c      	movs	r4, r3
 8000ec2:	1e63      	subs	r3, r4, #1
 8000ec4:	419c      	sbcs	r4, r3
 8000ec6:	e6fc      	b.n	8000cc2 <__aeabi_dadd+0x322>
 8000ec8:	0002      	movs	r2, r0
 8000eca:	3c20      	subs	r4, #32
 8000ecc:	40e2      	lsrs	r2, r4
 8000ece:	0014      	movs	r4, r2
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	2a20      	cmp	r2, #32
 8000ed4:	d003      	beq.n	8000ede <__aeabi_dadd+0x53e>
 8000ed6:	2540      	movs	r5, #64	; 0x40
 8000ed8:	1aad      	subs	r5, r5, r2
 8000eda:	40a8      	lsls	r0, r5
 8000edc:	4303      	orrs	r3, r0
 8000ede:	1e58      	subs	r0, r3, #1
 8000ee0:	4183      	sbcs	r3, r0
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	e775      	b.n	8000dd2 <__aeabi_dadd+0x432>
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	d0e2      	beq.n	8000eb0 <__aeabi_dadd+0x510>
 8000eea:	003a      	movs	r2, r7
 8000eec:	430a      	orrs	r2, r1
 8000eee:	d0cd      	beq.n	8000e8c <__aeabi_dadd+0x4ec>
 8000ef0:	0742      	lsls	r2, r0, #29
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	08c0      	lsrs	r0, r0, #3
 8000efa:	0312      	lsls	r2, r2, #12
 8000efc:	4210      	tst	r0, r2
 8000efe:	d006      	beq.n	8000f0e <__aeabi_dadd+0x56e>
 8000f00:	08fc      	lsrs	r4, r7, #3
 8000f02:	4214      	tst	r4, r2
 8000f04:	d103      	bne.n	8000f0e <__aeabi_dadd+0x56e>
 8000f06:	0020      	movs	r0, r4
 8000f08:	08cb      	lsrs	r3, r1, #3
 8000f0a:	077a      	lsls	r2, r7, #29
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	0f5a      	lsrs	r2, r3, #29
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	0752      	lsls	r2, r2, #29
 8000f14:	08db      	lsrs	r3, r3, #3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	e690      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x582>
 8000f20:	e709      	b.n	8000d36 <__aeabi_dadd+0x396>
 8000f22:	4643      	mov	r3, r8
 8000f24:	4642      	mov	r2, r8
 8000f26:	08c9      	lsrs	r1, r1, #3
 8000f28:	075b      	lsls	r3, r3, #29
 8000f2a:	4655      	mov	r5, sl
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	08d0      	lsrs	r0, r2, #3
 8000f30:	e666      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000f32:	1acc      	subs	r4, r1, r3
 8000f34:	42a1      	cmp	r1, r4
 8000f36:	4189      	sbcs	r1, r1
 8000f38:	1a3f      	subs	r7, r7, r0
 8000f3a:	4249      	negs	r1, r1
 8000f3c:	4655      	mov	r5, sl
 8000f3e:	2601      	movs	r6, #1
 8000f40:	1a7f      	subs	r7, r7, r1
 8000f42:	e57e      	b.n	8000a42 <__aeabi_dadd+0xa2>
 8000f44:	4642      	mov	r2, r8
 8000f46:	1a5c      	subs	r4, r3, r1
 8000f48:	1a87      	subs	r7, r0, r2
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	4192      	sbcs	r2, r2
 8000f4e:	4252      	negs	r2, r2
 8000f50:	1abf      	subs	r7, r7, r2
 8000f52:	023a      	lsls	r2, r7, #8
 8000f54:	d53d      	bpl.n	8000fd2 <__aeabi_dadd+0x632>
 8000f56:	1acc      	subs	r4, r1, r3
 8000f58:	42a1      	cmp	r1, r4
 8000f5a:	4189      	sbcs	r1, r1
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	4249      	negs	r1, r1
 8000f60:	1a1f      	subs	r7, r3, r0
 8000f62:	4655      	mov	r5, sl
 8000f64:	1a7f      	subs	r7, r7, r1
 8000f66:	e595      	b.n	8000a94 <__aeabi_dadd+0xf4>
 8000f68:	077b      	lsls	r3, r7, #29
 8000f6a:	08c9      	lsrs	r1, r1, #3
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	08f8      	lsrs	r0, r7, #3
 8000f70:	e643      	b.n	8000bfa <__aeabi_dadd+0x25a>
 8000f72:	4644      	mov	r4, r8
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	430c      	orrs	r4, r1
 8000f78:	d130      	bne.n	8000fdc <__aeabi_dadd+0x63c>
 8000f7a:	0742      	lsls	r2, r0, #29
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	08c0      	lsrs	r0, r0, #3
 8000f80:	e65c      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8000f82:	077b      	lsls	r3, r7, #29
 8000f84:	08c9      	lsrs	r1, r1, #3
 8000f86:	430b      	orrs	r3, r1
 8000f88:	08f8      	lsrs	r0, r7, #3
 8000f8a:	e639      	b.n	8000c00 <__aeabi_dadd+0x260>
 8000f8c:	185c      	adds	r4, r3, r1
 8000f8e:	429c      	cmp	r4, r3
 8000f90:	419b      	sbcs	r3, r3
 8000f92:	4440      	add	r0, r8
 8000f94:	425b      	negs	r3, r3
 8000f96:	18c7      	adds	r7, r0, r3
 8000f98:	023b      	lsls	r3, r7, #8
 8000f9a:	d400      	bmi.n	8000f9e <__aeabi_dadd+0x5fe>
 8000f9c:	e625      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <__aeabi_dadd+0x674>)
 8000fa0:	2601      	movs	r6, #1
 8000fa2:	401f      	ands	r7, r3
 8000fa4:	e621      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000fa6:	0004      	movs	r4, r0
 8000fa8:	3a20      	subs	r2, #32
 8000faa:	40d4      	lsrs	r4, r2
 8000fac:	4662      	mov	r2, ip
 8000fae:	2a20      	cmp	r2, #32
 8000fb0:	d004      	beq.n	8000fbc <__aeabi_dadd+0x61c>
 8000fb2:	2240      	movs	r2, #64	; 0x40
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	1b92      	subs	r2, r2, r6
 8000fb8:	4090      	lsls	r0, r2
 8000fba:	4303      	orrs	r3, r0
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	4193      	sbcs	r3, r2
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	e67e      	b.n	8000cc2 <__aeabi_dadd+0x322>
 8000fc4:	185c      	adds	r4, r3, r1
 8000fc6:	428c      	cmp	r4, r1
 8000fc8:	4189      	sbcs	r1, r1
 8000fca:	4440      	add	r0, r8
 8000fcc:	4249      	negs	r1, r1
 8000fce:	1847      	adds	r7, r0, r1
 8000fd0:	e6dd      	b.n	8000d8e <__aeabi_dadd+0x3ee>
 8000fd2:	0023      	movs	r3, r4
 8000fd4:	433b      	orrs	r3, r7
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x63a>
 8000fd8:	e6ad      	b.n	8000d36 <__aeabi_dadd+0x396>
 8000fda:	e606      	b.n	8000bea <__aeabi_dadd+0x24a>
 8000fdc:	0744      	lsls	r4, r0, #29
 8000fde:	4323      	orrs	r3, r4
 8000fe0:	2480      	movs	r4, #128	; 0x80
 8000fe2:	08c0      	lsrs	r0, r0, #3
 8000fe4:	0324      	lsls	r4, r4, #12
 8000fe6:	4220      	tst	r0, r4
 8000fe8:	d008      	beq.n	8000ffc <__aeabi_dadd+0x65c>
 8000fea:	4642      	mov	r2, r8
 8000fec:	08d6      	lsrs	r6, r2, #3
 8000fee:	4226      	tst	r6, r4
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_dadd+0x65c>
 8000ff2:	4655      	mov	r5, sl
 8000ff4:	0030      	movs	r0, r6
 8000ff6:	08cb      	lsrs	r3, r1, #3
 8000ff8:	0751      	lsls	r1, r2, #29
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	0f5a      	lsrs	r2, r3, #29
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	0752      	lsls	r2, r2, #29
 8001004:	4313      	orrs	r3, r2
 8001006:	e619      	b.n	8000c3c <__aeabi_dadd+0x29c>
 8001008:	2300      	movs	r3, #0
 800100a:	4a01      	ldr	r2, [pc, #4]	; (8001010 <__aeabi_dadd+0x670>)
 800100c:	001f      	movs	r7, r3
 800100e:	e55e      	b.n	8000ace <__aeabi_dadd+0x12e>
 8001010:	000007ff 	.word	0x000007ff
 8001014:	ff7fffff 	.word	0xff7fffff

08001018 <__aeabi_ddiv>:
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	4657      	mov	r7, sl
 800101c:	464e      	mov	r6, r9
 800101e:	4645      	mov	r5, r8
 8001020:	46de      	mov	lr, fp
 8001022:	b5e0      	push	{r5, r6, r7, lr}
 8001024:	4681      	mov	r9, r0
 8001026:	0005      	movs	r5, r0
 8001028:	030c      	lsls	r4, r1, #12
 800102a:	0048      	lsls	r0, r1, #1
 800102c:	4692      	mov	sl, r2
 800102e:	001f      	movs	r7, r3
 8001030:	b085      	sub	sp, #20
 8001032:	0b24      	lsrs	r4, r4, #12
 8001034:	0d40      	lsrs	r0, r0, #21
 8001036:	0fce      	lsrs	r6, r1, #31
 8001038:	2800      	cmp	r0, #0
 800103a:	d100      	bne.n	800103e <__aeabi_ddiv+0x26>
 800103c:	e156      	b.n	80012ec <__aeabi_ddiv+0x2d4>
 800103e:	4bd4      	ldr	r3, [pc, #848]	; (8001390 <__aeabi_ddiv+0x378>)
 8001040:	4298      	cmp	r0, r3
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x2e>
 8001044:	e172      	b.n	800132c <__aeabi_ddiv+0x314>
 8001046:	0f6b      	lsrs	r3, r5, #29
 8001048:	00e4      	lsls	r4, r4, #3
 800104a:	431c      	orrs	r4, r3
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	4323      	orrs	r3, r4
 8001052:	4698      	mov	r8, r3
 8001054:	4bcf      	ldr	r3, [pc, #828]	; (8001394 <__aeabi_ddiv+0x37c>)
 8001056:	00ed      	lsls	r5, r5, #3
 8001058:	469b      	mov	fp, r3
 800105a:	2300      	movs	r3, #0
 800105c:	4699      	mov	r9, r3
 800105e:	4483      	add	fp, r0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	033c      	lsls	r4, r7, #12
 8001064:	007b      	lsls	r3, r7, #1
 8001066:	4650      	mov	r0, sl
 8001068:	0b24      	lsrs	r4, r4, #12
 800106a:	0d5b      	lsrs	r3, r3, #21
 800106c:	0fff      	lsrs	r7, r7, #31
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_ddiv+0x5c>
 8001072:	e11f      	b.n	80012b4 <__aeabi_ddiv+0x29c>
 8001074:	4ac6      	ldr	r2, [pc, #792]	; (8001390 <__aeabi_ddiv+0x378>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d100      	bne.n	800107c <__aeabi_ddiv+0x64>
 800107a:	e162      	b.n	8001342 <__aeabi_ddiv+0x32a>
 800107c:	49c5      	ldr	r1, [pc, #788]	; (8001394 <__aeabi_ddiv+0x37c>)
 800107e:	0f42      	lsrs	r2, r0, #29
 8001080:	468c      	mov	ip, r1
 8001082:	00e4      	lsls	r4, r4, #3
 8001084:	4659      	mov	r1, fp
 8001086:	4314      	orrs	r4, r2
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	4463      	add	r3, ip
 800108c:	0412      	lsls	r2, r2, #16
 800108e:	1acb      	subs	r3, r1, r3
 8001090:	4314      	orrs	r4, r2
 8001092:	469b      	mov	fp, r3
 8001094:	00c2      	lsls	r2, r0, #3
 8001096:	2000      	movs	r0, #0
 8001098:	0033      	movs	r3, r6
 800109a:	407b      	eors	r3, r7
 800109c:	469a      	mov	sl, r3
 800109e:	464b      	mov	r3, r9
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d827      	bhi.n	80010f4 <__aeabi_ddiv+0xdc>
 80010a4:	49bc      	ldr	r1, [pc, #752]	; (8001398 <__aeabi_ddiv+0x380>)
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	58cb      	ldr	r3, [r1, r3]
 80010aa:	469f      	mov	pc, r3
 80010ac:	46b2      	mov	sl, r6
 80010ae:	9b00      	ldr	r3, [sp, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d016      	beq.n	80010e2 <__aeabi_ddiv+0xca>
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0xa2>
 80010b8:	e28e      	b.n	80015d8 <__aeabi_ddiv+0x5c0>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d000      	beq.n	80010c0 <__aeabi_ddiv+0xa8>
 80010be:	e0d9      	b.n	8001274 <__aeabi_ddiv+0x25c>
 80010c0:	2300      	movs	r3, #0
 80010c2:	2400      	movs	r4, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	4652      	mov	r2, sl
 80010c8:	051b      	lsls	r3, r3, #20
 80010ca:	4323      	orrs	r3, r4
 80010cc:	07d2      	lsls	r2, r2, #31
 80010ce:	4313      	orrs	r3, r2
 80010d0:	0028      	movs	r0, r5
 80010d2:	0019      	movs	r1, r3
 80010d4:	b005      	add	sp, #20
 80010d6:	bcf0      	pop	{r4, r5, r6, r7}
 80010d8:	46bb      	mov	fp, r7
 80010da:	46b2      	mov	sl, r6
 80010dc:	46a9      	mov	r9, r5
 80010de:	46a0      	mov	r8, r4
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e2:	2400      	movs	r4, #0
 80010e4:	2500      	movs	r5, #0
 80010e6:	4baa      	ldr	r3, [pc, #680]	; (8001390 <__aeabi_ddiv+0x378>)
 80010e8:	e7ed      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80010ea:	46ba      	mov	sl, r7
 80010ec:	46a0      	mov	r8, r4
 80010ee:	0015      	movs	r5, r2
 80010f0:	9000      	str	r0, [sp, #0]
 80010f2:	e7dc      	b.n	80010ae <__aeabi_ddiv+0x96>
 80010f4:	4544      	cmp	r4, r8
 80010f6:	d200      	bcs.n	80010fa <__aeabi_ddiv+0xe2>
 80010f8:	e1c7      	b.n	800148a <__aeabi_ddiv+0x472>
 80010fa:	d100      	bne.n	80010fe <__aeabi_ddiv+0xe6>
 80010fc:	e1c2      	b.n	8001484 <__aeabi_ddiv+0x46c>
 80010fe:	2301      	movs	r3, #1
 8001100:	425b      	negs	r3, r3
 8001102:	469c      	mov	ip, r3
 8001104:	002e      	movs	r6, r5
 8001106:	4640      	mov	r0, r8
 8001108:	2500      	movs	r5, #0
 800110a:	44e3      	add	fp, ip
 800110c:	0223      	lsls	r3, r4, #8
 800110e:	0e14      	lsrs	r4, r2, #24
 8001110:	431c      	orrs	r4, r3
 8001112:	0c1b      	lsrs	r3, r3, #16
 8001114:	4699      	mov	r9, r3
 8001116:	0423      	lsls	r3, r4, #16
 8001118:	0c1f      	lsrs	r7, r3, #16
 800111a:	0212      	lsls	r2, r2, #8
 800111c:	4649      	mov	r1, r9
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	9701      	str	r7, [sp, #4]
 8001122:	f7ff f88f 	bl	8000244 <__aeabi_uidivmod>
 8001126:	0002      	movs	r2, r0
 8001128:	437a      	muls	r2, r7
 800112a:	040b      	lsls	r3, r1, #16
 800112c:	0c31      	lsrs	r1, r6, #16
 800112e:	4680      	mov	r8, r0
 8001130:	4319      	orrs	r1, r3
 8001132:	428a      	cmp	r2, r1
 8001134:	d907      	bls.n	8001146 <__aeabi_ddiv+0x12e>
 8001136:	2301      	movs	r3, #1
 8001138:	425b      	negs	r3, r3
 800113a:	469c      	mov	ip, r3
 800113c:	1909      	adds	r1, r1, r4
 800113e:	44e0      	add	r8, ip
 8001140:	428c      	cmp	r4, r1
 8001142:	d800      	bhi.n	8001146 <__aeabi_ddiv+0x12e>
 8001144:	e207      	b.n	8001556 <__aeabi_ddiv+0x53e>
 8001146:	1a88      	subs	r0, r1, r2
 8001148:	4649      	mov	r1, r9
 800114a:	f7ff f87b 	bl	8000244 <__aeabi_uidivmod>
 800114e:	0409      	lsls	r1, r1, #16
 8001150:	468c      	mov	ip, r1
 8001152:	0431      	lsls	r1, r6, #16
 8001154:	4666      	mov	r6, ip
 8001156:	9a01      	ldr	r2, [sp, #4]
 8001158:	0c09      	lsrs	r1, r1, #16
 800115a:	4342      	muls	r2, r0
 800115c:	0003      	movs	r3, r0
 800115e:	4331      	orrs	r1, r6
 8001160:	428a      	cmp	r2, r1
 8001162:	d904      	bls.n	800116e <__aeabi_ddiv+0x156>
 8001164:	1909      	adds	r1, r1, r4
 8001166:	3b01      	subs	r3, #1
 8001168:	428c      	cmp	r4, r1
 800116a:	d800      	bhi.n	800116e <__aeabi_ddiv+0x156>
 800116c:	e1ed      	b.n	800154a <__aeabi_ddiv+0x532>
 800116e:	1a88      	subs	r0, r1, r2
 8001170:	4642      	mov	r2, r8
 8001172:	0412      	lsls	r2, r2, #16
 8001174:	431a      	orrs	r2, r3
 8001176:	4690      	mov	r8, r2
 8001178:	4641      	mov	r1, r8
 800117a:	9b00      	ldr	r3, [sp, #0]
 800117c:	040e      	lsls	r6, r1, #16
 800117e:	0c1b      	lsrs	r3, r3, #16
 8001180:	001f      	movs	r7, r3
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	9b00      	ldr	r3, [sp, #0]
 8001186:	0c36      	lsrs	r6, r6, #16
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	0c19      	lsrs	r1, r3, #16
 800118c:	000b      	movs	r3, r1
 800118e:	4373      	muls	r3, r6
 8001190:	0c12      	lsrs	r2, r2, #16
 8001192:	437e      	muls	r6, r7
 8001194:	9103      	str	r1, [sp, #12]
 8001196:	4351      	muls	r1, r2
 8001198:	437a      	muls	r2, r7
 800119a:	0c1f      	lsrs	r7, r3, #16
 800119c:	46bc      	mov	ip, r7
 800119e:	1876      	adds	r6, r6, r1
 80011a0:	4466      	add	r6, ip
 80011a2:	42b1      	cmp	r1, r6
 80011a4:	d903      	bls.n	80011ae <__aeabi_ddiv+0x196>
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	0249      	lsls	r1, r1, #9
 80011aa:	468c      	mov	ip, r1
 80011ac:	4462      	add	r2, ip
 80011ae:	0c31      	lsrs	r1, r6, #16
 80011b0:	188a      	adds	r2, r1, r2
 80011b2:	0431      	lsls	r1, r6, #16
 80011b4:	041e      	lsls	r6, r3, #16
 80011b6:	0c36      	lsrs	r6, r6, #16
 80011b8:	198e      	adds	r6, r1, r6
 80011ba:	4290      	cmp	r0, r2
 80011bc:	d302      	bcc.n	80011c4 <__aeabi_ddiv+0x1ac>
 80011be:	d112      	bne.n	80011e6 <__aeabi_ddiv+0x1ce>
 80011c0:	42b5      	cmp	r5, r6
 80011c2:	d210      	bcs.n	80011e6 <__aeabi_ddiv+0x1ce>
 80011c4:	4643      	mov	r3, r8
 80011c6:	1e59      	subs	r1, r3, #1
 80011c8:	9b00      	ldr	r3, [sp, #0]
 80011ca:	469c      	mov	ip, r3
 80011cc:	4465      	add	r5, ip
 80011ce:	001f      	movs	r7, r3
 80011d0:	429d      	cmp	r5, r3
 80011d2:	419b      	sbcs	r3, r3
 80011d4:	425b      	negs	r3, r3
 80011d6:	191b      	adds	r3, r3, r4
 80011d8:	18c0      	adds	r0, r0, r3
 80011da:	4284      	cmp	r4, r0
 80011dc:	d200      	bcs.n	80011e0 <__aeabi_ddiv+0x1c8>
 80011de:	e1a0      	b.n	8001522 <__aeabi_ddiv+0x50a>
 80011e0:	d100      	bne.n	80011e4 <__aeabi_ddiv+0x1cc>
 80011e2:	e19b      	b.n	800151c <__aeabi_ddiv+0x504>
 80011e4:	4688      	mov	r8, r1
 80011e6:	1bae      	subs	r6, r5, r6
 80011e8:	42b5      	cmp	r5, r6
 80011ea:	41ad      	sbcs	r5, r5
 80011ec:	1a80      	subs	r0, r0, r2
 80011ee:	426d      	negs	r5, r5
 80011f0:	1b40      	subs	r0, r0, r5
 80011f2:	4284      	cmp	r4, r0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x1e0>
 80011f6:	e1d5      	b.n	80015a4 <__aeabi_ddiv+0x58c>
 80011f8:	4649      	mov	r1, r9
 80011fa:	f7ff f823 	bl	8000244 <__aeabi_uidivmod>
 80011fe:	9a01      	ldr	r2, [sp, #4]
 8001200:	040b      	lsls	r3, r1, #16
 8001202:	4342      	muls	r2, r0
 8001204:	0c31      	lsrs	r1, r6, #16
 8001206:	0005      	movs	r5, r0
 8001208:	4319      	orrs	r1, r3
 800120a:	428a      	cmp	r2, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x1f8>
 800120e:	e16c      	b.n	80014ea <__aeabi_ddiv+0x4d2>
 8001210:	1a88      	subs	r0, r1, r2
 8001212:	4649      	mov	r1, r9
 8001214:	f7ff f816 	bl	8000244 <__aeabi_uidivmod>
 8001218:	9a01      	ldr	r2, [sp, #4]
 800121a:	0436      	lsls	r6, r6, #16
 800121c:	4342      	muls	r2, r0
 800121e:	0409      	lsls	r1, r1, #16
 8001220:	0c36      	lsrs	r6, r6, #16
 8001222:	0003      	movs	r3, r0
 8001224:	430e      	orrs	r6, r1
 8001226:	42b2      	cmp	r2, r6
 8001228:	d900      	bls.n	800122c <__aeabi_ddiv+0x214>
 800122a:	e153      	b.n	80014d4 <__aeabi_ddiv+0x4bc>
 800122c:	9803      	ldr	r0, [sp, #12]
 800122e:	1ab6      	subs	r6, r6, r2
 8001230:	0002      	movs	r2, r0
 8001232:	042d      	lsls	r5, r5, #16
 8001234:	431d      	orrs	r5, r3
 8001236:	9f02      	ldr	r7, [sp, #8]
 8001238:	042b      	lsls	r3, r5, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	435a      	muls	r2, r3
 800123e:	437b      	muls	r3, r7
 8001240:	469c      	mov	ip, r3
 8001242:	0c29      	lsrs	r1, r5, #16
 8001244:	4348      	muls	r0, r1
 8001246:	0c13      	lsrs	r3, r2, #16
 8001248:	4484      	add	ip, r0
 800124a:	4463      	add	r3, ip
 800124c:	4379      	muls	r1, r7
 800124e:	4298      	cmp	r0, r3
 8001250:	d903      	bls.n	800125a <__aeabi_ddiv+0x242>
 8001252:	2080      	movs	r0, #128	; 0x80
 8001254:	0240      	lsls	r0, r0, #9
 8001256:	4684      	mov	ip, r0
 8001258:	4461      	add	r1, ip
 800125a:	0c18      	lsrs	r0, r3, #16
 800125c:	0412      	lsls	r2, r2, #16
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	0c12      	lsrs	r2, r2, #16
 8001262:	1841      	adds	r1, r0, r1
 8001264:	189b      	adds	r3, r3, r2
 8001266:	428e      	cmp	r6, r1
 8001268:	d200      	bcs.n	800126c <__aeabi_ddiv+0x254>
 800126a:	e0ff      	b.n	800146c <__aeabi_ddiv+0x454>
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x258>
 800126e:	e0fa      	b.n	8001466 <__aeabi_ddiv+0x44e>
 8001270:	2301      	movs	r3, #1
 8001272:	431d      	orrs	r5, r3
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <__aeabi_ddiv+0x384>)
 8001276:	445a      	add	r2, fp
 8001278:	2a00      	cmp	r2, #0
 800127a:	dc00      	bgt.n	800127e <__aeabi_ddiv+0x266>
 800127c:	e0aa      	b.n	80013d4 <__aeabi_ddiv+0x3bc>
 800127e:	076b      	lsls	r3, r5, #29
 8001280:	d000      	beq.n	8001284 <__aeabi_ddiv+0x26c>
 8001282:	e13d      	b.n	8001500 <__aeabi_ddiv+0x4e8>
 8001284:	08ed      	lsrs	r5, r5, #3
 8001286:	4643      	mov	r3, r8
 8001288:	01db      	lsls	r3, r3, #7
 800128a:	d506      	bpl.n	800129a <__aeabi_ddiv+0x282>
 800128c:	4642      	mov	r2, r8
 800128e:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <__aeabi_ddiv+0x388>)
 8001290:	401a      	ands	r2, r3
 8001292:	4690      	mov	r8, r2
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	00d2      	lsls	r2, r2, #3
 8001298:	445a      	add	r2, fp
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <__aeabi_ddiv+0x38c>)
 800129c:	429a      	cmp	r2, r3
 800129e:	dd00      	ble.n	80012a2 <__aeabi_ddiv+0x28a>
 80012a0:	e71f      	b.n	80010e2 <__aeabi_ddiv+0xca>
 80012a2:	4643      	mov	r3, r8
 80012a4:	075b      	lsls	r3, r3, #29
 80012a6:	431d      	orrs	r5, r3
 80012a8:	4643      	mov	r3, r8
 80012aa:	0552      	lsls	r2, r2, #21
 80012ac:	025c      	lsls	r4, r3, #9
 80012ae:	0b24      	lsrs	r4, r4, #12
 80012b0:	0d53      	lsrs	r3, r2, #21
 80012b2:	e708      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80012b4:	4652      	mov	r2, sl
 80012b6:	4322      	orrs	r2, r4
 80012b8:	d100      	bne.n	80012bc <__aeabi_ddiv+0x2a4>
 80012ba:	e07b      	b.n	80013b4 <__aeabi_ddiv+0x39c>
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x2aa>
 80012c0:	e0fa      	b.n	80014b8 <__aeabi_ddiv+0x4a0>
 80012c2:	0020      	movs	r0, r4
 80012c4:	f001 f99a 	bl	80025fc <__clzsi2>
 80012c8:	0002      	movs	r2, r0
 80012ca:	3a0b      	subs	r2, #11
 80012cc:	231d      	movs	r3, #29
 80012ce:	0001      	movs	r1, r0
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	4652      	mov	r2, sl
 80012d4:	3908      	subs	r1, #8
 80012d6:	40da      	lsrs	r2, r3
 80012d8:	408c      	lsls	r4, r1
 80012da:	4314      	orrs	r4, r2
 80012dc:	4652      	mov	r2, sl
 80012de:	408a      	lsls	r2, r1
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <__aeabi_ddiv+0x390>)
 80012e2:	4458      	add	r0, fp
 80012e4:	469b      	mov	fp, r3
 80012e6:	4483      	add	fp, r0
 80012e8:	2000      	movs	r0, #0
 80012ea:	e6d5      	b.n	8001098 <__aeabi_ddiv+0x80>
 80012ec:	464b      	mov	r3, r9
 80012ee:	4323      	orrs	r3, r4
 80012f0:	4698      	mov	r8, r3
 80012f2:	d044      	beq.n	800137e <__aeabi_ddiv+0x366>
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	d100      	bne.n	80012fa <__aeabi_ddiv+0x2e2>
 80012f8:	e0ce      	b.n	8001498 <__aeabi_ddiv+0x480>
 80012fa:	0020      	movs	r0, r4
 80012fc:	f001 f97e 	bl	80025fc <__clzsi2>
 8001300:	0001      	movs	r1, r0
 8001302:	0002      	movs	r2, r0
 8001304:	390b      	subs	r1, #11
 8001306:	231d      	movs	r3, #29
 8001308:	1a5b      	subs	r3, r3, r1
 800130a:	4649      	mov	r1, r9
 800130c:	0010      	movs	r0, r2
 800130e:	40d9      	lsrs	r1, r3
 8001310:	3808      	subs	r0, #8
 8001312:	4084      	lsls	r4, r0
 8001314:	000b      	movs	r3, r1
 8001316:	464d      	mov	r5, r9
 8001318:	4323      	orrs	r3, r4
 800131a:	4698      	mov	r8, r3
 800131c:	4085      	lsls	r5, r0
 800131e:	4823      	ldr	r0, [pc, #140]	; (80013ac <__aeabi_ddiv+0x394>)
 8001320:	1a83      	subs	r3, r0, r2
 8001322:	469b      	mov	fp, r3
 8001324:	2300      	movs	r3, #0
 8001326:	4699      	mov	r9, r3
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	e69a      	b.n	8001062 <__aeabi_ddiv+0x4a>
 800132c:	464b      	mov	r3, r9
 800132e:	4323      	orrs	r3, r4
 8001330:	4698      	mov	r8, r3
 8001332:	d11d      	bne.n	8001370 <__aeabi_ddiv+0x358>
 8001334:	2308      	movs	r3, #8
 8001336:	4699      	mov	r9, r3
 8001338:	3b06      	subs	r3, #6
 800133a:	2500      	movs	r5, #0
 800133c:	4683      	mov	fp, r0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	e68f      	b.n	8001062 <__aeabi_ddiv+0x4a>
 8001342:	4652      	mov	r2, sl
 8001344:	4322      	orrs	r2, r4
 8001346:	d109      	bne.n	800135c <__aeabi_ddiv+0x344>
 8001348:	2302      	movs	r3, #2
 800134a:	4649      	mov	r1, r9
 800134c:	4319      	orrs	r1, r3
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <__aeabi_ddiv+0x398>)
 8001350:	4689      	mov	r9, r1
 8001352:	469c      	mov	ip, r3
 8001354:	2400      	movs	r4, #0
 8001356:	2002      	movs	r0, #2
 8001358:	44e3      	add	fp, ip
 800135a:	e69d      	b.n	8001098 <__aeabi_ddiv+0x80>
 800135c:	2303      	movs	r3, #3
 800135e:	464a      	mov	r2, r9
 8001360:	431a      	orrs	r2, r3
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <__aeabi_ddiv+0x398>)
 8001364:	4691      	mov	r9, r2
 8001366:	469c      	mov	ip, r3
 8001368:	4652      	mov	r2, sl
 800136a:	2003      	movs	r0, #3
 800136c:	44e3      	add	fp, ip
 800136e:	e693      	b.n	8001098 <__aeabi_ddiv+0x80>
 8001370:	230c      	movs	r3, #12
 8001372:	4699      	mov	r9, r3
 8001374:	3b09      	subs	r3, #9
 8001376:	46a0      	mov	r8, r4
 8001378:	4683      	mov	fp, r0
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	e671      	b.n	8001062 <__aeabi_ddiv+0x4a>
 800137e:	2304      	movs	r3, #4
 8001380:	4699      	mov	r9, r3
 8001382:	2300      	movs	r3, #0
 8001384:	469b      	mov	fp, r3
 8001386:	3301      	adds	r3, #1
 8001388:	2500      	movs	r5, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	e669      	b.n	8001062 <__aeabi_ddiv+0x4a>
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	000007ff 	.word	0x000007ff
 8001394:	fffffc01 	.word	0xfffffc01
 8001398:	0800970c 	.word	0x0800970c
 800139c:	000003ff 	.word	0x000003ff
 80013a0:	feffffff 	.word	0xfeffffff
 80013a4:	000007fe 	.word	0x000007fe
 80013a8:	000003f3 	.word	0x000003f3
 80013ac:	fffffc0d 	.word	0xfffffc0d
 80013b0:	fffff801 	.word	0xfffff801
 80013b4:	4649      	mov	r1, r9
 80013b6:	2301      	movs	r3, #1
 80013b8:	4319      	orrs	r1, r3
 80013ba:	4689      	mov	r9, r1
 80013bc:	2400      	movs	r4, #0
 80013be:	2001      	movs	r0, #1
 80013c0:	e66a      	b.n	8001098 <__aeabi_ddiv+0x80>
 80013c2:	2300      	movs	r3, #0
 80013c4:	2480      	movs	r4, #128	; 0x80
 80013c6:	469a      	mov	sl, r3
 80013c8:	2500      	movs	r5, #0
 80013ca:	4b8a      	ldr	r3, [pc, #552]	; (80015f4 <__aeabi_ddiv+0x5dc>)
 80013cc:	0324      	lsls	r4, r4, #12
 80013ce:	e67a      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80013d0:	2501      	movs	r5, #1
 80013d2:	426d      	negs	r5, r5
 80013d4:	2301      	movs	r3, #1
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	2b38      	cmp	r3, #56	; 0x38
 80013da:	dd00      	ble.n	80013de <__aeabi_ddiv+0x3c6>
 80013dc:	e670      	b.n	80010c0 <__aeabi_ddiv+0xa8>
 80013de:	2b1f      	cmp	r3, #31
 80013e0:	dc00      	bgt.n	80013e4 <__aeabi_ddiv+0x3cc>
 80013e2:	e0bf      	b.n	8001564 <__aeabi_ddiv+0x54c>
 80013e4:	211f      	movs	r1, #31
 80013e6:	4249      	negs	r1, r1
 80013e8:	1a8a      	subs	r2, r1, r2
 80013ea:	4641      	mov	r1, r8
 80013ec:	40d1      	lsrs	r1, r2
 80013ee:	000a      	movs	r2, r1
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d004      	beq.n	80013fe <__aeabi_ddiv+0x3e6>
 80013f4:	4641      	mov	r1, r8
 80013f6:	4b80      	ldr	r3, [pc, #512]	; (80015f8 <__aeabi_ddiv+0x5e0>)
 80013f8:	445b      	add	r3, fp
 80013fa:	4099      	lsls	r1, r3
 80013fc:	430d      	orrs	r5, r1
 80013fe:	1e6b      	subs	r3, r5, #1
 8001400:	419d      	sbcs	r5, r3
 8001402:	2307      	movs	r3, #7
 8001404:	432a      	orrs	r2, r5
 8001406:	001d      	movs	r5, r3
 8001408:	2400      	movs	r4, #0
 800140a:	4015      	ands	r5, r2
 800140c:	4213      	tst	r3, r2
 800140e:	d100      	bne.n	8001412 <__aeabi_ddiv+0x3fa>
 8001410:	e0d4      	b.n	80015bc <__aeabi_ddiv+0x5a4>
 8001412:	210f      	movs	r1, #15
 8001414:	2300      	movs	r3, #0
 8001416:	4011      	ands	r1, r2
 8001418:	2904      	cmp	r1, #4
 800141a:	d100      	bne.n	800141e <__aeabi_ddiv+0x406>
 800141c:	e0cb      	b.n	80015b6 <__aeabi_ddiv+0x59e>
 800141e:	1d11      	adds	r1, r2, #4
 8001420:	4291      	cmp	r1, r2
 8001422:	4192      	sbcs	r2, r2
 8001424:	4252      	negs	r2, r2
 8001426:	189b      	adds	r3, r3, r2
 8001428:	000a      	movs	r2, r1
 800142a:	0219      	lsls	r1, r3, #8
 800142c:	d400      	bmi.n	8001430 <__aeabi_ddiv+0x418>
 800142e:	e0c2      	b.n	80015b6 <__aeabi_ddiv+0x59e>
 8001430:	2301      	movs	r3, #1
 8001432:	2400      	movs	r4, #0
 8001434:	2500      	movs	r5, #0
 8001436:	e646      	b.n	80010c6 <__aeabi_ddiv+0xae>
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	4641      	mov	r1, r8
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	4219      	tst	r1, r3
 8001440:	d008      	beq.n	8001454 <__aeabi_ddiv+0x43c>
 8001442:	421c      	tst	r4, r3
 8001444:	d106      	bne.n	8001454 <__aeabi_ddiv+0x43c>
 8001446:	431c      	orrs	r4, r3
 8001448:	0324      	lsls	r4, r4, #12
 800144a:	46ba      	mov	sl, r7
 800144c:	0015      	movs	r5, r2
 800144e:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <__aeabi_ddiv+0x5dc>)
 8001450:	0b24      	lsrs	r4, r4, #12
 8001452:	e638      	b.n	80010c6 <__aeabi_ddiv+0xae>
 8001454:	2480      	movs	r4, #128	; 0x80
 8001456:	4643      	mov	r3, r8
 8001458:	0324      	lsls	r4, r4, #12
 800145a:	431c      	orrs	r4, r3
 800145c:	0324      	lsls	r4, r4, #12
 800145e:	46b2      	mov	sl, r6
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <__aeabi_ddiv+0x5dc>)
 8001462:	0b24      	lsrs	r4, r4, #12
 8001464:	e62f      	b.n	80010c6 <__aeabi_ddiv+0xae>
 8001466:	2b00      	cmp	r3, #0
 8001468:	d100      	bne.n	800146c <__aeabi_ddiv+0x454>
 800146a:	e703      	b.n	8001274 <__aeabi_ddiv+0x25c>
 800146c:	19a6      	adds	r6, r4, r6
 800146e:	1e68      	subs	r0, r5, #1
 8001470:	42a6      	cmp	r6, r4
 8001472:	d200      	bcs.n	8001476 <__aeabi_ddiv+0x45e>
 8001474:	e08d      	b.n	8001592 <__aeabi_ddiv+0x57a>
 8001476:	428e      	cmp	r6, r1
 8001478:	d200      	bcs.n	800147c <__aeabi_ddiv+0x464>
 800147a:	e0a3      	b.n	80015c4 <__aeabi_ddiv+0x5ac>
 800147c:	d100      	bne.n	8001480 <__aeabi_ddiv+0x468>
 800147e:	e0b3      	b.n	80015e8 <__aeabi_ddiv+0x5d0>
 8001480:	0005      	movs	r5, r0
 8001482:	e6f5      	b.n	8001270 <__aeabi_ddiv+0x258>
 8001484:	42aa      	cmp	r2, r5
 8001486:	d900      	bls.n	800148a <__aeabi_ddiv+0x472>
 8001488:	e639      	b.n	80010fe <__aeabi_ddiv+0xe6>
 800148a:	4643      	mov	r3, r8
 800148c:	07de      	lsls	r6, r3, #31
 800148e:	0858      	lsrs	r0, r3, #1
 8001490:	086b      	lsrs	r3, r5, #1
 8001492:	431e      	orrs	r6, r3
 8001494:	07ed      	lsls	r5, r5, #31
 8001496:	e639      	b.n	800110c <__aeabi_ddiv+0xf4>
 8001498:	4648      	mov	r0, r9
 800149a:	f001 f8af 	bl	80025fc <__clzsi2>
 800149e:	0001      	movs	r1, r0
 80014a0:	0002      	movs	r2, r0
 80014a2:	3115      	adds	r1, #21
 80014a4:	3220      	adds	r2, #32
 80014a6:	291c      	cmp	r1, #28
 80014a8:	dc00      	bgt.n	80014ac <__aeabi_ddiv+0x494>
 80014aa:	e72c      	b.n	8001306 <__aeabi_ddiv+0x2ee>
 80014ac:	464b      	mov	r3, r9
 80014ae:	3808      	subs	r0, #8
 80014b0:	4083      	lsls	r3, r0
 80014b2:	2500      	movs	r5, #0
 80014b4:	4698      	mov	r8, r3
 80014b6:	e732      	b.n	800131e <__aeabi_ddiv+0x306>
 80014b8:	f001 f8a0 	bl	80025fc <__clzsi2>
 80014bc:	0003      	movs	r3, r0
 80014be:	001a      	movs	r2, r3
 80014c0:	3215      	adds	r2, #21
 80014c2:	3020      	adds	r0, #32
 80014c4:	2a1c      	cmp	r2, #28
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_ddiv+0x4b2>
 80014c8:	e700      	b.n	80012cc <__aeabi_ddiv+0x2b4>
 80014ca:	4654      	mov	r4, sl
 80014cc:	3b08      	subs	r3, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	409c      	lsls	r4, r3
 80014d2:	e705      	b.n	80012e0 <__aeabi_ddiv+0x2c8>
 80014d4:	1936      	adds	r6, r6, r4
 80014d6:	3b01      	subs	r3, #1
 80014d8:	42b4      	cmp	r4, r6
 80014da:	d900      	bls.n	80014de <__aeabi_ddiv+0x4c6>
 80014dc:	e6a6      	b.n	800122c <__aeabi_ddiv+0x214>
 80014de:	42b2      	cmp	r2, r6
 80014e0:	d800      	bhi.n	80014e4 <__aeabi_ddiv+0x4cc>
 80014e2:	e6a3      	b.n	800122c <__aeabi_ddiv+0x214>
 80014e4:	1e83      	subs	r3, r0, #2
 80014e6:	1936      	adds	r6, r6, r4
 80014e8:	e6a0      	b.n	800122c <__aeabi_ddiv+0x214>
 80014ea:	1909      	adds	r1, r1, r4
 80014ec:	3d01      	subs	r5, #1
 80014ee:	428c      	cmp	r4, r1
 80014f0:	d900      	bls.n	80014f4 <__aeabi_ddiv+0x4dc>
 80014f2:	e68d      	b.n	8001210 <__aeabi_ddiv+0x1f8>
 80014f4:	428a      	cmp	r2, r1
 80014f6:	d800      	bhi.n	80014fa <__aeabi_ddiv+0x4e2>
 80014f8:	e68a      	b.n	8001210 <__aeabi_ddiv+0x1f8>
 80014fa:	1e85      	subs	r5, r0, #2
 80014fc:	1909      	adds	r1, r1, r4
 80014fe:	e687      	b.n	8001210 <__aeabi_ddiv+0x1f8>
 8001500:	230f      	movs	r3, #15
 8001502:	402b      	ands	r3, r5
 8001504:	2b04      	cmp	r3, #4
 8001506:	d100      	bne.n	800150a <__aeabi_ddiv+0x4f2>
 8001508:	e6bc      	b.n	8001284 <__aeabi_ddiv+0x26c>
 800150a:	2305      	movs	r3, #5
 800150c:	425b      	negs	r3, r3
 800150e:	42ab      	cmp	r3, r5
 8001510:	419b      	sbcs	r3, r3
 8001512:	3504      	adds	r5, #4
 8001514:	425b      	negs	r3, r3
 8001516:	08ed      	lsrs	r5, r5, #3
 8001518:	4498      	add	r8, r3
 800151a:	e6b4      	b.n	8001286 <__aeabi_ddiv+0x26e>
 800151c:	42af      	cmp	r7, r5
 800151e:	d900      	bls.n	8001522 <__aeabi_ddiv+0x50a>
 8001520:	e660      	b.n	80011e4 <__aeabi_ddiv+0x1cc>
 8001522:	4282      	cmp	r2, r0
 8001524:	d804      	bhi.n	8001530 <__aeabi_ddiv+0x518>
 8001526:	d000      	beq.n	800152a <__aeabi_ddiv+0x512>
 8001528:	e65c      	b.n	80011e4 <__aeabi_ddiv+0x1cc>
 800152a:	42ae      	cmp	r6, r5
 800152c:	d800      	bhi.n	8001530 <__aeabi_ddiv+0x518>
 800152e:	e659      	b.n	80011e4 <__aeabi_ddiv+0x1cc>
 8001530:	2302      	movs	r3, #2
 8001532:	425b      	negs	r3, r3
 8001534:	469c      	mov	ip, r3
 8001536:	9b00      	ldr	r3, [sp, #0]
 8001538:	44e0      	add	r8, ip
 800153a:	469c      	mov	ip, r3
 800153c:	4465      	add	r5, ip
 800153e:	429d      	cmp	r5, r3
 8001540:	419b      	sbcs	r3, r3
 8001542:	425b      	negs	r3, r3
 8001544:	191b      	adds	r3, r3, r4
 8001546:	18c0      	adds	r0, r0, r3
 8001548:	e64d      	b.n	80011e6 <__aeabi_ddiv+0x1ce>
 800154a:	428a      	cmp	r2, r1
 800154c:	d800      	bhi.n	8001550 <__aeabi_ddiv+0x538>
 800154e:	e60e      	b.n	800116e <__aeabi_ddiv+0x156>
 8001550:	1e83      	subs	r3, r0, #2
 8001552:	1909      	adds	r1, r1, r4
 8001554:	e60b      	b.n	800116e <__aeabi_ddiv+0x156>
 8001556:	428a      	cmp	r2, r1
 8001558:	d800      	bhi.n	800155c <__aeabi_ddiv+0x544>
 800155a:	e5f4      	b.n	8001146 <__aeabi_ddiv+0x12e>
 800155c:	1e83      	subs	r3, r0, #2
 800155e:	4698      	mov	r8, r3
 8001560:	1909      	adds	r1, r1, r4
 8001562:	e5f0      	b.n	8001146 <__aeabi_ddiv+0x12e>
 8001564:	4925      	ldr	r1, [pc, #148]	; (80015fc <__aeabi_ddiv+0x5e4>)
 8001566:	0028      	movs	r0, r5
 8001568:	4459      	add	r1, fp
 800156a:	408d      	lsls	r5, r1
 800156c:	4642      	mov	r2, r8
 800156e:	408a      	lsls	r2, r1
 8001570:	1e69      	subs	r1, r5, #1
 8001572:	418d      	sbcs	r5, r1
 8001574:	4641      	mov	r1, r8
 8001576:	40d8      	lsrs	r0, r3
 8001578:	40d9      	lsrs	r1, r3
 800157a:	4302      	orrs	r2, r0
 800157c:	432a      	orrs	r2, r5
 800157e:	000b      	movs	r3, r1
 8001580:	0751      	lsls	r1, r2, #29
 8001582:	d100      	bne.n	8001586 <__aeabi_ddiv+0x56e>
 8001584:	e751      	b.n	800142a <__aeabi_ddiv+0x412>
 8001586:	210f      	movs	r1, #15
 8001588:	4011      	ands	r1, r2
 800158a:	2904      	cmp	r1, #4
 800158c:	d000      	beq.n	8001590 <__aeabi_ddiv+0x578>
 800158e:	e746      	b.n	800141e <__aeabi_ddiv+0x406>
 8001590:	e74b      	b.n	800142a <__aeabi_ddiv+0x412>
 8001592:	0005      	movs	r5, r0
 8001594:	428e      	cmp	r6, r1
 8001596:	d000      	beq.n	800159a <__aeabi_ddiv+0x582>
 8001598:	e66a      	b.n	8001270 <__aeabi_ddiv+0x258>
 800159a:	9a00      	ldr	r2, [sp, #0]
 800159c:	4293      	cmp	r3, r2
 800159e:	d000      	beq.n	80015a2 <__aeabi_ddiv+0x58a>
 80015a0:	e666      	b.n	8001270 <__aeabi_ddiv+0x258>
 80015a2:	e667      	b.n	8001274 <__aeabi_ddiv+0x25c>
 80015a4:	4a16      	ldr	r2, [pc, #88]	; (8001600 <__aeabi_ddiv+0x5e8>)
 80015a6:	445a      	add	r2, fp
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	dc00      	bgt.n	80015ae <__aeabi_ddiv+0x596>
 80015ac:	e710      	b.n	80013d0 <__aeabi_ddiv+0x3b8>
 80015ae:	2301      	movs	r3, #1
 80015b0:	2500      	movs	r5, #0
 80015b2:	4498      	add	r8, r3
 80015b4:	e667      	b.n	8001286 <__aeabi_ddiv+0x26e>
 80015b6:	075d      	lsls	r5, r3, #29
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	0b1c      	lsrs	r4, r3, #12
 80015bc:	08d2      	lsrs	r2, r2, #3
 80015be:	2300      	movs	r3, #0
 80015c0:	4315      	orrs	r5, r2
 80015c2:	e580      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80015c4:	9800      	ldr	r0, [sp, #0]
 80015c6:	3d02      	subs	r5, #2
 80015c8:	0042      	lsls	r2, r0, #1
 80015ca:	4282      	cmp	r2, r0
 80015cc:	41bf      	sbcs	r7, r7
 80015ce:	427f      	negs	r7, r7
 80015d0:	193c      	adds	r4, r7, r4
 80015d2:	1936      	adds	r6, r6, r4
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	e7dd      	b.n	8001594 <__aeabi_ddiv+0x57c>
 80015d8:	2480      	movs	r4, #128	; 0x80
 80015da:	4643      	mov	r3, r8
 80015dc:	0324      	lsls	r4, r4, #12
 80015de:	431c      	orrs	r4, r3
 80015e0:	0324      	lsls	r4, r4, #12
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__aeabi_ddiv+0x5dc>)
 80015e4:	0b24      	lsrs	r4, r4, #12
 80015e6:	e56e      	b.n	80010c6 <__aeabi_ddiv+0xae>
 80015e8:	9a00      	ldr	r2, [sp, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3ea      	bcc.n	80015c4 <__aeabi_ddiv+0x5ac>
 80015ee:	0005      	movs	r5, r0
 80015f0:	e7d3      	b.n	800159a <__aeabi_ddiv+0x582>
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	000007ff 	.word	0x000007ff
 80015f8:	0000043e 	.word	0x0000043e
 80015fc:	0000041e 	.word	0x0000041e
 8001600:	000003ff 	.word	0x000003ff

08001604 <__eqdf2>:
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	464e      	mov	r6, r9
 8001608:	4645      	mov	r5, r8
 800160a:	46de      	mov	lr, fp
 800160c:	4657      	mov	r7, sl
 800160e:	4690      	mov	r8, r2
 8001610:	b5e0      	push	{r5, r6, r7, lr}
 8001612:	0017      	movs	r7, r2
 8001614:	031a      	lsls	r2, r3, #12
 8001616:	0b12      	lsrs	r2, r2, #12
 8001618:	0005      	movs	r5, r0
 800161a:	4684      	mov	ip, r0
 800161c:	4819      	ldr	r0, [pc, #100]	; (8001684 <__eqdf2+0x80>)
 800161e:	030e      	lsls	r6, r1, #12
 8001620:	004c      	lsls	r4, r1, #1
 8001622:	4691      	mov	r9, r2
 8001624:	005a      	lsls	r2, r3, #1
 8001626:	0fdb      	lsrs	r3, r3, #31
 8001628:	469b      	mov	fp, r3
 800162a:	0b36      	lsrs	r6, r6, #12
 800162c:	0d64      	lsrs	r4, r4, #21
 800162e:	0fc9      	lsrs	r1, r1, #31
 8001630:	0d52      	lsrs	r2, r2, #21
 8001632:	4284      	cmp	r4, r0
 8001634:	d019      	beq.n	800166a <__eqdf2+0x66>
 8001636:	4282      	cmp	r2, r0
 8001638:	d010      	beq.n	800165c <__eqdf2+0x58>
 800163a:	2001      	movs	r0, #1
 800163c:	4294      	cmp	r4, r2
 800163e:	d10e      	bne.n	800165e <__eqdf2+0x5a>
 8001640:	454e      	cmp	r6, r9
 8001642:	d10c      	bne.n	800165e <__eqdf2+0x5a>
 8001644:	2001      	movs	r0, #1
 8001646:	45c4      	cmp	ip, r8
 8001648:	d109      	bne.n	800165e <__eqdf2+0x5a>
 800164a:	4559      	cmp	r1, fp
 800164c:	d017      	beq.n	800167e <__eqdf2+0x7a>
 800164e:	2c00      	cmp	r4, #0
 8001650:	d105      	bne.n	800165e <__eqdf2+0x5a>
 8001652:	0030      	movs	r0, r6
 8001654:	4328      	orrs	r0, r5
 8001656:	1e43      	subs	r3, r0, #1
 8001658:	4198      	sbcs	r0, r3
 800165a:	e000      	b.n	800165e <__eqdf2+0x5a>
 800165c:	2001      	movs	r0, #1
 800165e:	bcf0      	pop	{r4, r5, r6, r7}
 8001660:	46bb      	mov	fp, r7
 8001662:	46b2      	mov	sl, r6
 8001664:	46a9      	mov	r9, r5
 8001666:	46a0      	mov	r8, r4
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166a:	0033      	movs	r3, r6
 800166c:	2001      	movs	r0, #1
 800166e:	432b      	orrs	r3, r5
 8001670:	d1f5      	bne.n	800165e <__eqdf2+0x5a>
 8001672:	42a2      	cmp	r2, r4
 8001674:	d1f3      	bne.n	800165e <__eqdf2+0x5a>
 8001676:	464b      	mov	r3, r9
 8001678:	433b      	orrs	r3, r7
 800167a:	d1f0      	bne.n	800165e <__eqdf2+0x5a>
 800167c:	e7e2      	b.n	8001644 <__eqdf2+0x40>
 800167e:	2000      	movs	r0, #0
 8001680:	e7ed      	b.n	800165e <__eqdf2+0x5a>
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	000007ff 	.word	0x000007ff

08001688 <__gedf2>:
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	4647      	mov	r7, r8
 800168c:	46ce      	mov	lr, r9
 800168e:	0004      	movs	r4, r0
 8001690:	0018      	movs	r0, r3
 8001692:	0016      	movs	r6, r2
 8001694:	031b      	lsls	r3, r3, #12
 8001696:	0b1b      	lsrs	r3, r3, #12
 8001698:	4d2d      	ldr	r5, [pc, #180]	; (8001750 <__gedf2+0xc8>)
 800169a:	004a      	lsls	r2, r1, #1
 800169c:	4699      	mov	r9, r3
 800169e:	b580      	push	{r7, lr}
 80016a0:	0043      	lsls	r3, r0, #1
 80016a2:	030f      	lsls	r7, r1, #12
 80016a4:	46a4      	mov	ip, r4
 80016a6:	46b0      	mov	r8, r6
 80016a8:	0b3f      	lsrs	r7, r7, #12
 80016aa:	0d52      	lsrs	r2, r2, #21
 80016ac:	0fc9      	lsrs	r1, r1, #31
 80016ae:	0d5b      	lsrs	r3, r3, #21
 80016b0:	0fc0      	lsrs	r0, r0, #31
 80016b2:	42aa      	cmp	r2, r5
 80016b4:	d021      	beq.n	80016fa <__gedf2+0x72>
 80016b6:	42ab      	cmp	r3, r5
 80016b8:	d013      	beq.n	80016e2 <__gedf2+0x5a>
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d122      	bne.n	8001704 <__gedf2+0x7c>
 80016be:	433c      	orrs	r4, r7
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <__gedf2+0x42>
 80016c4:	464d      	mov	r5, r9
 80016c6:	432e      	orrs	r6, r5
 80016c8:	d022      	beq.n	8001710 <__gedf2+0x88>
 80016ca:	2c00      	cmp	r4, #0
 80016cc:	d010      	beq.n	80016f0 <__gedf2+0x68>
 80016ce:	4281      	cmp	r1, r0
 80016d0:	d022      	beq.n	8001718 <__gedf2+0x90>
 80016d2:	2002      	movs	r0, #2
 80016d4:	3901      	subs	r1, #1
 80016d6:	4008      	ands	r0, r1
 80016d8:	3801      	subs	r0, #1
 80016da:	bcc0      	pop	{r6, r7}
 80016dc:	46b9      	mov	r9, r7
 80016de:	46b0      	mov	r8, r6
 80016e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e2:	464d      	mov	r5, r9
 80016e4:	432e      	orrs	r6, r5
 80016e6:	d129      	bne.n	800173c <__gedf2+0xb4>
 80016e8:	2a00      	cmp	r2, #0
 80016ea:	d1f0      	bne.n	80016ce <__gedf2+0x46>
 80016ec:	433c      	orrs	r4, r7
 80016ee:	d1ee      	bne.n	80016ce <__gedf2+0x46>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d1f2      	bne.n	80016da <__gedf2+0x52>
 80016f4:	2001      	movs	r0, #1
 80016f6:	4240      	negs	r0, r0
 80016f8:	e7ef      	b.n	80016da <__gedf2+0x52>
 80016fa:	003d      	movs	r5, r7
 80016fc:	4325      	orrs	r5, r4
 80016fe:	d11d      	bne.n	800173c <__gedf2+0xb4>
 8001700:	4293      	cmp	r3, r2
 8001702:	d0ee      	beq.n	80016e2 <__gedf2+0x5a>
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e2      	bne.n	80016ce <__gedf2+0x46>
 8001708:	464c      	mov	r4, r9
 800170a:	4326      	orrs	r6, r4
 800170c:	d1df      	bne.n	80016ce <__gedf2+0x46>
 800170e:	e7e0      	b.n	80016d2 <__gedf2+0x4a>
 8001710:	2000      	movs	r0, #0
 8001712:	2c00      	cmp	r4, #0
 8001714:	d0e1      	beq.n	80016da <__gedf2+0x52>
 8001716:	e7dc      	b.n	80016d2 <__gedf2+0x4a>
 8001718:	429a      	cmp	r2, r3
 800171a:	dc0a      	bgt.n	8001732 <__gedf2+0xaa>
 800171c:	dbe8      	blt.n	80016f0 <__gedf2+0x68>
 800171e:	454f      	cmp	r7, r9
 8001720:	d8d7      	bhi.n	80016d2 <__gedf2+0x4a>
 8001722:	d00e      	beq.n	8001742 <__gedf2+0xba>
 8001724:	2000      	movs	r0, #0
 8001726:	454f      	cmp	r7, r9
 8001728:	d2d7      	bcs.n	80016da <__gedf2+0x52>
 800172a:	2900      	cmp	r1, #0
 800172c:	d0e2      	beq.n	80016f4 <__gedf2+0x6c>
 800172e:	0008      	movs	r0, r1
 8001730:	e7d3      	b.n	80016da <__gedf2+0x52>
 8001732:	4243      	negs	r3, r0
 8001734:	4158      	adcs	r0, r3
 8001736:	0040      	lsls	r0, r0, #1
 8001738:	3801      	subs	r0, #1
 800173a:	e7ce      	b.n	80016da <__gedf2+0x52>
 800173c:	2002      	movs	r0, #2
 800173e:	4240      	negs	r0, r0
 8001740:	e7cb      	b.n	80016da <__gedf2+0x52>
 8001742:	45c4      	cmp	ip, r8
 8001744:	d8c5      	bhi.n	80016d2 <__gedf2+0x4a>
 8001746:	2000      	movs	r0, #0
 8001748:	45c4      	cmp	ip, r8
 800174a:	d2c6      	bcs.n	80016da <__gedf2+0x52>
 800174c:	e7ed      	b.n	800172a <__gedf2+0xa2>
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	000007ff 	.word	0x000007ff

08001754 <__ledf2>:
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	4647      	mov	r7, r8
 8001758:	46ce      	mov	lr, r9
 800175a:	0004      	movs	r4, r0
 800175c:	0018      	movs	r0, r3
 800175e:	0016      	movs	r6, r2
 8001760:	031b      	lsls	r3, r3, #12
 8001762:	0b1b      	lsrs	r3, r3, #12
 8001764:	4d2c      	ldr	r5, [pc, #176]	; (8001818 <__ledf2+0xc4>)
 8001766:	004a      	lsls	r2, r1, #1
 8001768:	4699      	mov	r9, r3
 800176a:	b580      	push	{r7, lr}
 800176c:	0043      	lsls	r3, r0, #1
 800176e:	030f      	lsls	r7, r1, #12
 8001770:	46a4      	mov	ip, r4
 8001772:	46b0      	mov	r8, r6
 8001774:	0b3f      	lsrs	r7, r7, #12
 8001776:	0d52      	lsrs	r2, r2, #21
 8001778:	0fc9      	lsrs	r1, r1, #31
 800177a:	0d5b      	lsrs	r3, r3, #21
 800177c:	0fc0      	lsrs	r0, r0, #31
 800177e:	42aa      	cmp	r2, r5
 8001780:	d00d      	beq.n	800179e <__ledf2+0x4a>
 8001782:	42ab      	cmp	r3, r5
 8001784:	d010      	beq.n	80017a8 <__ledf2+0x54>
 8001786:	2a00      	cmp	r2, #0
 8001788:	d127      	bne.n	80017da <__ledf2+0x86>
 800178a:	433c      	orrs	r4, r7
 800178c:	2b00      	cmp	r3, #0
 800178e:	d111      	bne.n	80017b4 <__ledf2+0x60>
 8001790:	464d      	mov	r5, r9
 8001792:	432e      	orrs	r6, r5
 8001794:	d10e      	bne.n	80017b4 <__ledf2+0x60>
 8001796:	2000      	movs	r0, #0
 8001798:	2c00      	cmp	r4, #0
 800179a:	d015      	beq.n	80017c8 <__ledf2+0x74>
 800179c:	e00e      	b.n	80017bc <__ledf2+0x68>
 800179e:	003d      	movs	r5, r7
 80017a0:	4325      	orrs	r5, r4
 80017a2:	d110      	bne.n	80017c6 <__ledf2+0x72>
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d118      	bne.n	80017da <__ledf2+0x86>
 80017a8:	464d      	mov	r5, r9
 80017aa:	432e      	orrs	r6, r5
 80017ac:	d10b      	bne.n	80017c6 <__ledf2+0x72>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d102      	bne.n	80017b8 <__ledf2+0x64>
 80017b2:	433c      	orrs	r4, r7
 80017b4:	2c00      	cmp	r4, #0
 80017b6:	d00b      	beq.n	80017d0 <__ledf2+0x7c>
 80017b8:	4281      	cmp	r1, r0
 80017ba:	d014      	beq.n	80017e6 <__ledf2+0x92>
 80017bc:	2002      	movs	r0, #2
 80017be:	3901      	subs	r1, #1
 80017c0:	4008      	ands	r0, r1
 80017c2:	3801      	subs	r0, #1
 80017c4:	e000      	b.n	80017c8 <__ledf2+0x74>
 80017c6:	2002      	movs	r0, #2
 80017c8:	bcc0      	pop	{r6, r7}
 80017ca:	46b9      	mov	r9, r7
 80017cc:	46b0      	mov	r8, r6
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d1f9      	bne.n	80017c8 <__ledf2+0x74>
 80017d4:	2001      	movs	r0, #1
 80017d6:	4240      	negs	r0, r0
 80017d8:	e7f6      	b.n	80017c8 <__ledf2+0x74>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ec      	bne.n	80017b8 <__ledf2+0x64>
 80017de:	464c      	mov	r4, r9
 80017e0:	4326      	orrs	r6, r4
 80017e2:	d1e9      	bne.n	80017b8 <__ledf2+0x64>
 80017e4:	e7ea      	b.n	80017bc <__ledf2+0x68>
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dd04      	ble.n	80017f4 <__ledf2+0xa0>
 80017ea:	4243      	negs	r3, r0
 80017ec:	4158      	adcs	r0, r3
 80017ee:	0040      	lsls	r0, r0, #1
 80017f0:	3801      	subs	r0, #1
 80017f2:	e7e9      	b.n	80017c8 <__ledf2+0x74>
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbeb      	blt.n	80017d0 <__ledf2+0x7c>
 80017f8:	454f      	cmp	r7, r9
 80017fa:	d8df      	bhi.n	80017bc <__ledf2+0x68>
 80017fc:	d006      	beq.n	800180c <__ledf2+0xb8>
 80017fe:	2000      	movs	r0, #0
 8001800:	454f      	cmp	r7, r9
 8001802:	d2e1      	bcs.n	80017c8 <__ledf2+0x74>
 8001804:	2900      	cmp	r1, #0
 8001806:	d0e5      	beq.n	80017d4 <__ledf2+0x80>
 8001808:	0008      	movs	r0, r1
 800180a:	e7dd      	b.n	80017c8 <__ledf2+0x74>
 800180c:	45c4      	cmp	ip, r8
 800180e:	d8d5      	bhi.n	80017bc <__ledf2+0x68>
 8001810:	2000      	movs	r0, #0
 8001812:	45c4      	cmp	ip, r8
 8001814:	d2d8      	bcs.n	80017c8 <__ledf2+0x74>
 8001816:	e7f5      	b.n	8001804 <__ledf2+0xb0>
 8001818:	000007ff 	.word	0x000007ff

0800181c <__aeabi_dmul>:
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	4657      	mov	r7, sl
 8001820:	464e      	mov	r6, r9
 8001822:	4645      	mov	r5, r8
 8001824:	46de      	mov	lr, fp
 8001826:	b5e0      	push	{r5, r6, r7, lr}
 8001828:	4698      	mov	r8, r3
 800182a:	030c      	lsls	r4, r1, #12
 800182c:	004b      	lsls	r3, r1, #1
 800182e:	0006      	movs	r6, r0
 8001830:	4692      	mov	sl, r2
 8001832:	b087      	sub	sp, #28
 8001834:	0b24      	lsrs	r4, r4, #12
 8001836:	0d5b      	lsrs	r3, r3, #21
 8001838:	0fcf      	lsrs	r7, r1, #31
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <__aeabi_dmul+0x24>
 800183e:	e15c      	b.n	8001afa <__aeabi_dmul+0x2de>
 8001840:	4ad9      	ldr	r2, [pc, #868]	; (8001ba8 <__aeabi_dmul+0x38c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d100      	bne.n	8001848 <__aeabi_dmul+0x2c>
 8001846:	e175      	b.n	8001b34 <__aeabi_dmul+0x318>
 8001848:	0f42      	lsrs	r2, r0, #29
 800184a:	00e4      	lsls	r4, r4, #3
 800184c:	4314      	orrs	r4, r2
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	0412      	lsls	r2, r2, #16
 8001852:	4314      	orrs	r4, r2
 8001854:	4ad5      	ldr	r2, [pc, #852]	; (8001bac <__aeabi_dmul+0x390>)
 8001856:	00c5      	lsls	r5, r0, #3
 8001858:	4694      	mov	ip, r2
 800185a:	4463      	add	r3, ip
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	4699      	mov	r9, r3
 8001862:	469b      	mov	fp, r3
 8001864:	4643      	mov	r3, r8
 8001866:	4642      	mov	r2, r8
 8001868:	031e      	lsls	r6, r3, #12
 800186a:	0fd2      	lsrs	r2, r2, #31
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4650      	mov	r0, sl
 8001870:	4690      	mov	r8, r2
 8001872:	0b36      	lsrs	r6, r6, #12
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0x5e>
 8001878:	e120      	b.n	8001abc <__aeabi_dmul+0x2a0>
 800187a:	4acb      	ldr	r2, [pc, #812]	; (8001ba8 <__aeabi_dmul+0x38c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d100      	bne.n	8001882 <__aeabi_dmul+0x66>
 8001880:	e162      	b.n	8001b48 <__aeabi_dmul+0x32c>
 8001882:	49ca      	ldr	r1, [pc, #808]	; (8001bac <__aeabi_dmul+0x390>)
 8001884:	0f42      	lsrs	r2, r0, #29
 8001886:	468c      	mov	ip, r1
 8001888:	9900      	ldr	r1, [sp, #0]
 800188a:	4463      	add	r3, ip
 800188c:	00f6      	lsls	r6, r6, #3
 800188e:	468c      	mov	ip, r1
 8001890:	4316      	orrs	r6, r2
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	449c      	add	ip, r3
 8001896:	0412      	lsls	r2, r2, #16
 8001898:	4663      	mov	r3, ip
 800189a:	4316      	orrs	r6, r2
 800189c:	00c2      	lsls	r2, r0, #3
 800189e:	2000      	movs	r0, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	9900      	ldr	r1, [sp, #0]
 80018a4:	4643      	mov	r3, r8
 80018a6:	3101      	adds	r1, #1
 80018a8:	468c      	mov	ip, r1
 80018aa:	4649      	mov	r1, r9
 80018ac:	407b      	eors	r3, r7
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	290f      	cmp	r1, #15
 80018b2:	d826      	bhi.n	8001902 <__aeabi_dmul+0xe6>
 80018b4:	4bbe      	ldr	r3, [pc, #760]	; (8001bb0 <__aeabi_dmul+0x394>)
 80018b6:	0089      	lsls	r1, r1, #2
 80018b8:	5859      	ldr	r1, [r3, r1]
 80018ba:	468f      	mov	pc, r1
 80018bc:	4643      	mov	r3, r8
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	0034      	movs	r4, r6
 80018c2:	0015      	movs	r5, r2
 80018c4:	4683      	mov	fp, r0
 80018c6:	465b      	mov	r3, fp
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d016      	beq.n	80018fa <__aeabi_dmul+0xde>
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dmul+0xb6>
 80018d0:	e203      	b.n	8001cda <__aeabi_dmul+0x4be>
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d000      	beq.n	80018d8 <__aeabi_dmul+0xbc>
 80018d6:	e0cd      	b.n	8001a74 <__aeabi_dmul+0x258>
 80018d8:	2200      	movs	r2, #0
 80018da:	2400      	movs	r4, #0
 80018dc:	2500      	movs	r5, #0
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	0512      	lsls	r2, r2, #20
 80018e2:	4322      	orrs	r2, r4
 80018e4:	07db      	lsls	r3, r3, #31
 80018e6:	431a      	orrs	r2, r3
 80018e8:	0028      	movs	r0, r5
 80018ea:	0011      	movs	r1, r2
 80018ec:	b007      	add	sp, #28
 80018ee:	bcf0      	pop	{r4, r5, r6, r7}
 80018f0:	46bb      	mov	fp, r7
 80018f2:	46b2      	mov	sl, r6
 80018f4:	46a9      	mov	r9, r5
 80018f6:	46a0      	mov	r8, r4
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fa:	2400      	movs	r4, #0
 80018fc:	2500      	movs	r5, #0
 80018fe:	4aaa      	ldr	r2, [pc, #680]	; (8001ba8 <__aeabi_dmul+0x38c>)
 8001900:	e7ed      	b.n	80018de <__aeabi_dmul+0xc2>
 8001902:	0c28      	lsrs	r0, r5, #16
 8001904:	042d      	lsls	r5, r5, #16
 8001906:	0c2d      	lsrs	r5, r5, #16
 8001908:	002b      	movs	r3, r5
 800190a:	0c11      	lsrs	r1, r2, #16
 800190c:	0412      	lsls	r2, r2, #16
 800190e:	0c12      	lsrs	r2, r2, #16
 8001910:	4353      	muls	r3, r2
 8001912:	4698      	mov	r8, r3
 8001914:	0013      	movs	r3, r2
 8001916:	002f      	movs	r7, r5
 8001918:	4343      	muls	r3, r0
 800191a:	4699      	mov	r9, r3
 800191c:	434f      	muls	r7, r1
 800191e:	444f      	add	r7, r9
 8001920:	46bb      	mov	fp, r7
 8001922:	4647      	mov	r7, r8
 8001924:	000b      	movs	r3, r1
 8001926:	0c3f      	lsrs	r7, r7, #16
 8001928:	46ba      	mov	sl, r7
 800192a:	4343      	muls	r3, r0
 800192c:	44da      	add	sl, fp
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	45d1      	cmp	r9, sl
 8001932:	d904      	bls.n	800193e <__aeabi_dmul+0x122>
 8001934:	2780      	movs	r7, #128	; 0x80
 8001936:	027f      	lsls	r7, r7, #9
 8001938:	46b9      	mov	r9, r7
 800193a:	444b      	add	r3, r9
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	4653      	mov	r3, sl
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	469b      	mov	fp, r3
 8001944:	4653      	mov	r3, sl
 8001946:	041f      	lsls	r7, r3, #16
 8001948:	4643      	mov	r3, r8
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	4698      	mov	r8, r3
 8001950:	003b      	movs	r3, r7
 8001952:	4443      	add	r3, r8
 8001954:	9304      	str	r3, [sp, #16]
 8001956:	0c33      	lsrs	r3, r6, #16
 8001958:	0436      	lsls	r6, r6, #16
 800195a:	0c36      	lsrs	r6, r6, #16
 800195c:	4698      	mov	r8, r3
 800195e:	0033      	movs	r3, r6
 8001960:	4343      	muls	r3, r0
 8001962:	4699      	mov	r9, r3
 8001964:	4643      	mov	r3, r8
 8001966:	4343      	muls	r3, r0
 8001968:	002f      	movs	r7, r5
 800196a:	469a      	mov	sl, r3
 800196c:	4643      	mov	r3, r8
 800196e:	4377      	muls	r7, r6
 8001970:	435d      	muls	r5, r3
 8001972:	0c38      	lsrs	r0, r7, #16
 8001974:	444d      	add	r5, r9
 8001976:	1945      	adds	r5, r0, r5
 8001978:	45a9      	cmp	r9, r5
 800197a:	d903      	bls.n	8001984 <__aeabi_dmul+0x168>
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	4699      	mov	r9, r3
 8001982:	44ca      	add	sl, r9
 8001984:	043f      	lsls	r7, r7, #16
 8001986:	0c28      	lsrs	r0, r5, #16
 8001988:	0c3f      	lsrs	r7, r7, #16
 800198a:	042d      	lsls	r5, r5, #16
 800198c:	19ed      	adds	r5, r5, r7
 800198e:	0c27      	lsrs	r7, r4, #16
 8001990:	0424      	lsls	r4, r4, #16
 8001992:	0c24      	lsrs	r4, r4, #16
 8001994:	0003      	movs	r3, r0
 8001996:	0020      	movs	r0, r4
 8001998:	4350      	muls	r0, r2
 800199a:	437a      	muls	r2, r7
 800199c:	4691      	mov	r9, r2
 800199e:	003a      	movs	r2, r7
 80019a0:	4453      	add	r3, sl
 80019a2:	9305      	str	r3, [sp, #20]
 80019a4:	0c03      	lsrs	r3, r0, #16
 80019a6:	469a      	mov	sl, r3
 80019a8:	434a      	muls	r2, r1
 80019aa:	4361      	muls	r1, r4
 80019ac:	4449      	add	r1, r9
 80019ae:	4451      	add	r1, sl
 80019b0:	44ab      	add	fp, r5
 80019b2:	4589      	cmp	r9, r1
 80019b4:	d903      	bls.n	80019be <__aeabi_dmul+0x1a2>
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	4699      	mov	r9, r3
 80019bc:	444a      	add	r2, r9
 80019be:	0400      	lsls	r0, r0, #16
 80019c0:	0c0b      	lsrs	r3, r1, #16
 80019c2:	0c00      	lsrs	r0, r0, #16
 80019c4:	0409      	lsls	r1, r1, #16
 80019c6:	1809      	adds	r1, r1, r0
 80019c8:	0020      	movs	r0, r4
 80019ca:	4699      	mov	r9, r3
 80019cc:	4643      	mov	r3, r8
 80019ce:	4370      	muls	r0, r6
 80019d0:	435c      	muls	r4, r3
 80019d2:	437e      	muls	r6, r7
 80019d4:	435f      	muls	r7, r3
 80019d6:	0c03      	lsrs	r3, r0, #16
 80019d8:	4698      	mov	r8, r3
 80019da:	19a4      	adds	r4, r4, r6
 80019dc:	4444      	add	r4, r8
 80019de:	444a      	add	r2, r9
 80019e0:	9703      	str	r7, [sp, #12]
 80019e2:	42a6      	cmp	r6, r4
 80019e4:	d904      	bls.n	80019f0 <__aeabi_dmul+0x1d4>
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	025b      	lsls	r3, r3, #9
 80019ea:	4698      	mov	r8, r3
 80019ec:	4447      	add	r7, r8
 80019ee:	9703      	str	r7, [sp, #12]
 80019f0:	0423      	lsls	r3, r4, #16
 80019f2:	9e02      	ldr	r6, [sp, #8]
 80019f4:	469a      	mov	sl, r3
 80019f6:	9b05      	ldr	r3, [sp, #20]
 80019f8:	445e      	add	r6, fp
 80019fa:	4698      	mov	r8, r3
 80019fc:	42ae      	cmp	r6, r5
 80019fe:	41ad      	sbcs	r5, r5
 8001a00:	1876      	adds	r6, r6, r1
 8001a02:	428e      	cmp	r6, r1
 8001a04:	4189      	sbcs	r1, r1
 8001a06:	0400      	lsls	r0, r0, #16
 8001a08:	0c00      	lsrs	r0, r0, #16
 8001a0a:	4450      	add	r0, sl
 8001a0c:	4440      	add	r0, r8
 8001a0e:	426d      	negs	r5, r5
 8001a10:	1947      	adds	r7, r0, r5
 8001a12:	46b8      	mov	r8, r7
 8001a14:	4693      	mov	fp, r2
 8001a16:	4249      	negs	r1, r1
 8001a18:	4689      	mov	r9, r1
 8001a1a:	44c3      	add	fp, r8
 8001a1c:	44d9      	add	r9, fp
 8001a1e:	4298      	cmp	r0, r3
 8001a20:	4180      	sbcs	r0, r0
 8001a22:	45a8      	cmp	r8, r5
 8001a24:	41ad      	sbcs	r5, r5
 8001a26:	4593      	cmp	fp, r2
 8001a28:	4192      	sbcs	r2, r2
 8001a2a:	4589      	cmp	r9, r1
 8001a2c:	4189      	sbcs	r1, r1
 8001a2e:	426d      	negs	r5, r5
 8001a30:	4240      	negs	r0, r0
 8001a32:	4328      	orrs	r0, r5
 8001a34:	0c24      	lsrs	r4, r4, #16
 8001a36:	4252      	negs	r2, r2
 8001a38:	4249      	negs	r1, r1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	9b03      	ldr	r3, [sp, #12]
 8001a3e:	1900      	adds	r0, r0, r4
 8001a40:	1880      	adds	r0, r0, r2
 8001a42:	18c7      	adds	r7, r0, r3
 8001a44:	464b      	mov	r3, r9
 8001a46:	0ddc      	lsrs	r4, r3, #23
 8001a48:	9b04      	ldr	r3, [sp, #16]
 8001a4a:	0275      	lsls	r5, r6, #9
 8001a4c:	431d      	orrs	r5, r3
 8001a4e:	1e6a      	subs	r2, r5, #1
 8001a50:	4195      	sbcs	r5, r2
 8001a52:	464b      	mov	r3, r9
 8001a54:	0df6      	lsrs	r6, r6, #23
 8001a56:	027f      	lsls	r7, r7, #9
 8001a58:	4335      	orrs	r5, r6
 8001a5a:	025a      	lsls	r2, r3, #9
 8001a5c:	433c      	orrs	r4, r7
 8001a5e:	4315      	orrs	r5, r2
 8001a60:	01fb      	lsls	r3, r7, #7
 8001a62:	d400      	bmi.n	8001a66 <__aeabi_dmul+0x24a>
 8001a64:	e11c      	b.n	8001ca0 <__aeabi_dmul+0x484>
 8001a66:	2101      	movs	r1, #1
 8001a68:	086a      	lsrs	r2, r5, #1
 8001a6a:	400d      	ands	r5, r1
 8001a6c:	4315      	orrs	r5, r2
 8001a6e:	07e2      	lsls	r2, r4, #31
 8001a70:	4315      	orrs	r5, r2
 8001a72:	0864      	lsrs	r4, r4, #1
 8001a74:	494f      	ldr	r1, [pc, #316]	; (8001bb4 <__aeabi_dmul+0x398>)
 8001a76:	4461      	add	r1, ip
 8001a78:	2900      	cmp	r1, #0
 8001a7a:	dc00      	bgt.n	8001a7e <__aeabi_dmul+0x262>
 8001a7c:	e0b0      	b.n	8001be0 <__aeabi_dmul+0x3c4>
 8001a7e:	076b      	lsls	r3, r5, #29
 8001a80:	d009      	beq.n	8001a96 <__aeabi_dmul+0x27a>
 8001a82:	220f      	movs	r2, #15
 8001a84:	402a      	ands	r2, r5
 8001a86:	2a04      	cmp	r2, #4
 8001a88:	d005      	beq.n	8001a96 <__aeabi_dmul+0x27a>
 8001a8a:	1d2a      	adds	r2, r5, #4
 8001a8c:	42aa      	cmp	r2, r5
 8001a8e:	41ad      	sbcs	r5, r5
 8001a90:	426d      	negs	r5, r5
 8001a92:	1964      	adds	r4, r4, r5
 8001a94:	0015      	movs	r5, r2
 8001a96:	01e3      	lsls	r3, r4, #7
 8001a98:	d504      	bpl.n	8001aa4 <__aeabi_dmul+0x288>
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	4a46      	ldr	r2, [pc, #280]	; (8001bb8 <__aeabi_dmul+0x39c>)
 8001a9e:	00c9      	lsls	r1, r1, #3
 8001aa0:	4014      	ands	r4, r2
 8001aa2:	4461      	add	r1, ip
 8001aa4:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <__aeabi_dmul+0x3a0>)
 8001aa6:	4291      	cmp	r1, r2
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dmul+0x290>
 8001aaa:	e726      	b.n	80018fa <__aeabi_dmul+0xde>
 8001aac:	0762      	lsls	r2, r4, #29
 8001aae:	08ed      	lsrs	r5, r5, #3
 8001ab0:	0264      	lsls	r4, r4, #9
 8001ab2:	0549      	lsls	r1, r1, #21
 8001ab4:	4315      	orrs	r5, r2
 8001ab6:	0b24      	lsrs	r4, r4, #12
 8001ab8:	0d4a      	lsrs	r2, r1, #21
 8001aba:	e710      	b.n	80018de <__aeabi_dmul+0xc2>
 8001abc:	4652      	mov	r2, sl
 8001abe:	4332      	orrs	r2, r6
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dmul+0x2a8>
 8001ac2:	e07f      	b.n	8001bc4 <__aeabi_dmul+0x3a8>
 8001ac4:	2e00      	cmp	r6, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dmul+0x2ae>
 8001ac8:	e0dc      	b.n	8001c84 <__aeabi_dmul+0x468>
 8001aca:	0030      	movs	r0, r6
 8001acc:	f000 fd96 	bl	80025fc <__clzsi2>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	3a0b      	subs	r2, #11
 8001ad4:	231d      	movs	r3, #29
 8001ad6:	0001      	movs	r1, r0
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	4652      	mov	r2, sl
 8001adc:	3908      	subs	r1, #8
 8001ade:	40da      	lsrs	r2, r3
 8001ae0:	408e      	lsls	r6, r1
 8001ae2:	4316      	orrs	r6, r2
 8001ae4:	4652      	mov	r2, sl
 8001ae6:	408a      	lsls	r2, r1
 8001ae8:	9b00      	ldr	r3, [sp, #0]
 8001aea:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <__aeabi_dmul+0x3a4>)
 8001aec:	1a18      	subs	r0, r3, r0
 8001aee:	0003      	movs	r3, r0
 8001af0:	468c      	mov	ip, r1
 8001af2:	4463      	add	r3, ip
 8001af4:	2000      	movs	r0, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	e6d3      	b.n	80018a2 <__aeabi_dmul+0x86>
 8001afa:	0025      	movs	r5, r4
 8001afc:	4305      	orrs	r5, r0
 8001afe:	d04a      	beq.n	8001b96 <__aeabi_dmul+0x37a>
 8001b00:	2c00      	cmp	r4, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dmul+0x2ea>
 8001b04:	e0b0      	b.n	8001c68 <__aeabi_dmul+0x44c>
 8001b06:	0020      	movs	r0, r4
 8001b08:	f000 fd78 	bl	80025fc <__clzsi2>
 8001b0c:	0001      	movs	r1, r0
 8001b0e:	0002      	movs	r2, r0
 8001b10:	390b      	subs	r1, #11
 8001b12:	231d      	movs	r3, #29
 8001b14:	0010      	movs	r0, r2
 8001b16:	1a5b      	subs	r3, r3, r1
 8001b18:	0031      	movs	r1, r6
 8001b1a:	0035      	movs	r5, r6
 8001b1c:	3808      	subs	r0, #8
 8001b1e:	4084      	lsls	r4, r0
 8001b20:	40d9      	lsrs	r1, r3
 8001b22:	4085      	lsls	r5, r0
 8001b24:	430c      	orrs	r4, r1
 8001b26:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <__aeabi_dmul+0x3a4>)
 8001b28:	1a83      	subs	r3, r0, r2
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	4699      	mov	r9, r3
 8001b30:	469b      	mov	fp, r3
 8001b32:	e697      	b.n	8001864 <__aeabi_dmul+0x48>
 8001b34:	0005      	movs	r5, r0
 8001b36:	4325      	orrs	r5, r4
 8001b38:	d126      	bne.n	8001b88 <__aeabi_dmul+0x36c>
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2302      	movs	r3, #2
 8001b40:	2400      	movs	r4, #0
 8001b42:	4691      	mov	r9, r2
 8001b44:	469b      	mov	fp, r3
 8001b46:	e68d      	b.n	8001864 <__aeabi_dmul+0x48>
 8001b48:	4652      	mov	r2, sl
 8001b4a:	9b00      	ldr	r3, [sp, #0]
 8001b4c:	4332      	orrs	r2, r6
 8001b4e:	d110      	bne.n	8001b72 <__aeabi_dmul+0x356>
 8001b50:	4915      	ldr	r1, [pc, #84]	; (8001ba8 <__aeabi_dmul+0x38c>)
 8001b52:	2600      	movs	r6, #0
 8001b54:	468c      	mov	ip, r1
 8001b56:	4463      	add	r3, ip
 8001b58:	4649      	mov	r1, r9
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	4319      	orrs	r1, r3
 8001b60:	4689      	mov	r9, r1
 8001b62:	2002      	movs	r0, #2
 8001b64:	e69d      	b.n	80018a2 <__aeabi_dmul+0x86>
 8001b66:	465b      	mov	r3, fp
 8001b68:	9701      	str	r7, [sp, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_dmul+0x354>
 8001b6e:	e6ad      	b.n	80018cc <__aeabi_dmul+0xb0>
 8001b70:	e6c3      	b.n	80018fa <__aeabi_dmul+0xde>
 8001b72:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <__aeabi_dmul+0x38c>)
 8001b74:	2003      	movs	r0, #3
 8001b76:	4694      	mov	ip, r2
 8001b78:	4463      	add	r3, ip
 8001b7a:	464a      	mov	r2, r9
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2303      	movs	r3, #3
 8001b80:	431a      	orrs	r2, r3
 8001b82:	4691      	mov	r9, r2
 8001b84:	4652      	mov	r2, sl
 8001b86:	e68c      	b.n	80018a2 <__aeabi_dmul+0x86>
 8001b88:	220c      	movs	r2, #12
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	0005      	movs	r5, r0
 8001b90:	4691      	mov	r9, r2
 8001b92:	469b      	mov	fp, r3
 8001b94:	e666      	b.n	8001864 <__aeabi_dmul+0x48>
 8001b96:	2304      	movs	r3, #4
 8001b98:	4699      	mov	r9, r3
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	469b      	mov	fp, r3
 8001ba4:	e65e      	b.n	8001864 <__aeabi_dmul+0x48>
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	000007ff 	.word	0x000007ff
 8001bac:	fffffc01 	.word	0xfffffc01
 8001bb0:	0800974c 	.word	0x0800974c
 8001bb4:	000003ff 	.word	0x000003ff
 8001bb8:	feffffff 	.word	0xfeffffff
 8001bbc:	000007fe 	.word	0x000007fe
 8001bc0:	fffffc0d 	.word	0xfffffc0d
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4319      	orrs	r1, r3
 8001bca:	4689      	mov	r9, r1
 8001bcc:	2600      	movs	r6, #0
 8001bce:	2001      	movs	r0, #1
 8001bd0:	e667      	b.n	80018a2 <__aeabi_dmul+0x86>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2480      	movs	r4, #128	; 0x80
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	4a43      	ldr	r2, [pc, #268]	; (8001ce8 <__aeabi_dmul+0x4cc>)
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	0324      	lsls	r4, r4, #12
 8001bde:	e67e      	b.n	80018de <__aeabi_dmul+0xc2>
 8001be0:	2001      	movs	r0, #1
 8001be2:	1a40      	subs	r0, r0, r1
 8001be4:	2838      	cmp	r0, #56	; 0x38
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dmul+0x3ce>
 8001be8:	e676      	b.n	80018d8 <__aeabi_dmul+0xbc>
 8001bea:	281f      	cmp	r0, #31
 8001bec:	dd5b      	ble.n	8001ca6 <__aeabi_dmul+0x48a>
 8001bee:	221f      	movs	r2, #31
 8001bf0:	0023      	movs	r3, r4
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	40cb      	lsrs	r3, r1
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	2820      	cmp	r0, #32
 8001bfc:	d003      	beq.n	8001c06 <__aeabi_dmul+0x3ea>
 8001bfe:	4a3b      	ldr	r2, [pc, #236]	; (8001cec <__aeabi_dmul+0x4d0>)
 8001c00:	4462      	add	r2, ip
 8001c02:	4094      	lsls	r4, r2
 8001c04:	4325      	orrs	r5, r4
 8001c06:	1e6a      	subs	r2, r5, #1
 8001c08:	4195      	sbcs	r5, r2
 8001c0a:	002a      	movs	r2, r5
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	2107      	movs	r1, #7
 8001c10:	000d      	movs	r5, r1
 8001c12:	2400      	movs	r4, #0
 8001c14:	4015      	ands	r5, r2
 8001c16:	4211      	tst	r1, r2
 8001c18:	d05b      	beq.n	8001cd2 <__aeabi_dmul+0x4b6>
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	4011      	ands	r1, r2
 8001c20:	2904      	cmp	r1, #4
 8001c22:	d053      	beq.n	8001ccc <__aeabi_dmul+0x4b0>
 8001c24:	1d11      	adds	r1, r2, #4
 8001c26:	4291      	cmp	r1, r2
 8001c28:	4192      	sbcs	r2, r2
 8001c2a:	4252      	negs	r2, r2
 8001c2c:	18a4      	adds	r4, r4, r2
 8001c2e:	000a      	movs	r2, r1
 8001c30:	0223      	lsls	r3, r4, #8
 8001c32:	d54b      	bpl.n	8001ccc <__aeabi_dmul+0x4b0>
 8001c34:	2201      	movs	r2, #1
 8001c36:	2400      	movs	r4, #0
 8001c38:	2500      	movs	r5, #0
 8001c3a:	e650      	b.n	80018de <__aeabi_dmul+0xc2>
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	031b      	lsls	r3, r3, #12
 8001c40:	421c      	tst	r4, r3
 8001c42:	d009      	beq.n	8001c58 <__aeabi_dmul+0x43c>
 8001c44:	421e      	tst	r6, r3
 8001c46:	d107      	bne.n	8001c58 <__aeabi_dmul+0x43c>
 8001c48:	4333      	orrs	r3, r6
 8001c4a:	031c      	lsls	r4, r3, #12
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	0015      	movs	r5, r2
 8001c50:	0b24      	lsrs	r4, r4, #12
 8001c52:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <__aeabi_dmul+0x4cc>)
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	e642      	b.n	80018de <__aeabi_dmul+0xc2>
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	0312      	lsls	r2, r2, #12
 8001c5c:	4314      	orrs	r4, r2
 8001c5e:	0324      	lsls	r4, r4, #12
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <__aeabi_dmul+0x4cc>)
 8001c62:	0b24      	lsrs	r4, r4, #12
 8001c64:	9701      	str	r7, [sp, #4]
 8001c66:	e63a      	b.n	80018de <__aeabi_dmul+0xc2>
 8001c68:	f000 fcc8 	bl	80025fc <__clzsi2>
 8001c6c:	0001      	movs	r1, r0
 8001c6e:	0002      	movs	r2, r0
 8001c70:	3115      	adds	r1, #21
 8001c72:	3220      	adds	r2, #32
 8001c74:	291c      	cmp	r1, #28
 8001c76:	dc00      	bgt.n	8001c7a <__aeabi_dmul+0x45e>
 8001c78:	e74b      	b.n	8001b12 <__aeabi_dmul+0x2f6>
 8001c7a:	0034      	movs	r4, r6
 8001c7c:	3808      	subs	r0, #8
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4084      	lsls	r4, r0
 8001c82:	e750      	b.n	8001b26 <__aeabi_dmul+0x30a>
 8001c84:	f000 fcba 	bl	80025fc <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	3215      	adds	r2, #21
 8001c8e:	3020      	adds	r0, #32
 8001c90:	2a1c      	cmp	r2, #28
 8001c92:	dc00      	bgt.n	8001c96 <__aeabi_dmul+0x47a>
 8001c94:	e71e      	b.n	8001ad4 <__aeabi_dmul+0x2b8>
 8001c96:	4656      	mov	r6, sl
 8001c98:	3b08      	subs	r3, #8
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	409e      	lsls	r6, r3
 8001c9e:	e723      	b.n	8001ae8 <__aeabi_dmul+0x2cc>
 8001ca0:	9b00      	ldr	r3, [sp, #0]
 8001ca2:	469c      	mov	ip, r3
 8001ca4:	e6e6      	b.n	8001a74 <__aeabi_dmul+0x258>
 8001ca6:	4912      	ldr	r1, [pc, #72]	; (8001cf0 <__aeabi_dmul+0x4d4>)
 8001ca8:	0022      	movs	r2, r4
 8001caa:	4461      	add	r1, ip
 8001cac:	002e      	movs	r6, r5
 8001cae:	408d      	lsls	r5, r1
 8001cb0:	408a      	lsls	r2, r1
 8001cb2:	40c6      	lsrs	r6, r0
 8001cb4:	1e69      	subs	r1, r5, #1
 8001cb6:	418d      	sbcs	r5, r1
 8001cb8:	4332      	orrs	r2, r6
 8001cba:	432a      	orrs	r2, r5
 8001cbc:	40c4      	lsrs	r4, r0
 8001cbe:	0753      	lsls	r3, r2, #29
 8001cc0:	d0b6      	beq.n	8001c30 <__aeabi_dmul+0x414>
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	4011      	ands	r1, r2
 8001cc6:	2904      	cmp	r1, #4
 8001cc8:	d1ac      	bne.n	8001c24 <__aeabi_dmul+0x408>
 8001cca:	e7b1      	b.n	8001c30 <__aeabi_dmul+0x414>
 8001ccc:	0765      	lsls	r5, r4, #29
 8001cce:	0264      	lsls	r4, r4, #9
 8001cd0:	0b24      	lsrs	r4, r4, #12
 8001cd2:	08d2      	lsrs	r2, r2, #3
 8001cd4:	4315      	orrs	r5, r2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	e601      	b.n	80018de <__aeabi_dmul+0xc2>
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	0312      	lsls	r2, r2, #12
 8001cde:	4314      	orrs	r4, r2
 8001ce0:	0324      	lsls	r4, r4, #12
 8001ce2:	4a01      	ldr	r2, [pc, #4]	; (8001ce8 <__aeabi_dmul+0x4cc>)
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	e5fa      	b.n	80018de <__aeabi_dmul+0xc2>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000043e 	.word	0x0000043e
 8001cf0:	0000041e 	.word	0x0000041e

08001cf4 <__aeabi_dsub>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	4657      	mov	r7, sl
 8001cf8:	464e      	mov	r6, r9
 8001cfa:	4645      	mov	r5, r8
 8001cfc:	46de      	mov	lr, fp
 8001cfe:	b5e0      	push	{r5, r6, r7, lr}
 8001d00:	001e      	movs	r6, r3
 8001d02:	0017      	movs	r7, r2
 8001d04:	004a      	lsls	r2, r1, #1
 8001d06:	030b      	lsls	r3, r1, #12
 8001d08:	0d52      	lsrs	r2, r2, #21
 8001d0a:	0a5b      	lsrs	r3, r3, #9
 8001d0c:	4690      	mov	r8, r2
 8001d0e:	0f42      	lsrs	r2, r0, #29
 8001d10:	431a      	orrs	r2, r3
 8001d12:	0fcd      	lsrs	r5, r1, #31
 8001d14:	4ccd      	ldr	r4, [pc, #820]	; (800204c <__aeabi_dsub+0x358>)
 8001d16:	0331      	lsls	r1, r6, #12
 8001d18:	00c3      	lsls	r3, r0, #3
 8001d1a:	4694      	mov	ip, r2
 8001d1c:	0070      	lsls	r0, r6, #1
 8001d1e:	0f7a      	lsrs	r2, r7, #29
 8001d20:	0a49      	lsrs	r1, r1, #9
 8001d22:	00ff      	lsls	r7, r7, #3
 8001d24:	469a      	mov	sl, r3
 8001d26:	46b9      	mov	r9, r7
 8001d28:	0d40      	lsrs	r0, r0, #21
 8001d2a:	0ff6      	lsrs	r6, r6, #31
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	42a0      	cmp	r0, r4
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x40>
 8001d32:	e0b1      	b.n	8001e98 <__aeabi_dsub+0x1a4>
 8001d34:	2201      	movs	r2, #1
 8001d36:	4056      	eors	r6, r2
 8001d38:	46b3      	mov	fp, r6
 8001d3a:	42b5      	cmp	r5, r6
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x4c>
 8001d3e:	e088      	b.n	8001e52 <__aeabi_dsub+0x15e>
 8001d40:	4642      	mov	r2, r8
 8001d42:	1a12      	subs	r2, r2, r0
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x56>
 8001d48:	e0ae      	b.n	8001ea8 <__aeabi_dsub+0x1b4>
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x5c>
 8001d4e:	e0c1      	b.n	8001ed4 <__aeabi_dsub+0x1e0>
 8001d50:	48be      	ldr	r0, [pc, #760]	; (800204c <__aeabi_dsub+0x358>)
 8001d52:	4580      	cmp	r8, r0
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x64>
 8001d56:	e151      	b.n	8001ffc <__aeabi_dsub+0x308>
 8001d58:	2080      	movs	r0, #128	; 0x80
 8001d5a:	0400      	lsls	r0, r0, #16
 8001d5c:	4301      	orrs	r1, r0
 8001d5e:	2a38      	cmp	r2, #56	; 0x38
 8001d60:	dd00      	ble.n	8001d64 <__aeabi_dsub+0x70>
 8001d62:	e17b      	b.n	800205c <__aeabi_dsub+0x368>
 8001d64:	2a1f      	cmp	r2, #31
 8001d66:	dd00      	ble.n	8001d6a <__aeabi_dsub+0x76>
 8001d68:	e1ee      	b.n	8002148 <__aeabi_dsub+0x454>
 8001d6a:	2020      	movs	r0, #32
 8001d6c:	003e      	movs	r6, r7
 8001d6e:	1a80      	subs	r0, r0, r2
 8001d70:	000c      	movs	r4, r1
 8001d72:	40d6      	lsrs	r6, r2
 8001d74:	40d1      	lsrs	r1, r2
 8001d76:	4087      	lsls	r7, r0
 8001d78:	4662      	mov	r2, ip
 8001d7a:	4084      	lsls	r4, r0
 8001d7c:	1a52      	subs	r2, r2, r1
 8001d7e:	1e78      	subs	r0, r7, #1
 8001d80:	4187      	sbcs	r7, r0
 8001d82:	4694      	mov	ip, r2
 8001d84:	4334      	orrs	r4, r6
 8001d86:	4327      	orrs	r7, r4
 8001d88:	1bdc      	subs	r4, r3, r7
 8001d8a:	42a3      	cmp	r3, r4
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	4662      	mov	r2, ip
 8001d90:	425b      	negs	r3, r3
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4699      	mov	r9, r3
 8001d96:	464b      	mov	r3, r9
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	d400      	bmi.n	8001d9e <__aeabi_dsub+0xaa>
 8001d9c:	e118      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 8001d9e:	464b      	mov	r3, r9
 8001da0:	0258      	lsls	r0, r3, #9
 8001da2:	0a43      	lsrs	r3, r0, #9
 8001da4:	4699      	mov	r9, r3
 8001da6:	464b      	mov	r3, r9
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0xba>
 8001dac:	e137      	b.n	800201e <__aeabi_dsub+0x32a>
 8001dae:	4648      	mov	r0, r9
 8001db0:	f000 fc24 	bl	80025fc <__clzsi2>
 8001db4:	0001      	movs	r1, r0
 8001db6:	3908      	subs	r1, #8
 8001db8:	2320      	movs	r3, #32
 8001dba:	0022      	movs	r2, r4
 8001dbc:	4648      	mov	r0, r9
 8001dbe:	1a5b      	subs	r3, r3, r1
 8001dc0:	40da      	lsrs	r2, r3
 8001dc2:	4088      	lsls	r0, r1
 8001dc4:	408c      	lsls	r4, r1
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	4310      	orrs	r0, r2
 8001dca:	4588      	cmp	r8, r1
 8001dcc:	dd00      	ble.n	8001dd0 <__aeabi_dsub+0xdc>
 8001dce:	e136      	b.n	800203e <__aeabi_dsub+0x34a>
 8001dd0:	1ac9      	subs	r1, r1, r3
 8001dd2:	1c4b      	adds	r3, r1, #1
 8001dd4:	2b1f      	cmp	r3, #31
 8001dd6:	dd00      	ble.n	8001dda <__aeabi_dsub+0xe6>
 8001dd8:	e0ea      	b.n	8001fb0 <__aeabi_dsub+0x2bc>
 8001dda:	2220      	movs	r2, #32
 8001ddc:	0026      	movs	r6, r4
 8001dde:	1ad2      	subs	r2, r2, r3
 8001de0:	0001      	movs	r1, r0
 8001de2:	4094      	lsls	r4, r2
 8001de4:	40de      	lsrs	r6, r3
 8001de6:	40d8      	lsrs	r0, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	4091      	lsls	r1, r2
 8001dec:	1e62      	subs	r2, r4, #1
 8001dee:	4194      	sbcs	r4, r2
 8001df0:	4681      	mov	r9, r0
 8001df2:	4698      	mov	r8, r3
 8001df4:	4331      	orrs	r1, r6
 8001df6:	430c      	orrs	r4, r1
 8001df8:	0763      	lsls	r3, r4, #29
 8001dfa:	d009      	beq.n	8001e10 <__aeabi_dsub+0x11c>
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	4023      	ands	r3, r4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <__aeabi_dsub+0x11c>
 8001e04:	1d23      	adds	r3, r4, #4
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	41a4      	sbcs	r4, r4
 8001e0a:	4264      	negs	r4, r4
 8001e0c:	44a1      	add	r9, r4
 8001e0e:	001c      	movs	r4, r3
 8001e10:	464b      	mov	r3, r9
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	d400      	bmi.n	8001e18 <__aeabi_dsub+0x124>
 8001e16:	e0de      	b.n	8001fd6 <__aeabi_dsub+0x2e2>
 8001e18:	4641      	mov	r1, r8
 8001e1a:	4b8c      	ldr	r3, [pc, #560]	; (800204c <__aeabi_dsub+0x358>)
 8001e1c:	3101      	adds	r1, #1
 8001e1e:	4299      	cmp	r1, r3
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x130>
 8001e22:	e0e7      	b.n	8001ff4 <__aeabi_dsub+0x300>
 8001e24:	464b      	mov	r3, r9
 8001e26:	488a      	ldr	r0, [pc, #552]	; (8002050 <__aeabi_dsub+0x35c>)
 8001e28:	08e4      	lsrs	r4, r4, #3
 8001e2a:	4003      	ands	r3, r0
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	0549      	lsls	r1, r1, #21
 8001e30:	075b      	lsls	r3, r3, #29
 8001e32:	0240      	lsls	r0, r0, #9
 8001e34:	4323      	orrs	r3, r4
 8001e36:	0d4a      	lsrs	r2, r1, #21
 8001e38:	0b04      	lsrs	r4, r0, #12
 8001e3a:	0512      	lsls	r2, r2, #20
 8001e3c:	07ed      	lsls	r5, r5, #31
 8001e3e:	4322      	orrs	r2, r4
 8001e40:	432a      	orrs	r2, r5
 8001e42:	0018      	movs	r0, r3
 8001e44:	0011      	movs	r1, r2
 8001e46:	bcf0      	pop	{r4, r5, r6, r7}
 8001e48:	46bb      	mov	fp, r7
 8001e4a:	46b2      	mov	sl, r6
 8001e4c:	46a9      	mov	r9, r5
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e52:	4642      	mov	r2, r8
 8001e54:	1a12      	subs	r2, r2, r0
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	dd52      	ble.n	8001f00 <__aeabi_dsub+0x20c>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x16c>
 8001e5e:	e09c      	b.n	8001f9a <__aeabi_dsub+0x2a6>
 8001e60:	45a0      	cmp	r8, r4
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x172>
 8001e64:	e0ca      	b.n	8001ffc <__aeabi_dsub+0x308>
 8001e66:	2080      	movs	r0, #128	; 0x80
 8001e68:	0400      	lsls	r0, r0, #16
 8001e6a:	4301      	orrs	r1, r0
 8001e6c:	2a38      	cmp	r2, #56	; 0x38
 8001e6e:	dd00      	ble.n	8001e72 <__aeabi_dsub+0x17e>
 8001e70:	e149      	b.n	8002106 <__aeabi_dsub+0x412>
 8001e72:	2a1f      	cmp	r2, #31
 8001e74:	dc00      	bgt.n	8001e78 <__aeabi_dsub+0x184>
 8001e76:	e197      	b.n	80021a8 <__aeabi_dsub+0x4b4>
 8001e78:	0010      	movs	r0, r2
 8001e7a:	000e      	movs	r6, r1
 8001e7c:	3820      	subs	r0, #32
 8001e7e:	40c6      	lsrs	r6, r0
 8001e80:	2a20      	cmp	r2, #32
 8001e82:	d004      	beq.n	8001e8e <__aeabi_dsub+0x19a>
 8001e84:	2040      	movs	r0, #64	; 0x40
 8001e86:	1a82      	subs	r2, r0, r2
 8001e88:	4091      	lsls	r1, r2
 8001e8a:	430f      	orrs	r7, r1
 8001e8c:	46b9      	mov	r9, r7
 8001e8e:	464c      	mov	r4, r9
 8001e90:	1e62      	subs	r2, r4, #1
 8001e92:	4194      	sbcs	r4, r2
 8001e94:	4334      	orrs	r4, r6
 8001e96:	e13a      	b.n	800210e <__aeabi_dsub+0x41a>
 8001e98:	000a      	movs	r2, r1
 8001e9a:	433a      	orrs	r2, r7
 8001e9c:	d028      	beq.n	8001ef0 <__aeabi_dsub+0x1fc>
 8001e9e:	46b3      	mov	fp, r6
 8001ea0:	42b5      	cmp	r5, r6
 8001ea2:	d02b      	beq.n	8001efc <__aeabi_dsub+0x208>
 8001ea4:	4a6b      	ldr	r2, [pc, #428]	; (8002054 <__aeabi_dsub+0x360>)
 8001ea6:	4442      	add	r2, r8
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	d05d      	beq.n	8001f68 <__aeabi_dsub+0x274>
 8001eac:	4642      	mov	r2, r8
 8001eae:	4644      	mov	r4, r8
 8001eb0:	1a82      	subs	r2, r0, r2
 8001eb2:	2c00      	cmp	r4, #0
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x1c4>
 8001eb6:	e0f5      	b.n	80020a4 <__aeabi_dsub+0x3b0>
 8001eb8:	4665      	mov	r5, ip
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x1cc>
 8001ebe:	e19c      	b.n	80021fa <__aeabi_dsub+0x506>
 8001ec0:	1e55      	subs	r5, r2, #1
 8001ec2:	2a01      	cmp	r2, #1
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x1d4>
 8001ec6:	e1fb      	b.n	80022c0 <__aeabi_dsub+0x5cc>
 8001ec8:	4c60      	ldr	r4, [pc, #384]	; (800204c <__aeabi_dsub+0x358>)
 8001eca:	42a2      	cmp	r2, r4
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x1dc>
 8001ece:	e1bd      	b.n	800224c <__aeabi_dsub+0x558>
 8001ed0:	002a      	movs	r2, r5
 8001ed2:	e0f0      	b.n	80020b6 <__aeabi_dsub+0x3c2>
 8001ed4:	0008      	movs	r0, r1
 8001ed6:	4338      	orrs	r0, r7
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x1e8>
 8001eda:	e0c3      	b.n	8002064 <__aeabi_dsub+0x370>
 8001edc:	1e50      	subs	r0, r2, #1
 8001ede:	2a01      	cmp	r2, #1
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x1f0>
 8001ee2:	e1a8      	b.n	8002236 <__aeabi_dsub+0x542>
 8001ee4:	4c59      	ldr	r4, [pc, #356]	; (800204c <__aeabi_dsub+0x358>)
 8001ee6:	42a2      	cmp	r2, r4
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x1f8>
 8001eea:	e087      	b.n	8001ffc <__aeabi_dsub+0x308>
 8001eec:	0002      	movs	r2, r0
 8001eee:	e736      	b.n	8001d5e <__aeabi_dsub+0x6a>
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4056      	eors	r6, r2
 8001ef4:	46b3      	mov	fp, r6
 8001ef6:	42b5      	cmp	r5, r6
 8001ef8:	d000      	beq.n	8001efc <__aeabi_dsub+0x208>
 8001efa:	e721      	b.n	8001d40 <__aeabi_dsub+0x4c>
 8001efc:	4a55      	ldr	r2, [pc, #340]	; (8002054 <__aeabi_dsub+0x360>)
 8001efe:	4442      	add	r2, r8
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x212>
 8001f04:	e0b5      	b.n	8002072 <__aeabi_dsub+0x37e>
 8001f06:	4642      	mov	r2, r8
 8001f08:	4644      	mov	r4, r8
 8001f0a:	1a82      	subs	r2, r0, r2
 8001f0c:	2c00      	cmp	r4, #0
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dsub+0x21e>
 8001f10:	e138      	b.n	8002184 <__aeabi_dsub+0x490>
 8001f12:	4e4e      	ldr	r6, [pc, #312]	; (800204c <__aeabi_dsub+0x358>)
 8001f14:	42b0      	cmp	r0, r6
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x226>
 8001f18:	e1de      	b.n	80022d8 <__aeabi_dsub+0x5e4>
 8001f1a:	2680      	movs	r6, #128	; 0x80
 8001f1c:	4664      	mov	r4, ip
 8001f1e:	0436      	lsls	r6, r6, #16
 8001f20:	4334      	orrs	r4, r6
 8001f22:	46a4      	mov	ip, r4
 8001f24:	2a38      	cmp	r2, #56	; 0x38
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x236>
 8001f28:	e196      	b.n	8002258 <__aeabi_dsub+0x564>
 8001f2a:	2a1f      	cmp	r2, #31
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x23c>
 8001f2e:	e224      	b.n	800237a <__aeabi_dsub+0x686>
 8001f30:	2620      	movs	r6, #32
 8001f32:	1ab4      	subs	r4, r6, r2
 8001f34:	46a2      	mov	sl, r4
 8001f36:	4664      	mov	r4, ip
 8001f38:	4656      	mov	r6, sl
 8001f3a:	40b4      	lsls	r4, r6
 8001f3c:	46a1      	mov	r9, r4
 8001f3e:	001c      	movs	r4, r3
 8001f40:	464e      	mov	r6, r9
 8001f42:	40d4      	lsrs	r4, r2
 8001f44:	4326      	orrs	r6, r4
 8001f46:	0034      	movs	r4, r6
 8001f48:	4656      	mov	r6, sl
 8001f4a:	40b3      	lsls	r3, r6
 8001f4c:	1e5e      	subs	r6, r3, #1
 8001f4e:	41b3      	sbcs	r3, r6
 8001f50:	431c      	orrs	r4, r3
 8001f52:	4663      	mov	r3, ip
 8001f54:	40d3      	lsrs	r3, r2
 8001f56:	18c9      	adds	r1, r1, r3
 8001f58:	19e4      	adds	r4, r4, r7
 8001f5a:	42bc      	cmp	r4, r7
 8001f5c:	41bf      	sbcs	r7, r7
 8001f5e:	427f      	negs	r7, r7
 8001f60:	46b9      	mov	r9, r7
 8001f62:	4680      	mov	r8, r0
 8001f64:	4489      	add	r9, r1
 8001f66:	e0d8      	b.n	800211a <__aeabi_dsub+0x426>
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4c3b      	ldr	r4, [pc, #236]	; (8002058 <__aeabi_dsub+0x364>)
 8001f6c:	3001      	adds	r0, #1
 8001f6e:	4220      	tst	r0, r4
 8001f70:	d000      	beq.n	8001f74 <__aeabi_dsub+0x280>
 8001f72:	e0b4      	b.n	80020de <__aeabi_dsub+0x3ea>
 8001f74:	4640      	mov	r0, r8
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dsub+0x288>
 8001f7a:	e144      	b.n	8002206 <__aeabi_dsub+0x512>
 8001f7c:	4660      	mov	r0, ip
 8001f7e:	4318      	orrs	r0, r3
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x290>
 8001f82:	e190      	b.n	80022a6 <__aeabi_dsub+0x5b2>
 8001f84:	0008      	movs	r0, r1
 8001f86:	4338      	orrs	r0, r7
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x298>
 8001f8a:	e1aa      	b.n	80022e2 <__aeabi_dsub+0x5ee>
 8001f8c:	4661      	mov	r1, ip
 8001f8e:	08db      	lsrs	r3, r3, #3
 8001f90:	0749      	lsls	r1, r1, #29
 8001f92:	430b      	orrs	r3, r1
 8001f94:	4661      	mov	r1, ip
 8001f96:	08cc      	lsrs	r4, r1, #3
 8001f98:	e027      	b.n	8001fea <__aeabi_dsub+0x2f6>
 8001f9a:	0008      	movs	r0, r1
 8001f9c:	4338      	orrs	r0, r7
 8001f9e:	d061      	beq.n	8002064 <__aeabi_dsub+0x370>
 8001fa0:	1e50      	subs	r0, r2, #1
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x2b4>
 8001fa6:	e139      	b.n	800221c <__aeabi_dsub+0x528>
 8001fa8:	42a2      	cmp	r2, r4
 8001faa:	d027      	beq.n	8001ffc <__aeabi_dsub+0x308>
 8001fac:	0002      	movs	r2, r0
 8001fae:	e75d      	b.n	8001e6c <__aeabi_dsub+0x178>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	391f      	subs	r1, #31
 8001fb4:	40ca      	lsrs	r2, r1
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d003      	beq.n	8001fc4 <__aeabi_dsub+0x2d0>
 8001fbc:	2240      	movs	r2, #64	; 0x40
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	4098      	lsls	r0, r3
 8001fc2:	4304      	orrs	r4, r0
 8001fc4:	1e63      	subs	r3, r4, #1
 8001fc6:	419c      	sbcs	r4, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	4699      	mov	r9, r3
 8001fcc:	4698      	mov	r8, r3
 8001fce:	430c      	orrs	r4, r1
 8001fd0:	0763      	lsls	r3, r4, #29
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_dsub+0x2e2>
 8001fd4:	e712      	b.n	8001dfc <__aeabi_dsub+0x108>
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	464a      	mov	r2, r9
 8001fda:	08e4      	lsrs	r4, r4, #3
 8001fdc:	075b      	lsls	r3, r3, #29
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	08d4      	lsrs	r4, r2, #3
 8001fe2:	4642      	mov	r2, r8
 8001fe4:	4919      	ldr	r1, [pc, #100]	; (800204c <__aeabi_dsub+0x358>)
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d00e      	beq.n	8002008 <__aeabi_dsub+0x314>
 8001fea:	0324      	lsls	r4, r4, #12
 8001fec:	0552      	lsls	r2, r2, #21
 8001fee:	0b24      	lsrs	r4, r4, #12
 8001ff0:	0d52      	lsrs	r2, r2, #21
 8001ff2:	e722      	b.n	8001e3a <__aeabi_dsub+0x146>
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	2400      	movs	r4, #0
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e71e      	b.n	8001e3a <__aeabi_dsub+0x146>
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	4662      	mov	r2, ip
 8002000:	0752      	lsls	r2, r2, #29
 8002002:	4313      	orrs	r3, r2
 8002004:	4662      	mov	r2, ip
 8002006:	08d4      	lsrs	r4, r2, #3
 8002008:	001a      	movs	r2, r3
 800200a:	4322      	orrs	r2, r4
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x31c>
 800200e:	e1fc      	b.n	800240a <__aeabi_dsub+0x716>
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	0312      	lsls	r2, r2, #12
 8002014:	4314      	orrs	r4, r2
 8002016:	0324      	lsls	r4, r4, #12
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <__aeabi_dsub+0x358>)
 800201a:	0b24      	lsrs	r4, r4, #12
 800201c:	e70d      	b.n	8001e3a <__aeabi_dsub+0x146>
 800201e:	0020      	movs	r0, r4
 8002020:	f000 faec 	bl	80025fc <__clzsi2>
 8002024:	0001      	movs	r1, r0
 8002026:	3118      	adds	r1, #24
 8002028:	291f      	cmp	r1, #31
 800202a:	dc00      	bgt.n	800202e <__aeabi_dsub+0x33a>
 800202c:	e6c4      	b.n	8001db8 <__aeabi_dsub+0xc4>
 800202e:	3808      	subs	r0, #8
 8002030:	4084      	lsls	r4, r0
 8002032:	4643      	mov	r3, r8
 8002034:	0020      	movs	r0, r4
 8002036:	2400      	movs	r4, #0
 8002038:	4588      	cmp	r8, r1
 800203a:	dc00      	bgt.n	800203e <__aeabi_dsub+0x34a>
 800203c:	e6c8      	b.n	8001dd0 <__aeabi_dsub+0xdc>
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__aeabi_dsub+0x35c>)
 8002040:	1a5b      	subs	r3, r3, r1
 8002042:	4010      	ands	r0, r2
 8002044:	4698      	mov	r8, r3
 8002046:	4681      	mov	r9, r0
 8002048:	e6d6      	b.n	8001df8 <__aeabi_dsub+0x104>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	000007ff 	.word	0x000007ff
 8002050:	ff7fffff 	.word	0xff7fffff
 8002054:	fffff801 	.word	0xfffff801
 8002058:	000007fe 	.word	0x000007fe
 800205c:	430f      	orrs	r7, r1
 800205e:	1e7a      	subs	r2, r7, #1
 8002060:	4197      	sbcs	r7, r2
 8002062:	e691      	b.n	8001d88 <__aeabi_dsub+0x94>
 8002064:	4661      	mov	r1, ip
 8002066:	08db      	lsrs	r3, r3, #3
 8002068:	0749      	lsls	r1, r1, #29
 800206a:	430b      	orrs	r3, r1
 800206c:	4661      	mov	r1, ip
 800206e:	08cc      	lsrs	r4, r1, #3
 8002070:	e7b8      	b.n	8001fe4 <__aeabi_dsub+0x2f0>
 8002072:	4640      	mov	r0, r8
 8002074:	4cd3      	ldr	r4, [pc, #844]	; (80023c4 <__aeabi_dsub+0x6d0>)
 8002076:	3001      	adds	r0, #1
 8002078:	4220      	tst	r0, r4
 800207a:	d000      	beq.n	800207e <__aeabi_dsub+0x38a>
 800207c:	e0a2      	b.n	80021c4 <__aeabi_dsub+0x4d0>
 800207e:	4640      	mov	r0, r8
 8002080:	2800      	cmp	r0, #0
 8002082:	d000      	beq.n	8002086 <__aeabi_dsub+0x392>
 8002084:	e101      	b.n	800228a <__aeabi_dsub+0x596>
 8002086:	4660      	mov	r0, ip
 8002088:	4318      	orrs	r0, r3
 800208a:	d100      	bne.n	800208e <__aeabi_dsub+0x39a>
 800208c:	e15e      	b.n	800234c <__aeabi_dsub+0x658>
 800208e:	0008      	movs	r0, r1
 8002090:	4338      	orrs	r0, r7
 8002092:	d000      	beq.n	8002096 <__aeabi_dsub+0x3a2>
 8002094:	e15f      	b.n	8002356 <__aeabi_dsub+0x662>
 8002096:	4661      	mov	r1, ip
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	0749      	lsls	r1, r1, #29
 800209c:	430b      	orrs	r3, r1
 800209e:	4661      	mov	r1, ip
 80020a0:	08cc      	lsrs	r4, r1, #3
 80020a2:	e7a2      	b.n	8001fea <__aeabi_dsub+0x2f6>
 80020a4:	4dc8      	ldr	r5, [pc, #800]	; (80023c8 <__aeabi_dsub+0x6d4>)
 80020a6:	42a8      	cmp	r0, r5
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x3b8>
 80020aa:	e0cf      	b.n	800224c <__aeabi_dsub+0x558>
 80020ac:	2580      	movs	r5, #128	; 0x80
 80020ae:	4664      	mov	r4, ip
 80020b0:	042d      	lsls	r5, r5, #16
 80020b2:	432c      	orrs	r4, r5
 80020b4:	46a4      	mov	ip, r4
 80020b6:	2a38      	cmp	r2, #56	; 0x38
 80020b8:	dc56      	bgt.n	8002168 <__aeabi_dsub+0x474>
 80020ba:	2a1f      	cmp	r2, #31
 80020bc:	dd00      	ble.n	80020c0 <__aeabi_dsub+0x3cc>
 80020be:	e0d1      	b.n	8002264 <__aeabi_dsub+0x570>
 80020c0:	2520      	movs	r5, #32
 80020c2:	001e      	movs	r6, r3
 80020c4:	1aad      	subs	r5, r5, r2
 80020c6:	4664      	mov	r4, ip
 80020c8:	40ab      	lsls	r3, r5
 80020ca:	40ac      	lsls	r4, r5
 80020cc:	40d6      	lsrs	r6, r2
 80020ce:	1e5d      	subs	r5, r3, #1
 80020d0:	41ab      	sbcs	r3, r5
 80020d2:	4334      	orrs	r4, r6
 80020d4:	4323      	orrs	r3, r4
 80020d6:	4664      	mov	r4, ip
 80020d8:	40d4      	lsrs	r4, r2
 80020da:	1b09      	subs	r1, r1, r4
 80020dc:	e049      	b.n	8002172 <__aeabi_dsub+0x47e>
 80020de:	4660      	mov	r0, ip
 80020e0:	1bdc      	subs	r4, r3, r7
 80020e2:	1a46      	subs	r6, r0, r1
 80020e4:	42a3      	cmp	r3, r4
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	4240      	negs	r0, r0
 80020ea:	4681      	mov	r9, r0
 80020ec:	0030      	movs	r0, r6
 80020ee:	464e      	mov	r6, r9
 80020f0:	1b80      	subs	r0, r0, r6
 80020f2:	4681      	mov	r9, r0
 80020f4:	0200      	lsls	r0, r0, #8
 80020f6:	d476      	bmi.n	80021e6 <__aeabi_dsub+0x4f2>
 80020f8:	464b      	mov	r3, r9
 80020fa:	4323      	orrs	r3, r4
 80020fc:	d000      	beq.n	8002100 <__aeabi_dsub+0x40c>
 80020fe:	e652      	b.n	8001da6 <__aeabi_dsub+0xb2>
 8002100:	2400      	movs	r4, #0
 8002102:	2500      	movs	r5, #0
 8002104:	e771      	b.n	8001fea <__aeabi_dsub+0x2f6>
 8002106:	4339      	orrs	r1, r7
 8002108:	000c      	movs	r4, r1
 800210a:	1e62      	subs	r2, r4, #1
 800210c:	4194      	sbcs	r4, r2
 800210e:	18e4      	adds	r4, r4, r3
 8002110:	429c      	cmp	r4, r3
 8002112:	419b      	sbcs	r3, r3
 8002114:	425b      	negs	r3, r3
 8002116:	4463      	add	r3, ip
 8002118:	4699      	mov	r9, r3
 800211a:	464b      	mov	r3, r9
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	d400      	bmi.n	8002122 <__aeabi_dsub+0x42e>
 8002120:	e756      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 8002122:	2301      	movs	r3, #1
 8002124:	469c      	mov	ip, r3
 8002126:	4ba8      	ldr	r3, [pc, #672]	; (80023c8 <__aeabi_dsub+0x6d4>)
 8002128:	44e0      	add	r8, ip
 800212a:	4598      	cmp	r8, r3
 800212c:	d038      	beq.n	80021a0 <__aeabi_dsub+0x4ac>
 800212e:	464b      	mov	r3, r9
 8002130:	48a6      	ldr	r0, [pc, #664]	; (80023cc <__aeabi_dsub+0x6d8>)
 8002132:	2201      	movs	r2, #1
 8002134:	4003      	ands	r3, r0
 8002136:	0018      	movs	r0, r3
 8002138:	0863      	lsrs	r3, r4, #1
 800213a:	4014      	ands	r4, r2
 800213c:	431c      	orrs	r4, r3
 800213e:	07c3      	lsls	r3, r0, #31
 8002140:	431c      	orrs	r4, r3
 8002142:	0843      	lsrs	r3, r0, #1
 8002144:	4699      	mov	r9, r3
 8002146:	e657      	b.n	8001df8 <__aeabi_dsub+0x104>
 8002148:	0010      	movs	r0, r2
 800214a:	000e      	movs	r6, r1
 800214c:	3820      	subs	r0, #32
 800214e:	40c6      	lsrs	r6, r0
 8002150:	2a20      	cmp	r2, #32
 8002152:	d004      	beq.n	800215e <__aeabi_dsub+0x46a>
 8002154:	2040      	movs	r0, #64	; 0x40
 8002156:	1a82      	subs	r2, r0, r2
 8002158:	4091      	lsls	r1, r2
 800215a:	430f      	orrs	r7, r1
 800215c:	46b9      	mov	r9, r7
 800215e:	464f      	mov	r7, r9
 8002160:	1e7a      	subs	r2, r7, #1
 8002162:	4197      	sbcs	r7, r2
 8002164:	4337      	orrs	r7, r6
 8002166:	e60f      	b.n	8001d88 <__aeabi_dsub+0x94>
 8002168:	4662      	mov	r2, ip
 800216a:	431a      	orrs	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	1e5a      	subs	r2, r3, #1
 8002170:	4193      	sbcs	r3, r2
 8002172:	1afc      	subs	r4, r7, r3
 8002174:	42a7      	cmp	r7, r4
 8002176:	41bf      	sbcs	r7, r7
 8002178:	427f      	negs	r7, r7
 800217a:	1bcb      	subs	r3, r1, r7
 800217c:	4699      	mov	r9, r3
 800217e:	465d      	mov	r5, fp
 8002180:	4680      	mov	r8, r0
 8002182:	e608      	b.n	8001d96 <__aeabi_dsub+0xa2>
 8002184:	4666      	mov	r6, ip
 8002186:	431e      	orrs	r6, r3
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x498>
 800218a:	e0be      	b.n	800230a <__aeabi_dsub+0x616>
 800218c:	1e56      	subs	r6, r2, #1
 800218e:	2a01      	cmp	r2, #1
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x4a0>
 8002192:	e109      	b.n	80023a8 <__aeabi_dsub+0x6b4>
 8002194:	4c8c      	ldr	r4, [pc, #560]	; (80023c8 <__aeabi_dsub+0x6d4>)
 8002196:	42a2      	cmp	r2, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x4a8>
 800219a:	e119      	b.n	80023d0 <__aeabi_dsub+0x6dc>
 800219c:	0032      	movs	r2, r6
 800219e:	e6c1      	b.n	8001f24 <__aeabi_dsub+0x230>
 80021a0:	4642      	mov	r2, r8
 80021a2:	2400      	movs	r4, #0
 80021a4:	2300      	movs	r3, #0
 80021a6:	e648      	b.n	8001e3a <__aeabi_dsub+0x146>
 80021a8:	2020      	movs	r0, #32
 80021aa:	000c      	movs	r4, r1
 80021ac:	1a80      	subs	r0, r0, r2
 80021ae:	003e      	movs	r6, r7
 80021b0:	4087      	lsls	r7, r0
 80021b2:	4084      	lsls	r4, r0
 80021b4:	40d6      	lsrs	r6, r2
 80021b6:	1e78      	subs	r0, r7, #1
 80021b8:	4187      	sbcs	r7, r0
 80021ba:	40d1      	lsrs	r1, r2
 80021bc:	4334      	orrs	r4, r6
 80021be:	433c      	orrs	r4, r7
 80021c0:	448c      	add	ip, r1
 80021c2:	e7a4      	b.n	800210e <__aeabi_dsub+0x41a>
 80021c4:	4a80      	ldr	r2, [pc, #512]	; (80023c8 <__aeabi_dsub+0x6d4>)
 80021c6:	4290      	cmp	r0, r2
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x4d8>
 80021ca:	e0e9      	b.n	80023a0 <__aeabi_dsub+0x6ac>
 80021cc:	19df      	adds	r7, r3, r7
 80021ce:	429f      	cmp	r7, r3
 80021d0:	419b      	sbcs	r3, r3
 80021d2:	4461      	add	r1, ip
 80021d4:	425b      	negs	r3, r3
 80021d6:	18c9      	adds	r1, r1, r3
 80021d8:	07cc      	lsls	r4, r1, #31
 80021da:	087f      	lsrs	r7, r7, #1
 80021dc:	084b      	lsrs	r3, r1, #1
 80021de:	4699      	mov	r9, r3
 80021e0:	4680      	mov	r8, r0
 80021e2:	433c      	orrs	r4, r7
 80021e4:	e6f4      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 80021e6:	1afc      	subs	r4, r7, r3
 80021e8:	42a7      	cmp	r7, r4
 80021ea:	41bf      	sbcs	r7, r7
 80021ec:	4663      	mov	r3, ip
 80021ee:	427f      	negs	r7, r7
 80021f0:	1ac9      	subs	r1, r1, r3
 80021f2:	1bcb      	subs	r3, r1, r7
 80021f4:	4699      	mov	r9, r3
 80021f6:	465d      	mov	r5, fp
 80021f8:	e5d5      	b.n	8001da6 <__aeabi_dsub+0xb2>
 80021fa:	08ff      	lsrs	r7, r7, #3
 80021fc:	074b      	lsls	r3, r1, #29
 80021fe:	465d      	mov	r5, fp
 8002200:	433b      	orrs	r3, r7
 8002202:	08cc      	lsrs	r4, r1, #3
 8002204:	e6ee      	b.n	8001fe4 <__aeabi_dsub+0x2f0>
 8002206:	4662      	mov	r2, ip
 8002208:	431a      	orrs	r2, r3
 800220a:	d000      	beq.n	800220e <__aeabi_dsub+0x51a>
 800220c:	e082      	b.n	8002314 <__aeabi_dsub+0x620>
 800220e:	000b      	movs	r3, r1
 8002210:	433b      	orrs	r3, r7
 8002212:	d11b      	bne.n	800224c <__aeabi_dsub+0x558>
 8002214:	2480      	movs	r4, #128	; 0x80
 8002216:	2500      	movs	r5, #0
 8002218:	0324      	lsls	r4, r4, #12
 800221a:	e6f9      	b.n	8002010 <__aeabi_dsub+0x31c>
 800221c:	19dc      	adds	r4, r3, r7
 800221e:	429c      	cmp	r4, r3
 8002220:	419b      	sbcs	r3, r3
 8002222:	4461      	add	r1, ip
 8002224:	4689      	mov	r9, r1
 8002226:	425b      	negs	r3, r3
 8002228:	4499      	add	r9, r3
 800222a:	464b      	mov	r3, r9
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	d444      	bmi.n	80022ba <__aeabi_dsub+0x5c6>
 8002230:	2301      	movs	r3, #1
 8002232:	4698      	mov	r8, r3
 8002234:	e6cc      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 8002236:	1bdc      	subs	r4, r3, r7
 8002238:	4662      	mov	r2, ip
 800223a:	42a3      	cmp	r3, r4
 800223c:	419b      	sbcs	r3, r3
 800223e:	1a51      	subs	r1, r2, r1
 8002240:	425b      	negs	r3, r3
 8002242:	1acb      	subs	r3, r1, r3
 8002244:	4699      	mov	r9, r3
 8002246:	2301      	movs	r3, #1
 8002248:	4698      	mov	r8, r3
 800224a:	e5a4      	b.n	8001d96 <__aeabi_dsub+0xa2>
 800224c:	08ff      	lsrs	r7, r7, #3
 800224e:	074b      	lsls	r3, r1, #29
 8002250:	465d      	mov	r5, fp
 8002252:	433b      	orrs	r3, r7
 8002254:	08cc      	lsrs	r4, r1, #3
 8002256:	e6d7      	b.n	8002008 <__aeabi_dsub+0x314>
 8002258:	4662      	mov	r2, ip
 800225a:	431a      	orrs	r2, r3
 800225c:	0014      	movs	r4, r2
 800225e:	1e63      	subs	r3, r4, #1
 8002260:	419c      	sbcs	r4, r3
 8002262:	e679      	b.n	8001f58 <__aeabi_dsub+0x264>
 8002264:	0015      	movs	r5, r2
 8002266:	4664      	mov	r4, ip
 8002268:	3d20      	subs	r5, #32
 800226a:	40ec      	lsrs	r4, r5
 800226c:	46a0      	mov	r8, r4
 800226e:	2a20      	cmp	r2, #32
 8002270:	d005      	beq.n	800227e <__aeabi_dsub+0x58a>
 8002272:	2540      	movs	r5, #64	; 0x40
 8002274:	4664      	mov	r4, ip
 8002276:	1aaa      	subs	r2, r5, r2
 8002278:	4094      	lsls	r4, r2
 800227a:	4323      	orrs	r3, r4
 800227c:	469a      	mov	sl, r3
 800227e:	4654      	mov	r4, sl
 8002280:	1e63      	subs	r3, r4, #1
 8002282:	419c      	sbcs	r4, r3
 8002284:	4643      	mov	r3, r8
 8002286:	4323      	orrs	r3, r4
 8002288:	e773      	b.n	8002172 <__aeabi_dsub+0x47e>
 800228a:	4662      	mov	r2, ip
 800228c:	431a      	orrs	r2, r3
 800228e:	d023      	beq.n	80022d8 <__aeabi_dsub+0x5e4>
 8002290:	000a      	movs	r2, r1
 8002292:	433a      	orrs	r2, r7
 8002294:	d000      	beq.n	8002298 <__aeabi_dsub+0x5a4>
 8002296:	e0a0      	b.n	80023da <__aeabi_dsub+0x6e6>
 8002298:	4662      	mov	r2, ip
 800229a:	08db      	lsrs	r3, r3, #3
 800229c:	0752      	lsls	r2, r2, #29
 800229e:	4313      	orrs	r3, r2
 80022a0:	4662      	mov	r2, ip
 80022a2:	08d4      	lsrs	r4, r2, #3
 80022a4:	e6b0      	b.n	8002008 <__aeabi_dsub+0x314>
 80022a6:	000b      	movs	r3, r1
 80022a8:	433b      	orrs	r3, r7
 80022aa:	d100      	bne.n	80022ae <__aeabi_dsub+0x5ba>
 80022ac:	e728      	b.n	8002100 <__aeabi_dsub+0x40c>
 80022ae:	08ff      	lsrs	r7, r7, #3
 80022b0:	074b      	lsls	r3, r1, #29
 80022b2:	465d      	mov	r5, fp
 80022b4:	433b      	orrs	r3, r7
 80022b6:	08cc      	lsrs	r4, r1, #3
 80022b8:	e697      	b.n	8001fea <__aeabi_dsub+0x2f6>
 80022ba:	2302      	movs	r3, #2
 80022bc:	4698      	mov	r8, r3
 80022be:	e736      	b.n	800212e <__aeabi_dsub+0x43a>
 80022c0:	1afc      	subs	r4, r7, r3
 80022c2:	42a7      	cmp	r7, r4
 80022c4:	41bf      	sbcs	r7, r7
 80022c6:	4663      	mov	r3, ip
 80022c8:	427f      	negs	r7, r7
 80022ca:	1ac9      	subs	r1, r1, r3
 80022cc:	1bcb      	subs	r3, r1, r7
 80022ce:	4699      	mov	r9, r3
 80022d0:	2301      	movs	r3, #1
 80022d2:	465d      	mov	r5, fp
 80022d4:	4698      	mov	r8, r3
 80022d6:	e55e      	b.n	8001d96 <__aeabi_dsub+0xa2>
 80022d8:	074b      	lsls	r3, r1, #29
 80022da:	08ff      	lsrs	r7, r7, #3
 80022dc:	433b      	orrs	r3, r7
 80022de:	08cc      	lsrs	r4, r1, #3
 80022e0:	e692      	b.n	8002008 <__aeabi_dsub+0x314>
 80022e2:	1bdc      	subs	r4, r3, r7
 80022e4:	4660      	mov	r0, ip
 80022e6:	42a3      	cmp	r3, r4
 80022e8:	41b6      	sbcs	r6, r6
 80022ea:	1a40      	subs	r0, r0, r1
 80022ec:	4276      	negs	r6, r6
 80022ee:	1b80      	subs	r0, r0, r6
 80022f0:	4681      	mov	r9, r0
 80022f2:	0200      	lsls	r0, r0, #8
 80022f4:	d560      	bpl.n	80023b8 <__aeabi_dsub+0x6c4>
 80022f6:	1afc      	subs	r4, r7, r3
 80022f8:	42a7      	cmp	r7, r4
 80022fa:	41bf      	sbcs	r7, r7
 80022fc:	4663      	mov	r3, ip
 80022fe:	427f      	negs	r7, r7
 8002300:	1ac9      	subs	r1, r1, r3
 8002302:	1bcb      	subs	r3, r1, r7
 8002304:	4699      	mov	r9, r3
 8002306:	465d      	mov	r5, fp
 8002308:	e576      	b.n	8001df8 <__aeabi_dsub+0x104>
 800230a:	08ff      	lsrs	r7, r7, #3
 800230c:	074b      	lsls	r3, r1, #29
 800230e:	433b      	orrs	r3, r7
 8002310:	08cc      	lsrs	r4, r1, #3
 8002312:	e667      	b.n	8001fe4 <__aeabi_dsub+0x2f0>
 8002314:	000a      	movs	r2, r1
 8002316:	08db      	lsrs	r3, r3, #3
 8002318:	433a      	orrs	r2, r7
 800231a:	d100      	bne.n	800231e <__aeabi_dsub+0x62a>
 800231c:	e66f      	b.n	8001ffe <__aeabi_dsub+0x30a>
 800231e:	4662      	mov	r2, ip
 8002320:	0752      	lsls	r2, r2, #29
 8002322:	4313      	orrs	r3, r2
 8002324:	4662      	mov	r2, ip
 8002326:	08d4      	lsrs	r4, r2, #3
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	0312      	lsls	r2, r2, #12
 800232c:	4214      	tst	r4, r2
 800232e:	d007      	beq.n	8002340 <__aeabi_dsub+0x64c>
 8002330:	08c8      	lsrs	r0, r1, #3
 8002332:	4210      	tst	r0, r2
 8002334:	d104      	bne.n	8002340 <__aeabi_dsub+0x64c>
 8002336:	465d      	mov	r5, fp
 8002338:	0004      	movs	r4, r0
 800233a:	08fb      	lsrs	r3, r7, #3
 800233c:	0749      	lsls	r1, r1, #29
 800233e:	430b      	orrs	r3, r1
 8002340:	0f5a      	lsrs	r2, r3, #29
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	08db      	lsrs	r3, r3, #3
 8002346:	0752      	lsls	r2, r2, #29
 8002348:	4313      	orrs	r3, r2
 800234a:	e65d      	b.n	8002008 <__aeabi_dsub+0x314>
 800234c:	074b      	lsls	r3, r1, #29
 800234e:	08ff      	lsrs	r7, r7, #3
 8002350:	433b      	orrs	r3, r7
 8002352:	08cc      	lsrs	r4, r1, #3
 8002354:	e649      	b.n	8001fea <__aeabi_dsub+0x2f6>
 8002356:	19dc      	adds	r4, r3, r7
 8002358:	429c      	cmp	r4, r3
 800235a:	419b      	sbcs	r3, r3
 800235c:	4461      	add	r1, ip
 800235e:	4689      	mov	r9, r1
 8002360:	425b      	negs	r3, r3
 8002362:	4499      	add	r9, r3
 8002364:	464b      	mov	r3, r9
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	d400      	bmi.n	800236c <__aeabi_dsub+0x678>
 800236a:	e631      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 800236c:	464a      	mov	r2, r9
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <__aeabi_dsub+0x6d8>)
 8002370:	401a      	ands	r2, r3
 8002372:	2301      	movs	r3, #1
 8002374:	4691      	mov	r9, r2
 8002376:	4698      	mov	r8, r3
 8002378:	e62a      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 800237a:	0016      	movs	r6, r2
 800237c:	4664      	mov	r4, ip
 800237e:	3e20      	subs	r6, #32
 8002380:	40f4      	lsrs	r4, r6
 8002382:	46a0      	mov	r8, r4
 8002384:	2a20      	cmp	r2, #32
 8002386:	d005      	beq.n	8002394 <__aeabi_dsub+0x6a0>
 8002388:	2640      	movs	r6, #64	; 0x40
 800238a:	4664      	mov	r4, ip
 800238c:	1ab2      	subs	r2, r6, r2
 800238e:	4094      	lsls	r4, r2
 8002390:	4323      	orrs	r3, r4
 8002392:	469a      	mov	sl, r3
 8002394:	4654      	mov	r4, sl
 8002396:	1e63      	subs	r3, r4, #1
 8002398:	419c      	sbcs	r4, r3
 800239a:	4643      	mov	r3, r8
 800239c:	431c      	orrs	r4, r3
 800239e:	e5db      	b.n	8001f58 <__aeabi_dsub+0x264>
 80023a0:	0002      	movs	r2, r0
 80023a2:	2400      	movs	r4, #0
 80023a4:	2300      	movs	r3, #0
 80023a6:	e548      	b.n	8001e3a <__aeabi_dsub+0x146>
 80023a8:	19dc      	adds	r4, r3, r7
 80023aa:	42bc      	cmp	r4, r7
 80023ac:	41bf      	sbcs	r7, r7
 80023ae:	4461      	add	r1, ip
 80023b0:	4689      	mov	r9, r1
 80023b2:	427f      	negs	r7, r7
 80023b4:	44b9      	add	r9, r7
 80023b6:	e738      	b.n	800222a <__aeabi_dsub+0x536>
 80023b8:	464b      	mov	r3, r9
 80023ba:	4323      	orrs	r3, r4
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dsub+0x6cc>
 80023be:	e69f      	b.n	8002100 <__aeabi_dsub+0x40c>
 80023c0:	e606      	b.n	8001fd0 <__aeabi_dsub+0x2dc>
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	000007fe 	.word	0x000007fe
 80023c8:	000007ff 	.word	0x000007ff
 80023cc:	ff7fffff 	.word	0xff7fffff
 80023d0:	08ff      	lsrs	r7, r7, #3
 80023d2:	074b      	lsls	r3, r1, #29
 80023d4:	433b      	orrs	r3, r7
 80023d6:	08cc      	lsrs	r4, r1, #3
 80023d8:	e616      	b.n	8002008 <__aeabi_dsub+0x314>
 80023da:	4662      	mov	r2, ip
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	0752      	lsls	r2, r2, #29
 80023e0:	4313      	orrs	r3, r2
 80023e2:	4662      	mov	r2, ip
 80023e4:	08d4      	lsrs	r4, r2, #3
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	0312      	lsls	r2, r2, #12
 80023ea:	4214      	tst	r4, r2
 80023ec:	d007      	beq.n	80023fe <__aeabi_dsub+0x70a>
 80023ee:	08c8      	lsrs	r0, r1, #3
 80023f0:	4210      	tst	r0, r2
 80023f2:	d104      	bne.n	80023fe <__aeabi_dsub+0x70a>
 80023f4:	465d      	mov	r5, fp
 80023f6:	0004      	movs	r4, r0
 80023f8:	08fb      	lsrs	r3, r7, #3
 80023fa:	0749      	lsls	r1, r1, #29
 80023fc:	430b      	orrs	r3, r1
 80023fe:	0f5a      	lsrs	r2, r3, #29
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	0752      	lsls	r2, r2, #29
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	4313      	orrs	r3, r2
 8002408:	e5fe      	b.n	8002008 <__aeabi_dsub+0x314>
 800240a:	2300      	movs	r3, #0
 800240c:	4a01      	ldr	r2, [pc, #4]	; (8002414 <__aeabi_dsub+0x720>)
 800240e:	001c      	movs	r4, r3
 8002410:	e513      	b.n	8001e3a <__aeabi_dsub+0x146>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	000007ff 	.word	0x000007ff

08002418 <__aeabi_dcmpun>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	0005      	movs	r5, r0
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <__aeabi_dcmpun+0x38>)
 800241e:	031c      	lsls	r4, r3, #12
 8002420:	0016      	movs	r6, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	030a      	lsls	r2, r1, #12
 8002426:	0049      	lsls	r1, r1, #1
 8002428:	0b12      	lsrs	r2, r2, #12
 800242a:	0d49      	lsrs	r1, r1, #21
 800242c:	0b24      	lsrs	r4, r4, #12
 800242e:	0d5b      	lsrs	r3, r3, #21
 8002430:	4281      	cmp	r1, r0
 8002432:	d008      	beq.n	8002446 <__aeabi_dcmpun+0x2e>
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <__aeabi_dcmpun+0x38>)
 8002436:	2000      	movs	r0, #0
 8002438:	4293      	cmp	r3, r2
 800243a:	d103      	bne.n	8002444 <__aeabi_dcmpun+0x2c>
 800243c:	0020      	movs	r0, r4
 800243e:	4330      	orrs	r0, r6
 8002440:	1e43      	subs	r3, r0, #1
 8002442:	4198      	sbcs	r0, r3
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	2001      	movs	r0, #1
 8002448:	432a      	orrs	r2, r5
 800244a:	d1fb      	bne.n	8002444 <__aeabi_dcmpun+0x2c>
 800244c:	e7f2      	b.n	8002434 <__aeabi_dcmpun+0x1c>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__aeabi_d2iz>:
 8002454:	000a      	movs	r2, r1
 8002456:	b530      	push	{r4, r5, lr}
 8002458:	4c13      	ldr	r4, [pc, #76]	; (80024a8 <__aeabi_d2iz+0x54>)
 800245a:	0053      	lsls	r3, r2, #1
 800245c:	0309      	lsls	r1, r1, #12
 800245e:	0005      	movs	r5, r0
 8002460:	0b09      	lsrs	r1, r1, #12
 8002462:	2000      	movs	r0, #0
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	0fd2      	lsrs	r2, r2, #31
 8002468:	42a3      	cmp	r3, r4
 800246a:	dd04      	ble.n	8002476 <__aeabi_d2iz+0x22>
 800246c:	480f      	ldr	r0, [pc, #60]	; (80024ac <__aeabi_d2iz+0x58>)
 800246e:	4283      	cmp	r3, r0
 8002470:	dd02      	ble.n	8002478 <__aeabi_d2iz+0x24>
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <__aeabi_d2iz+0x5c>)
 8002474:	18d0      	adds	r0, r2, r3
 8002476:	bd30      	pop	{r4, r5, pc}
 8002478:	2080      	movs	r0, #128	; 0x80
 800247a:	0340      	lsls	r0, r0, #13
 800247c:	4301      	orrs	r1, r0
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <__aeabi_d2iz+0x60>)
 8002480:	1ac0      	subs	r0, r0, r3
 8002482:	281f      	cmp	r0, #31
 8002484:	dd08      	ble.n	8002498 <__aeabi_d2iz+0x44>
 8002486:	480c      	ldr	r0, [pc, #48]	; (80024b8 <__aeabi_d2iz+0x64>)
 8002488:	1ac3      	subs	r3, r0, r3
 800248a:	40d9      	lsrs	r1, r3
 800248c:	000b      	movs	r3, r1
 800248e:	4258      	negs	r0, r3
 8002490:	2a00      	cmp	r2, #0
 8002492:	d1f0      	bne.n	8002476 <__aeabi_d2iz+0x22>
 8002494:	0018      	movs	r0, r3
 8002496:	e7ee      	b.n	8002476 <__aeabi_d2iz+0x22>
 8002498:	4c08      	ldr	r4, [pc, #32]	; (80024bc <__aeabi_d2iz+0x68>)
 800249a:	40c5      	lsrs	r5, r0
 800249c:	46a4      	mov	ip, r4
 800249e:	4463      	add	r3, ip
 80024a0:	4099      	lsls	r1, r3
 80024a2:	000b      	movs	r3, r1
 80024a4:	432b      	orrs	r3, r5
 80024a6:	e7f2      	b.n	800248e <__aeabi_d2iz+0x3a>
 80024a8:	000003fe 	.word	0x000003fe
 80024ac:	0000041d 	.word	0x0000041d
 80024b0:	7fffffff 	.word	0x7fffffff
 80024b4:	00000433 	.word	0x00000433
 80024b8:	00000413 	.word	0x00000413
 80024bc:	fffffbed 	.word	0xfffffbed

080024c0 <__aeabi_i2d>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d016      	beq.n	80024f4 <__aeabi_i2d+0x34>
 80024c6:	17c3      	asrs	r3, r0, #31
 80024c8:	18c5      	adds	r5, r0, r3
 80024ca:	405d      	eors	r5, r3
 80024cc:	0fc4      	lsrs	r4, r0, #31
 80024ce:	0028      	movs	r0, r5
 80024d0:	f000 f894 	bl	80025fc <__clzsi2>
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <__aeabi_i2d+0x5c>)
 80024d6:	1a12      	subs	r2, r2, r0
 80024d8:	280a      	cmp	r0, #10
 80024da:	dc16      	bgt.n	800250a <__aeabi_i2d+0x4a>
 80024dc:	0003      	movs	r3, r0
 80024de:	002e      	movs	r6, r5
 80024e0:	3315      	adds	r3, #21
 80024e2:	409e      	lsls	r6, r3
 80024e4:	230b      	movs	r3, #11
 80024e6:	1a18      	subs	r0, r3, r0
 80024e8:	40c5      	lsrs	r5, r0
 80024ea:	0552      	lsls	r2, r2, #21
 80024ec:	032d      	lsls	r5, r5, #12
 80024ee:	0b2d      	lsrs	r5, r5, #12
 80024f0:	0d53      	lsrs	r3, r2, #21
 80024f2:	e003      	b.n	80024fc <__aeabi_i2d+0x3c>
 80024f4:	2400      	movs	r4, #0
 80024f6:	2300      	movs	r3, #0
 80024f8:	2500      	movs	r5, #0
 80024fa:	2600      	movs	r6, #0
 80024fc:	051b      	lsls	r3, r3, #20
 80024fe:	432b      	orrs	r3, r5
 8002500:	07e4      	lsls	r4, r4, #31
 8002502:	4323      	orrs	r3, r4
 8002504:	0030      	movs	r0, r6
 8002506:	0019      	movs	r1, r3
 8002508:	bd70      	pop	{r4, r5, r6, pc}
 800250a:	380b      	subs	r0, #11
 800250c:	4085      	lsls	r5, r0
 800250e:	0552      	lsls	r2, r2, #21
 8002510:	032d      	lsls	r5, r5, #12
 8002512:	2600      	movs	r6, #0
 8002514:	0b2d      	lsrs	r5, r5, #12
 8002516:	0d53      	lsrs	r3, r2, #21
 8002518:	e7f0      	b.n	80024fc <__aeabi_i2d+0x3c>
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	0000041e 	.word	0x0000041e

08002520 <__aeabi_ui2d>:
 8002520:	b510      	push	{r4, lr}
 8002522:	1e04      	subs	r4, r0, #0
 8002524:	d010      	beq.n	8002548 <__aeabi_ui2d+0x28>
 8002526:	f000 f869 	bl	80025fc <__clzsi2>
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <__aeabi_ui2d+0x48>)
 800252c:	1a1b      	subs	r3, r3, r0
 800252e:	280a      	cmp	r0, #10
 8002530:	dc11      	bgt.n	8002556 <__aeabi_ui2d+0x36>
 8002532:	220b      	movs	r2, #11
 8002534:	0021      	movs	r1, r4
 8002536:	1a12      	subs	r2, r2, r0
 8002538:	40d1      	lsrs	r1, r2
 800253a:	3015      	adds	r0, #21
 800253c:	030a      	lsls	r2, r1, #12
 800253e:	055b      	lsls	r3, r3, #21
 8002540:	4084      	lsls	r4, r0
 8002542:	0b12      	lsrs	r2, r2, #12
 8002544:	0d5b      	lsrs	r3, r3, #21
 8002546:	e001      	b.n	800254c <__aeabi_ui2d+0x2c>
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	051b      	lsls	r3, r3, #20
 800254e:	4313      	orrs	r3, r2
 8002550:	0020      	movs	r0, r4
 8002552:	0019      	movs	r1, r3
 8002554:	bd10      	pop	{r4, pc}
 8002556:	0022      	movs	r2, r4
 8002558:	380b      	subs	r0, #11
 800255a:	4082      	lsls	r2, r0
 800255c:	055b      	lsls	r3, r3, #21
 800255e:	0312      	lsls	r2, r2, #12
 8002560:	2400      	movs	r4, #0
 8002562:	0b12      	lsrs	r2, r2, #12
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	e7f1      	b.n	800254c <__aeabi_ui2d+0x2c>
 8002568:	0000041e 	.word	0x0000041e

0800256c <__aeabi_f2d>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	0043      	lsls	r3, r0, #1
 8002570:	0246      	lsls	r6, r0, #9
 8002572:	0fc4      	lsrs	r4, r0, #31
 8002574:	20fe      	movs	r0, #254	; 0xfe
 8002576:	0e1b      	lsrs	r3, r3, #24
 8002578:	1c59      	adds	r1, r3, #1
 800257a:	0a75      	lsrs	r5, r6, #9
 800257c:	4208      	tst	r0, r1
 800257e:	d00c      	beq.n	800259a <__aeabi_f2d+0x2e>
 8002580:	22e0      	movs	r2, #224	; 0xe0
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	4694      	mov	ip, r2
 8002586:	076d      	lsls	r5, r5, #29
 8002588:	0b36      	lsrs	r6, r6, #12
 800258a:	4463      	add	r3, ip
 800258c:	051b      	lsls	r3, r3, #20
 800258e:	4333      	orrs	r3, r6
 8002590:	07e4      	lsls	r4, r4, #31
 8002592:	4323      	orrs	r3, r4
 8002594:	0028      	movs	r0, r5
 8002596:	0019      	movs	r1, r3
 8002598:	bd70      	pop	{r4, r5, r6, pc}
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <__aeabi_f2d+0x5c>
 800259e:	2d00      	cmp	r5, #0
 80025a0:	d01b      	beq.n	80025da <__aeabi_f2d+0x6e>
 80025a2:	0028      	movs	r0, r5
 80025a4:	f000 f82a 	bl	80025fc <__clzsi2>
 80025a8:	280a      	cmp	r0, #10
 80025aa:	dc1c      	bgt.n	80025e6 <__aeabi_f2d+0x7a>
 80025ac:	230b      	movs	r3, #11
 80025ae:	002e      	movs	r6, r5
 80025b0:	1a1b      	subs	r3, r3, r0
 80025b2:	40de      	lsrs	r6, r3
 80025b4:	0003      	movs	r3, r0
 80025b6:	3315      	adds	r3, #21
 80025b8:	409d      	lsls	r5, r3
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <__aeabi_f2d+0x88>)
 80025bc:	0336      	lsls	r6, r6, #12
 80025be:	1a12      	subs	r2, r2, r0
 80025c0:	0552      	lsls	r2, r2, #21
 80025c2:	0b36      	lsrs	r6, r6, #12
 80025c4:	0d53      	lsrs	r3, r2, #21
 80025c6:	e7e1      	b.n	800258c <__aeabi_f2d+0x20>
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d009      	beq.n	80025e0 <__aeabi_f2d+0x74>
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	0b36      	lsrs	r6, r6, #12
 80025d0:	0312      	lsls	r2, r2, #12
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <__aeabi_f2d+0x8c>)
 80025d4:	076d      	lsls	r5, r5, #29
 80025d6:	4316      	orrs	r6, r2
 80025d8:	e7d8      	b.n	800258c <__aeabi_f2d+0x20>
 80025da:	2300      	movs	r3, #0
 80025dc:	2600      	movs	r6, #0
 80025de:	e7d5      	b.n	800258c <__aeabi_f2d+0x20>
 80025e0:	2600      	movs	r6, #0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <__aeabi_f2d+0x8c>)
 80025e4:	e7d2      	b.n	800258c <__aeabi_f2d+0x20>
 80025e6:	0003      	movs	r3, r0
 80025e8:	3b0b      	subs	r3, #11
 80025ea:	409d      	lsls	r5, r3
 80025ec:	002e      	movs	r6, r5
 80025ee:	2500      	movs	r5, #0
 80025f0:	e7e3      	b.n	80025ba <__aeabi_f2d+0x4e>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	00000389 	.word	0x00000389
 80025f8:	000007ff 	.word	0x000007ff

080025fc <__clzsi2>:
 80025fc:	211c      	movs	r1, #28
 80025fe:	2301      	movs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0xe>
 8002606:	0c00      	lsrs	r0, r0, #16
 8002608:	3910      	subs	r1, #16
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	4298      	cmp	r0, r3
 800260e:	d301      	bcc.n	8002614 <__clzsi2+0x18>
 8002610:	0a00      	lsrs	r0, r0, #8
 8002612:	3908      	subs	r1, #8
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	4298      	cmp	r0, r3
 8002618:	d301      	bcc.n	800261e <__clzsi2+0x22>
 800261a:	0900      	lsrs	r0, r0, #4
 800261c:	3904      	subs	r1, #4
 800261e:	a202      	add	r2, pc, #8	; (adr r2, 8002628 <__clzsi2+0x2c>)
 8002620:	5c10      	ldrb	r0, [r2, r0]
 8002622:	1840      	adds	r0, r0, r1
 8002624:	4770      	bx	lr
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	02020304 	.word	0x02020304
 800262c:	01010101 	.word	0x01010101
	...

08002638 <read_keys>:
{
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}

void read_keys(int report){
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b08b      	sub	sp, #44	; 0x2c
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t MSG[16];
	while(i<kbcols){
 8002644:	e0f8      	b.n	8002838 <read_keys+0x200>
		int j = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
		HAL_GPIO_WritePin(kb_col_port[i], kb_col[i], 1);
 800264a:	4b80      	ldr	r3, [pc, #512]	; (800284c <read_keys+0x214>)
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	58d0      	ldr	r0, [r2, r3]
 8002652:	4b7f      	ldr	r3, [pc, #508]	; (8002850 <read_keys+0x218>)
 8002654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002656:	0052      	lsls	r2, r2, #1
 8002658:	5ad3      	ldrh	r3, [r2, r3]
 800265a:	2201      	movs	r2, #1
 800265c:	0019      	movs	r1, r3
 800265e:	f001 fb58 	bl	8003d12 <HAL_GPIO_WritePin>
		while(j<kbrows){
 8002662:	e0d6      	b.n	8002812 <read_keys+0x1da>
			kb_laststate[i][j] = kb_state[i][j];
 8002664:	497b      	ldr	r1, [pc, #492]	; (8002854 <read_keys+0x21c>)
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	0013      	movs	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	189b      	adds	r3, r3, r2
 800266e:	18ca      	adds	r2, r1, r3
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	18d3      	adds	r3, r2, r3
 8002674:	7818      	ldrb	r0, [r3, #0]
 8002676:	4978      	ldr	r1, [pc, #480]	; (8002858 <read_keys+0x220>)
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	0013      	movs	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	189b      	adds	r3, r3, r2
 8002680:	18ca      	adds	r2, r1, r3
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	18d3      	adds	r3, r2, r3
 8002686:	1c02      	adds	r2, r0, #0
 8002688:	701a      	strb	r2, [r3, #0]
			kb_state[i][j] = HAL_GPIO_ReadPin(kb_row_port[j], kb_row[j]);
 800268a:	4b74      	ldr	r3, [pc, #464]	; (800285c <read_keys+0x224>)
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	58d0      	ldr	r0, [r2, r3]
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <read_keys+0x228>)
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	0052      	lsls	r2, r2, #1
 8002698:	5ad3      	ldrh	r3, [r2, r3]
 800269a:	0019      	movs	r1, r3
 800269c:	f001 fb1c 	bl	8003cd8 <HAL_GPIO_ReadPin>
 80026a0:	0003      	movs	r3, r0
 80026a2:	0018      	movs	r0, r3
 80026a4:	496b      	ldr	r1, [pc, #428]	; (8002854 <read_keys+0x21c>)
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	0013      	movs	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	189b      	adds	r3, r3, r2
 80026ae:	18ca      	adds	r2, r1, r3
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	18d3      	adds	r3, r2, r3
 80026b4:	1c02      	adds	r2, r0, #0
 80026b6:	701a      	strb	r2, [r3, #0]
			if(kb_laststate[i][j] != kb_state[i][j] && kb_state[i][j]==1) {
 80026b8:	4967      	ldr	r1, [pc, #412]	; (8002858 <read_keys+0x220>)
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	0013      	movs	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	18ca      	adds	r2, r1, r3
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	18d3      	adds	r3, r2, r3
 80026c8:	7819      	ldrb	r1, [r3, #0]
 80026ca:	4862      	ldr	r0, [pc, #392]	; (8002854 <read_keys+0x21c>)
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	0013      	movs	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	18c2      	adds	r2, r0, r3
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	18d3      	adds	r3, r2, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4299      	cmp	r1, r3
 80026de:	d034      	beq.n	800274a <read_keys+0x112>
 80026e0:	495c      	ldr	r1, [pc, #368]	; (8002854 <read_keys+0x21c>)
 80026e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e4:	0013      	movs	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	18ca      	adds	r2, r1, r3
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	18d3      	adds	r3, r2, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d129      	bne.n	800274a <read_keys+0x112>
				kb_pushed[i][j]=1;
 80026f6:	495b      	ldr	r1, [pc, #364]	; (8002864 <read_keys+0x22c>)
 80026f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fa:	0013      	movs	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	18ca      	adds	r2, r1, r3
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	18d3      	adds	r3, r2, r3
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
				memset(MSG, 0, sizeof(MSG));
 800270a:	2410      	movs	r4, #16
 800270c:	193b      	adds	r3, r7, r4
 800270e:	2210      	movs	r2, #16
 8002710:	2100      	movs	r1, #0
 8002712:	0018      	movs	r0, r3
 8002714:	f003 fef8 	bl	8006508 <memset>
				int msglength;
				sprintf(MSG, "1 %d 1\r\n%n", i+kbcols*j, &msglength);
 8002718:	6a3a      	ldr	r2, [r7, #32]
 800271a:	0013      	movs	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	001a      	movs	r2, r3
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	18d2      	adds	r2, r2, r3
 8002728:	230c      	movs	r3, #12
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	494e      	ldr	r1, [pc, #312]	; (8002868 <read_keys+0x230>)
 800272e:	1938      	adds	r0, r7, r4
 8002730:	f004 fb60 	bl	8006df4 <siprintf>
				if (report) HAL_UART_Transmit(&huart2, MSG, msglength*sizeof(char), 100);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d012      	beq.n	8002760 <read_keys+0x128>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	b29a      	uxth	r2, r3
 800273e:	1939      	adds	r1, r7, r4
 8002740:	484a      	ldr	r0, [pc, #296]	; (800286c <read_keys+0x234>)
 8002742:	2364      	movs	r3, #100	; 0x64
 8002744:	f003 fada 	bl	8005cfc <HAL_UART_Transmit>
			if(kb_laststate[i][j] != kb_state[i][j] && kb_state[i][j]==1) {
 8002748:	e00a      	b.n	8002760 <read_keys+0x128>
			}
			else kb_pushed[i][j]=0;
 800274a:	4946      	ldr	r1, [pc, #280]	; (8002864 <read_keys+0x22c>)
 800274c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274e:	0013      	movs	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	189b      	adds	r3, r3, r2
 8002754:	18ca      	adds	r2, r1, r3
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	18d3      	adds	r3, r2, r3
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e000      	b.n	8002762 <read_keys+0x12a>
			if(kb_laststate[i][j] != kb_state[i][j] && kb_state[i][j]==1) {
 8002760:	46c0      	nop			; (mov r8, r8)
			if(kb_laststate[i][j] != kb_state[i][j] && kb_state[i][j]==0) {
 8002762:	493d      	ldr	r1, [pc, #244]	; (8002858 <read_keys+0x220>)
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	0013      	movs	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	189b      	adds	r3, r3, r2
 800276c:	18ca      	adds	r2, r1, r3
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	18d3      	adds	r3, r2, r3
 8002772:	7819      	ldrb	r1, [r3, #0]
 8002774:	4837      	ldr	r0, [pc, #220]	; (8002854 <read_keys+0x21c>)
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	0013      	movs	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	189b      	adds	r3, r3, r2
 800277e:	18c2      	adds	r2, r0, r3
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	18d3      	adds	r3, r2, r3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4299      	cmp	r1, r3
 8002788:	d034      	beq.n	80027f4 <read_keys+0x1bc>
 800278a:	4932      	ldr	r1, [pc, #200]	; (8002854 <read_keys+0x21c>)
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	0013      	movs	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	189b      	adds	r3, r3, r2
 8002794:	18ca      	adds	r2, r1, r3
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	18d3      	adds	r3, r2, r3
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d129      	bne.n	80027f4 <read_keys+0x1bc>
							kb_released[i][j]=1;
 80027a0:	4933      	ldr	r1, [pc, #204]	; (8002870 <read_keys+0x238>)
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	0013      	movs	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	189b      	adds	r3, r3, r2
 80027aa:	18ca      	adds	r2, r1, r3
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	18d3      	adds	r3, r2, r3
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
							memset(MSG, 0, sizeof(MSG));
 80027b4:	2410      	movs	r4, #16
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	2210      	movs	r2, #16
 80027ba:	2100      	movs	r1, #0
 80027bc:	0018      	movs	r0, r3
 80027be:	f003 fea3 	bl	8006508 <memset>
							int msglength;
							sprintf(MSG, "1 %d 0\r\n%n", i+kbcols*j, &msglength);
 80027c2:	6a3a      	ldr	r2, [r7, #32]
 80027c4:	0013      	movs	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	001a      	movs	r2, r3
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	18d2      	adds	r2, r2, r3
 80027d2:	2308      	movs	r3, #8
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	4927      	ldr	r1, [pc, #156]	; (8002874 <read_keys+0x23c>)
 80027d8:	1938      	adds	r0, r7, r4
 80027da:	f004 fb0b 	bl	8006df4 <siprintf>
							if (report) HAL_UART_Transmit(&huart2, MSG, msglength*sizeof(char), 100);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <read_keys+0x1d2>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	1939      	adds	r1, r7, r4
 80027ea:	4820      	ldr	r0, [pc, #128]	; (800286c <read_keys+0x234>)
 80027ec:	2364      	movs	r3, #100	; 0x64
 80027ee:	f003 fa85 	bl	8005cfc <HAL_UART_Transmit>
			if(kb_laststate[i][j] != kb_state[i][j] && kb_state[i][j]==0) {
 80027f2:	e00a      	b.n	800280a <read_keys+0x1d2>
						}
			else kb_released[i][j]=0;
 80027f4:	491e      	ldr	r1, [pc, #120]	; (8002870 <read_keys+0x238>)
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	0013      	movs	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	189b      	adds	r3, r3, r2
 80027fe:	18ca      	adds	r2, r1, r3
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	18d3      	adds	r3, r2, r3
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	e000      	b.n	800280c <read_keys+0x1d4>
			if(kb_laststate[i][j] != kb_state[i][j] && kb_state[i][j]==0) {
 800280a:	46c0      	nop			; (mov r8, r8)
			j++;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	3301      	adds	r3, #1
 8002810:	623b      	str	r3, [r7, #32]
		while(j<kbrows){
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	2b04      	cmp	r3, #4
 8002816:	dc00      	bgt.n	800281a <read_keys+0x1e2>
 8002818:	e724      	b.n	8002664 <read_keys+0x2c>
		}
		HAL_GPIO_WritePin(kb_col_port[i], kb_col[i], 0);
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <read_keys+0x214>)
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	58d0      	ldr	r0, [r2, r3]
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <read_keys+0x218>)
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	0052      	lsls	r2, r2, #1
 8002828:	5ad3      	ldrh	r3, [r2, r3]
 800282a:	2200      	movs	r2, #0
 800282c:	0019      	movs	r1, r3
 800282e:	f001 fa70 	bl	8003d12 <HAL_GPIO_WritePin>
		i++;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	3301      	adds	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
	while(i<kbcols){
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	2b0d      	cmp	r3, #13
 800283c:	dc00      	bgt.n	8002840 <read_keys+0x208>
 800283e:	e702      	b.n	8002646 <read_keys+0xe>
	};


}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b00b      	add	sp, #44	; 0x2c
 8002848:	bd90      	pop	{r4, r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	2000001c 	.word	0x2000001c
 8002850:	20000000 	.word	0x20000000
 8002854:	20000394 	.word	0x20000394
 8002858:	200003dc 	.word	0x200003dc
 800285c:	20000060 	.word	0x20000060
 8002860:	20000054 	.word	0x20000054
 8002864:	20000424 	.word	0x20000424
 8002868:	08009498 	.word	0x08009498
 800286c:	20000304 	.word	0x20000304
 8002870:	2000046c 	.word	0x2000046c
 8002874:	080094a4 	.word	0x080094a4

08002878 <print_adc>:

void print_adc(){
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b0c3      	sub	sp, #268	; 0x10c
 800287c:	af04      	add	r7, sp, #16
	uint8_t writer= 0b10010000;
 800287e:	21e7      	movs	r1, #231	; 0xe7
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2290      	movs	r2, #144	; 0x90
 8002884:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,75<<1,0x3,I2C_MEMADD_SIZE_8BIT,&writer,1,0xFFF);
 8002886:	4859      	ldr	r0, [pc, #356]	; (80029ec <print_adc+0x174>)
 8002888:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <print_adc+0x178>)
 800288a:	9302      	str	r3, [sp, #8]
 800288c:	2301      	movs	r3, #1
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	187b      	adds	r3, r7, r1
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2301      	movs	r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	2196      	movs	r1, #150	; 0x96
 800289a:	f001 faed 	bl	8003e78 <HAL_I2C_Mem_Write>
	uint8_t MSG[128] = {"\e[3J\033c\e[1;34mADC READS:\e[0m\r\n\n\n\n\n"};
 800289e:	2464      	movs	r4, #100	; 0x64
 80028a0:	1939      	adds	r1, r7, r4
 80028a2:	4a54      	ldr	r2, [pc, #336]	; (80029f4 <print_adc+0x17c>)
 80028a4:	000b      	movs	r3, r1
 80028a6:	ca61      	ldmia	r2!, {r0, r5, r6}
 80028a8:	c361      	stmia	r3!, {r0, r5, r6}
 80028aa:	ca61      	ldmia	r2!, {r0, r5, r6}
 80028ac:	c361      	stmia	r3!, {r0, r5, r6}
 80028ae:	ca21      	ldmia	r2!, {r0, r5}
 80028b0:	c321      	stmia	r3!, {r0, r5}
 80028b2:	8812      	ldrh	r2, [r2, #0]
 80028b4:	801a      	strh	r2, [r3, #0]
 80028b6:	2322      	movs	r3, #34	; 0x22
 80028b8:	18cb      	adds	r3, r1, r3
 80028ba:	225e      	movs	r2, #94	; 0x5e
 80028bc:	2100      	movs	r1, #0
 80028be:	0018      	movs	r0, r3
 80028c0:	f003 fe22 	bl	8006508 <memset>
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80028c4:	1939      	adds	r1, r7, r4
 80028c6:	484c      	ldr	r0, [pc, #304]	; (80029f8 <print_adc+0x180>)
 80028c8:	2364      	movs	r3, #100	; 0x64
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	f003 fa16 	bl	8005cfc <HAL_UART_Transmit>
	int adresses_ADC[6]={0xe, 0xF, 0x10, 0x11, 0x12, 0x13};
 80028d0:	234c      	movs	r3, #76	; 0x4c
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	4a49      	ldr	r2, [pc, #292]	; (80029fc <print_adc+0x184>)
 80028d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028d8:	c313      	stmia	r3!, {r0, r1, r4}
 80028da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028dc:	c313      	stmia	r3!, {r0, r1, r4}
	float resolution_ADC[6]={255, 255, 255, 128, 255, 255};
 80028de:	2334      	movs	r3, #52	; 0x34
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <print_adc+0x188>)
 80028e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028e6:	c313      	stmia	r3!, {r0, r1, r4}
 80028e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028ea:	c313      	stmia	r3!, {r0, r1, r4}
	float maxvalue_ADC[6]={5.1, 5.1, 100, 7.62, 5.66, 3.39};
 80028ec:	231c      	movs	r3, #28
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	4a44      	ldr	r2, [pc, #272]	; (8002a04 <print_adc+0x18c>)
 80028f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028f4:	c313      	stmia	r3!, {r0, r1, r4}
 80028f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028f8:	c313      	stmia	r3!, {r0, r1, r4}
	char *descriptions_ADC[6]={"BatV","SysV","NTCV","InpV","ChgA","InpA"};
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <print_adc+0x190>)
 80028fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002900:	c313      	stmia	r3!, {r0, r1, r4}
 8002902:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002904:	c313      	stmia	r3!, {r0, r1, r4}
	int i = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	22f4      	movs	r2, #244	; 0xf4
 800290a:	18ba      	adds	r2, r7, r2
 800290c:	6013      	str	r3, [r2, #0]
	uint8_t reader;
	while(i<6){
 800290e:	e05e      	b.n	80029ce <print_adc+0x156>
		memset(MSG, 0, sizeof(MSG));
 8002910:	2664      	movs	r6, #100	; 0x64
 8002912:	19bb      	adds	r3, r7, r6
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	2100      	movs	r1, #0
 8002918:	0018      	movs	r0, r3
 800291a:	f003 fdf5 	bl	8006508 <memset>
		HAL_I2C_Mem_Read(&hi2c1, 75<<1, adresses_ADC[i], I2C_MEMADD_SIZE_8BIT, &reader, 1, 0xFFF);
 800291e:	234c      	movs	r3, #76	; 0x4c
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	24f4      	movs	r4, #244	; 0xf4
 8002924:	193a      	adds	r2, r7, r4
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	0092      	lsls	r2, r2, #2
 800292a:	58d3      	ldr	r3, [r2, r3]
 800292c:	b29a      	uxth	r2, r3
 800292e:	482f      	ldr	r0, [pc, #188]	; (80029ec <print_adc+0x174>)
 8002930:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <print_adc+0x178>)
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	2301      	movs	r3, #1
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	1cfb      	adds	r3, r7, #3
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2301      	movs	r3, #1
 800293e:	2196      	movs	r1, #150	; 0x96
 8002940:	f001 fbc8 	bl	80040d4 <HAL_I2C_Mem_Read>
		float input = reader;
 8002944:	1cfb      	adds	r3, r7, #3
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	0018      	movs	r0, r3
 800294a:	f7fd ffe7 	bl	800091c <__aeabi_ui2f>
 800294e:	1c03      	adds	r3, r0, #0
 8002950:	20f0      	movs	r0, #240	; 0xf0
 8002952:	183a      	adds	r2, r7, r0
 8002954:	6013      	str	r3, [r2, #0]
		float temp1 = input/resolution_ADC[i];
 8002956:	2334      	movs	r3, #52	; 0x34
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	193a      	adds	r2, r7, r4
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	58d3      	ldr	r3, [r2, r3]
 8002962:	1c19      	adds	r1, r3, #0
 8002964:	183b      	adds	r3, r7, r0
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	f7fd fd9a 	bl	80004a0 <__aeabi_fdiv>
 800296c:	1c03      	adds	r3, r0, #0
 800296e:	20ec      	movs	r0, #236	; 0xec
 8002970:	183a      	adds	r2, r7, r0
 8002972:	6013      	str	r3, [r2, #0]
		float output = temp1*maxvalue_ADC[i];
 8002974:	231c      	movs	r3, #28
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	193a      	adds	r2, r7, r4
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	58d3      	ldr	r3, [r2, r3]
 8002980:	1c19      	adds	r1, r3, #0
 8002982:	183b      	adds	r3, r7, r0
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	f7fd fea3 	bl	80006d0 <__aeabi_fmul>
 800298a:	1c03      	adds	r3, r0, #0
 800298c:	21e8      	movs	r1, #232	; 0xe8
 800298e:	187a      	adds	r2, r7, r1
 8002990:	6013      	str	r3, [r2, #0]
		sprintf(MSG, "\r\n%s: %5.3f\r\n", descriptions_ADC[i], output);
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	0025      	movs	r5, r4
 8002996:	193a      	adds	r2, r7, r4
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	58d4      	ldr	r4, [r2, r3]
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	f7ff fde3 	bl	800256c <__aeabi_f2d>
 80029a6:	0002      	movs	r2, r0
 80029a8:	000b      	movs	r3, r1
 80029aa:	4918      	ldr	r1, [pc, #96]	; (8002a0c <print_adc+0x194>)
 80029ac:	19b8      	adds	r0, r7, r6
 80029ae:	9200      	str	r2, [sp, #0]
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	0022      	movs	r2, r4
 80029b4:	f004 fa1e 	bl	8006df4 <siprintf>
		HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80029b8:	19b9      	adds	r1, r7, r6
 80029ba:	480f      	ldr	r0, [pc, #60]	; (80029f8 <print_adc+0x180>)
 80029bc:	2364      	movs	r3, #100	; 0x64
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	f003 f99c 	bl	8005cfc <HAL_UART_Transmit>
		i++;
 80029c4:	197b      	adds	r3, r7, r5
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	197a      	adds	r2, r7, r5
 80029cc:	6013      	str	r3, [r2, #0]
	while(i<6){
 80029ce:	23f4      	movs	r3, #244	; 0xf4
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	dd9b      	ble.n	8002910 <print_adc+0x98>
	}
	HAL_Delay(1000);
 80029d8:	23fa      	movs	r3, #250	; 0xfa
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	0018      	movs	r0, r3
 80029de:	f000 ff3f 	bl	8003860 <HAL_Delay>
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b03f      	add	sp, #252	; 0xfc
 80029e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	2000026c 	.word	0x2000026c
 80029f0:	00000fff 	.word	0x00000fff
 80029f4:	080094c0 	.word	0x080094c0
 80029f8:	20000304 	.word	0x20000304
 80029fc:	08009540 	.word	0x08009540
 8002a00:	08009558 	.word	0x08009558
 8002a04:	08009570 	.word	0x08009570
 8002a08:	08009588 	.word	0x08009588
 8002a0c:	080094b0 	.word	0x080094b0

08002a10 <edit_mpreg>:

void edit_mpreg(){
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	46de      	mov	lr, fp
 8002a14:	4657      	mov	r7, sl
 8002a16:	464e      	mov	r6, r9
 8002a18:	4645      	mov	r5, r8
 8002a1a:	b5e0      	push	{r5, r6, r7, lr}
 8002a1c:	b0ab      	sub	sp, #172	; 0xac
 8002a1e:	af08      	add	r7, sp, #32
	uint8_t MSG[128];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8002a20:	23a0      	movs	r3, #160	; 0xa0
 8002a22:	05db      	lsls	r3, r3, #23
 8002a24:	2201      	movs	r2, #1
 8002a26:	2140      	movs	r1, #64	; 0x40
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f001 f972 	bl	8003d12 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8002a2e:	2096      	movs	r0, #150	; 0x96
 8002a30:	f000 ff16 	bl	8003860 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8002a34:	23a0      	movs	r3, #160	; 0xa0
 8002a36:	05db      	lsls	r3, r3, #23
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2140      	movs	r1, #64	; 0x40
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f001 f968 	bl	8003d12 <HAL_GPIO_WritePin>
	int i = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	2484      	movs	r4, #132	; 0x84
 8002a46:	193a      	adds	r2, r7, r4
 8002a48:	6013      	str	r3, [r2, #0]
	uint8_t reader;
	//breakpoint here, edit i to select register to edit/view
	memset(MSG, 0, sizeof(MSG));
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	2100      	movs	r1, #0
 8002a50:	0018      	movs	r0, r3
 8002a52:	f003 fd59 	bl	8006508 <memset>
	HAL_I2C_Mem_Read(&hi2c1, 75<<1, i, I2C_MEMADD_SIZE_8BIT, &reader, 1, 0xFFF);
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	48b5      	ldr	r0, [pc, #724]	; (8002d34 <edit_mpreg+0x324>)
 8002a5e:	4bb6      	ldr	r3, [pc, #728]	; (8002d38 <edit_mpreg+0x328>)
 8002a60:	9302      	str	r3, [sp, #8]
 8002a62:	2301      	movs	r3, #1
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	1cfb      	adds	r3, r7, #3
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2196      	movs	r1, #150	; 0x96
 8002a6e:	f001 fb31 	bl	80040d4 <HAL_I2C_Mem_Read>
	sprintf(MSG, "%d read as: "BYTE_TO_BINARY_PATTERN"\r\n",i, BYTE_TO_BINARY(reader));
 8002a72:	1cfb      	adds	r3, r7, #3
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da02      	bge.n	8002a82 <edit_mpreg+0x72>
 8002a7c:	2331      	movs	r3, #49	; 0x31
 8002a7e:	469c      	mov	ip, r3
 8002a80:	e001      	b.n	8002a86 <edit_mpreg+0x76>
 8002a82:	2330      	movs	r3, #48	; 0x30
 8002a84:	469c      	mov	ip, r3
 8002a86:	1cfb      	adds	r3, r7, #3
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	2340      	movs	r3, #64	; 0x40
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d002      	beq.n	8002a98 <edit_mpreg+0x88>
 8002a92:	2331      	movs	r3, #49	; 0x31
 8002a94:	469b      	mov	fp, r3
 8002a96:	e001      	b.n	8002a9c <edit_mpreg+0x8c>
 8002a98:	2330      	movs	r3, #48	; 0x30
 8002a9a:	469b      	mov	fp, r3
 8002a9c:	1cfa      	adds	r2, r7, #3
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	d001      	beq.n	8002aac <edit_mpreg+0x9c>
 8002aa8:	2231      	movs	r2, #49	; 0x31
 8002aaa:	e000      	b.n	8002aae <edit_mpreg+0x9e>
 8002aac:	2230      	movs	r2, #48	; 0x30
 8002aae:	1cf9      	adds	r1, r7, #3
 8002ab0:	7809      	ldrb	r1, [r1, #0]
 8002ab2:	0008      	movs	r0, r1
 8002ab4:	2110      	movs	r1, #16
 8002ab6:	4001      	ands	r1, r0
 8002ab8:	d001      	beq.n	8002abe <edit_mpreg+0xae>
 8002aba:	2131      	movs	r1, #49	; 0x31
 8002abc:	e000      	b.n	8002ac0 <edit_mpreg+0xb0>
 8002abe:	2130      	movs	r1, #48	; 0x30
 8002ac0:	1cf8      	adds	r0, r7, #3
 8002ac2:	7800      	ldrb	r0, [r0, #0]
 8002ac4:	0004      	movs	r4, r0
 8002ac6:	2008      	movs	r0, #8
 8002ac8:	4020      	ands	r0, r4
 8002aca:	d001      	beq.n	8002ad0 <edit_mpreg+0xc0>
 8002acc:	2031      	movs	r0, #49	; 0x31
 8002ace:	e000      	b.n	8002ad2 <edit_mpreg+0xc2>
 8002ad0:	2030      	movs	r0, #48	; 0x30
 8002ad2:	1cfc      	adds	r4, r7, #3
 8002ad4:	7824      	ldrb	r4, [r4, #0]
 8002ad6:	0025      	movs	r5, r4
 8002ad8:	2404      	movs	r4, #4
 8002ada:	402c      	ands	r4, r5
 8002adc:	d001      	beq.n	8002ae2 <edit_mpreg+0xd2>
 8002ade:	2431      	movs	r4, #49	; 0x31
 8002ae0:	e000      	b.n	8002ae4 <edit_mpreg+0xd4>
 8002ae2:	2430      	movs	r4, #48	; 0x30
 8002ae4:	1cfd      	adds	r5, r7, #3
 8002ae6:	782d      	ldrb	r5, [r5, #0]
 8002ae8:	002e      	movs	r6, r5
 8002aea:	2502      	movs	r5, #2
 8002aec:	4035      	ands	r5, r6
 8002aee:	d001      	beq.n	8002af4 <edit_mpreg+0xe4>
 8002af0:	2531      	movs	r5, #49	; 0x31
 8002af2:	e000      	b.n	8002af6 <edit_mpreg+0xe6>
 8002af4:	2530      	movs	r5, #48	; 0x30
 8002af6:	1cfe      	adds	r6, r7, #3
 8002af8:	7836      	ldrb	r6, [r6, #0]
 8002afa:	46b0      	mov	r8, r6
 8002afc:	2601      	movs	r6, #1
 8002afe:	4643      	mov	r3, r8
 8002b00:	4033      	ands	r3, r6
 8002b02:	1e1e      	subs	r6, r3, #0
 8002b04:	d001      	beq.n	8002b0a <edit_mpreg+0xfa>
 8002b06:	2631      	movs	r6, #49	; 0x31
 8002b08:	e000      	b.n	8002b0c <edit_mpreg+0xfc>
 8002b0a:	2630      	movs	r6, #48	; 0x30
 8002b0c:	2384      	movs	r3, #132	; 0x84
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	469a      	mov	sl, r3
 8002b14:	4b89      	ldr	r3, [pc, #548]	; (8002d3c <edit_mpreg+0x32c>)
 8002b16:	4699      	mov	r9, r3
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	4698      	mov	r8, r3
 8002b1c:	9606      	str	r6, [sp, #24]
 8002b1e:	9505      	str	r5, [sp, #20]
 8002b20:	9404      	str	r4, [sp, #16]
 8002b22:	9003      	str	r0, [sp, #12]
 8002b24:	9102      	str	r1, [sp, #8]
 8002b26:	9201      	str	r2, [sp, #4]
 8002b28:	465b      	mov	r3, fp
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4663      	mov	r3, ip
 8002b2e:	4652      	mov	r2, sl
 8002b30:	4649      	mov	r1, r9
 8002b32:	4640      	mov	r0, r8
 8002b34:	f004 f95e 	bl	8006df4 <siprintf>
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002b38:	1d39      	adds	r1, r7, #4
 8002b3a:	4881      	ldr	r0, [pc, #516]	; (8002d40 <edit_mpreg+0x330>)
 8002b3c:	2364      	movs	r3, #100	; 0x64
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	f003 f8dc 	bl	8005cfc <HAL_UART_Transmit>
	//breakpoint here, edit reader to desired value
	sprintf(MSG, "%d changed to: "BYTE_TO_BINARY_PATTERN"\r\n",i, BYTE_TO_BINARY(reader));
 8002b44:	1cfb      	adds	r3, r7, #3
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da02      	bge.n	8002b54 <edit_mpreg+0x144>
 8002b4e:	2331      	movs	r3, #49	; 0x31
 8002b50:	469c      	mov	ip, r3
 8002b52:	e001      	b.n	8002b58 <edit_mpreg+0x148>
 8002b54:	2330      	movs	r3, #48	; 0x30
 8002b56:	469c      	mov	ip, r3
 8002b58:	1cfb      	adds	r3, r7, #3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2340      	movs	r3, #64	; 0x40
 8002b60:	4013      	ands	r3, r2
 8002b62:	d002      	beq.n	8002b6a <edit_mpreg+0x15a>
 8002b64:	2331      	movs	r3, #49	; 0x31
 8002b66:	469b      	mov	fp, r3
 8002b68:	e001      	b.n	8002b6e <edit_mpreg+0x15e>
 8002b6a:	2330      	movs	r3, #48	; 0x30
 8002b6c:	469b      	mov	fp, r3
 8002b6e:	1cfa      	adds	r2, r7, #3
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	0011      	movs	r1, r2
 8002b74:	2220      	movs	r2, #32
 8002b76:	400a      	ands	r2, r1
 8002b78:	d001      	beq.n	8002b7e <edit_mpreg+0x16e>
 8002b7a:	2231      	movs	r2, #49	; 0x31
 8002b7c:	e000      	b.n	8002b80 <edit_mpreg+0x170>
 8002b7e:	2230      	movs	r2, #48	; 0x30
 8002b80:	1cf9      	adds	r1, r7, #3
 8002b82:	7809      	ldrb	r1, [r1, #0]
 8002b84:	0008      	movs	r0, r1
 8002b86:	2110      	movs	r1, #16
 8002b88:	4001      	ands	r1, r0
 8002b8a:	d001      	beq.n	8002b90 <edit_mpreg+0x180>
 8002b8c:	2131      	movs	r1, #49	; 0x31
 8002b8e:	e000      	b.n	8002b92 <edit_mpreg+0x182>
 8002b90:	2130      	movs	r1, #48	; 0x30
 8002b92:	1cf8      	adds	r0, r7, #3
 8002b94:	7800      	ldrb	r0, [r0, #0]
 8002b96:	0004      	movs	r4, r0
 8002b98:	2008      	movs	r0, #8
 8002b9a:	4020      	ands	r0, r4
 8002b9c:	d001      	beq.n	8002ba2 <edit_mpreg+0x192>
 8002b9e:	2031      	movs	r0, #49	; 0x31
 8002ba0:	e000      	b.n	8002ba4 <edit_mpreg+0x194>
 8002ba2:	2030      	movs	r0, #48	; 0x30
 8002ba4:	1cfc      	adds	r4, r7, #3
 8002ba6:	7824      	ldrb	r4, [r4, #0]
 8002ba8:	0025      	movs	r5, r4
 8002baa:	2404      	movs	r4, #4
 8002bac:	402c      	ands	r4, r5
 8002bae:	d001      	beq.n	8002bb4 <edit_mpreg+0x1a4>
 8002bb0:	2431      	movs	r4, #49	; 0x31
 8002bb2:	e000      	b.n	8002bb6 <edit_mpreg+0x1a6>
 8002bb4:	2430      	movs	r4, #48	; 0x30
 8002bb6:	1cfd      	adds	r5, r7, #3
 8002bb8:	782d      	ldrb	r5, [r5, #0]
 8002bba:	002e      	movs	r6, r5
 8002bbc:	2502      	movs	r5, #2
 8002bbe:	4035      	ands	r5, r6
 8002bc0:	d001      	beq.n	8002bc6 <edit_mpreg+0x1b6>
 8002bc2:	2531      	movs	r5, #49	; 0x31
 8002bc4:	e000      	b.n	8002bc8 <edit_mpreg+0x1b8>
 8002bc6:	2530      	movs	r5, #48	; 0x30
 8002bc8:	1cfe      	adds	r6, r7, #3
 8002bca:	7836      	ldrb	r6, [r6, #0]
 8002bcc:	46b0      	mov	r8, r6
 8002bce:	2601      	movs	r6, #1
 8002bd0:	4643      	mov	r3, r8
 8002bd2:	4033      	ands	r3, r6
 8002bd4:	1e1e      	subs	r6, r3, #0
 8002bd6:	d001      	beq.n	8002bdc <edit_mpreg+0x1cc>
 8002bd8:	2631      	movs	r6, #49	; 0x31
 8002bda:	e000      	b.n	8002bde <edit_mpreg+0x1ce>
 8002bdc:	2630      	movs	r6, #48	; 0x30
 8002bde:	2384      	movs	r3, #132	; 0x84
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	469a      	mov	sl, r3
 8002be6:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <edit_mpreg+0x334>)
 8002be8:	4699      	mov	r9, r3
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4698      	mov	r8, r3
 8002bee:	9606      	str	r6, [sp, #24]
 8002bf0:	9505      	str	r5, [sp, #20]
 8002bf2:	9404      	str	r4, [sp, #16]
 8002bf4:	9003      	str	r0, [sp, #12]
 8002bf6:	9102      	str	r1, [sp, #8]
 8002bf8:	9201      	str	r2, [sp, #4]
 8002bfa:	465b      	mov	r3, fp
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4663      	mov	r3, ip
 8002c00:	4652      	mov	r2, sl
 8002c02:	4649      	mov	r1, r9
 8002c04:	4640      	mov	r0, r8
 8002c06:	f004 f8f5 	bl	8006df4 <siprintf>
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002c0a:	1d39      	adds	r1, r7, #4
 8002c0c:	484c      	ldr	r0, [pc, #304]	; (8002d40 <edit_mpreg+0x330>)
 8002c0e:	2364      	movs	r3, #100	; 0x64
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	f003 f873 	bl	8005cfc <HAL_UART_Transmit>
	HAL_I2C_Mem_Write(&hi2c1,75<<1,i,I2C_MEMADD_SIZE_8BIT,&reader,1,0xFFF);
 8002c16:	2484      	movs	r4, #132	; 0x84
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	4845      	ldr	r0, [pc, #276]	; (8002d34 <edit_mpreg+0x324>)
 8002c20:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <edit_mpreg+0x328>)
 8002c22:	9302      	str	r3, [sp, #8]
 8002c24:	2301      	movs	r3, #1
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	1cfb      	adds	r3, r7, #3
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	2196      	movs	r1, #150	; 0x96
 8002c30:	f001 f922 	bl	8003e78 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1, 75<<1, i, I2C_MEMADD_SIZE_8BIT, &reader, 1, 0xFFF);
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	483e      	ldr	r0, [pc, #248]	; (8002d34 <edit_mpreg+0x324>)
 8002c3c:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <edit_mpreg+0x328>)
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	2301      	movs	r3, #1
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	1cfb      	adds	r3, r7, #3
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	2196      	movs	r1, #150	; 0x96
 8002c4c:	f001 fa42 	bl	80040d4 <HAL_I2C_Mem_Read>
	sprintf(MSG, "%d confirm: "BYTE_TO_BINARY_PATTERN"\r\n",i, BYTE_TO_BINARY(reader));
 8002c50:	1cfb      	adds	r3, r7, #3
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b25b      	sxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da02      	bge.n	8002c60 <edit_mpreg+0x250>
 8002c5a:	2331      	movs	r3, #49	; 0x31
 8002c5c:	469c      	mov	ip, r3
 8002c5e:	e001      	b.n	8002c64 <edit_mpreg+0x254>
 8002c60:	2330      	movs	r3, #48	; 0x30
 8002c62:	469c      	mov	ip, r3
 8002c64:	1cfb      	adds	r3, r7, #3
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	001a      	movs	r2, r3
 8002c6a:	2340      	movs	r3, #64	; 0x40
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d002      	beq.n	8002c76 <edit_mpreg+0x266>
 8002c70:	2331      	movs	r3, #49	; 0x31
 8002c72:	469b      	mov	fp, r3
 8002c74:	e001      	b.n	8002c7a <edit_mpreg+0x26a>
 8002c76:	2330      	movs	r3, #48	; 0x30
 8002c78:	469b      	mov	fp, r3
 8002c7a:	1cfa      	adds	r2, r7, #3
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	0011      	movs	r1, r2
 8002c80:	2220      	movs	r2, #32
 8002c82:	400a      	ands	r2, r1
 8002c84:	d001      	beq.n	8002c8a <edit_mpreg+0x27a>
 8002c86:	2231      	movs	r2, #49	; 0x31
 8002c88:	e000      	b.n	8002c8c <edit_mpreg+0x27c>
 8002c8a:	2230      	movs	r2, #48	; 0x30
 8002c8c:	1cf9      	adds	r1, r7, #3
 8002c8e:	7809      	ldrb	r1, [r1, #0]
 8002c90:	0008      	movs	r0, r1
 8002c92:	2110      	movs	r1, #16
 8002c94:	4001      	ands	r1, r0
 8002c96:	d001      	beq.n	8002c9c <edit_mpreg+0x28c>
 8002c98:	2131      	movs	r1, #49	; 0x31
 8002c9a:	e000      	b.n	8002c9e <edit_mpreg+0x28e>
 8002c9c:	2130      	movs	r1, #48	; 0x30
 8002c9e:	1cf8      	adds	r0, r7, #3
 8002ca0:	7800      	ldrb	r0, [r0, #0]
 8002ca2:	0004      	movs	r4, r0
 8002ca4:	2008      	movs	r0, #8
 8002ca6:	4020      	ands	r0, r4
 8002ca8:	d001      	beq.n	8002cae <edit_mpreg+0x29e>
 8002caa:	2031      	movs	r0, #49	; 0x31
 8002cac:	e000      	b.n	8002cb0 <edit_mpreg+0x2a0>
 8002cae:	2030      	movs	r0, #48	; 0x30
 8002cb0:	1cfc      	adds	r4, r7, #3
 8002cb2:	7824      	ldrb	r4, [r4, #0]
 8002cb4:	0025      	movs	r5, r4
 8002cb6:	2404      	movs	r4, #4
 8002cb8:	402c      	ands	r4, r5
 8002cba:	d001      	beq.n	8002cc0 <edit_mpreg+0x2b0>
 8002cbc:	2431      	movs	r4, #49	; 0x31
 8002cbe:	e000      	b.n	8002cc2 <edit_mpreg+0x2b2>
 8002cc0:	2430      	movs	r4, #48	; 0x30
 8002cc2:	1cfd      	adds	r5, r7, #3
 8002cc4:	782d      	ldrb	r5, [r5, #0]
 8002cc6:	002e      	movs	r6, r5
 8002cc8:	2502      	movs	r5, #2
 8002cca:	4035      	ands	r5, r6
 8002ccc:	d001      	beq.n	8002cd2 <edit_mpreg+0x2c2>
 8002cce:	2531      	movs	r5, #49	; 0x31
 8002cd0:	e000      	b.n	8002cd4 <edit_mpreg+0x2c4>
 8002cd2:	2530      	movs	r5, #48	; 0x30
 8002cd4:	1cfe      	adds	r6, r7, #3
 8002cd6:	7836      	ldrb	r6, [r6, #0]
 8002cd8:	46b0      	mov	r8, r6
 8002cda:	2601      	movs	r6, #1
 8002cdc:	4643      	mov	r3, r8
 8002cde:	4033      	ands	r3, r6
 8002ce0:	1e1e      	subs	r6, r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <edit_mpreg+0x2d8>
 8002ce4:	2631      	movs	r6, #49	; 0x31
 8002ce6:	e000      	b.n	8002cea <edit_mpreg+0x2da>
 8002ce8:	2630      	movs	r6, #48	; 0x30
 8002cea:	2384      	movs	r3, #132	; 0x84
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	469a      	mov	sl, r3
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <edit_mpreg+0x338>)
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	4698      	mov	r8, r3
 8002cfa:	9606      	str	r6, [sp, #24]
 8002cfc:	9505      	str	r5, [sp, #20]
 8002cfe:	9404      	str	r4, [sp, #16]
 8002d00:	9003      	str	r0, [sp, #12]
 8002d02:	9102      	str	r1, [sp, #8]
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	465b      	mov	r3, fp
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4663      	mov	r3, ip
 8002d0c:	4652      	mov	r2, sl
 8002d0e:	4649      	mov	r1, r9
 8002d10:	4640      	mov	r0, r8
 8002d12:	f004 f86f 	bl	8006df4 <siprintf>
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002d16:	1d39      	adds	r1, r7, #4
 8002d18:	4809      	ldr	r0, [pc, #36]	; (8002d40 <edit_mpreg+0x330>)
 8002d1a:	2364      	movs	r3, #100	; 0x64
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	f002 ffed 	bl	8005cfc <HAL_UART_Transmit>
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b023      	add	sp, #140	; 0x8c
 8002d28:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2a:	46bb      	mov	fp, r7
 8002d2c:	46b2      	mov	sl, r6
 8002d2e:	46a9      	mov	r9, r5
 8002d30:	46a0      	mov	r8, r4
 8002d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d34:	2000026c 	.word	0x2000026c
 8002d38:	00000fff 	.word	0x00000fff
 8002d3c:	080095a0 	.word	0x080095a0
 8002d40:	20000304 	.word	0x20000304
 8002d44:	080095c0 	.word	0x080095c0
 8002d48:	080095e4 	.word	0x080095e4

08002d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b098      	sub	sp, #96	; 0x60
 8002d50:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d52:	f000 fcff 	bl	8003754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d56:	f000 f8d1 	bl	8002efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d5a:	f000 f9e7 	bl	800312c <MX_GPIO_Init>
  MX_TIM1_Init();
 8002d5e:	f000 f955 	bl	800300c <MX_TIM1_Init>
  MX_I2C1_Init();
 8002d62:	f000 f913 	bl	8002f8c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002d66:	f000 f9ad 	bl	80030c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8002d6a:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <main+0x188>)
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f002 fce9 	bl	8005744 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */



  //HAL_I2C_Mem_Read(&hi2c1, 75<<1, 0x00, I2C_MEMADD_SIZE_8BIT,&reader, 1, 0xFFF);
  uint8_t writer= 0b11111110;
 8002d72:	2147      	movs	r1, #71	; 0x47
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	22fe      	movs	r2, #254	; 0xfe
 8002d78:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1,75<<1,0x7,I2C_MEMADD_SIZE_8BIT,&writer,1,0xFFF);
 8002d7a:	4857      	ldr	r0, [pc, #348]	; (8002ed8 <main+0x18c>)
 8002d7c:	4b57      	ldr	r3, [pc, #348]	; (8002edc <main+0x190>)
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	2301      	movs	r3, #1
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	000c      	movs	r4, r1
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	2196      	movs	r1, #150	; 0x96
 8002d90:	f001 f872 	bl	8003e78 <HAL_I2C_Mem_Write>
  writer= 0b01001000;
 8002d94:	0021      	movs	r1, r4
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2248      	movs	r2, #72	; 0x48
 8002d9a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1,75<<1,0x0,I2C_MEMADD_SIZE_8BIT,&writer,1,0xFFF);
 8002d9c:	484e      	ldr	r0, [pc, #312]	; (8002ed8 <main+0x18c>)
 8002d9e:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <main+0x190>)
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	2301      	movs	r3, #1
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2301      	movs	r3, #1
 8002dac:	2200      	movs	r2, #0
 8002dae:	2196      	movs	r1, #150	; 0x96
 8002db0:	f001 f862 	bl	8003e78 <HAL_I2C_Mem_Write>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, 1);
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <main+0x194>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	2102      	movs	r1, #2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 ffa9 	bl	8003d12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, 1);
 8002dc0:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <main+0x194>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 ffa3 	bl	8003d12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002dcc:	23a0      	movs	r3, #160	; 0xa0
 8002dce:	05db      	lsls	r3, r3, #23
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 ff9c 	bl	8003d12 <HAL_GPIO_WritePin>
  uint8_t MSG[64] = {"\r\nWelcome to TAD DEBUG\r\n\n\n\n\n"};
 8002dda:	1d39      	adds	r1, r7, #4
 8002ddc:	4a41      	ldr	r2, [pc, #260]	; (8002ee4 <main+0x198>)
 8002dde:	000b      	movs	r3, r1
 8002de0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002de2:	c331      	stmia	r3!, {r0, r4, r5}
 8002de4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002de6:	c331      	stmia	r3!, {r0, r4, r5}
 8002de8:	6810      	ldr	r0, [r2, #0]
 8002dea:	6018      	str	r0, [r3, #0]
 8002dec:	7912      	ldrb	r2, [r2, #4]
 8002dee:	711a      	strb	r2, [r3, #4]
 8002df0:	231d      	movs	r3, #29
 8002df2:	18cb      	adds	r3, r1, r3
 8002df4:	2223      	movs	r2, #35	; 0x23
 8002df6:	2100      	movs	r1, #0
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f003 fb85 	bl	8006508 <memset>
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002dfe:	1d39      	adds	r1, r7, #4
 8002e00:	4839      	ldr	r0, [pc, #228]	; (8002ee8 <main+0x19c>)
 8002e02:	2364      	movs	r3, #100	; 0x64
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	f002 ff79 	bl	8005cfc <HAL_UART_Transmit>
  int globalstate = 3;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  int report_state = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
  while (1)
  {
	  read_keys(report_state);
 8002e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff fc0f 	bl	8002638 <read_keys>
	  if(kb_pushed[0][0] && kb_state[13][4]) globalstate=0;
 8002e1a:	4b34      	ldr	r3, [pc, #208]	; (8002eec <main+0x1a0>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <main+0xe4>
 8002e22:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <main+0x1a4>)
 8002e24:	2245      	movs	r2, #69	; 0x45
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <main+0xe4>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if(kb_pushed[0][1] && kb_state[13][4]) globalstate=1;
 8002e30:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <main+0x1a0>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <main+0xfa>
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <main+0x1a4>)
 8002e3a:	2245      	movs	r2, #69	; 0x45
 8002e3c:	5c9b      	ldrb	r3, [r3, r2]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <main+0xfa>
 8002e42:	2301      	movs	r3, #1
 8002e44:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if(kb_pushed[0][2] && kb_state[13][4]) globalstate=2;
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <main+0x1a0>)
 8002e48:	789b      	ldrb	r3, [r3, #2]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <main+0x110>
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <main+0x1a4>)
 8002e50:	2245      	movs	r2, #69	; 0x45
 8002e52:	5c9b      	ldrb	r3, [r3, r2]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <main+0x110>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if(kb_pushed[0][3] && kb_state[13][4]) globalstate=3;
 8002e5c:	4b23      	ldr	r3, [pc, #140]	; (8002eec <main+0x1a0>)
 8002e5e:	78db      	ldrb	r3, [r3, #3]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <main+0x126>
 8002e64:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <main+0x1a4>)
 8002e66:	2245      	movs	r2, #69	; 0x45
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <main+0x126>
 8002e6e:	2303      	movs	r3, #3
 8002e70:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if(kb_pushed[0][4] && kb_state[13][4]) globalstate=4;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <main+0x1a0>)
 8002e74:	791b      	ldrb	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <main+0x13c>
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <main+0x1a4>)
 8002e7c:	2245      	movs	r2, #69	; 0x45
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <main+0x13c>
 8002e84:	2304      	movs	r3, #4
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
	  switch (globalstate){
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d8c1      	bhi.n	8002e12 <main+0xc6>
 8002e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e90:	009a      	lsls	r2, r3, #2
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <main+0x1a8>)
 8002e94:	18d3      	adds	r3, r2, r3
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	469f      	mov	pc, r3
	  case 0:
		  print_adc();
 8002e9a:	f7ff fced 	bl	8002878 <print_adc>
		  break;
 8002e9e:	e017      	b.n	8002ed0 <main+0x184>
	  case 1:
		  edit_mpreg();
 8002ea0:	f7ff fdb6 	bl	8002a10 <edit_mpreg>
		  break;
 8002ea4:	e014      	b.n	8002ed0 <main+0x184>
	  case 2:
		  if (!report_state) report_state = 1;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <main+0x166>
 8002eac:	2301      	movs	r3, #1
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eb0:	e001      	b.n	8002eb6 <main+0x16a>
		  else report_state = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	64bb      	str	r3, [r7, #72]	; 0x48
		  globalstate = 3;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
		  break;
 8002eba:	e009      	b.n	8002ed0 <main+0x184>
	  case 3:
		  break;
	  case 4:
		  HAL_UART_Transmit(&huart2, "list\n", sizeof("list\n"), 100);
 8002ebc:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <main+0x1ac>)
 8002ebe:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <main+0x19c>)
 8002ec0:	2364      	movs	r3, #100	; 0x64
 8002ec2:	2206      	movs	r2, #6
 8002ec4:	f002 ff1a 	bl	8005cfc <HAL_UART_Transmit>
		  globalstate = 3;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	64fb      	str	r3, [r7, #76]	; 0x4c
	  	  break;
 8002ecc:	e000      	b.n	8002ed0 <main+0x184>
		  break;
 8002ece:	46c0      	nop			; (mov r8, r8)
	  read_keys(report_state);
 8002ed0:	e79f      	b.n	8002e12 <main+0xc6>
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	200002b8 	.word	0x200002b8
 8002ed8:	2000026c 	.word	0x2000026c
 8002edc:	00000fff 	.word	0x00000fff
 8002ee0:	50001400 	.word	0x50001400
 8002ee4:	0800960c 	.word	0x0800960c
 8002ee8:	20000304 	.word	0x20000304
 8002eec:	20000424 	.word	0x20000424
 8002ef0:	20000394 	.word	0x20000394
 8002ef4:	0800978c 	.word	0x0800978c
 8002ef8:	08009604 	.word	0x08009604

08002efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b093      	sub	sp, #76	; 0x4c
 8002f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f02:	2414      	movs	r4, #20
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	0018      	movs	r0, r3
 8002f08:	2334      	movs	r3, #52	; 0x34
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f003 fafb 	bl	8006508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	0018      	movs	r0, r3
 8002f16:	2310      	movs	r3, #16
 8002f18:	001a      	movs	r2, r3
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	f003 faf4 	bl	8006508 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	0018      	movs	r0, r3
 8002f26:	f001 fd89 	bl	8004a3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f2a:	193b      	adds	r3, r7, r4
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	2280      	movs	r2, #128	; 0x80
 8002f34:	0052      	lsls	r2, r2, #1
 8002f36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f3e:	193b      	adds	r3, r7, r4
 8002f40:	2240      	movs	r2, #64	; 0x40
 8002f42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f001 fdc1 	bl	8004ad4 <HAL_RCC_OscConfig>
 8002f52:	1e03      	subs	r3, r0, #0
 8002f54:	d001      	beq.n	8002f5a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002f56:	f000 fa03 	bl	8003360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	2200      	movs	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2100      	movs	r1, #0
 8002f76:	0018      	movs	r0, r3
 8002f78:	f002 f8bc 	bl	80050f4 <HAL_RCC_ClockConfig>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002f80:	f000 f9ee 	bl	8003360 <Error_Handler>
  }
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b013      	add	sp, #76	; 0x4c
 8002f8a:	bd90      	pop	{r4, r7, pc}

08002f8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <MX_I2C1_Init+0x74>)
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <MX_I2C1_Init+0x78>)
 8002f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <MX_I2C1_Init+0x74>)
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <MX_I2C1_Init+0x7c>)
 8002f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <MX_I2C1_Init+0x74>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <MX_I2C1_Init+0x74>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <MX_I2C1_Init+0x74>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fae:	4b14      	ldr	r3, [pc, #80]	; (8003000 <MX_I2C1_Init+0x74>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <MX_I2C1_Init+0x74>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <MX_I2C1_Init+0x74>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <MX_I2C1_Init+0x74>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_I2C1_Init+0x74>)
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 febf 	bl	8003d4c <HAL_I2C_Init>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002fd2:	f000 f9c5 	bl	8003360 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <MX_I2C1_Init+0x74>)
 8002fd8:	2100      	movs	r1, #0
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f001 fc96 	bl	800490c <HAL_I2CEx_ConfigAnalogFilter>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002fe4:	f000 f9bc 	bl	8003360 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <MX_I2C1_Init+0x74>)
 8002fea:	2100      	movs	r1, #0
 8002fec:	0018      	movs	r0, r3
 8002fee:	f001 fcd9 	bl	80049a4 <HAL_I2CEx_ConfigDigitalFilter>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ff6:	f000 f9b3 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	2000026c 	.word	0x2000026c
 8003004:	40005400 	.word	0x40005400
 8003008:	00303d5b 	.word	0x00303d5b

0800300c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003012:	2310      	movs	r3, #16
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	0018      	movs	r0, r3
 8003018:	2310      	movs	r3, #16
 800301a:	001a      	movs	r2, r3
 800301c:	2100      	movs	r1, #0
 800301e:	f003 fa73 	bl	8006508 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	0018      	movs	r0, r3
 8003026:	230c      	movs	r3, #12
 8003028:	001a      	movs	r2, r3
 800302a:	2100      	movs	r1, #0
 800302c:	f003 fa6c 	bl	8006508 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <MX_TIM1_Init+0xac>)
 8003032:	4a22      	ldr	r2, [pc, #136]	; (80030bc <MX_TIM1_Init+0xb0>)
 8003034:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <MX_TIM1_Init+0xac>)
 8003038:	2200      	movs	r2, #0
 800303a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <MX_TIM1_Init+0xac>)
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_TIM1_Init+0xac>)
 8003044:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <MX_TIM1_Init+0xb4>)
 8003046:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <MX_TIM1_Init+0xac>)
 800304a:	2200      	movs	r2, #0
 800304c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <MX_TIM1_Init+0xac>)
 8003050:	2200      	movs	r2, #0
 8003052:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <MX_TIM1_Init+0xac>)
 8003056:	2200      	movs	r2, #0
 8003058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <MX_TIM1_Init+0xac>)
 800305c:	0018      	movs	r0, r3
 800305e:	f002 fb19 	bl	8005694 <HAL_TIM_Base_Init>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d001      	beq.n	800306a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003066:	f000 f97b 	bl	8003360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800306a:	2110      	movs	r1, #16
 800306c:	187b      	adds	r3, r7, r1
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	0152      	lsls	r2, r2, #5
 8003072:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003074:	187a      	adds	r2, r7, r1
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <MX_TIM1_Init+0xac>)
 8003078:	0011      	movs	r1, r2
 800307a:	0018      	movs	r0, r3
 800307c:	f002 fba8 	bl	80057d0 <HAL_TIM_ConfigClockSource>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003084:	f000 f96c 	bl	8003360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003088:	1d3b      	adds	r3, r7, #4
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2200      	movs	r2, #0
 8003092:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800309a:	1d3a      	adds	r2, r7, #4
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_TIM1_Init+0xac>)
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f002 fd73 	bl	8005b8c <HAL_TIMEx_MasterConfigSynchronization>
 80030a6:	1e03      	subs	r3, r0, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80030aa:	f000 f959 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b008      	add	sp, #32
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	200002b8 	.word	0x200002b8
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	0000ffff 	.word	0x0000ffff

080030c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <MX_USART2_UART_Init+0x64>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030d0:	2296      	movs	r2, #150	; 0x96
 80030d2:	0152      	lsls	r2, r2, #5
 80030d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030ea:	220c      	movs	r2, #12
 80030ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <MX_USART2_UART_Init+0x60>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <MX_USART2_UART_Init+0x60>)
 8003102:	2200      	movs	r2, #0
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <MX_USART2_UART_Init+0x60>)
 8003108:	2200      	movs	r2, #0
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <MX_USART2_UART_Init+0x60>)
 800310e:	0018      	movs	r0, r3
 8003110:	f002 fd9e 	bl	8005c50 <HAL_UART_Init>
 8003114:	1e03      	subs	r3, r0, #0
 8003116:	d001      	beq.n	800311c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003118:	f000 f922 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000304 	.word	0x20000304
 8003128:	40004400 	.word	0x40004400

0800312c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b08b      	sub	sp, #44	; 0x2c
 8003130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003132:	2414      	movs	r4, #20
 8003134:	193b      	adds	r3, r7, r4
 8003136:	0018      	movs	r0, r3
 8003138:	2314      	movs	r3, #20
 800313a:	001a      	movs	r2, r3
 800313c:	2100      	movs	r1, #0
 800313e:	f003 f9e3 	bl	8006508 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003142:	4b81      	ldr	r3, [pc, #516]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003146:	4b80      	ldr	r3, [pc, #512]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003148:	2104      	movs	r1, #4
 800314a:	430a      	orrs	r2, r1
 800314c:	635a      	str	r2, [r3, #52]	; 0x34
 800314e:	4b7e      	ldr	r3, [pc, #504]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	2204      	movs	r2, #4
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800315a:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <MX_GPIO_Init+0x21c>)
 800315c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315e:	4b7a      	ldr	r3, [pc, #488]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003160:	2120      	movs	r1, #32
 8003162:	430a      	orrs	r2, r1
 8003164:	635a      	str	r2, [r3, #52]	; 0x34
 8003166:	4b78      	ldr	r3, [pc, #480]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	2220      	movs	r2, #32
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	4b75      	ldr	r3, [pc, #468]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003176:	4b74      	ldr	r3, [pc, #464]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003178:	2101      	movs	r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	635a      	str	r2, [r3, #52]	; 0x34
 800317e:	4b72      	ldr	r3, [pc, #456]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <MX_GPIO_Init+0x21c>)
 800318c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318e:	4b6e      	ldr	r3, [pc, #440]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003190:	2102      	movs	r1, #2
 8003192:	430a      	orrs	r2, r1
 8003194:	635a      	str	r2, [r3, #52]	; 0x34
 8003196:	4b6c      	ldr	r3, [pc, #432]	; (8003348 <MX_GPIO_Init+0x21c>)
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	2202      	movs	r2, #2
 800319c:	4013      	ands	r3, r2
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a2:	4b69      	ldr	r3, [pc, #420]	; (8003348 <MX_GPIO_Init+0x21c>)
 80031a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a6:	4b68      	ldr	r3, [pc, #416]	; (8003348 <MX_GPIO_Init+0x21c>)
 80031a8:	2108      	movs	r1, #8
 80031aa:	430a      	orrs	r2, r1
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34
 80031ae:	4b66      	ldr	r3, [pc, #408]	; (8003348 <MX_GPIO_Init+0x21c>)
 80031b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b2:	2208      	movs	r2, #8
 80031b4:	4013      	ands	r3, r2
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, col12_Pin|col13_Pin, GPIO_PIN_RESET);
 80031ba:	23c0      	movs	r3, #192	; 0xc0
 80031bc:	01db      	lsls	r3, r3, #7
 80031be:	4863      	ldr	r0, [pc, #396]	; (800334c <MX_GPIO_Init+0x220>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	0019      	movs	r1, r3
 80031c4:	f000 fda5 	bl	8003d12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80031c8:	4b61      	ldr	r3, [pc, #388]	; (8003350 <MX_GPIO_Init+0x224>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	2103      	movs	r1, #3
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 fd9f 	bl	8003d12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_6|col0_Pin, GPIO_PIN_RESET);
 80031d4:	495f      	ldr	r1, [pc, #380]	; (8003354 <MX_GPIO_Init+0x228>)
 80031d6:	23a0      	movs	r3, #160	; 0xa0
 80031d8:	05db      	lsls	r3, r3, #23
 80031da:	2200      	movs	r2, #0
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 fd98 	bl	8003d12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, col1_Pin|col2_Pin|col3_Pin|col4_Pin, GPIO_PIN_RESET);
 80031e2:	4b5d      	ldr	r3, [pc, #372]	; (8003358 <MX_GPIO_Init+0x22c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	210f      	movs	r1, #15
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 fd92 	bl	8003d12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, col5_Pin|col6_Pin|col7_Pin|col8_Pin
 80031ee:	23fe      	movs	r3, #254	; 0xfe
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	485a      	ldr	r0, [pc, #360]	; (800335c <MX_GPIO_Init+0x230>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	0019      	movs	r1, r3
 80031f8:	f000 fd8b 	bl	8003d12 <HAL_GPIO_WritePin>
                          |col9_Pin|col10_Pin|col11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : col12_Pin col13_Pin */
  GPIO_InitStruct.Pin = col12_Pin|col13_Pin;
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	22c0      	movs	r2, #192	; 0xc0
 8003200:	01d2      	lsls	r2, r2, #7
 8003202:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003204:	193b      	adds	r3, r7, r4
 8003206:	2201      	movs	r2, #1
 8003208:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	193b      	adds	r3, r7, r4
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	193b      	adds	r3, r7, r4
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003216:	193b      	adds	r3, r7, r4
 8003218:	4a4c      	ldr	r2, [pc, #304]	; (800334c <MX_GPIO_Init+0x220>)
 800321a:	0019      	movs	r1, r3
 800321c:	0010      	movs	r0, r2
 800321e:	f000 fbf7 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003222:	193b      	adds	r3, r7, r4
 8003224:	2203      	movs	r2, #3
 8003226:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003228:	193b      	adds	r3, r7, r4
 800322a:	2201      	movs	r2, #1
 800322c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	193b      	adds	r3, r7, r4
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	193b      	adds	r3, r7, r4
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800323a:	193b      	adds	r3, r7, r4
 800323c:	4a44      	ldr	r2, [pc, #272]	; (8003350 <MX_GPIO_Init+0x224>)
 800323e:	0019      	movs	r1, r3
 8003240:	0010      	movs	r0, r2
 8003242:	f000 fbe5 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 col0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|col0_Pin;
 8003246:	193b      	adds	r3, r7, r4
 8003248:	4a42      	ldr	r2, [pc, #264]	; (8003354 <MX_GPIO_Init+0x228>)
 800324a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324c:	193b      	adds	r3, r7, r4
 800324e:	2201      	movs	r2, #1
 8003250:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	193b      	adds	r3, r7, r4
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	193b      	adds	r3, r7, r4
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325e:	193a      	adds	r2, r7, r4
 8003260:	23a0      	movs	r3, #160	; 0xa0
 8003262:	05db      	lsls	r3, r3, #23
 8003264:	0011      	movs	r1, r2
 8003266:	0018      	movs	r0, r3
 8003268:	f000 fbd2 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800326c:	193b      	adds	r3, r7, r4
 800326e:	2210      	movs	r2, #16
 8003270:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003272:	193b      	adds	r3, r7, r4
 8003274:	2203      	movs	r2, #3
 8003276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	193b      	adds	r3, r7, r4
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	193a      	adds	r2, r7, r4
 8003280:	23a0      	movs	r3, #160	; 0xa0
 8003282:	05db      	lsls	r3, r3, #23
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f000 fbc2 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800328c:	193b      	adds	r3, r7, r4
 800328e:	2220      	movs	r2, #32
 8003290:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003292:	193b      	adds	r3, r7, r4
 8003294:	2200      	movs	r2, #0
 8003296:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003298:	193b      	adds	r3, r7, r4
 800329a:	2201      	movs	r2, #1
 800329c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329e:	193a      	adds	r2, r7, r4
 80032a0:	23a0      	movs	r3, #160	; 0xa0
 80032a2:	05db      	lsls	r3, r3, #23
 80032a4:	0011      	movs	r1, r2
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 fbb2 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : row0_Pin row1_Pin row2_Pin row3_Pin */
  GPIO_InitStruct.Pin = row0_Pin|row1_Pin|row2_Pin|row3_Pin;
 80032ac:	0021      	movs	r1, r4
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	22f0      	movs	r2, #240	; 0xf0
 80032b2:	0212      	lsls	r2, r2, #8
 80032b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b6:	000c      	movs	r4, r1
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	2200      	movs	r2, #0
 80032bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	2202      	movs	r2, #2
 80032c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	4a25      	ldr	r2, [pc, #148]	; (800335c <MX_GPIO_Init+0x230>)
 80032c8:	0019      	movs	r1, r3
 80032ca:	0010      	movs	r0, r2
 80032cc:	f000 fba0 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : row4_Pin */
  GPIO_InitStruct.Pin = row4_Pin;
 80032d0:	193b      	adds	r3, r7, r4
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	0052      	lsls	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d8:	193b      	adds	r3, r7, r4
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	2202      	movs	r2, #2
 80032e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(row4_GPIO_Port, &GPIO_InitStruct);
 80032e4:	193a      	adds	r2, r7, r4
 80032e6:	23a0      	movs	r3, #160	; 0xa0
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 fb8f 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : col1_Pin col2_Pin col3_Pin col4_Pin */
  GPIO_InitStruct.Pin = col1_Pin|col2_Pin|col3_Pin|col4_Pin;
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	220f      	movs	r2, #15
 80032f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	2201      	movs	r2, #1
 80032fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	193b      	adds	r3, r7, r4
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800330a:	193b      	adds	r3, r7, r4
 800330c:	4a12      	ldr	r2, [pc, #72]	; (8003358 <MX_GPIO_Init+0x22c>)
 800330e:	0019      	movs	r1, r3
 8003310:	0010      	movs	r0, r2
 8003312:	f000 fb7d 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : col5_Pin col6_Pin col7_Pin col8_Pin
                           col9_Pin col10_Pin col11_Pin */
  GPIO_InitStruct.Pin = col5_Pin|col6_Pin|col7_Pin|col8_Pin
 8003316:	0021      	movs	r1, r4
 8003318:	187b      	adds	r3, r7, r1
 800331a:	22fe      	movs	r2, #254	; 0xfe
 800331c:	0092      	lsls	r2, r2, #2
 800331e:	601a      	str	r2, [r3, #0]
                          |col9_Pin|col10_Pin|col11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003320:	187b      	adds	r3, r7, r1
 8003322:	2201      	movs	r2, #1
 8003324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	187b      	adds	r3, r7, r1
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	187b      	adds	r3, r7, r1
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003332:	187b      	adds	r3, r7, r1
 8003334:	4a09      	ldr	r2, [pc, #36]	; (800335c <MX_GPIO_Init+0x230>)
 8003336:	0019      	movs	r1, r3
 8003338:	0010      	movs	r0, r2
 800333a:	f000 fb69 	bl	8003a10 <HAL_GPIO_Init>

}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b00b      	add	sp, #44	; 0x2c
 8003344:	bd90      	pop	{r4, r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	40021000 	.word	0x40021000
 800334c:	50000800 	.word	0x50000800
 8003350:	50001400 	.word	0x50001400
 8003354:	00008042 	.word	0x00008042
 8003358:	50000c00 	.word	0x50000c00
 800335c:	50000400 	.word	0x50000400

08003360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003364:	b672      	cpsid	i
}
 8003366:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003368:	e7fe      	b.n	8003368 <Error_Handler+0x8>
	...

0800336c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_MspInit+0x44>)
 8003374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_MspInit+0x44>)
 8003378:	2101      	movs	r1, #1
 800337a:	430a      	orrs	r2, r1
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_MspInit+0x44>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2201      	movs	r2, #1
 8003384:	4013      	ands	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_MspInit+0x44>)
 800338c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_MspInit+0x44>)
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	0549      	lsls	r1, r1, #21
 8003394:	430a      	orrs	r2, r1
 8003396:	63da      	str	r2, [r3, #60]	; 0x3c
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_MspInit+0x44>)
 800339a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	055b      	lsls	r3, r3, #21
 80033a0:	4013      	ands	r3, r2
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b091      	sub	sp, #68	; 0x44
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	232c      	movs	r3, #44	; 0x2c
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	0018      	movs	r0, r3
 80033c2:	2314      	movs	r3, #20
 80033c4:	001a      	movs	r2, r3
 80033c6:	2100      	movs	r1, #0
 80033c8:	f003 f89e 	bl	8006508 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033cc:	2414      	movs	r4, #20
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	0018      	movs	r0, r3
 80033d2:	2318      	movs	r3, #24
 80033d4:	001a      	movs	r2, r3
 80033d6:	2100      	movs	r1, #0
 80033d8:	f003 f896 	bl	8006508 <memset>
  if(hi2c->Instance==I2C1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a23      	ldr	r2, [pc, #140]	; (8003470 <HAL_I2C_MspInit+0xbc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d13f      	bne.n	8003466 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033e6:	193b      	adds	r3, r7, r4
 80033e8:	2220      	movs	r2, #32
 80033ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033ec:	193b      	adds	r3, r7, r4
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	0018      	movs	r0, r3
 80033f6:	f002 f827 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80033fe:	f7ff ffaf 	bl	8003360 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_I2C_MspInit+0xc0>)
 8003404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_I2C_MspInit+0xc0>)
 8003408:	2101      	movs	r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	635a      	str	r2, [r3, #52]	; 0x34
 800340e:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_I2C_MspInit+0xc0>)
 8003410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	187b      	adds	r3, r7, r1
 800341e:	22c0      	movs	r2, #192	; 0xc0
 8003420:	00d2      	lsls	r2, r2, #3
 8003422:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003424:	187b      	adds	r3, r7, r1
 8003426:	2212      	movs	r2, #18
 8003428:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2201      	movs	r2, #1
 800342e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2206      	movs	r2, #6
 800343a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	187a      	adds	r2, r7, r1
 800343e:	23a0      	movs	r3, #160	; 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f000 fae3 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_I2C_MspInit+0xc0>)
 800344c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_I2C_MspInit+0xc0>)
 8003450:	2180      	movs	r1, #128	; 0x80
 8003452:	0389      	lsls	r1, r1, #14
 8003454:	430a      	orrs	r2, r1
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_I2C_MspInit+0xc0>)
 800345a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	039b      	lsls	r3, r3, #14
 8003460:	4013      	ands	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b011      	add	sp, #68	; 0x44
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	40005400 	.word	0x40005400
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_TIM_Base_MspInit+0x38>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10d      	bne.n	80034a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_TIM_Base_MspInit+0x3c>)
 800348c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_TIM_Base_MspInit+0x3c>)
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	0109      	lsls	r1, r1, #4
 8003494:	430a      	orrs	r2, r1
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_TIM_Base_MspInit+0x3c>)
 800349a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b08b      	sub	sp, #44	; 0x2c
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	2414      	movs	r4, #20
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	0018      	movs	r0, r3
 80034c6:	2314      	movs	r3, #20
 80034c8:	001a      	movs	r2, r3
 80034ca:	2100      	movs	r1, #0
 80034cc:	f003 f81c 	bl	8006508 <memset>
  if(huart->Instance==USART2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_UART_MspInit+0x8c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d130      	bne.n	800353c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_UART_MspInit+0x90>)
 80034dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_UART_MspInit+0x90>)
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	0289      	lsls	r1, r1, #10
 80034e4:	430a      	orrs	r2, r1
 80034e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_UART_MspInit+0x90>)
 80034ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	029b      	lsls	r3, r3, #10
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HAL_UART_MspInit+0x90>)
 80034f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HAL_UART_MspInit+0x90>)
 80034fc:	2101      	movs	r1, #1
 80034fe:	430a      	orrs	r2, r1
 8003500:	635a      	str	r2, [r3, #52]	; 0x34
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_UART_MspInit+0x90>)
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	2201      	movs	r2, #1
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800350e:	0021      	movs	r1, r4
 8003510:	187b      	adds	r3, r7, r1
 8003512:	220c      	movs	r2, #12
 8003514:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2202      	movs	r2, #2
 800351a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	187b      	adds	r3, r7, r1
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003528:	187b      	adds	r3, r7, r1
 800352a:	2201      	movs	r2, #1
 800352c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352e:	187a      	adds	r2, r7, r1
 8003530:	23a0      	movs	r3, #160	; 0xa0
 8003532:	05db      	lsls	r3, r3, #23
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f000 fa6a 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b00b      	add	sp, #44	; 0x2c
 8003542:	bd90      	pop	{r4, r7, pc}
 8003544:	40004400 	.word	0x40004400
 8003548:	40021000 	.word	0x40021000

0800354c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003550:	e7fe      	b.n	8003550 <NMI_Handler+0x4>

08003552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003556:	e7fe      	b.n	8003556 <HardFault_Handler+0x4>

08003558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003570:	f000 f95a 	bl	8003828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	af00      	add	r7, sp, #0
	return 1;
 800357e:	2301      	movs	r3, #1
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_kill>:

int _kill(int pid, int sig)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003590:	f002 ff90 	bl	80064b4 <__errno>
 8003594:	0003      	movs	r3, r0
 8003596:	2216      	movs	r2, #22
 8003598:	601a      	str	r2, [r3, #0]
	return -1;
 800359a:	2301      	movs	r3, #1
 800359c:	425b      	negs	r3, r3
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_exit>:

void _exit (int status)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035ae:	2301      	movs	r3, #1
 80035b0:	425a      	negs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0011      	movs	r1, r2
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7ff ffe5 	bl	8003586 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035bc:	e7fe      	b.n	80035bc <_exit+0x16>

080035be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e00a      	b.n	80035e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035d0:	e000      	b.n	80035d4 <_read+0x16>
 80035d2:	bf00      	nop
 80035d4:	0001      	movs	r1, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	60ba      	str	r2, [r7, #8]
 80035dc:	b2ca      	uxtb	r2, r1
 80035de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3301      	adds	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	dbf0      	blt.n	80035d0 <_read+0x12>
	}

return len;
 80035ee:	687b      	ldr	r3, [r7, #4]
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b006      	add	sp, #24
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	e009      	b.n	800361e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	60ba      	str	r2, [r7, #8]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	0018      	movs	r0, r3
 8003614:	e000      	b.n	8003618 <_write+0x20>
 8003616:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	dbf1      	blt.n	800360a <_write+0x12>
	}
	return len;
 8003626:	687b      	ldr	r3, [r7, #4]
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b006      	add	sp, #24
 800362e:	bd80      	pop	{r7, pc}

08003630 <_close>:

int _close(int file)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	return -1;
 8003638:	2301      	movs	r3, #1
 800363a:	425b      	negs	r3, r3
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	0192      	lsls	r2, r2, #6
 8003654:	605a      	str	r2, [r3, #4]
	return 0;
 8003656:	2300      	movs	r3, #0
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}

08003660 <_isatty>:

int _isatty(int file)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	return 1;
 8003668:	2301      	movs	r3, #1
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b002      	add	sp, #8
 8003670:	bd80      	pop	{r7, pc}

08003672 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
	return 0;
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bd80      	pop	{r7, pc}

08003688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <_sbrk+0x5c>)
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <_sbrk+0x60>)
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800369c:	4b13      	ldr	r3, [pc, #76]	; (80036ec <_sbrk+0x64>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <_sbrk+0x64>)
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <_sbrk+0x68>)
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <_sbrk+0x64>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d207      	bcs.n	80036c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b8:	f002 fefc 	bl	80064b4 <__errno>
 80036bc:	0003      	movs	r3, r0
 80036be:	220c      	movs	r2, #12
 80036c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	425b      	negs	r3, r3
 80036c6:	e009      	b.n	80036dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <_sbrk+0x64>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ce:	4b07      	ldr	r3, [pc, #28]	; (80036ec <_sbrk+0x64>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	18d2      	adds	r2, r2, r3
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <_sbrk+0x64>)
 80036d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b006      	add	sp, #24
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20002000 	.word	0x20002000
 80036e8:	00000400 	.word	0x00000400
 80036ec:	200004b4 	.word	0x200004b4
 80036f0:	200004d0 	.word	0x200004d0

080036f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003700:	480d      	ldr	r0, [pc, #52]	; (8003738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003702:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003704:	f7ff fff6 	bl	80036f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003708:	480c      	ldr	r0, [pc, #48]	; (800373c <LoopForever+0x6>)
  ldr r1, =_edata
 800370a:	490d      	ldr	r1, [pc, #52]	; (8003740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800370c:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <LoopForever+0xe>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003710:	e002      	b.n	8003718 <LoopCopyDataInit>

08003712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003716:	3304      	adds	r3, #4

08003718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800371c:	d3f9      	bcc.n	8003712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003720:	4c0a      	ldr	r4, [pc, #40]	; (800374c <LoopForever+0x16>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003724:	e001      	b.n	800372a <LoopFillZerobss>

08003726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003728:	3204      	adds	r2, #4

0800372a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800372c:	d3fb      	bcc.n	8003726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800372e:	f002 fec7 	bl	80064c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003732:	f7ff fb0b 	bl	8002d4c <main>

08003736 <LoopForever>:

LoopForever:
  b LoopForever
 8003736:	e7fe      	b.n	8003736 <LoopForever>
  ldr   r0, =_estack
 8003738:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800373c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003740:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8003744:	08009bfc 	.word	0x08009bfc
  ldr r2, =_sbss
 8003748:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800374c:	200004cc 	.word	0x200004cc

08003750 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003750:	e7fe      	b.n	8003750 <ADC1_IRQHandler>
	...

08003754 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_Init+0x3c>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_Init+0x3c>)
 8003766:	2180      	movs	r1, #128	; 0x80
 8003768:	0049      	lsls	r1, r1, #1
 800376a:	430a      	orrs	r2, r1
 800376c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800376e:	2003      	movs	r0, #3
 8003770:	f000 f810 	bl	8003794 <HAL_InitTick>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d003      	beq.n	8003780 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e001      	b.n	8003784 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003780:	f7ff fdf4 	bl	800336c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40022000 	.word	0x40022000

08003794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800379c:	230f      	movs	r3, #15
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_InitTick+0x88>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02b      	beq.n	8003804 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_InitTick+0x8c>)
 80037ae:	681c      	ldr	r4, [r3, #0]
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <HAL_InitTick+0x88>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	0019      	movs	r1, r3
 80037b6:	23fa      	movs	r3, #250	; 0xfa
 80037b8:	0098      	lsls	r0, r3, #2
 80037ba:	f7fc fcbd 	bl	8000138 <__udivsi3>
 80037be:	0003      	movs	r3, r0
 80037c0:	0019      	movs	r1, r3
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fc fcb8 	bl	8000138 <__udivsi3>
 80037c8:	0003      	movs	r3, r0
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f913 	bl	80039f6 <HAL_SYSTICK_Config>
 80037d0:	1e03      	subs	r3, r0, #0
 80037d2:	d112      	bne.n	80037fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d80a      	bhi.n	80037f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	2301      	movs	r3, #1
 80037de:	425b      	negs	r3, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f8f2 	bl	80039cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_InitTick+0x90>)
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e00d      	b.n	800380c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80037f0:	230f      	movs	r3, #15
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e008      	b.n	800380c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037fa:	230f      	movs	r3, #15
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e003      	b.n	800380c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003804:	230f      	movs	r3, #15
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800380c:	230f      	movs	r3, #15
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	781b      	ldrb	r3, [r3, #0]
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b005      	add	sp, #20
 8003818:	bd90      	pop	{r4, r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	2000007c 	.word	0x2000007c
 8003820:	20000074 	.word	0x20000074
 8003824:	20000078 	.word	0x20000078

08003828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_IncTick+0x1c>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	001a      	movs	r2, r3
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_IncTick+0x20>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	18d2      	adds	r2, r2, r3
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <HAL_IncTick+0x20>)
 800383a:	601a      	str	r2, [r3, #0]
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	2000007c 	.word	0x2000007c
 8003848:	200004b8 	.word	0x200004b8

0800384c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  return uwTick;
 8003850:	4b02      	ldr	r3, [pc, #8]	; (800385c <HAL_GetTick+0x10>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	200004b8 	.word	0x200004b8

08003860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7ff fff0 	bl	800384c <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	d005      	beq.n	8003886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_Delay+0x44>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	001a      	movs	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	189b      	adds	r3, r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	f7ff ffe0 	bl	800384c <HAL_GetTick>
 800388c:	0002      	movs	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d8f7      	bhi.n	8003888 <HAL_Delay+0x28>
  {
  }
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	2000007c 	.word	0x2000007c

080038a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	0002      	movs	r2, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	1dfb      	adds	r3, r7, #7
 80038b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b7f      	cmp	r3, #127	; 0x7f
 80038bc:	d828      	bhi.n	8003910 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038be:	4a2f      	ldr	r2, [pc, #188]	; (800397c <__NVIC_SetPriority+0xd4>)
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	33c0      	adds	r3, #192	; 0xc0
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	589b      	ldr	r3, [r3, r2]
 80038ce:	1dfa      	adds	r2, r7, #7
 80038d0:	7812      	ldrb	r2, [r2, #0]
 80038d2:	0011      	movs	r1, r2
 80038d4:	2203      	movs	r2, #3
 80038d6:	400a      	ands	r2, r1
 80038d8:	00d2      	lsls	r2, r2, #3
 80038da:	21ff      	movs	r1, #255	; 0xff
 80038dc:	4091      	lsls	r1, r2
 80038de:	000a      	movs	r2, r1
 80038e0:	43d2      	mvns	r2, r2
 80038e2:	401a      	ands	r2, r3
 80038e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	22ff      	movs	r2, #255	; 0xff
 80038ec:	401a      	ands	r2, r3
 80038ee:	1dfb      	adds	r3, r7, #7
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	0018      	movs	r0, r3
 80038f4:	2303      	movs	r3, #3
 80038f6:	4003      	ands	r3, r0
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038fc:	481f      	ldr	r0, [pc, #124]	; (800397c <__NVIC_SetPriority+0xd4>)
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b25b      	sxtb	r3, r3
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	430a      	orrs	r2, r1
 8003908:	33c0      	adds	r3, #192	; 0xc0
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800390e:	e031      	b.n	8003974 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003910:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <__NVIC_SetPriority+0xd8>)
 8003912:	1dfb      	adds	r3, r7, #7
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	0019      	movs	r1, r3
 8003918:	230f      	movs	r3, #15
 800391a:	400b      	ands	r3, r1
 800391c:	3b08      	subs	r3, #8
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3306      	adds	r3, #6
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	18d3      	adds	r3, r2, r3
 8003926:	3304      	adds	r3, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	1dfa      	adds	r2, r7, #7
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	0011      	movs	r1, r2
 8003930:	2203      	movs	r2, #3
 8003932:	400a      	ands	r2, r1
 8003934:	00d2      	lsls	r2, r2, #3
 8003936:	21ff      	movs	r1, #255	; 0xff
 8003938:	4091      	lsls	r1, r2
 800393a:	000a      	movs	r2, r1
 800393c:	43d2      	mvns	r2, r2
 800393e:	401a      	ands	r2, r3
 8003940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	22ff      	movs	r2, #255	; 0xff
 8003948:	401a      	ands	r2, r3
 800394a:	1dfb      	adds	r3, r7, #7
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	0018      	movs	r0, r3
 8003950:	2303      	movs	r3, #3
 8003952:	4003      	ands	r3, r0
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003958:	4809      	ldr	r0, [pc, #36]	; (8003980 <__NVIC_SetPriority+0xd8>)
 800395a:	1dfb      	adds	r3, r7, #7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	001c      	movs	r4, r3
 8003960:	230f      	movs	r3, #15
 8003962:	4023      	ands	r3, r4
 8003964:	3b08      	subs	r3, #8
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	430a      	orrs	r2, r1
 800396a:	3306      	adds	r3, #6
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	18c3      	adds	r3, r0, r3
 8003970:	3304      	adds	r3, #4
 8003972:	601a      	str	r2, [r3, #0]
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b003      	add	sp, #12
 800397a:	bd90      	pop	{r4, r7, pc}
 800397c:	e000e100 	.word	0xe000e100
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	1e5a      	subs	r2, r3, #1
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	045b      	lsls	r3, r3, #17
 8003994:	429a      	cmp	r2, r3
 8003996:	d301      	bcc.n	800399c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003998:	2301      	movs	r3, #1
 800399a:	e010      	b.n	80039be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <SysTick_Config+0x44>)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	3a01      	subs	r2, #1
 80039a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a4:	2301      	movs	r3, #1
 80039a6:	425b      	negs	r3, r3
 80039a8:	2103      	movs	r1, #3
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7ff ff7c 	bl	80038a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <SysTick_Config+0x44>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <SysTick_Config+0x44>)
 80039b8:	2207      	movs	r2, #7
 80039ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039bc:	2300      	movs	r3, #0
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b002      	add	sp, #8
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	e000e010 	.word	0xe000e010

080039cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	210f      	movs	r1, #15
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	1c02      	adds	r2, r0, #0
 80039dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	0011      	movs	r1, r2
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff ff5d 	bl	80038a8 <__NVIC_SetPriority>
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b004      	add	sp, #16
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff ffbf 	bl	8003984 <SysTick_Config>
 8003a06:	0003      	movs	r3, r0
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a1e:	e147      	b.n	8003cb0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2101      	movs	r1, #1
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4091      	lsls	r1, r2
 8003a2a:	000a      	movs	r2, r1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d100      	bne.n	8003a38 <HAL_GPIO_Init+0x28>
 8003a36:	e138      	b.n	8003caa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d005      	beq.n	8003a50 <HAL_GPIO_Init+0x40>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d130      	bne.n	8003ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	0013      	movs	r3, r2
 8003a60:	43da      	mvns	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	409a      	lsls	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a86:	2201      	movs	r2, #1
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	0013      	movs	r3, r2
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	0013      	movs	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d017      	beq.n	8003aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	2203      	movs	r2, #3
 8003aca:	409a      	lsls	r2, r3
 8003acc:	0013      	movs	r3, r2
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2203      	movs	r2, #3
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d123      	bne.n	8003b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	58d3      	ldr	r3, [r2, r3]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	409a      	lsls	r2, r3
 8003b14:	0013      	movs	r3, r2
 8003b16:	43da      	mvns	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2107      	movs	r1, #7
 8003b26:	400b      	ands	r3, r1
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	08da      	lsrs	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3208      	adds	r2, #8
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	6939      	ldr	r1, [r7, #16]
 8003b40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	0013      	movs	r3, r2
 8003b52:	43da      	mvns	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	401a      	ands	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	0013      	movs	r3, r2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	23c0      	movs	r3, #192	; 0xc0
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d100      	bne.n	8003b84 <HAL_GPIO_Init+0x174>
 8003b82:	e092      	b.n	8003caa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b84:	4a50      	ldr	r2, [pc, #320]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	589b      	ldr	r3, [r3, r2]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2203      	movs	r2, #3
 8003b96:	4013      	ands	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	0013      	movs	r3, r2
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	23a0      	movs	r3, #160	; 0xa0
 8003bac:	05db      	lsls	r3, r3, #23
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x1ca>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a45      	ldr	r2, [pc, #276]	; (8003ccc <HAL_GPIO_Init+0x2bc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x1c6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a44      	ldr	r2, [pc, #272]	; (8003cd0 <HAL_GPIO_Init+0x2c0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x1c2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a43      	ldr	r2, [pc, #268]	; (8003cd4 <HAL_GPIO_Init+0x2c4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x1be>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e006      	b.n	8003bdc <HAL_GPIO_Init+0x1cc>
 8003bce:	2305      	movs	r3, #5
 8003bd0:	e004      	b.n	8003bdc <HAL_GPIO_Init+0x1cc>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e002      	b.n	8003bdc <HAL_GPIO_Init+0x1cc>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_GPIO_Init+0x1cc>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	2103      	movs	r1, #3
 8003be0:	400a      	ands	r2, r1
 8003be2:	00d2      	lsls	r2, r2, #3
 8003be4:	4093      	lsls	r3, r2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003bec:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bfa:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	43da      	mvns	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	035b      	lsls	r3, r3, #13
 8003c12:	4013      	ands	r3, r2
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	039b      	lsls	r3, r3, #14
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c4e:	4a1e      	ldr	r2, [pc, #120]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c50:	2384      	movs	r3, #132	; 0x84
 8003c52:	58d3      	ldr	r3, [r2, r3]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	43da      	mvns	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	029b      	lsls	r3, r3, #10
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c74:	4914      	ldr	r1, [pc, #80]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c76:	2284      	movs	r2, #132	; 0x84
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c7c:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	58d3      	ldr	r3, [r2, r3]
 8003c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	43da      	mvns	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	025b      	lsls	r3, r3, #9
 8003c96:	4013      	ands	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ca2:	4909      	ldr	r1, [pc, #36]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003ca4:	2280      	movs	r2, #128	; 0x80
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	40da      	lsrs	r2, r3
 8003cb8:	1e13      	subs	r3, r2, #0
 8003cba:	d000      	beq.n	8003cbe <HAL_GPIO_Init+0x2ae>
 8003cbc:	e6b0      	b.n	8003a20 <HAL_GPIO_Init+0x10>
  }
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b006      	add	sp, #24
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021800 	.word	0x40021800
 8003ccc:	50000400 	.word	0x50000400
 8003cd0:	50000800 	.word	0x50000800
 8003cd4:	50000c00 	.word	0x50000c00

08003cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	000a      	movs	r2, r1
 8003ce2:	1cbb      	adds	r3, r7, #2
 8003ce4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	1cba      	adds	r2, r7, #2
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf2:	230f      	movs	r3, #15
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e003      	b.n	8003d04 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d04:	230f      	movs	r3, #15
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	781b      	ldrb	r3, [r3, #0]
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	0008      	movs	r0, r1
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	1cbb      	adds	r3, r7, #2
 8003d20:	1c02      	adds	r2, r0, #0
 8003d22:	801a      	strh	r2, [r3, #0]
 8003d24:	1c7b      	adds	r3, r7, #1
 8003d26:	1c0a      	adds	r2, r1, #0
 8003d28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d2a:	1c7b      	adds	r3, r7, #1
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d32:	1cbb      	adds	r3, r7, #2
 8003d34:	881a      	ldrh	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d3a:	e003      	b.n	8003d44 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d3c:	1cbb      	adds	r3, r7, #2
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e082      	b.n	8003e64 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2241      	movs	r2, #65	; 0x41
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2240      	movs	r2, #64	; 0x40
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7ff fb1d 	bl	80033b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2241      	movs	r2, #65	; 0x41
 8003d7e:	2124      	movs	r1, #36	; 0x24
 8003d80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	438a      	bics	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4934      	ldr	r1, [pc, #208]	; (8003e6c <HAL_I2C_Init+0x120>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4931      	ldr	r1, [pc, #196]	; (8003e70 <HAL_I2C_Init+0x124>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d108      	bne.n	8003dca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	0209      	lsls	r1, r1, #8
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	e007      	b.n	8003dda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2184      	movs	r1, #132	; 0x84
 8003dd4:	0209      	lsls	r1, r1, #8
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d104      	bne.n	8003dec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	0112      	lsls	r2, r2, #4
 8003dea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	491f      	ldr	r1, [pc, #124]	; (8003e74 <HAL_I2C_Init+0x128>)
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	491a      	ldr	r1, [pc, #104]	; (8003e70 <HAL_I2C_Init+0x124>)
 8003e08:	400a      	ands	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69d9      	ldr	r1, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2101      	movs	r1, #1
 8003e42:	430a      	orrs	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2241      	movs	r2, #65	; 0x41
 8003e50:	2120      	movs	r1, #32
 8003e52:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2242      	movs	r2, #66	; 0x42
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	f0ffffff 	.word	0xf0ffffff
 8003e70:	ffff7fff 	.word	0xffff7fff
 8003e74:	02008000 	.word	0x02008000

08003e78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	000c      	movs	r4, r1
 8003e82:	0010      	movs	r0, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	230a      	movs	r3, #10
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	1c22      	adds	r2, r4, #0
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	2308      	movs	r3, #8
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	1c02      	adds	r2, r0, #0
 8003e94:	801a      	strh	r2, [r3, #0]
 8003e96:	1dbb      	adds	r3, r7, #6
 8003e98:	1c0a      	adds	r2, r1, #0
 8003e9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2241      	movs	r2, #65	; 0x41
 8003ea0:	5c9b      	ldrb	r3, [r3, r2]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d000      	beq.n	8003eaa <HAL_I2C_Mem_Write+0x32>
 8003ea8:	e10c      	b.n	80040c4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <HAL_I2C_Mem_Write+0x42>
 8003eb0:	232c      	movs	r3, #44	; 0x2c
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	0092      	lsls	r2, r2, #2
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0ff      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2240      	movs	r2, #64	; 0x40
 8003eca:	5c9b      	ldrb	r3, [r3, r2]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x5c>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e0f8      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2240      	movs	r2, #64	; 0x40
 8003ed8:	2101      	movs	r1, #1
 8003eda:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003edc:	f7ff fcb6 	bl	800384c <HAL_GetTick>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	0219      	lsls	r1, r3, #8
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2319      	movs	r3, #25
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f000 fb0b 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	1e03      	subs	r3, r0, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e0e3      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2241      	movs	r2, #65	; 0x41
 8003f02:	2121      	movs	r1, #33	; 0x21
 8003f04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2242      	movs	r2, #66	; 0x42
 8003f0a:	2140      	movs	r1, #64	; 0x40
 8003f0c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	222c      	movs	r2, #44	; 0x2c
 8003f1e:	18ba      	adds	r2, r7, r2
 8003f20:	8812      	ldrh	r2, [r2, #0]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2a:	1dbb      	adds	r3, r7, #6
 8003f2c:	881c      	ldrh	r4, [r3, #0]
 8003f2e:	2308      	movs	r3, #8
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	230a      	movs	r3, #10
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	8819      	ldrh	r1, [r3, #0]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	0023      	movs	r3, r4
 8003f46:	f000 f9f9 	bl	800433c <I2C_RequestMemoryWrite>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2240      	movs	r2, #64	; 0x40
 8003f52:	2100      	movs	r1, #0
 8003f54:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0b5      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2bff      	cmp	r3, #255	; 0xff
 8003f62:	d911      	bls.n	8003f88 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	22ff      	movs	r2, #255	; 0xff
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	045c      	lsls	r4, r3, #17
 8003f74:	230a      	movs	r3, #10
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	8819      	ldrh	r1, [r3, #0]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	0023      	movs	r3, r4
 8003f82:	f000 fc89 	bl	8004898 <I2C_TransferConfig>
 8003f86:	e012      	b.n	8003fae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	049c      	lsls	r4, r3, #18
 8003f9c:	230a      	movs	r3, #10
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	8819      	ldrh	r1, [r3, #0]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	0023      	movs	r3, r4
 8003faa:	f000 fc75 	bl	8004898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 fae8 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e081      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d03a      	beq.n	8004072 <HAL_I2C_Mem_Write+0x1fa>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d136      	bne.n	8004072 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	0013      	movs	r3, r2
 800400e:	2200      	movs	r2, #0
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	f000 fa7b 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e053      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2bff      	cmp	r3, #255	; 0xff
 8004026:	d911      	bls.n	800404c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	b2da      	uxtb	r2, r3
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	045c      	lsls	r4, r3, #17
 8004038:	230a      	movs	r3, #10
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	8819      	ldrh	r1, [r3, #0]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	2300      	movs	r3, #0
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	0023      	movs	r3, r4
 8004046:	f000 fc27 	bl	8004898 <I2C_TransferConfig>
 800404a:	e012      	b.n	8004072 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	b2da      	uxtb	r2, r3
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	049c      	lsls	r4, r3, #18
 8004060:	230a      	movs	r3, #10
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	8819      	ldrh	r1, [r3, #0]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	0023      	movs	r3, r4
 800406e:	f000 fc13 	bl	8004898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d198      	bne.n	8003fae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	0018      	movs	r0, r3
 8004084:	f000 fac0 	bl	8004608 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004088:	1e03      	subs	r3, r0, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e01a      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2220      	movs	r2, #32
 8004096:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	490b      	ldr	r1, [pc, #44]	; (80040d0 <HAL_I2C_Mem_Write+0x258>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2241      	movs	r2, #65	; 0x41
 80040ac:	2120      	movs	r1, #32
 80040ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2242      	movs	r2, #66	; 0x42
 80040b4:	2100      	movs	r1, #0
 80040b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	2100      	movs	r1, #0
 80040be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b007      	add	sp, #28
 80040cc:	bd90      	pop	{r4, r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	fe00e800 	.word	0xfe00e800

080040d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	000c      	movs	r4, r1
 80040de:	0010      	movs	r0, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	230a      	movs	r3, #10
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	1c22      	adds	r2, r4, #0
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	2308      	movs	r3, #8
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	1c02      	adds	r2, r0, #0
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	1dbb      	adds	r3, r7, #6
 80040f4:	1c0a      	adds	r2, r1, #0
 80040f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2241      	movs	r2, #65	; 0x41
 80040fc:	5c9b      	ldrb	r3, [r3, r2]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b20      	cmp	r3, #32
 8004102:	d000      	beq.n	8004106 <HAL_I2C_Mem_Read+0x32>
 8004104:	e110      	b.n	8004328 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_I2C_Mem_Read+0x42>
 800410c:	232c      	movs	r3, #44	; 0x2c
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	0092      	lsls	r2, r2, #2
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e103      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2240      	movs	r2, #64	; 0x40
 8004126:	5c9b      	ldrb	r3, [r3, r2]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_I2C_Mem_Read+0x5c>
 800412c:	2302      	movs	r3, #2
 800412e:	e0fc      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	2101      	movs	r1, #1
 8004136:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004138:	f7ff fb88 	bl	800384c <HAL_GetTick>
 800413c:	0003      	movs	r3, r0
 800413e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	0219      	lsls	r1, r3, #8
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2319      	movs	r3, #25
 800414c:	2201      	movs	r2, #1
 800414e:	f000 f9dd 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e0e7      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2241      	movs	r2, #65	; 0x41
 800415e:	2122      	movs	r1, #34	; 0x22
 8004160:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2242      	movs	r2, #66	; 0x42
 8004166:	2140      	movs	r1, #64	; 0x40
 8004168:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004174:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	222c      	movs	r2, #44	; 0x2c
 800417a:	18ba      	adds	r2, r7, r2
 800417c:	8812      	ldrh	r2, [r2, #0]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	881c      	ldrh	r4, [r3, #0]
 800418a:	2308      	movs	r3, #8
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	230a      	movs	r3, #10
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	8819      	ldrh	r1, [r3, #0]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	0023      	movs	r3, r4
 80041a2:	f000 f92f 	bl	8004404 <I2C_RequestMemoryRead>
 80041a6:	1e03      	subs	r3, r0, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	2100      	movs	r1, #0
 80041b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e0b9      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2bff      	cmp	r3, #255	; 0xff
 80041be:	d911      	bls.n	80041e4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	22ff      	movs	r2, #255	; 0xff
 80041c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	045c      	lsls	r4, r3, #17
 80041d0:	230a      	movs	r3, #10
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	8819      	ldrh	r1, [r3, #0]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <HAL_I2C_Mem_Read+0x260>)
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	0023      	movs	r3, r4
 80041de:	f000 fb5b 	bl	8004898 <I2C_TransferConfig>
 80041e2:	e012      	b.n	800420a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	049c      	lsls	r4, r3, #18
 80041f8:	230a      	movs	r3, #10
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	8819      	ldrh	r1, [r3, #0]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <HAL_I2C_Mem_Read+0x260>)
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	0023      	movs	r3, r4
 8004206:	f000 fb47 	bl	8004898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800420a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	0013      	movs	r3, r2
 8004214:	2200      	movs	r2, #0
 8004216:	2104      	movs	r1, #4
 8004218:	f000 f978 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800421c:	1e03      	subs	r3, r0, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e082      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d03a      	beq.n	80042d6 <HAL_I2C_Mem_Read+0x202>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d136      	bne.n	80042d6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	0013      	movs	r3, r2
 8004272:	2200      	movs	r2, #0
 8004274:	2180      	movs	r1, #128	; 0x80
 8004276:	f000 f949 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e053      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2bff      	cmp	r3, #255	; 0xff
 800428a:	d911      	bls.n	80042b0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	22ff      	movs	r2, #255	; 0xff
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	045c      	lsls	r4, r3, #17
 800429c:	230a      	movs	r3, #10
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	8819      	ldrh	r1, [r3, #0]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	2300      	movs	r3, #0
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	0023      	movs	r3, r4
 80042aa:	f000 faf5 	bl	8004898 <I2C_TransferConfig>
 80042ae:	e012      	b.n	80042d6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	049c      	lsls	r4, r3, #18
 80042c4:	230a      	movs	r3, #10
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	8819      	ldrh	r1, [r3, #0]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	2300      	movs	r3, #0
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	0023      	movs	r3, r4
 80042d2:	f000 fae1 	bl	8004898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d194      	bne.n	800420a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 f98e 	bl	8004608 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e01a      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2220      	movs	r2, #32
 80042fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	490c      	ldr	r1, [pc, #48]	; (8004338 <HAL_I2C_Mem_Read+0x264>)
 8004308:	400a      	ands	r2, r1
 800430a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2241      	movs	r2, #65	; 0x41
 8004310:	2120      	movs	r1, #32
 8004312:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2242      	movs	r2, #66	; 0x42
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2240      	movs	r2, #64	; 0x40
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b007      	add	sp, #28
 8004330:	bd90      	pop	{r4, r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	80002400 	.word	0x80002400
 8004338:	fe00e800 	.word	0xfe00e800

0800433c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800433c:	b5b0      	push	{r4, r5, r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	000c      	movs	r4, r1
 8004346:	0010      	movs	r0, r2
 8004348:	0019      	movs	r1, r3
 800434a:	250a      	movs	r5, #10
 800434c:	197b      	adds	r3, r7, r5
 800434e:	1c22      	adds	r2, r4, #0
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	2308      	movs	r3, #8
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	1c02      	adds	r2, r0, #0
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	1dbb      	adds	r3, r7, #6
 800435c:	1c0a      	adds	r2, r1, #0
 800435e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004360:	1dbb      	adds	r3, r7, #6
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	045c      	lsls	r4, r3, #17
 800436a:	197b      	adds	r3, r7, r5
 800436c:	8819      	ldrh	r1, [r3, #0]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	4b23      	ldr	r3, [pc, #140]	; (8004400 <I2C_RequestMemoryWrite+0xc4>)
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	0023      	movs	r3, r4
 8004376:	f000 fa8f 	bl	8004898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	6a39      	ldr	r1, [r7, #32]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 f902 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d001      	beq.n	800438e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e033      	b.n	80043f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800438e:	1dbb      	adds	r3, r7, #6
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004396:	2308      	movs	r3, #8
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28
 80043a4:	e019      	b.n	80043da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043a6:	2308      	movs	r3, #8
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ba:	6a39      	ldr	r1, [r7, #32]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 f8e3 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 80043c4:	1e03      	subs	r3, r0, #0
 80043c6:	d001      	beq.n	80043cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e014      	b.n	80043f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043cc:	2308      	movs	r3, #8
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	0013      	movs	r3, r2
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	f000 f890 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80043ec:	1e03      	subs	r3, r0, #0
 80043ee:	d001      	beq.n	80043f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b004      	add	sp, #16
 80043fc:	bdb0      	pop	{r4, r5, r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	80002000 	.word	0x80002000

08004404 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	000c      	movs	r4, r1
 800440e:	0010      	movs	r0, r2
 8004410:	0019      	movs	r1, r3
 8004412:	250a      	movs	r5, #10
 8004414:	197b      	adds	r3, r7, r5
 8004416:	1c22      	adds	r2, r4, #0
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	2308      	movs	r3, #8
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	1c02      	adds	r2, r0, #0
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	1dbb      	adds	r3, r7, #6
 8004424:	1c0a      	adds	r2, r1, #0
 8004426:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004428:	1dbb      	adds	r3, r7, #6
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	197b      	adds	r3, r7, r5
 8004430:	8819      	ldrh	r1, [r3, #0]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <I2C_RequestMemoryRead+0xc0>)
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	f000 fa2d 	bl	8004898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	6a39      	ldr	r1, [r7, #32]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	0018      	movs	r0, r3
 8004446:	f000 f8a0 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 800444a:	1e03      	subs	r3, r0, #0
 800444c:	d001      	beq.n	8004452 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e033      	b.n	80044ba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004452:	1dbb      	adds	r3, r7, #6
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d107      	bne.n	800446a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800445a:	2308      	movs	r3, #8
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
 8004468:	e019      	b.n	800449e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800446a:	2308      	movs	r3, #8
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	b29b      	uxth	r3, r3
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447e:	6a39      	ldr	r1, [r7, #32]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	0018      	movs	r0, r3
 8004484:	f000 f881 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 8004488:	1e03      	subs	r3, r0, #0
 800448a:	d001      	beq.n	8004490 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e014      	b.n	80044ba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004490:	2308      	movs	r3, #8
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	0013      	movs	r3, r2
 80044a8:	2200      	movs	r2, #0
 80044aa:	2140      	movs	r1, #64	; 0x40
 80044ac:	f000 f82e 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d001      	beq.n	80044b8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b004      	add	sp, #16
 80044c0:	bdb0      	pop	{r4, r5, r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	80002000 	.word	0x80002000

080044c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2202      	movs	r2, #2
 80044d8:	4013      	ands	r3, r2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d103      	bne.n	80044e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d007      	beq.n	8004504 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2101      	movs	r1, #1
 8004500:	430a      	orrs	r2, r1
 8004502:	619a      	str	r2, [r3, #24]
  }
}
 8004504:	46c0      	nop			; (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	1dfb      	adds	r3, r7, #7
 800451a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800451c:	e021      	b.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	d01e      	beq.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7ff f992 	bl	800384c <HAL_GetTick>
 8004528:	0002      	movs	r2, r0
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	2220      	movs	r2, #32
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2241      	movs	r2, #65	; 0x41
 800454a:	2120      	movs	r1, #32
 800454c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2242      	movs	r2, #66	; 0x42
 8004552:	2100      	movs	r1, #0
 8004554:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2240      	movs	r2, #64	; 0x40
 800455a:	2100      	movs	r1, #0
 800455c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e00f      	b.n	8004582 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	425a      	negs	r2, r3
 8004572:	4153      	adcs	r3, r2
 8004574:	b2db      	uxtb	r3, r3
 8004576:	001a      	movs	r2, r3
 8004578:	1dfb      	adds	r3, r7, #7
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d0ce      	beq.n	800451e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b004      	add	sp, #16
 8004588:	bd80      	pop	{r7, pc}

0800458a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004596:	e02b      	b.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 f86e 	bl	8004680 <I2C_IsErrorOccurred>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d001      	beq.n	80045ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e029      	b.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3301      	adds	r3, #1
 80045b0:	d01e      	beq.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7ff f94b 	bl	800384c <HAL_GetTick>
 80045b6:	0002      	movs	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d113      	bne.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	2220      	movs	r2, #32
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2241      	movs	r2, #65	; 0x41
 80045d8:	2120      	movs	r1, #32
 80045da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2242      	movs	r2, #66	; 0x42
 80045e0:	2100      	movs	r1, #0
 80045e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2240      	movs	r2, #64	; 0x40
 80045e8:	2100      	movs	r1, #0
 80045ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2202      	movs	r2, #2
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d1cc      	bne.n	8004598 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b004      	add	sp, #16
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004614:	e028      	b.n	8004668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	0018      	movs	r0, r3
 800461e:	f000 f82f 	bl	8004680 <I2C_IsErrorOccurred>
 8004622:	1e03      	subs	r3, r0, #0
 8004624:	d001      	beq.n	800462a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e026      	b.n	8004678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7ff f90f 	bl	800384c <HAL_GetTick>
 800462e:	0002      	movs	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d113      	bne.n	8004668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	2220      	movs	r2, #32
 8004646:	431a      	orrs	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2241      	movs	r2, #65	; 0x41
 8004650:	2120      	movs	r1, #32
 8004652:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2242      	movs	r2, #66	; 0x42
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2240      	movs	r2, #64	; 0x40
 8004660:	2100      	movs	r1, #0
 8004662:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e007      	b.n	8004678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2220      	movs	r2, #32
 8004670:	4013      	ands	r3, r2
 8004672:	2b20      	cmp	r3, #32
 8004674:	d1cf      	bne.n	8004616 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b004      	add	sp, #16
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b08b      	sub	sp, #44	; 0x2c
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2327      	movs	r3, #39	; 0x27
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2210      	movs	r2, #16
 80046a8:	4013      	ands	r3, r2
 80046aa:	d100      	bne.n	80046ae <I2C_IsErrorOccurred+0x2e>
 80046ac:	e08e      	b.n	80047cc <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2210      	movs	r2, #16
 80046b4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046b6:	e06c      	b.n	8004792 <I2C_IsErrorOccurred+0x112>
 80046b8:	2427      	movs	r4, #39	; 0x27
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	193a      	adds	r2, r7, r4
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3301      	adds	r3, #1
 80046c6:	d064      	beq.n	8004792 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7ff f8c0 	bl	800384c <HAL_GetTick>
 80046cc:	0002      	movs	r2, r0
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d306      	bcc.n	80046e6 <I2C_IsErrorOccurred+0x66>
 80046d8:	193b      	adds	r3, r7, r4
 80046da:	193a      	adds	r2, r7, r4
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d155      	bne.n	8004792 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	4013      	ands	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046f4:	2013      	movs	r0, #19
 80046f6:	183b      	adds	r3, r7, r0
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	2142      	movs	r1, #66	; 0x42
 80046fc:	5c52      	ldrb	r2, [r2, r1]
 80046fe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	401a      	ands	r2, r3
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	429a      	cmp	r2, r3
 8004712:	d137      	bne.n	8004784 <I2C_IsErrorOccurred+0x104>
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	01db      	lsls	r3, r3, #7
 800471a:	429a      	cmp	r2, r3
 800471c:	d032      	beq.n	8004784 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 800471e:	183b      	adds	r3, r7, r0
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b20      	cmp	r3, #32
 8004724:	d02e      	beq.n	8004784 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	01c9      	lsls	r1, r1, #7
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004738:	f7ff f888 	bl	800384c <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004740:	e020      	b.n	8004784 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004742:	f7ff f883 	bl	800384c <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2027      	movs	r0, #39	; 0x27
 800474e:	183a      	adds	r2, r7, r0
 8004750:	1839      	adds	r1, r7, r0
 8004752:	7809      	ldrb	r1, [r1, #0]
 8004754:	7011      	strb	r1, [r2, #0]
 8004756:	2b19      	cmp	r3, #25
 8004758:	d914      	bls.n	8004784 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	2220      	movs	r2, #32
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2241      	movs	r2, #65	; 0x41
 800476a:	2120      	movs	r1, #32
 800476c:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2242      	movs	r2, #66	; 0x42
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2240      	movs	r2, #64	; 0x40
 800477a:	2100      	movs	r1, #0
 800477c:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 800477e:	183b      	adds	r3, r7, r0
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2220      	movs	r2, #32
 800478c:	4013      	ands	r3, r2
 800478e:	2b20      	cmp	r3, #32
 8004790:	d1d7      	bne.n	8004742 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2220      	movs	r2, #32
 800479a:	4013      	ands	r3, r2
 800479c:	2b20      	cmp	r3, #32
 800479e:	d004      	beq.n	80047aa <I2C_IsErrorOccurred+0x12a>
 80047a0:	2327      	movs	r3, #39	; 0x27
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d086      	beq.n	80046b8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047aa:	2327      	movs	r3, #39	; 0x27
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2220      	movs	r2, #32
 80047ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2204      	movs	r2, #4
 80047c0:	4313      	orrs	r3, r2
 80047c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047c4:	2327      	movs	r3, #39	; 0x27
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4013      	ands	r3, r2
 80047dc:	d00c      	beq.n	80047f8 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2201      	movs	r2, #1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	0052      	lsls	r2, r2, #1
 80047ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f0:	2327      	movs	r3, #39	; 0x27
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4013      	ands	r3, r2
 8004800:	d00c      	beq.n	800481c <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2208      	movs	r2, #8
 8004806:	4313      	orrs	r3, r2
 8004808:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2280      	movs	r2, #128	; 0x80
 8004810:	00d2      	lsls	r2, r2, #3
 8004812:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004814:	2327      	movs	r3, #39	; 0x27
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4013      	ands	r3, r2
 8004824:	d00c      	beq.n	8004840 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	2202      	movs	r2, #2
 800482a:	4313      	orrs	r3, r2
 800482c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2280      	movs	r2, #128	; 0x80
 8004834:	0092      	lsls	r2, r2, #2
 8004836:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004838:	2327      	movs	r3, #39	; 0x27
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004840:	2327      	movs	r3, #39	; 0x27
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01d      	beq.n	8004886 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	0018      	movs	r0, r3
 800484e:	f7ff fe3b 	bl	80044c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	490d      	ldr	r1, [pc, #52]	; (8004894 <I2C_IsErrorOccurred+0x214>)
 800485e:	400a      	ands	r2, r1
 8004860:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2241      	movs	r2, #65	; 0x41
 8004872:	2120      	movs	r1, #32
 8004874:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2242      	movs	r2, #66	; 0x42
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2240      	movs	r2, #64	; 0x40
 8004882:	2100      	movs	r1, #0
 8004884:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004886:	2327      	movs	r3, #39	; 0x27
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	781b      	ldrb	r3, [r3, #0]
}
 800488c:	0018      	movs	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	b00b      	add	sp, #44	; 0x2c
 8004892:	bd90      	pop	{r4, r7, pc}
 8004894:	fe00e800 	.word	0xfe00e800

08004898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	0008      	movs	r0, r1
 80048a2:	0011      	movs	r1, r2
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	240a      	movs	r4, #10
 80048a8:	193b      	adds	r3, r7, r4
 80048aa:	1c02      	adds	r2, r0, #0
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	2009      	movs	r0, #9
 80048b0:	183b      	adds	r3, r7, r0
 80048b2:	1c0a      	adds	r2, r1, #0
 80048b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b6:	193b      	adds	r3, r7, r4
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	059b      	lsls	r3, r3, #22
 80048bc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	0419      	lsls	r1, r3, #16
 80048c4:	23ff      	movs	r3, #255	; 0xff
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	4313      	orrs	r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e2:	0d51      	lsrs	r1, r2, #21
 80048e4:	2280      	movs	r2, #128	; 0x80
 80048e6:	00d2      	lsls	r2, r2, #3
 80048e8:	400a      	ands	r2, r1
 80048ea:	4907      	ldr	r1, [pc, #28]	; (8004908 <I2C_TransferConfig+0x70>)
 80048ec:	430a      	orrs	r2, r1
 80048ee:	43d2      	mvns	r2, r2
 80048f0:	401a      	ands	r2, r3
 80048f2:	0011      	movs	r1, r2
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b007      	add	sp, #28
 8004904:	bd90      	pop	{r4, r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	03ff63ff 	.word	0x03ff63ff

0800490c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2241      	movs	r2, #65	; 0x41
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b20      	cmp	r3, #32
 8004920:	d138      	bne.n	8004994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2240      	movs	r2, #64	; 0x40
 8004926:	5c9b      	ldrb	r3, [r3, r2]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800492c:	2302      	movs	r3, #2
 800492e:	e032      	b.n	8004996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2240      	movs	r2, #64	; 0x40
 8004934:	2101      	movs	r1, #1
 8004936:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2241      	movs	r2, #65	; 0x41
 800493c:	2124      	movs	r1, #36	; 0x24
 800493e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	438a      	bics	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4911      	ldr	r1, [pc, #68]	; (80049a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800495c:	400a      	ands	r2, r1
 800495e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2101      	movs	r1, #1
 800497c:	430a      	orrs	r2, r1
 800497e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2241      	movs	r2, #65	; 0x41
 8004984:	2120      	movs	r1, #32
 8004986:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2240      	movs	r2, #64	; 0x40
 800498c:	2100      	movs	r1, #0
 800498e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	ffffefff 	.word	0xffffefff

080049a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2241      	movs	r2, #65	; 0x41
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d139      	bne.n	8004a2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2240      	movs	r2, #64	; 0x40
 80049be:	5c9b      	ldrb	r3, [r3, r2]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e033      	b.n	8004a30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2240      	movs	r2, #64	; 0x40
 80049cc:	2101      	movs	r1, #1
 80049ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2241      	movs	r2, #65	; 0x41
 80049d4:	2124      	movs	r1, #36	; 0x24
 80049d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2101      	movs	r1, #1
 80049e4:	438a      	bics	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2101      	movs	r1, #1
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2241      	movs	r2, #65	; 0x41
 8004a1e:	2120      	movs	r1, #32
 8004a20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2240      	movs	r2, #64	; 0x40
 8004a26:	2100      	movs	r1, #0
 8004a28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e000      	b.n	8004a30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a2e:	2302      	movs	r3, #2
  }
}
 8004a30:	0018      	movs	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b004      	add	sp, #16
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	fffff0ff 	.word	0xfffff0ff

08004a3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a44:	4b19      	ldr	r3, [pc, #100]	; (8004aac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d11f      	bne.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	0013      	movs	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4912      	ldr	r1, [pc, #72]	; (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7fb fb62 	bl	8000138 <__udivsi3>
 8004a74:	0003      	movs	r3, r0
 8004a76:	3301      	adds	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a7a:	e008      	b.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e001      	b.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e009      	b.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a8e:	4b07      	ldr	r3, [pc, #28]	; (8004aac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	401a      	ands	r2, r3
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d0ed      	beq.n	8004a7c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b004      	add	sp, #16
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	40007000 	.word	0x40007000
 8004ab0:	fffff9ff 	.word	0xfffff9ff
 8004ab4:	20000074 	.word	0x20000074
 8004ab8:	000f4240 	.word	0x000f4240

08004abc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	23e0      	movs	r3, #224	; 0xe0
 8004ac6:	01db      	lsls	r3, r3, #7
 8004ac8:	4013      	ands	r3, r2
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e2f3      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	4013      	ands	r3, r2
 8004aee:	d100      	bne.n	8004af2 <HAL_RCC_OscConfig+0x1e>
 8004af0:	e07c      	b.n	8004bec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af2:	4bc3      	ldr	r3, [pc, #780]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2238      	movs	r2, #56	; 0x38
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004afc:	4bc0      	ldr	r3, [pc, #768]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2203      	movs	r2, #3
 8004b02:	4013      	ands	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d102      	bne.n	8004b12 <HAL_RCC_OscConfig+0x3e>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d002      	beq.n	8004b18 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	4bb9      	ldr	r3, [pc, #740]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	029b      	lsls	r3, r3, #10
 8004b20:	4013      	ands	r3, r2
 8004b22:	d062      	beq.n	8004bea <HAL_RCC_OscConfig+0x116>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d15e      	bne.n	8004bea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e2ce      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	025b      	lsls	r3, r3, #9
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_OscConfig+0x78>
 8004b3c:	4bb0      	ldr	r3, [pc, #704]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4baf      	ldr	r3, [pc, #700]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	0249      	lsls	r1, r1, #9
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e020      	b.n	8004b8e <HAL_RCC_OscConfig+0xba>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	23a0      	movs	r3, #160	; 0xa0
 8004b52:	02db      	lsls	r3, r3, #11
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d10e      	bne.n	8004b76 <HAL_RCC_OscConfig+0xa2>
 8004b58:	4ba9      	ldr	r3, [pc, #676]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4ba8      	ldr	r3, [pc, #672]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b5e:	2180      	movs	r1, #128	; 0x80
 8004b60:	02c9      	lsls	r1, r1, #11
 8004b62:	430a      	orrs	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	4ba6      	ldr	r3, [pc, #664]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4ba5      	ldr	r3, [pc, #660]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	0249      	lsls	r1, r1, #9
 8004b70:	430a      	orrs	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e00b      	b.n	8004b8e <HAL_RCC_OscConfig+0xba>
 8004b76:	4ba2      	ldr	r3, [pc, #648]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4ba1      	ldr	r3, [pc, #644]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b7c:	49a1      	ldr	r1, [pc, #644]	; (8004e04 <HAL_RCC_OscConfig+0x330>)
 8004b7e:	400a      	ands	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	4b9f      	ldr	r3, [pc, #636]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	4b9e      	ldr	r3, [pc, #632]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	499f      	ldr	r1, [pc, #636]	; (8004e08 <HAL_RCC_OscConfig+0x334>)
 8004b8a:	400a      	ands	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d014      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b96:	f7fe fe59 	bl	800384c <HAL_GetTick>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba0:	f7fe fe54 	bl	800384c <HAL_GetTick>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e28d      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb2:	4b93      	ldr	r3, [pc, #588]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	029b      	lsls	r3, r3, #10
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0xcc>
 8004bbe:	e015      	b.n	8004bec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fe fe44 	bl	800384c <HAL_GetTick>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bca:	f7fe fe3f 	bl	800384c <HAL_GetTick>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b64      	cmp	r3, #100	; 0x64
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e278      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bdc:	4b88      	ldr	r3, [pc, #544]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	029b      	lsls	r3, r3, #10
 8004be4:	4013      	ands	r3, r2
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0xf6>
 8004be8:	e000      	b.n	8004bec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d100      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x124>
 8004bf6:	e099      	b.n	8004d2c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf8:	4b81      	ldr	r3, [pc, #516]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2238      	movs	r2, #56	; 0x38
 8004bfe:	4013      	ands	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c02:	4b7f      	ldr	r3, [pc, #508]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2203      	movs	r2, #3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d102      	bne.n	8004c18 <HAL_RCC_OscConfig+0x144>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d002      	beq.n	8004c1e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d135      	bne.n	8004c8a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c1e:	4b78      	ldr	r3, [pc, #480]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4013      	ands	r3, r2
 8004c28:	d005      	beq.n	8004c36 <HAL_RCC_OscConfig+0x162>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e24b      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c36:	4b72      	ldr	r3, [pc, #456]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4a74      	ldr	r2, [pc, #464]	; (8004e0c <HAL_RCC_OscConfig+0x338>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	0019      	movs	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	021a      	lsls	r2, r3, #8
 8004c46:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d112      	bne.n	8004c78 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c52:	4b6b      	ldr	r3, [pc, #428]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6e      	ldr	r2, [pc, #440]	; (8004e10 <HAL_RCC_OscConfig+0x33c>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	4b67      	ldr	r3, [pc, #412]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c66:	4b66      	ldr	r3, [pc, #408]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	0adb      	lsrs	r3, r3, #11
 8004c6c:	2207      	movs	r2, #7
 8004c6e:	4013      	ands	r3, r2
 8004c70:	4a68      	ldr	r2, [pc, #416]	; (8004e14 <HAL_RCC_OscConfig+0x340>)
 8004c72:	40da      	lsrs	r2, r3
 8004c74:	4b68      	ldr	r3, [pc, #416]	; (8004e18 <HAL_RCC_OscConfig+0x344>)
 8004c76:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c78:	4b68      	ldr	r3, [pc, #416]	; (8004e1c <HAL_RCC_OscConfig+0x348>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fe fd89 	bl	8003794 <HAL_InitTick>
 8004c82:	1e03      	subs	r3, r0, #0
 8004c84:	d051      	beq.n	8004d2a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e221      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d030      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c92:	4b5b      	ldr	r3, [pc, #364]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5e      	ldr	r2, [pc, #376]	; (8004e10 <HAL_RCC_OscConfig+0x33c>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	4b57      	ldr	r3, [pc, #348]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ca6:	4b56      	ldr	r3, [pc, #344]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b55      	ldr	r3, [pc, #340]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	0049      	lsls	r1, r1, #1
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fe fdca 	bl	800384c <HAL_GetTick>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cbe:	f7fe fdc5 	bl	800384c <HAL_GetTick>
 8004cc2:	0002      	movs	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e1fe      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd0:	4b4b      	ldr	r3, [pc, #300]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cdc:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a4a      	ldr	r2, [pc, #296]	; (8004e0c <HAL_RCC_OscConfig+0x338>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	4b44      	ldr	r3, [pc, #272]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	e01b      	b.n	8004d2c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004cf4:	4b42      	ldr	r3, [pc, #264]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b41      	ldr	r3, [pc, #260]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004cfa:	4949      	ldr	r1, [pc, #292]	; (8004e20 <HAL_RCC_OscConfig+0x34c>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fe fda4 	bl	800384c <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0a:	f7fe fd9f 	bl	800384c <HAL_GetTick>
 8004d0e:	0002      	movs	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1d8      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d1c:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4013      	ands	r3, r2
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x236>
 8004d28:	e000      	b.n	8004d2c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2208      	movs	r2, #8
 8004d32:	4013      	ands	r3, r2
 8004d34:	d047      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d36:	4b32      	ldr	r3, [pc, #200]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2238      	movs	r2, #56	; 0x38
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b18      	cmp	r3, #24
 8004d40:	d10a      	bne.n	8004d58 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d42:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d46:	2202      	movs	r2, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d03c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x2f2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d138      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e1ba      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d019      	beq.n	8004d94 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004d62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d64:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004d66:	2101      	movs	r1, #1
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fe fd6e 	bl	800384c <HAL_GetTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d76:	f7fe fd69 	bl	800384c <HAL_GetTick>
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1a2      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d0f1      	beq.n	8004d76 <HAL_RCC_OscConfig+0x2a2>
 8004d92:	e018      	b.n	8004dc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004d96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d98:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fe fd54 	bl	800384c <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004daa:	f7fe fd4f 	bl	800384c <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e188      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d1f1      	bne.n	8004daa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2204      	movs	r2, #4
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x2fe>
 8004dd0:	e0c6      	b.n	8004f60 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd2:	231f      	movs	r3, #31
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004dda:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2238      	movs	r2, #56	; 0x38
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d11e      	bne.n	8004e24 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_RCC_OscConfig+0x32c>)
 8004de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dea:	2202      	movs	r2, #2
 8004dec:	4013      	ands	r3, r2
 8004dee:	d100      	bne.n	8004df2 <HAL_RCC_OscConfig+0x31e>
 8004df0:	e0b6      	b.n	8004f60 <HAL_RCC_OscConfig+0x48c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d000      	beq.n	8004dfc <HAL_RCC_OscConfig+0x328>
 8004dfa:	e0b1      	b.n	8004f60 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e166      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
 8004e00:	40021000 	.word	0x40021000
 8004e04:	fffeffff 	.word	0xfffeffff
 8004e08:	fffbffff 	.word	0xfffbffff
 8004e0c:	ffff80ff 	.word	0xffff80ff
 8004e10:	ffffc7ff 	.word	0xffffc7ff
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	20000074 	.word	0x20000074
 8004e1c:	20000078 	.word	0x20000078
 8004e20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e24:	4bac      	ldr	r3, [pc, #688]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	055b      	lsls	r3, r3, #21
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_OscConfig+0x360>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x362>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d011      	beq.n	8004e5e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	4ba7      	ldr	r3, [pc, #668]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3e:	4ba6      	ldr	r3, [pc, #664]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004e40:	2180      	movs	r1, #128	; 0x80
 8004e42:	0549      	lsls	r1, r1, #21
 8004e44:	430a      	orrs	r2, r1
 8004e46:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e48:	4ba3      	ldr	r3, [pc, #652]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	055b      	lsls	r3, r3, #21
 8004e50:	4013      	ands	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004e56:	231f      	movs	r3, #31
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5e:	4b9f      	ldr	r3, [pc, #636]	; (80050dc <HAL_RCC_OscConfig+0x608>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	d11a      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e6a:	4b9c      	ldr	r3, [pc, #624]	; (80050dc <HAL_RCC_OscConfig+0x608>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b9b      	ldr	r3, [pc, #620]	; (80050dc <HAL_RCC_OscConfig+0x608>)
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	0049      	lsls	r1, r1, #1
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004e78:	f7fe fce8 	bl	800384c <HAL_GetTick>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e82:	f7fe fce3 	bl	800384c <HAL_GetTick>
 8004e86:	0002      	movs	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e11c      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e94:	4b91      	ldr	r3, [pc, #580]	; (80050dc <HAL_RCC_OscConfig+0x608>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3e2>
 8004ea8:	4b8b      	ldr	r3, [pc, #556]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eac:	4b8a      	ldr	r3, [pc, #552]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004eae:	2101      	movs	r1, #1
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eb4:	e01c      	b.n	8004ef0 <HAL_RCC_OscConfig+0x41c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x404>
 8004ebe:	4b86      	ldr	r3, [pc, #536]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004ec0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ec2:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eca:	4b83      	ldr	r3, [pc, #524]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ece:	4b82      	ldr	r3, [pc, #520]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0x41c>
 8004ed8:	4b7f      	ldr	r3, [pc, #508]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004edc:	4b7e      	ldr	r3, [pc, #504]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004ede:	2101      	movs	r1, #1
 8004ee0:	438a      	bics	r2, r1
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ee4:	4b7c      	ldr	r3, [pc, #496]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004ee6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ee8:	4b7b      	ldr	r3, [pc, #492]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004eea:	2104      	movs	r1, #4
 8004eec:	438a      	bics	r2, r1
 8004eee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d014      	beq.n	8004f22 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fe fca8 	bl	800384c <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f00:	e009      	b.n	8004f16 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fe fca3 	bl	800384c <HAL_GetTick>
 8004f06:	0002      	movs	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	4a74      	ldr	r2, [pc, #464]	; (80050e0 <HAL_RCC_OscConfig+0x60c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0db      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f16:	4b70      	ldr	r3, [pc, #448]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x42e>
 8004f20:	e013      	b.n	8004f4a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fe fc93 	bl	800384c <HAL_GetTick>
 8004f26:	0003      	movs	r3, r0
 8004f28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f2a:	e009      	b.n	8004f40 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2c:	f7fe fc8e 	bl	800384c <HAL_GetTick>
 8004f30:	0002      	movs	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	4a6a      	ldr	r2, [pc, #424]	; (80050e0 <HAL_RCC_OscConfig+0x60c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e0c6      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f40:	4b65      	ldr	r3, [pc, #404]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f44:	2202      	movs	r2, #2
 8004f46:	4013      	ands	r3, r2
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f4a:	231f      	movs	r3, #31
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d105      	bne.n	8004f60 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f54:	4b60      	ldr	r3, [pc, #384]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f58:	4b5f      	ldr	r3, [pc, #380]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004f5a:	4962      	ldr	r1, [pc, #392]	; (80050e4 <HAL_RCC_OscConfig+0x610>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d100      	bne.n	8004f6a <HAL_RCC_OscConfig+0x496>
 8004f68:	e0b0      	b.n	80050cc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f6a:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2238      	movs	r2, #56	; 0x38
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d100      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4a4>
 8004f76:	e078      	b.n	800506a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d153      	bne.n	8005028 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f80:	4b55      	ldr	r3, [pc, #340]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b54      	ldr	r3, [pc, #336]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004f86:	4958      	ldr	r1, [pc, #352]	; (80050e8 <HAL_RCC_OscConfig+0x614>)
 8004f88:	400a      	ands	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fe fc5e 	bl	800384c <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fe fc59 	bl	800384c <HAL_GetTick>
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e092      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa8:	4b4b      	ldr	r3, [pc, #300]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	049b      	lsls	r3, r3, #18
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d1f0      	bne.n	8004f96 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb4:	4b48      	ldr	r3, [pc, #288]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a4c      	ldr	r2, [pc, #304]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	4b3e      	ldr	r3, [pc, #248]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b3c      	ldr	r3, [pc, #240]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004fe8:	2180      	movs	r1, #128	; 0x80
 8004fea:	0449      	lsls	r1, r1, #17
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004ff0:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	4b38      	ldr	r3, [pc, #224]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8004ff6:	2180      	movs	r1, #128	; 0x80
 8004ff8:	0549      	lsls	r1, r1, #21
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fe fc25 	bl	800384c <HAL_GetTick>
 8005002:	0003      	movs	r3, r0
 8005004:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005008:	f7fe fc20 	bl	800384c <HAL_GetTick>
 800500c:	0002      	movs	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e059      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501a:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	049b      	lsls	r3, r3, #18
 8005022:	4013      	ands	r3, r2
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x534>
 8005026:	e051      	b.n	80050cc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005028:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 800502e:	492e      	ldr	r1, [pc, #184]	; (80050e8 <HAL_RCC_OscConfig+0x614>)
 8005030:	400a      	ands	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe fc0a 	bl	800384c <HAL_GetTick>
 8005038:	0003      	movs	r3, r0
 800503a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503e:	f7fe fc05 	bl	800384c <HAL_GetTick>
 8005042:	0002      	movs	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e03e      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005050:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	049b      	lsls	r3, r3, #18
 8005058:	4013      	ands	r3, r2
 800505a:	d1f0      	bne.n	800503e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800505c:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8005062:	4923      	ldr	r1, [pc, #140]	; (80050f0 <HAL_RCC_OscConfig+0x61c>)
 8005064:	400a      	ands	r2, r1
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e030      	b.n	80050cc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e02b      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005076:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <HAL_RCC_OscConfig+0x604>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2203      	movs	r2, #3
 8005080:	401a      	ands	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	429a      	cmp	r2, r3
 8005088:	d11e      	bne.n	80050c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2270      	movs	r2, #112	; 0x70
 800508e:	401a      	ands	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d117      	bne.n	80050c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	23fe      	movs	r3, #254	; 0xfe
 800509c:	01db      	lsls	r3, r3, #7
 800509e:	401a      	ands	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d10e      	bne.n	80050c8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	23f8      	movs	r3, #248	; 0xf8
 80050ae:	039b      	lsls	r3, r3, #14
 80050b0:	401a      	ands	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	0f5b      	lsrs	r3, r3, #29
 80050be:	075a      	lsls	r2, r3, #29
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	0018      	movs	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b008      	add	sp, #32
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40007000 	.word	0x40007000
 80050e0:	00001388 	.word	0x00001388
 80050e4:	efffffff 	.word	0xefffffff
 80050e8:	feffffff 	.word	0xfeffffff
 80050ec:	1fc1808c 	.word	0x1fc1808c
 80050f0:	effefffc 	.word	0xeffefffc

080050f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0e9      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b76      	ldr	r3, [pc, #472]	; (80052e4 <HAL_RCC_ClockConfig+0x1f0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2207      	movs	r2, #7
 800510e:	4013      	ands	r3, r2
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d91e      	bls.n	8005154 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b73      	ldr	r3, [pc, #460]	; (80052e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2207      	movs	r2, #7
 800511c:	4393      	bics	r3, r2
 800511e:	0019      	movs	r1, r3
 8005120:	4b70      	ldr	r3, [pc, #448]	; (80052e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005128:	f7fe fb90 	bl	800384c <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005130:	e009      	b.n	8005146 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005132:	f7fe fb8b 	bl	800384c <HAL_GetTick>
 8005136:	0002      	movs	r2, r0
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	4a6a      	ldr	r2, [pc, #424]	; (80052e8 <HAL_RCC_ClockConfig+0x1f4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e0ca      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005146:	4b67      	ldr	r3, [pc, #412]	; (80052e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2207      	movs	r2, #7
 800514c:	4013      	ands	r3, r2
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d1ee      	bne.n	8005132 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2202      	movs	r2, #2
 800515a:	4013      	ands	r3, r2
 800515c:	d015      	beq.n	800518a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2204      	movs	r2, #4
 8005164:	4013      	ands	r3, r2
 8005166:	d006      	beq.n	8005176 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005168:	4b60      	ldr	r3, [pc, #384]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	4b5f      	ldr	r3, [pc, #380]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 800516e:	21e0      	movs	r1, #224	; 0xe0
 8005170:	01c9      	lsls	r1, r1, #7
 8005172:	430a      	orrs	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005176:	4b5d      	ldr	r3, [pc, #372]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	4a5d      	ldr	r2, [pc, #372]	; (80052f0 <HAL_RCC_ClockConfig+0x1fc>)
 800517c:	4013      	ands	r3, r2
 800517e:	0019      	movs	r1, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	4b59      	ldr	r3, [pc, #356]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 8005186:	430a      	orrs	r2, r1
 8005188:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2201      	movs	r2, #1
 8005190:	4013      	ands	r3, r2
 8005192:	d057      	beq.n	8005244 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d107      	bne.n	80051ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800519c:	4b53      	ldr	r3, [pc, #332]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	029b      	lsls	r3, r3, #10
 80051a4:	4013      	ands	r3, r2
 80051a6:	d12b      	bne.n	8005200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e097      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d107      	bne.n	80051c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b4:	4b4d      	ldr	r3, [pc, #308]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	049b      	lsls	r3, r3, #18
 80051bc:	4013      	ands	r3, r2
 80051be:	d11f      	bne.n	8005200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e08b      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051cc:	4b47      	ldr	r3, [pc, #284]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4013      	ands	r3, r2
 80051d6:	d113      	bne.n	8005200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e07f      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d106      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e4:	4b41      	ldr	r3, [pc, #260]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 80051e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e8:	2202      	movs	r2, #2
 80051ea:	4013      	ands	r3, r2
 80051ec:	d108      	bne.n	8005200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e074      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f2:	4b3e      	ldr	r3, [pc, #248]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 80051f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f6:	2202      	movs	r2, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e06d      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005200:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2207      	movs	r2, #7
 8005206:	4393      	bics	r3, r2
 8005208:	0019      	movs	r1, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	4b37      	ldr	r3, [pc, #220]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005214:	f7fe fb1a 	bl	800384c <HAL_GetTick>
 8005218:	0003      	movs	r3, r0
 800521a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521c:	e009      	b.n	8005232 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521e:	f7fe fb15 	bl	800384c <HAL_GetTick>
 8005222:	0002      	movs	r2, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <HAL_RCC_ClockConfig+0x1f4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e054      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2238      	movs	r2, #56	; 0x38
 8005238:	401a      	ands	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	429a      	cmp	r2, r3
 8005242:	d1ec      	bne.n	800521e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005244:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2207      	movs	r2, #7
 800524a:	4013      	ands	r3, r2
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d21e      	bcs.n	8005290 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2207      	movs	r2, #7
 8005258:	4393      	bics	r3, r2
 800525a:	0019      	movs	r1, r3
 800525c:	4b21      	ldr	r3, [pc, #132]	; (80052e4 <HAL_RCC_ClockConfig+0x1f0>)
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005264:	f7fe faf2 	bl	800384c <HAL_GetTick>
 8005268:	0003      	movs	r3, r0
 800526a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800526c:	e009      	b.n	8005282 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800526e:	f7fe faed 	bl	800384c <HAL_GetTick>
 8005272:	0002      	movs	r2, r0
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HAL_RCC_ClockConfig+0x1f4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e02c      	b.n	80052dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2207      	movs	r2, #7
 8005288:	4013      	ands	r3, r2
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d1ee      	bne.n	800526e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2204      	movs	r2, #4
 8005296:	4013      	ands	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <HAL_RCC_ClockConfig+0x200>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	0019      	movs	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80052ae:	f000 f829 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052b2:	0001      	movs	r1, r0
 80052b4:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <HAL_RCC_ClockConfig+0x1f8>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	220f      	movs	r2, #15
 80052bc:	401a      	ands	r2, r3
 80052be:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <HAL_RCC_ClockConfig+0x204>)
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	58d3      	ldr	r3, [r2, r3]
 80052c4:	221f      	movs	r2, #31
 80052c6:	4013      	ands	r3, r2
 80052c8:	000a      	movs	r2, r1
 80052ca:	40da      	lsrs	r2, r3
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCC_ClockConfig+0x208>)
 80052ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCC_ClockConfig+0x20c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7fe fa5d 	bl	8003794 <HAL_InitTick>
 80052da:	0003      	movs	r3, r0
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	b004      	add	sp, #16
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40022000 	.word	0x40022000
 80052e8:	00001388 	.word	0x00001388
 80052ec:	40021000 	.word	0x40021000
 80052f0:	fffff0ff 	.word	0xfffff0ff
 80052f4:	ffff8fff 	.word	0xffff8fff
 80052f8:	080097a0 	.word	0x080097a0
 80052fc:	20000074 	.word	0x20000074
 8005300:	20000078 	.word	0x20000078

08005304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800530a:	4b3c      	ldr	r3, [pc, #240]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2238      	movs	r2, #56	; 0x38
 8005310:	4013      	ands	r3, r2
 8005312:	d10f      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005314:	4b39      	ldr	r3, [pc, #228]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	0adb      	lsrs	r3, r3, #11
 800531a:	2207      	movs	r2, #7
 800531c:	4013      	ands	r3, r2
 800531e:	2201      	movs	r2, #1
 8005320:	409a      	lsls	r2, r3
 8005322:	0013      	movs	r3, r2
 8005324:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	4835      	ldr	r0, [pc, #212]	; (8005400 <HAL_RCC_GetSysClockFreq+0xfc>)
 800532a:	f7fa ff05 	bl	8000138 <__udivsi3>
 800532e:	0003      	movs	r3, r0
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e05d      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005334:	4b31      	ldr	r3, [pc, #196]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2238      	movs	r2, #56	; 0x38
 800533a:	4013      	ands	r3, r2
 800533c:	2b08      	cmp	r3, #8
 800533e:	d102      	bne.n	8005346 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005340:	4b30      	ldr	r3, [pc, #192]	; (8005404 <HAL_RCC_GetSysClockFreq+0x100>)
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	e054      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005346:	4b2d      	ldr	r3, [pc, #180]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2238      	movs	r2, #56	; 0x38
 800534c:	4013      	ands	r3, r2
 800534e:	2b10      	cmp	r3, #16
 8005350:	d138      	bne.n	80053c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005352:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2203      	movs	r2, #3
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800535c:	4b27      	ldr	r3, [pc, #156]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	2207      	movs	r2, #7
 8005364:	4013      	ands	r3, r2
 8005366:	3301      	adds	r3, #1
 8005368:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d10d      	bne.n	800538c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	4824      	ldr	r0, [pc, #144]	; (8005404 <HAL_RCC_GetSysClockFreq+0x100>)
 8005374:	f7fa fee0 	bl	8000138 <__udivsi3>
 8005378:	0003      	movs	r3, r0
 800537a:	0019      	movs	r1, r3
 800537c:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	227f      	movs	r2, #127	; 0x7f
 8005384:	4013      	ands	r3, r2
 8005386:	434b      	muls	r3, r1
 8005388:	617b      	str	r3, [r7, #20]
        break;
 800538a:	e00d      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	481c      	ldr	r0, [pc, #112]	; (8005400 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005390:	f7fa fed2 	bl	8000138 <__udivsi3>
 8005394:	0003      	movs	r3, r0
 8005396:	0019      	movs	r1, r3
 8005398:	4b18      	ldr	r3, [pc, #96]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	227f      	movs	r2, #127	; 0x7f
 80053a0:	4013      	ands	r3, r2
 80053a2:	434b      	muls	r3, r1
 80053a4:	617b      	str	r3, [r7, #20]
        break;
 80053a6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80053a8:	4b14      	ldr	r3, [pc, #80]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	0f5b      	lsrs	r3, r3, #29
 80053ae:	2207      	movs	r2, #7
 80053b0:	4013      	ands	r3, r2
 80053b2:	3301      	adds	r3, #1
 80053b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	6978      	ldr	r0, [r7, #20]
 80053ba:	f7fa febd 	bl	8000138 <__udivsi3>
 80053be:	0003      	movs	r3, r0
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	e015      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2238      	movs	r2, #56	; 0x38
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d103      	bne.n	80053d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e00b      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053d8:	4b08      	ldr	r3, [pc, #32]	; (80053fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2238      	movs	r2, #56	; 0x38
 80053de:	4013      	ands	r3, r2
 80053e0:	2b18      	cmp	r3, #24
 80053e2:	d103      	bne.n	80053ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80053e4:	23fa      	movs	r3, #250	; 0xfa
 80053e6:	01db      	lsls	r3, r3, #7
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e001      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053f0:	693b      	ldr	r3, [r7, #16]
}
 80053f2:	0018      	movs	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b006      	add	sp, #24
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	40021000 	.word	0x40021000
 8005400:	00f42400 	.word	0x00f42400
 8005404:	007a1200 	.word	0x007a1200

08005408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800540c:	4b02      	ldr	r3, [pc, #8]	; (8005418 <HAL_RCC_GetHCLKFreq+0x10>)
 800540e:	681b      	ldr	r3, [r3, #0]
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	20000074 	.word	0x20000074

0800541c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800541c:	b5b0      	push	{r4, r5, r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005420:	f7ff fff2 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 8005424:	0004      	movs	r4, r0
 8005426:	f7ff fb49 	bl	8004abc <LL_RCC_GetAPB1Prescaler>
 800542a:	0003      	movs	r3, r0
 800542c:	0b1a      	lsrs	r2, r3, #12
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005430:	0092      	lsls	r2, r2, #2
 8005432:	58d3      	ldr	r3, [r2, r3]
 8005434:	221f      	movs	r2, #31
 8005436:	4013      	ands	r3, r2
 8005438:	40dc      	lsrs	r4, r3
 800543a:	0023      	movs	r3, r4
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	bdb0      	pop	{r4, r5, r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	080097e0 	.word	0x080097e0

08005448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005450:	2313      	movs	r3, #19
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005458:	2312      	movs	r3, #18
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	4013      	ands	r3, r2
 800546a:	d100      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800546c:	e0a3      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546e:	2011      	movs	r0, #17
 8005470:	183b      	adds	r3, r7, r0
 8005472:	2200      	movs	r2, #0
 8005474:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005476:	4b7f      	ldr	r3, [pc, #508]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	055b      	lsls	r3, r3, #21
 800547e:	4013      	ands	r3, r2
 8005480:	d110      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	4b7c      	ldr	r3, [pc, #496]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005486:	4b7b      	ldr	r3, [pc, #492]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005488:	2180      	movs	r1, #128	; 0x80
 800548a:	0549      	lsls	r1, r1, #21
 800548c:	430a      	orrs	r2, r1
 800548e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005490:	4b78      	ldr	r3, [pc, #480]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	055b      	lsls	r3, r3, #21
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800549e:	183b      	adds	r3, r7, r0
 80054a0:	2201      	movs	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054a4:	4b74      	ldr	r3, [pc, #464]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b73      	ldr	r3, [pc, #460]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054aa:	2180      	movs	r1, #128	; 0x80
 80054ac:	0049      	lsls	r1, r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b2:	f7fe f9cb 	bl	800384c <HAL_GetTick>
 80054b6:	0003      	movs	r3, r0
 80054b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ba:	e00b      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054bc:	f7fe f9c6 	bl	800384c <HAL_GetTick>
 80054c0:	0002      	movs	r2, r0
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d904      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80054ca:	2313      	movs	r3, #19
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	2203      	movs	r2, #3
 80054d0:	701a      	strb	r2, [r3, #0]
        break;
 80054d2:	e005      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054d4:	4b68      	ldr	r3, [pc, #416]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4013      	ands	r3, r2
 80054de:	d0ed      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80054e0:	2313      	movs	r3, #19
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d154      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054ea:	4b62      	ldr	r3, [pc, #392]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054ee:	23c0      	movs	r3, #192	; 0xc0
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4013      	ands	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d019      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	429a      	cmp	r2, r3
 8005504:	d014      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005506:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550a:	4a5c      	ldr	r2, [pc, #368]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800550c:	4013      	ands	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005510:	4b58      	ldr	r3, [pc, #352]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005514:	4b57      	ldr	r3, [pc, #348]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	0249      	lsls	r1, r1, #9
 800551a:	430a      	orrs	r2, r1
 800551c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800551e:	4b55      	ldr	r3, [pc, #340]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005522:	4b54      	ldr	r3, [pc, #336]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005524:	4956      	ldr	r1, [pc, #344]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005526:	400a      	ands	r2, r1
 8005528:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800552a:	4b52      	ldr	r3, [pc, #328]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2201      	movs	r2, #1
 8005534:	4013      	ands	r3, r2
 8005536:	d016      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fe f988 	bl	800384c <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005540:	e00c      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005542:	f7fe f983 	bl	800384c <HAL_GetTick>
 8005546:	0002      	movs	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	4a4d      	ldr	r2, [pc, #308]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d904      	bls.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005552:	2313      	movs	r3, #19
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	2203      	movs	r2, #3
 8005558:	701a      	strb	r2, [r3, #0]
            break;
 800555a:	e004      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555c:	4b45      	ldr	r3, [pc, #276]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	2202      	movs	r2, #2
 8005562:	4013      	ands	r3, r2
 8005564:	d0ed      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005566:	2313      	movs	r3, #19
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005570:	4b40      	ldr	r3, [pc, #256]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005574:	4a41      	ldr	r2, [pc, #260]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005580:	430a      	orrs	r2, r1
 8005582:	65da      	str	r2, [r3, #92]	; 0x5c
 8005584:	e00c      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005586:	2312      	movs	r3, #18
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	2213      	movs	r2, #19
 800558c:	18ba      	adds	r2, r7, r2
 800558e:	7812      	ldrb	r2, [r2, #0]
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	e005      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	2312      	movs	r3, #18
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	2213      	movs	r2, #19
 800559a:	18ba      	adds	r2, r7, r2
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055a0:	2311      	movs	r3, #17
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d105      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055aa:	4b32      	ldr	r3, [pc, #200]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ae:	4b31      	ldr	r3, [pc, #196]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055b0:	4935      	ldr	r1, [pc, #212]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80055b2:	400a      	ands	r2, r1
 80055b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2201      	movs	r2, #1
 80055bc:	4013      	ands	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c0:	4b2c      	ldr	r3, [pc, #176]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	2203      	movs	r2, #3
 80055c6:	4393      	bics	r3, r2
 80055c8:	0019      	movs	r1, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055d0:	430a      	orrs	r2, r1
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2220      	movs	r2, #32
 80055da:	4013      	ands	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055de:	4b25      	ldr	r3, [pc, #148]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	4a2a      	ldr	r2, [pc, #168]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	0019      	movs	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	4b21      	ldr	r3, [pc, #132]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055ee:	430a      	orrs	r2, r1
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	01db      	lsls	r3, r3, #7
 80055fa:	4013      	ands	r3, r2
 80055fc:	d015      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055fe:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	0899      	lsrs	r1, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800560c:	430a      	orrs	r2, r1
 800560e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	05db      	lsls	r3, r3, #23
 8005618:	429a      	cmp	r2, r3
 800561a:	d106      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800561c:	4b15      	ldr	r3, [pc, #84]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	4b14      	ldr	r3, [pc, #80]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	0249      	lsls	r1, r1, #9
 8005626:	430a      	orrs	r2, r1
 8005628:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4013      	ands	r3, r2
 8005634:	d016      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005646:	430a      	orrs	r2, r1
 8005648:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	01db      	lsls	r3, r3, #7
 8005652:	429a      	cmp	r2, r3
 8005654:	d106      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800565c:	2180      	movs	r1, #128	; 0x80
 800565e:	0249      	lsls	r1, r1, #9
 8005660:	430a      	orrs	r2, r1
 8005662:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005664:	2312      	movs	r3, #18
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	781b      	ldrb	r3, [r3, #0]
}
 800566a:	0018      	movs	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	b006      	add	sp, #24
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	40021000 	.word	0x40021000
 8005678:	40007000 	.word	0x40007000
 800567c:	fffffcff 	.word	0xfffffcff
 8005680:	fffeffff 	.word	0xfffeffff
 8005684:	00001388 	.word	0x00001388
 8005688:	efffffff 	.word	0xefffffff
 800568c:	ffffcfff 	.word	0xffffcfff
 8005690:	ffff3fff 	.word	0xffff3fff

08005694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e04a      	b.n	800573c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	223d      	movs	r2, #61	; 0x3d
 80056aa:	5c9b      	ldrb	r3, [r3, r2]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	223c      	movs	r2, #60	; 0x3c
 80056b6:	2100      	movs	r1, #0
 80056b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	0018      	movs	r0, r3
 80056be:	f7fd fedb 	bl	8003478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	223d      	movs	r2, #61	; 0x3d
 80056c6:	2102      	movs	r1, #2
 80056c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	0019      	movs	r1, r3
 80056d4:	0010      	movs	r0, r2
 80056d6:	f000 f951 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2248      	movs	r2, #72	; 0x48
 80056de:	2101      	movs	r1, #1
 80056e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	223e      	movs	r2, #62	; 0x3e
 80056e6:	2101      	movs	r1, #1
 80056e8:	5499      	strb	r1, [r3, r2]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	223f      	movs	r2, #63	; 0x3f
 80056ee:	2101      	movs	r1, #1
 80056f0:	5499      	strb	r1, [r3, r2]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2240      	movs	r2, #64	; 0x40
 80056f6:	2101      	movs	r1, #1
 80056f8:	5499      	strb	r1, [r3, r2]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2241      	movs	r2, #65	; 0x41
 80056fe:	2101      	movs	r1, #1
 8005700:	5499      	strb	r1, [r3, r2]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2242      	movs	r2, #66	; 0x42
 8005706:	2101      	movs	r1, #1
 8005708:	5499      	strb	r1, [r3, r2]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2243      	movs	r2, #67	; 0x43
 800570e:	2101      	movs	r1, #1
 8005710:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2244      	movs	r2, #68	; 0x44
 8005716:	2101      	movs	r1, #1
 8005718:	5499      	strb	r1, [r3, r2]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2245      	movs	r2, #69	; 0x45
 800571e:	2101      	movs	r1, #1
 8005720:	5499      	strb	r1, [r3, r2]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2246      	movs	r2, #70	; 0x46
 8005726:	2101      	movs	r1, #1
 8005728:	5499      	strb	r1, [r3, r2]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2247      	movs	r2, #71	; 0x47
 800572e:	2101      	movs	r1, #1
 8005730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	223d      	movs	r2, #61	; 0x3d
 8005736:	2101      	movs	r1, #1
 8005738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b002      	add	sp, #8
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	223d      	movs	r2, #61	; 0x3d
 8005750:	5c9b      	ldrb	r3, [r3, r2]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d001      	beq.n	800575c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e02f      	b.n	80057bc <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	223d      	movs	r2, #61	; 0x3d
 8005760:	2102      	movs	r1, #2
 8005762:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a16      	ldr	r2, [pc, #88]	; (80057c4 <HAL_TIM_Base_Start+0x80>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_TIM_Base_Start+0x34>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <HAL_TIM_Base_Start+0x84>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d116      	bne.n	80057a6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <HAL_TIM_Base_Start+0x88>)
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b06      	cmp	r3, #6
 8005788:	d016      	beq.n	80057b8 <HAL_TIM_Base_Start+0x74>
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	025b      	lsls	r3, r3, #9
 8005790:	429a      	cmp	r2, r3
 8005792:	d011      	beq.n	80057b8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2101      	movs	r1, #1
 80057a0:	430a      	orrs	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a4:	e008      	b.n	80057b8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2101      	movs	r1, #1
 80057b2:	430a      	orrs	r2, r1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e000      	b.n	80057ba <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b004      	add	sp, #16
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40000400 	.word	0x40000400
 80057cc:	00010007 	.word	0x00010007

080057d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057da:	230f      	movs	r3, #15
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	223c      	movs	r2, #60	; 0x3c
 80057e6:	5c9b      	ldrb	r3, [r3, r2]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIM_ConfigClockSource+0x20>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e0bc      	b.n	800596a <HAL_TIM_ConfigClockSource+0x19a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	223c      	movs	r2, #60	; 0x3c
 80057f4:	2101      	movs	r1, #1
 80057f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	223d      	movs	r2, #61	; 0x3d
 80057fc:	2102      	movs	r1, #2
 80057fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4a5a      	ldr	r2, [pc, #360]	; (8005974 <HAL_TIM_ConfigClockSource+0x1a4>)
 800580c:	4013      	ands	r3, r2
 800580e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4a59      	ldr	r2, [pc, #356]	; (8005978 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005814:	4013      	ands	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2280      	movs	r2, #128	; 0x80
 8005826:	0192      	lsls	r2, r2, #6
 8005828:	4293      	cmp	r3, r2
 800582a:	d040      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0xde>
 800582c:	2280      	movs	r2, #128	; 0x80
 800582e:	0192      	lsls	r2, r2, #6
 8005830:	4293      	cmp	r3, r2
 8005832:	d900      	bls.n	8005836 <HAL_TIM_ConfigClockSource+0x66>
 8005834:	e088      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	0152      	lsls	r2, r2, #5
 800583a:	4293      	cmp	r3, r2
 800583c:	d100      	bne.n	8005840 <HAL_TIM_ConfigClockSource+0x70>
 800583e:	e088      	b.n	8005952 <HAL_TIM_ConfigClockSource+0x182>
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	0152      	lsls	r2, r2, #5
 8005844:	4293      	cmp	r3, r2
 8005846:	d900      	bls.n	800584a <HAL_TIM_ConfigClockSource+0x7a>
 8005848:	e07e      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
 800584a:	2b70      	cmp	r3, #112	; 0x70
 800584c:	d018      	beq.n	8005880 <HAL_TIM_ConfigClockSource+0xb0>
 800584e:	d900      	bls.n	8005852 <HAL_TIM_ConfigClockSource+0x82>
 8005850:	e07a      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
 8005852:	2b60      	cmp	r3, #96	; 0x60
 8005854:	d04f      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x126>
 8005856:	d900      	bls.n	800585a <HAL_TIM_ConfigClockSource+0x8a>
 8005858:	e076      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
 800585a:	2b50      	cmp	r3, #80	; 0x50
 800585c:	d03b      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x106>
 800585e:	d900      	bls.n	8005862 <HAL_TIM_ConfigClockSource+0x92>
 8005860:	e072      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d057      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x146>
 8005866:	d900      	bls.n	800586a <HAL_TIM_ConfigClockSource+0x9a>
 8005868:	e06e      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
 800586a:	2b30      	cmp	r3, #48	; 0x30
 800586c:	d063      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x166>
 800586e:	d86b      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
 8005870:	2b20      	cmp	r3, #32
 8005872:	d060      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x166>
 8005874:	d868      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d05d      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x166>
 800587a:	2b10      	cmp	r3, #16
 800587c:	d05b      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x166>
 800587e:	e063      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	6899      	ldr	r1, [r3, #8]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f000 f95c 	bl	8005b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2277      	movs	r2, #119	; 0x77
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	609a      	str	r2, [r3, #8]
      break;
 80058ac:	e052      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6899      	ldr	r1, [r3, #8]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f000 f945 	bl	8005b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	01c9      	lsls	r1, r1, #7
 80058d0:	430a      	orrs	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]
      break;
 80058d4:	e03e      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6859      	ldr	r1, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	001a      	movs	r2, r3
 80058e4:	f000 f8b6 	bl	8005a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2150      	movs	r1, #80	; 0x50
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 f910 	bl	8005b14 <TIM_ITRx_SetConfig>
      break;
 80058f4:	e02e      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6859      	ldr	r1, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	001a      	movs	r2, r3
 8005904:	f000 f8d4 	bl	8005ab0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2160      	movs	r1, #96	; 0x60
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f900 	bl	8005b14 <TIM_ITRx_SetConfig>
      break;
 8005914:	e01e      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6859      	ldr	r1, [r3, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	001a      	movs	r2, r3
 8005924:	f000 f896 	bl	8005a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2140      	movs	r1, #64	; 0x40
 800592e:	0018      	movs	r0, r3
 8005930:	f000 f8f0 	bl	8005b14 <TIM_ITRx_SetConfig>
      break;
 8005934:	e00e      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	0019      	movs	r1, r3
 8005940:	0010      	movs	r0, r2
 8005942:	f000 f8e7 	bl	8005b14 <TIM_ITRx_SetConfig>
      break;
 8005946:	e005      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005948:	230f      	movs	r3, #15
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
      break;
 8005950:	e000      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005952:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	223d      	movs	r2, #61	; 0x3d
 8005958:	2101      	movs	r1, #1
 800595a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	223c      	movs	r2, #60	; 0x3c
 8005960:	2100      	movs	r1, #0
 8005962:	5499      	strb	r1, [r3, r2]

  return status;
 8005964:	230f      	movs	r3, #15
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	781b      	ldrb	r3, [r3, #0]
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	ffceff88 	.word	0xffceff88
 8005978:	ffff00ff 	.word	0xffff00ff

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <TIM_Base_SetConfig+0xc0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_Base_SetConfig+0x20>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <TIM_Base_SetConfig+0xc4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2270      	movs	r2, #112	; 0x70
 80059a0:	4393      	bics	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a22      	ldr	r2, [pc, #136]	; (8005a3c <TIM_Base_SetConfig+0xc0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_Base_SetConfig+0x5a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <TIM_Base_SetConfig+0xc4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0x5a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a20      	ldr	r2, [pc, #128]	; (8005a44 <TIM_Base_SetConfig+0xc8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0x5a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1f      	ldr	r2, [pc, #124]	; (8005a48 <TIM_Base_SetConfig+0xcc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0x5a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <TIM_Base_SetConfig+0xd0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <TIM_Base_SetConfig+0xd4>)
 80059da:	4013      	ands	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	4393      	bics	r3, r2
 80059ee:	001a      	movs	r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <TIM_Base_SetConfig+0xc0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <TIM_Base_SetConfig+0xcc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_Base_SetConfig+0xaa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <TIM_Base_SetConfig+0xd0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d103      	bne.n	8005a2e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	615a      	str	r2, [r3, #20]
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b004      	add	sp, #16
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40002000 	.word	0x40002000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800
 8005a50:	fffffcff 	.word	0xfffffcff

08005a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	4393      	bics	r3, r2
 8005a6e:	001a      	movs	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	22f0      	movs	r2, #240	; 0xf0
 8005a7e:	4393      	bics	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	220a      	movs	r2, #10
 8005a90:	4393      	bics	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b006      	add	sp, #24
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	2210      	movs	r2, #16
 8005ac2:	4393      	bics	r3, r2
 8005ac4:	001a      	movs	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	4a0d      	ldr	r2, [pc, #52]	; (8005b10 <TIM_TI2_ConfigInputStage+0x60>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	031b      	lsls	r3, r3, #12
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	22a0      	movs	r2, #160	; 0xa0
 8005aec:	4393      	bics	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b006      	add	sp, #24
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	ffff0fff 	.word	0xffff0fff

08005b14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <TIM_ITRx_SetConfig+0x34>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	2207      	movs	r2, #7
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	609a      	str	r2, [r3, #8]
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b004      	add	sp, #16
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	ffcfff8f 	.word	0xffcfff8f

08005b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <TIM_ETR_SetConfig+0x3c>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	46c0      	nop			; (mov r8, r8)
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b006      	add	sp, #24
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	ffff00ff 	.word	0xffff00ff

08005b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	223c      	movs	r2, #60	; 0x3c
 8005b9a:	5c9b      	ldrb	r3, [r3, r2]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e04a      	b.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	223c      	movs	r2, #60	; 0x3c
 8005ba8:	2101      	movs	r1, #1
 8005baa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	223d      	movs	r2, #61	; 0x3d
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d108      	bne.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2270      	movs	r2, #112	; 0x70
 8005be4:	4393      	bics	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a10      	ldr	r2, [pc, #64]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d10c      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	4393      	bics	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	223d      	movs	r2, #61	; 0x3d
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	223c      	movs	r2, #60	; 0x3c
 8005c34:	2100      	movs	r1, #0
 8005c36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b004      	add	sp, #16
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	ff0fffff 	.word	0xff0fffff
 8005c4c:	40000400 	.word	0x40000400

08005c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e046      	b.n	8005cf0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2284      	movs	r2, #132	; 0x84
 8005c66:	589b      	ldr	r3, [r3, r2]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2280      	movs	r2, #128	; 0x80
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	0018      	movs	r0, r3
 8005c78:	f7fd fc1e 	bl	80034b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2284      	movs	r2, #132	; 0x84
 8005c80:	2124      	movs	r1, #36	; 0x24
 8005c82:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2101      	movs	r1, #1
 8005c90:	438a      	bics	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f8dc 	bl	8005e54 <UART_SetConfig>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e024      	b.n	8005cf0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f000 fa39 	bl	8006128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	490d      	ldr	r1, [pc, #52]	; (8005cf8 <HAL_UART_Init+0xa8>)
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	212a      	movs	r1, #42	; 0x2a
 8005cd2:	438a      	bics	r2, r1
 8005cd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f000 fad1 	bl	8006290 <UART_CheckIdleState>
 8005cee:	0003      	movs	r3, r0
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b002      	add	sp, #8
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	ffffb7ff 	.word	0xffffb7ff

08005cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	1dbb      	adds	r3, r7, #6
 8005d0a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2284      	movs	r2, #132	; 0x84
 8005d10:	589b      	ldr	r3, [r3, r2]
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d000      	beq.n	8005d18 <HAL_UART_Transmit+0x1c>
 8005d16:	e097      	b.n	8005e48 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_UART_Transmit+0x2a>
 8005d1e:	1dbb      	adds	r3, r7, #6
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e08f      	b.n	8005e4a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	015b      	lsls	r3, r3, #5
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d109      	bne.n	8005d4a <HAL_UART_Transmit+0x4e>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2201      	movs	r2, #1
 8005d42:	4013      	ands	r3, r2
 8005d44:	d001      	beq.n	8005d4a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e07f      	b.n	8005e4a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2280      	movs	r2, #128	; 0x80
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_UART_Transmit+0x5c>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e078      	b.n	8005e4a <HAL_UART_Transmit+0x14e>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2280      	movs	r2, #128	; 0x80
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	228c      	movs	r2, #140	; 0x8c
 8005d64:	2100      	movs	r1, #0
 8005d66:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2284      	movs	r2, #132	; 0x84
 8005d6c:	2121      	movs	r1, #33	; 0x21
 8005d6e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d70:	f7fd fd6c 	bl	800384c <HAL_GetTick>
 8005d74:	0003      	movs	r3, r0
 8005d76:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1dba      	adds	r2, r7, #6
 8005d7c:	2154      	movs	r1, #84	; 0x54
 8005d7e:	8812      	ldrh	r2, [r2, #0]
 8005d80:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1dba      	adds	r2, r7, #6
 8005d86:	2156      	movs	r1, #86	; 0x56
 8005d88:	8812      	ldrh	r2, [r2, #0]
 8005d8a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	015b      	lsls	r3, r3, #5
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d108      	bne.n	8005daa <HAL_UART_Transmit+0xae>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e003      	b.n	8005db2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2280      	movs	r2, #128	; 0x80
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005dba:	e02c      	b.n	8005e16 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	0013      	movs	r3, r2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2180      	movs	r1, #128	; 0x80
 8005dca:	f000 faab 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8005dce:	1e03      	subs	r3, r0, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e039      	b.n	8005e4a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	001a      	movs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	05d2      	lsls	r2, r2, #23
 8005de8:	0dd2      	lsrs	r2, r2, #23
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	3302      	adds	r3, #2
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	e007      	b.n	8005e04 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3301      	adds	r3, #1
 8005e02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2256      	movs	r2, #86	; 0x56
 8005e08:	5a9b      	ldrh	r3, [r3, r2]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b299      	uxth	r1, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2256      	movs	r2, #86	; 0x56
 8005e14:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2256      	movs	r2, #86	; 0x56
 8005e1a:	5a9b      	ldrh	r3, [r3, r2]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1cc      	bne.n	8005dbc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	0013      	movs	r3, r2
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2140      	movs	r1, #64	; 0x40
 8005e30:	f000 fa78 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8005e34:	1e03      	subs	r3, r0, #0
 8005e36:	d001      	beq.n	8005e3c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e006      	b.n	8005e4a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2284      	movs	r2, #132	; 0x84
 8005e40:	2120      	movs	r1, #32
 8005e42:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e000      	b.n	8005e4a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
  }
}
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b008      	add	sp, #32
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e5c:	231a      	movs	r3, #26
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4aa1      	ldr	r2, [pc, #644]	; (8006108 <UART_SetConfig+0x2b4>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	0019      	movs	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	4a9c      	ldr	r2, [pc, #624]	; (800610c <UART_SetConfig+0x2b8>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a93      	ldr	r2, [pc, #588]	; (8006110 <UART_SetConfig+0x2bc>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	0019      	movs	r1, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	220f      	movs	r2, #15
 8005ed8:	4393      	bics	r3, r2
 8005eda:	0019      	movs	r1, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a89      	ldr	r2, [pc, #548]	; (8006114 <UART_SetConfig+0x2c0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d127      	bne.n	8005f42 <UART_SetConfig+0xee>
 8005ef2:	4b89      	ldr	r3, [pc, #548]	; (8006118 <UART_SetConfig+0x2c4>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	2203      	movs	r2, #3
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d017      	beq.n	8005f2e <UART_SetConfig+0xda>
 8005efe:	d81b      	bhi.n	8005f38 <UART_SetConfig+0xe4>
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d00a      	beq.n	8005f1a <UART_SetConfig+0xc6>
 8005f04:	d818      	bhi.n	8005f38 <UART_SetConfig+0xe4>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <UART_SetConfig+0xbc>
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d00a      	beq.n	8005f24 <UART_SetConfig+0xd0>
 8005f0e:	e013      	b.n	8005f38 <UART_SetConfig+0xe4>
 8005f10:	231b      	movs	r3, #27
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e021      	b.n	8005f5e <UART_SetConfig+0x10a>
 8005f1a:	231b      	movs	r3, #27
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	2202      	movs	r2, #2
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e01c      	b.n	8005f5e <UART_SetConfig+0x10a>
 8005f24:	231b      	movs	r3, #27
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	2204      	movs	r2, #4
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	e017      	b.n	8005f5e <UART_SetConfig+0x10a>
 8005f2e:	231b      	movs	r3, #27
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	2208      	movs	r2, #8
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	e012      	b.n	8005f5e <UART_SetConfig+0x10a>
 8005f38:	231b      	movs	r3, #27
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e00d      	b.n	8005f5e <UART_SetConfig+0x10a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a75      	ldr	r2, [pc, #468]	; (800611c <UART_SetConfig+0x2c8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d104      	bne.n	8005f56 <UART_SetConfig+0x102>
 8005f4c:	231b      	movs	r3, #27
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e003      	b.n	8005f5e <UART_SetConfig+0x10a>
 8005f56:	231b      	movs	r3, #27
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	2210      	movs	r2, #16
 8005f5c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d000      	beq.n	8005f6c <UART_SetConfig+0x118>
 8005f6a:	e065      	b.n	8006038 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8005f6c:	231b      	movs	r3, #27
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d015      	beq.n	8005fa2 <UART_SetConfig+0x14e>
 8005f76:	dc18      	bgt.n	8005faa <UART_SetConfig+0x156>
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d00d      	beq.n	8005f98 <UART_SetConfig+0x144>
 8005f7c:	dc15      	bgt.n	8005faa <UART_SetConfig+0x156>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <UART_SetConfig+0x134>
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d005      	beq.n	8005f92 <UART_SetConfig+0x13e>
 8005f86:	e010      	b.n	8005faa <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f88:	f7ff fa48 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	617b      	str	r3, [r7, #20]
        break;
 8005f90:	e012      	b.n	8005fb8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f92:	4b63      	ldr	r3, [pc, #396]	; (8006120 <UART_SetConfig+0x2cc>)
 8005f94:	617b      	str	r3, [r7, #20]
        break;
 8005f96:	e00f      	b.n	8005fb8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f98:	f7ff f9b4 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	617b      	str	r3, [r7, #20]
        break;
 8005fa0:	e00a      	b.n	8005fb8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	617b      	str	r3, [r7, #20]
        break;
 8005fa8:	e006      	b.n	8005fb8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fae:	231a      	movs	r3, #26
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
        break;
 8005fb6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d100      	bne.n	8005fc0 <UART_SetConfig+0x16c>
 8005fbe:	e08d      	b.n	80060dc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fc4:	4b57      	ldr	r3, [pc, #348]	; (8006124 <UART_SetConfig+0x2d0>)
 8005fc6:	0052      	lsls	r2, r2, #1
 8005fc8:	5ad3      	ldrh	r3, [r2, r3]
 8005fca:	0019      	movs	r1, r3
 8005fcc:	6978      	ldr	r0, [r7, #20]
 8005fce:	f7fa f8b3 	bl	8000138 <__udivsi3>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	005a      	lsls	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	18d2      	adds	r2, r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	0010      	movs	r0, r2
 8005fe6:	f7fa f8a7 	bl	8000138 <__udivsi3>
 8005fea:	0003      	movs	r3, r0
 8005fec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b0f      	cmp	r3, #15
 8005ff2:	d91c      	bls.n	800602e <UART_SetConfig+0x1da>
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	025b      	lsls	r3, r3, #9
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d217      	bcs.n	800602e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	b29a      	uxth	r2, r3
 8006002:	200e      	movs	r0, #14
 8006004:	183b      	adds	r3, r7, r0
 8006006:	210f      	movs	r1, #15
 8006008:	438a      	bics	r2, r1
 800600a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	b29b      	uxth	r3, r3
 8006012:	2207      	movs	r2, #7
 8006014:	4013      	ands	r3, r2
 8006016:	b299      	uxth	r1, r3
 8006018:	183b      	adds	r3, r7, r0
 800601a:	183a      	adds	r2, r7, r0
 800601c:	8812      	ldrh	r2, [r2, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	183a      	adds	r2, r7, r0
 8006028:	8812      	ldrh	r2, [r2, #0]
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	e056      	b.n	80060dc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800602e:	231a      	movs	r3, #26
 8006030:	18fb      	adds	r3, r7, r3
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e051      	b.n	80060dc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006038:	231b      	movs	r3, #27
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b08      	cmp	r3, #8
 8006040:	d015      	beq.n	800606e <UART_SetConfig+0x21a>
 8006042:	dc18      	bgt.n	8006076 <UART_SetConfig+0x222>
 8006044:	2b04      	cmp	r3, #4
 8006046:	d00d      	beq.n	8006064 <UART_SetConfig+0x210>
 8006048:	dc15      	bgt.n	8006076 <UART_SetConfig+0x222>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <UART_SetConfig+0x200>
 800604e:	2b02      	cmp	r3, #2
 8006050:	d005      	beq.n	800605e <UART_SetConfig+0x20a>
 8006052:	e010      	b.n	8006076 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006054:	f7ff f9e2 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8006058:	0003      	movs	r3, r0
 800605a:	617b      	str	r3, [r7, #20]
        break;
 800605c:	e012      	b.n	8006084 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800605e:	4b30      	ldr	r3, [pc, #192]	; (8006120 <UART_SetConfig+0x2cc>)
 8006060:	617b      	str	r3, [r7, #20]
        break;
 8006062:	e00f      	b.n	8006084 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006064:	f7ff f94e 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8006068:	0003      	movs	r3, r0
 800606a:	617b      	str	r3, [r7, #20]
        break;
 800606c:	e00a      	b.n	8006084 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	617b      	str	r3, [r7, #20]
        break;
 8006074:	e006      	b.n	8006084 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800607a:	231a      	movs	r3, #26
 800607c:	18fb      	adds	r3, r7, r3
 800607e:	2201      	movs	r2, #1
 8006080:	701a      	strb	r2, [r3, #0]
        break;
 8006082:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d028      	beq.n	80060dc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800608e:	4b25      	ldr	r3, [pc, #148]	; (8006124 <UART_SetConfig+0x2d0>)
 8006090:	0052      	lsls	r2, r2, #1
 8006092:	5ad3      	ldrh	r3, [r2, r3]
 8006094:	0019      	movs	r1, r3
 8006096:	6978      	ldr	r0, [r7, #20]
 8006098:	f7fa f84e 	bl	8000138 <__udivsi3>
 800609c:	0003      	movs	r3, r0
 800609e:	001a      	movs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	18d2      	adds	r2, r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	0019      	movs	r1, r3
 80060ae:	0010      	movs	r0, r2
 80060b0:	f7fa f842 	bl	8000138 <__udivsi3>
 80060b4:	0003      	movs	r3, r0
 80060b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b0f      	cmp	r3, #15
 80060bc:	d90a      	bls.n	80060d4 <UART_SetConfig+0x280>
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	025b      	lsls	r3, r3, #9
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d205      	bcs.n	80060d4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60da      	str	r2, [r3, #12]
 80060d2:	e003      	b.n	80060dc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80060d4:	231a      	movs	r3, #26
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	226a      	movs	r2, #106	; 0x6a
 80060e0:	2101      	movs	r1, #1
 80060e2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2268      	movs	r2, #104	; 0x68
 80060e8:	2101      	movs	r1, #1
 80060ea:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060f8:	231a      	movs	r3, #26
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	781b      	ldrb	r3, [r3, #0]
}
 80060fe:	0018      	movs	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	b008      	add	sp, #32
 8006104:	bd80      	pop	{r7, pc}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	cfff69f3 	.word	0xcfff69f3
 800610c:	ffffcfff 	.word	0xffffcfff
 8006110:	11fff4ff 	.word	0x11fff4ff
 8006114:	40013800 	.word	0x40013800
 8006118:	40021000 	.word	0x40021000
 800611c:	40004400 	.word	0x40004400
 8006120:	00f42400 	.word	0x00f42400
 8006124:	08009800 	.word	0x08009800

08006128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	2201      	movs	r2, #1
 8006136:	4013      	ands	r3, r2
 8006138:	d00b      	beq.n	8006152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a4a      	ldr	r2, [pc, #296]	; (800626c <UART_AdvFeatureConfig+0x144>)
 8006142:	4013      	ands	r3, r2
 8006144:	0019      	movs	r1, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	2202      	movs	r2, #2
 8006158:	4013      	ands	r3, r2
 800615a:	d00b      	beq.n	8006174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4a43      	ldr	r2, [pc, #268]	; (8006270 <UART_AdvFeatureConfig+0x148>)
 8006164:	4013      	ands	r3, r2
 8006166:	0019      	movs	r1, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	2204      	movs	r2, #4
 800617a:	4013      	ands	r3, r2
 800617c:	d00b      	beq.n	8006196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4a3b      	ldr	r2, [pc, #236]	; (8006274 <UART_AdvFeatureConfig+0x14c>)
 8006186:	4013      	ands	r3, r2
 8006188:	0019      	movs	r1, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	2208      	movs	r2, #8
 800619c:	4013      	ands	r3, r2
 800619e:	d00b      	beq.n	80061b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4a34      	ldr	r2, [pc, #208]	; (8006278 <UART_AdvFeatureConfig+0x150>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	0019      	movs	r1, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	2210      	movs	r2, #16
 80061be:	4013      	ands	r3, r2
 80061c0:	d00b      	beq.n	80061da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4a2c      	ldr	r2, [pc, #176]	; (800627c <UART_AdvFeatureConfig+0x154>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	0019      	movs	r1, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	2220      	movs	r2, #32
 80061e0:	4013      	ands	r3, r2
 80061e2:	d00b      	beq.n	80061fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	4a25      	ldr	r2, [pc, #148]	; (8006280 <UART_AdvFeatureConfig+0x158>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	0019      	movs	r1, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	2240      	movs	r2, #64	; 0x40
 8006202:	4013      	ands	r3, r2
 8006204:	d01d      	beq.n	8006242 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <UART_AdvFeatureConfig+0x15c>)
 800620e:	4013      	ands	r3, r2
 8006210:	0019      	movs	r1, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	035b      	lsls	r3, r3, #13
 8006226:	429a      	cmp	r2, r3
 8006228:	d10b      	bne.n	8006242 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	4a15      	ldr	r2, [pc, #84]	; (8006288 <UART_AdvFeatureConfig+0x160>)
 8006232:	4013      	ands	r3, r2
 8006234:	0019      	movs	r1, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	2280      	movs	r2, #128	; 0x80
 8006248:	4013      	ands	r3, r2
 800624a:	d00b      	beq.n	8006264 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4a0e      	ldr	r2, [pc, #56]	; (800628c <UART_AdvFeatureConfig+0x164>)
 8006254:	4013      	ands	r3, r2
 8006256:	0019      	movs	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	605a      	str	r2, [r3, #4]
  }
}
 8006264:	46c0      	nop			; (mov r8, r8)
 8006266:	46bd      	mov	sp, r7
 8006268:	b002      	add	sp, #8
 800626a:	bd80      	pop	{r7, pc}
 800626c:	fffdffff 	.word	0xfffdffff
 8006270:	fffeffff 	.word	0xfffeffff
 8006274:	fffbffff 	.word	0xfffbffff
 8006278:	ffff7fff 	.word	0xffff7fff
 800627c:	ffffefff 	.word	0xffffefff
 8006280:	ffffdfff 	.word	0xffffdfff
 8006284:	ffefffff 	.word	0xffefffff
 8006288:	ff9fffff 	.word	0xff9fffff
 800628c:	fff7ffff 	.word	0xfff7ffff

08006290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af02      	add	r7, sp, #8
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	228c      	movs	r2, #140	; 0x8c
 800629c:	2100      	movs	r1, #0
 800629e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a0:	f7fd fad4 	bl	800384c <HAL_GetTick>
 80062a4:	0003      	movs	r3, r0
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2208      	movs	r2, #8
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d10c      	bne.n	80062d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2280      	movs	r2, #128	; 0x80
 80062ba:	0391      	lsls	r1, r2, #14
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4a18      	ldr	r2, [pc, #96]	; (8006320 <UART_CheckIdleState+0x90>)
 80062c0:	9200      	str	r2, [sp, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f000 f82e 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d001      	beq.n	80062d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e023      	b.n	8006318 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2204      	movs	r2, #4
 80062d8:	4013      	ands	r3, r2
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d10c      	bne.n	80062f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2280      	movs	r2, #128	; 0x80
 80062e2:	03d1      	lsls	r1, r2, #15
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4a0e      	ldr	r2, [pc, #56]	; (8006320 <UART_CheckIdleState+0x90>)
 80062e8:	9200      	str	r2, [sp, #0]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f000 f81a 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 80062f0:	1e03      	subs	r3, r0, #0
 80062f2:	d001      	beq.n	80062f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e00f      	b.n	8006318 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2284      	movs	r2, #132	; 0x84
 80062fc:	2120      	movs	r1, #32
 80062fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2288      	movs	r2, #136	; 0x88
 8006304:	2120      	movs	r1, #32
 8006306:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2280      	movs	r2, #128	; 0x80
 8006312:	2100      	movs	r1, #0
 8006314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b004      	add	sp, #16
 800631e:	bd80      	pop	{r7, pc}
 8006320:	01ffffff 	.word	0x01ffffff

08006324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b094      	sub	sp, #80	; 0x50
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	1dfb      	adds	r3, r7, #7
 8006332:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006334:	e0a7      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006338:	3301      	adds	r3, #1
 800633a:	d100      	bne.n	800633e <UART_WaitOnFlagUntilTimeout+0x1a>
 800633c:	e0a3      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633e:	f7fd fa85 	bl	800384c <HAL_GetTick>
 8006342:	0002      	movs	r2, r0
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800634a:	429a      	cmp	r2, r3
 800634c:	d302      	bcc.n	8006354 <UART_WaitOnFlagUntilTimeout+0x30>
 800634e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006350:	2b00      	cmp	r3, #0
 8006352:	d13f      	bne.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006354:	f3ef 8310 	mrs	r3, PRIMASK
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800635c:	647b      	str	r3, [r7, #68]	; 0x44
 800635e:	2301      	movs	r3, #1
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	f383 8810 	msr	PRIMASK, r3
}
 8006368:	46c0      	nop			; (mov r8, r8)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	494e      	ldr	r1, [pc, #312]	; (80064b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006376:	400a      	ands	r2, r1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	f383 8810 	msr	PRIMASK, r3
}
 8006384:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006386:	f3ef 8310 	mrs	r3, PRIMASK
 800638a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	643b      	str	r3, [r7, #64]	; 0x40
 8006390:	2301      	movs	r3, #1
 8006392:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	f383 8810 	msr	PRIMASK, r3
}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2101      	movs	r1, #1
 80063a8:	438a      	bics	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b2:	f383 8810 	msr	PRIMASK, r3
}
 80063b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2284      	movs	r2, #132	; 0x84
 80063bc:	2120      	movs	r1, #32
 80063be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2288      	movs	r2, #136	; 0x88
 80063c4:	2120      	movs	r1, #32
 80063c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	2100      	movs	r1, #0
 80063ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e069      	b.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2204      	movs	r2, #4
 80063dc:	4013      	ands	r3, r2
 80063de:	d052      	beq.n	8006486 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69da      	ldr	r2, [r3, #28]
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	401a      	ands	r2, r3
 80063ec:	2380      	movs	r3, #128	; 0x80
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d148      	bne.n	8006486 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2280      	movs	r2, #128	; 0x80
 80063fa:	0112      	lsls	r2, r2, #4
 80063fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006402:	613b      	str	r3, [r7, #16]
  return(result);
 8006404:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006408:	2301      	movs	r3, #1
 800640a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f383 8810 	msr	PRIMASK, r3
}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4924      	ldr	r1, [pc, #144]	; (80064b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006420:	400a      	ands	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006426:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f383 8810 	msr	PRIMASK, r3
}
 800642e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006430:	f3ef 8310 	mrs	r3, PRIMASK
 8006434:	61fb      	str	r3, [r7, #28]
  return(result);
 8006436:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	64bb      	str	r3, [r7, #72]	; 0x48
 800643a:	2301      	movs	r3, #1
 800643c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	f383 8810 	msr	PRIMASK, r3
}
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2101      	movs	r1, #1
 8006452:	438a      	bics	r2, r1
 8006454:	609a      	str	r2, [r3, #8]
 8006456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	f383 8810 	msr	PRIMASK, r3
}
 8006460:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2284      	movs	r2, #132	; 0x84
 8006466:	2120      	movs	r1, #32
 8006468:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2288      	movs	r2, #136	; 0x88
 800646e:	2120      	movs	r1, #32
 8006470:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	228c      	movs	r2, #140	; 0x8c
 8006476:	2120      	movs	r1, #32
 8006478:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2280      	movs	r2, #128	; 0x80
 800647e:	2100      	movs	r1, #0
 8006480:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e010      	b.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	4013      	ands	r3, r2
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	425a      	negs	r2, r3
 8006496:	4153      	adcs	r3, r2
 8006498:	b2db      	uxtb	r3, r3
 800649a:	001a      	movs	r2, r3
 800649c:	1dfb      	adds	r3, r7, #7
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d100      	bne.n	80064a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80064a4:	e747      	b.n	8006336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	0018      	movs	r0, r3
 80064aa:	46bd      	mov	sp, r7
 80064ac:	b014      	add	sp, #80	; 0x50
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	fffffe5f 	.word	0xfffffe5f

080064b4 <__errno>:
 80064b4:	4b01      	ldr	r3, [pc, #4]	; (80064bc <__errno+0x8>)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	4770      	bx	lr
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	20000080 	.word	0x20000080

080064c0 <__libc_init_array>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	2600      	movs	r6, #0
 80064c4:	4d0c      	ldr	r5, [pc, #48]	; (80064f8 <__libc_init_array+0x38>)
 80064c6:	4c0d      	ldr	r4, [pc, #52]	; (80064fc <__libc_init_array+0x3c>)
 80064c8:	1b64      	subs	r4, r4, r5
 80064ca:	10a4      	asrs	r4, r4, #2
 80064cc:	42a6      	cmp	r6, r4
 80064ce:	d109      	bne.n	80064e4 <__libc_init_array+0x24>
 80064d0:	2600      	movs	r6, #0
 80064d2:	f002 ffbb 	bl	800944c <_init>
 80064d6:	4d0a      	ldr	r5, [pc, #40]	; (8006500 <__libc_init_array+0x40>)
 80064d8:	4c0a      	ldr	r4, [pc, #40]	; (8006504 <__libc_init_array+0x44>)
 80064da:	1b64      	subs	r4, r4, r5
 80064dc:	10a4      	asrs	r4, r4, #2
 80064de:	42a6      	cmp	r6, r4
 80064e0:	d105      	bne.n	80064ee <__libc_init_array+0x2e>
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	00b3      	lsls	r3, r6, #2
 80064e6:	58eb      	ldr	r3, [r5, r3]
 80064e8:	4798      	blx	r3
 80064ea:	3601      	adds	r6, #1
 80064ec:	e7ee      	b.n	80064cc <__libc_init_array+0xc>
 80064ee:	00b3      	lsls	r3, r6, #2
 80064f0:	58eb      	ldr	r3, [r5, r3]
 80064f2:	4798      	blx	r3
 80064f4:	3601      	adds	r6, #1
 80064f6:	e7f2      	b.n	80064de <__libc_init_array+0x1e>
 80064f8:	08009bf4 	.word	0x08009bf4
 80064fc:	08009bf4 	.word	0x08009bf4
 8006500:	08009bf4 	.word	0x08009bf4
 8006504:	08009bf8 	.word	0x08009bf8

08006508 <memset>:
 8006508:	0003      	movs	r3, r0
 800650a:	1882      	adds	r2, r0, r2
 800650c:	4293      	cmp	r3, r2
 800650e:	d100      	bne.n	8006512 <memset+0xa>
 8006510:	4770      	bx	lr
 8006512:	7019      	strb	r1, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	e7f9      	b.n	800650c <memset+0x4>

08006518 <__cvt>:
 8006518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651a:	001e      	movs	r6, r3
 800651c:	2300      	movs	r3, #0
 800651e:	0014      	movs	r4, r2
 8006520:	b08b      	sub	sp, #44	; 0x2c
 8006522:	429e      	cmp	r6, r3
 8006524:	da04      	bge.n	8006530 <__cvt+0x18>
 8006526:	2180      	movs	r1, #128	; 0x80
 8006528:	0609      	lsls	r1, r1, #24
 800652a:	1873      	adds	r3, r6, r1
 800652c:	001e      	movs	r6, r3
 800652e:	232d      	movs	r3, #45	; 0x2d
 8006530:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006532:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006534:	7013      	strb	r3, [r2, #0]
 8006536:	2320      	movs	r3, #32
 8006538:	2203      	movs	r2, #3
 800653a:	439f      	bics	r7, r3
 800653c:	2f46      	cmp	r7, #70	; 0x46
 800653e:	d007      	beq.n	8006550 <__cvt+0x38>
 8006540:	003b      	movs	r3, r7
 8006542:	3b45      	subs	r3, #69	; 0x45
 8006544:	4259      	negs	r1, r3
 8006546:	414b      	adcs	r3, r1
 8006548:	9910      	ldr	r1, [sp, #64]	; 0x40
 800654a:	3a01      	subs	r2, #1
 800654c:	18cb      	adds	r3, r1, r3
 800654e:	9310      	str	r3, [sp, #64]	; 0x40
 8006550:	ab09      	add	r3, sp, #36	; 0x24
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	ab08      	add	r3, sp, #32
 8006556:	9303      	str	r3, [sp, #12]
 8006558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800655a:	9200      	str	r2, [sp, #0]
 800655c:	9302      	str	r3, [sp, #8]
 800655e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006560:	0022      	movs	r2, r4
 8006562:	9301      	str	r3, [sp, #4]
 8006564:	0033      	movs	r3, r6
 8006566:	f000 fcf1 	bl	8006f4c <_dtoa_r>
 800656a:	0005      	movs	r5, r0
 800656c:	2f47      	cmp	r7, #71	; 0x47
 800656e:	d102      	bne.n	8006576 <__cvt+0x5e>
 8006570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006572:	07db      	lsls	r3, r3, #31
 8006574:	d528      	bpl.n	80065c8 <__cvt+0xb0>
 8006576:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006578:	18eb      	adds	r3, r5, r3
 800657a:	9307      	str	r3, [sp, #28]
 800657c:	2f46      	cmp	r7, #70	; 0x46
 800657e:	d114      	bne.n	80065aa <__cvt+0x92>
 8006580:	782b      	ldrb	r3, [r5, #0]
 8006582:	2b30      	cmp	r3, #48	; 0x30
 8006584:	d10c      	bne.n	80065a0 <__cvt+0x88>
 8006586:	2200      	movs	r2, #0
 8006588:	2300      	movs	r3, #0
 800658a:	0020      	movs	r0, r4
 800658c:	0031      	movs	r1, r6
 800658e:	f7f9 ff59 	bl	8000444 <__aeabi_dcmpeq>
 8006592:	2800      	cmp	r0, #0
 8006594:	d104      	bne.n	80065a0 <__cvt+0x88>
 8006596:	2301      	movs	r3, #1
 8006598:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800659a:	1a9b      	subs	r3, r3, r2
 800659c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065a2:	9a07      	ldr	r2, [sp, #28]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	18d3      	adds	r3, r2, r3
 80065a8:	9307      	str	r3, [sp, #28]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2300      	movs	r3, #0
 80065ae:	0020      	movs	r0, r4
 80065b0:	0031      	movs	r1, r6
 80065b2:	f7f9 ff47 	bl	8000444 <__aeabi_dcmpeq>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d001      	beq.n	80065be <__cvt+0xa6>
 80065ba:	9b07      	ldr	r3, [sp, #28]
 80065bc:	9309      	str	r3, [sp, #36]	; 0x24
 80065be:	2230      	movs	r2, #48	; 0x30
 80065c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c2:	9907      	ldr	r1, [sp, #28]
 80065c4:	428b      	cmp	r3, r1
 80065c6:	d306      	bcc.n	80065d6 <__cvt+0xbe>
 80065c8:	0028      	movs	r0, r5
 80065ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065ce:	1b5b      	subs	r3, r3, r5
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	b00b      	add	sp, #44	; 0x2c
 80065d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d6:	1c59      	adds	r1, r3, #1
 80065d8:	9109      	str	r1, [sp, #36]	; 0x24
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e7f0      	b.n	80065c0 <__cvt+0xa8>

080065de <__exponent>:
 80065de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e0:	1c83      	adds	r3, r0, #2
 80065e2:	b087      	sub	sp, #28
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	0005      	movs	r5, r0
 80065e8:	000c      	movs	r4, r1
 80065ea:	232b      	movs	r3, #43	; 0x2b
 80065ec:	7002      	strb	r2, [r0, #0]
 80065ee:	2900      	cmp	r1, #0
 80065f0:	da01      	bge.n	80065f6 <__exponent+0x18>
 80065f2:	424c      	negs	r4, r1
 80065f4:	3302      	adds	r3, #2
 80065f6:	706b      	strb	r3, [r5, #1]
 80065f8:	2c09      	cmp	r4, #9
 80065fa:	dd31      	ble.n	8006660 <__exponent+0x82>
 80065fc:	270a      	movs	r7, #10
 80065fe:	ab04      	add	r3, sp, #16
 8006600:	1dde      	adds	r6, r3, #7
 8006602:	0020      	movs	r0, r4
 8006604:	0039      	movs	r1, r7
 8006606:	9601      	str	r6, [sp, #4]
 8006608:	f7f9 ff06 	bl	8000418 <__aeabi_idivmod>
 800660c:	3e01      	subs	r6, #1
 800660e:	3130      	adds	r1, #48	; 0x30
 8006610:	0020      	movs	r0, r4
 8006612:	7031      	strb	r1, [r6, #0]
 8006614:	0039      	movs	r1, r7
 8006616:	9402      	str	r4, [sp, #8]
 8006618:	f7f9 fe18 	bl	800024c <__divsi3>
 800661c:	9b02      	ldr	r3, [sp, #8]
 800661e:	0004      	movs	r4, r0
 8006620:	2b63      	cmp	r3, #99	; 0x63
 8006622:	dcee      	bgt.n	8006602 <__exponent+0x24>
 8006624:	9b01      	ldr	r3, [sp, #4]
 8006626:	3430      	adds	r4, #48	; 0x30
 8006628:	1e9a      	subs	r2, r3, #2
 800662a:	0013      	movs	r3, r2
 800662c:	9903      	ldr	r1, [sp, #12]
 800662e:	7014      	strb	r4, [r2, #0]
 8006630:	a804      	add	r0, sp, #16
 8006632:	3007      	adds	r0, #7
 8006634:	4298      	cmp	r0, r3
 8006636:	d80e      	bhi.n	8006656 <__exponent+0x78>
 8006638:	ab04      	add	r3, sp, #16
 800663a:	3307      	adds	r3, #7
 800663c:	2000      	movs	r0, #0
 800663e:	429a      	cmp	r2, r3
 8006640:	d804      	bhi.n	800664c <__exponent+0x6e>
 8006642:	ab04      	add	r3, sp, #16
 8006644:	3009      	adds	r0, #9
 8006646:	18c0      	adds	r0, r0, r3
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	1ac0      	subs	r0, r0, r3
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	1818      	adds	r0, r3, r0
 8006650:	1b40      	subs	r0, r0, r5
 8006652:	b007      	add	sp, #28
 8006654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006656:	7818      	ldrb	r0, [r3, #0]
 8006658:	3301      	adds	r3, #1
 800665a:	7008      	strb	r0, [r1, #0]
 800665c:	3101      	adds	r1, #1
 800665e:	e7e7      	b.n	8006630 <__exponent+0x52>
 8006660:	2330      	movs	r3, #48	; 0x30
 8006662:	18e4      	adds	r4, r4, r3
 8006664:	70ab      	strb	r3, [r5, #2]
 8006666:	1d28      	adds	r0, r5, #4
 8006668:	70ec      	strb	r4, [r5, #3]
 800666a:	e7f1      	b.n	8006650 <__exponent+0x72>

0800666c <_printf_float>:
 800666c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800666e:	b095      	sub	sp, #84	; 0x54
 8006670:	000c      	movs	r4, r1
 8006672:	9209      	str	r2, [sp, #36]	; 0x24
 8006674:	001e      	movs	r6, r3
 8006676:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006678:	0007      	movs	r7, r0
 800667a:	f001 fa81 	bl	8007b80 <_localeconv_r>
 800667e:	6803      	ldr	r3, [r0, #0]
 8006680:	0018      	movs	r0, r3
 8006682:	930c      	str	r3, [sp, #48]	; 0x30
 8006684:	f7f9 fd3c 	bl	8000100 <strlen>
 8006688:	2300      	movs	r3, #0
 800668a:	9312      	str	r3, [sp, #72]	; 0x48
 800668c:	7e23      	ldrb	r3, [r4, #24]
 800668e:	2207      	movs	r2, #7
 8006690:	930a      	str	r3, [sp, #40]	; 0x28
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	900e      	str	r0, [sp, #56]	; 0x38
 8006696:	930d      	str	r3, [sp, #52]	; 0x34
 8006698:	990d      	ldr	r1, [sp, #52]	; 0x34
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	05c9      	lsls	r1, r1, #23
 800669e:	d547      	bpl.n	8006730 <_printf_float+0xc4>
 80066a0:	189b      	adds	r3, r3, r2
 80066a2:	4393      	bics	r3, r2
 80066a4:	001a      	movs	r2, r3
 80066a6:	3208      	adds	r2, #8
 80066a8:	602a      	str	r2, [r5, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	64a2      	str	r2, [r4, #72]	; 0x48
 80066b0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80066b2:	2201      	movs	r2, #1
 80066b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066b6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80066b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ba:	006b      	lsls	r3, r5, #1
 80066bc:	085b      	lsrs	r3, r3, #1
 80066be:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066c2:	4ba7      	ldr	r3, [pc, #668]	; (8006960 <_printf_float+0x2f4>)
 80066c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066c6:	4252      	negs	r2, r2
 80066c8:	f7fb fea6 	bl	8002418 <__aeabi_dcmpun>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d131      	bne.n	8006734 <_printf_float+0xc8>
 80066d0:	2201      	movs	r2, #1
 80066d2:	4ba3      	ldr	r3, [pc, #652]	; (8006960 <_printf_float+0x2f4>)
 80066d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066d8:	4252      	negs	r2, r2
 80066da:	f7f9 fec3 	bl	8000464 <__aeabi_dcmple>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d128      	bne.n	8006734 <_printf_float+0xc8>
 80066e2:	2200      	movs	r2, #0
 80066e4:	2300      	movs	r3, #0
 80066e6:	0029      	movs	r1, r5
 80066e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066ea:	f7f9 feb1 	bl	8000450 <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d003      	beq.n	80066fa <_printf_float+0x8e>
 80066f2:	0023      	movs	r3, r4
 80066f4:	222d      	movs	r2, #45	; 0x2d
 80066f6:	3343      	adds	r3, #67	; 0x43
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fc:	4d99      	ldr	r5, [pc, #612]	; (8006964 <_printf_float+0x2f8>)
 80066fe:	2b47      	cmp	r3, #71	; 0x47
 8006700:	d900      	bls.n	8006704 <_printf_float+0x98>
 8006702:	4d99      	ldr	r5, [pc, #612]	; (8006968 <_printf_float+0x2fc>)
 8006704:	2303      	movs	r3, #3
 8006706:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	3301      	adds	r3, #1
 800670c:	439a      	bics	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	6022      	str	r2, [r4, #0]
 8006712:	930b      	str	r3, [sp, #44]	; 0x2c
 8006714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006716:	0021      	movs	r1, r4
 8006718:	0038      	movs	r0, r7
 800671a:	9600      	str	r6, [sp, #0]
 800671c:	aa13      	add	r2, sp, #76	; 0x4c
 800671e:	f000 f9e7 	bl	8006af0 <_printf_common>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d000      	beq.n	8006728 <_printf_float+0xbc>
 8006726:	e0a2      	b.n	800686e <_printf_float+0x202>
 8006728:	2001      	movs	r0, #1
 800672a:	4240      	negs	r0, r0
 800672c:	b015      	add	sp, #84	; 0x54
 800672e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006730:	3307      	adds	r3, #7
 8006732:	e7b6      	b.n	80066a2 <_printf_float+0x36>
 8006734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006736:	002b      	movs	r3, r5
 8006738:	0010      	movs	r0, r2
 800673a:	0029      	movs	r1, r5
 800673c:	f7fb fe6c 	bl	8002418 <__aeabi_dcmpun>
 8006740:	2800      	cmp	r0, #0
 8006742:	d00b      	beq.n	800675c <_printf_float+0xf0>
 8006744:	2d00      	cmp	r5, #0
 8006746:	da03      	bge.n	8006750 <_printf_float+0xe4>
 8006748:	0023      	movs	r3, r4
 800674a:	222d      	movs	r2, #45	; 0x2d
 800674c:	3343      	adds	r3, #67	; 0x43
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006752:	4d86      	ldr	r5, [pc, #536]	; (800696c <_printf_float+0x300>)
 8006754:	2b47      	cmp	r3, #71	; 0x47
 8006756:	d9d5      	bls.n	8006704 <_printf_float+0x98>
 8006758:	4d85      	ldr	r5, [pc, #532]	; (8006970 <_printf_float+0x304>)
 800675a:	e7d3      	b.n	8006704 <_printf_float+0x98>
 800675c:	2220      	movs	r2, #32
 800675e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006760:	6863      	ldr	r3, [r4, #4]
 8006762:	4391      	bics	r1, r2
 8006764:	910f      	str	r1, [sp, #60]	; 0x3c
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	d149      	bne.n	80067fe <_printf_float+0x192>
 800676a:	3307      	adds	r3, #7
 800676c:	6063      	str	r3, [r4, #4]
 800676e:	2380      	movs	r3, #128	; 0x80
 8006770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4313      	orrs	r3, r2
 8006776:	2200      	movs	r2, #0
 8006778:	9206      	str	r2, [sp, #24]
 800677a:	aa12      	add	r2, sp, #72	; 0x48
 800677c:	9205      	str	r2, [sp, #20]
 800677e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006780:	a908      	add	r1, sp, #32
 8006782:	9204      	str	r2, [sp, #16]
 8006784:	aa11      	add	r2, sp, #68	; 0x44
 8006786:	9203      	str	r2, [sp, #12]
 8006788:	2223      	movs	r2, #35	; 0x23
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	6863      	ldr	r3, [r4, #4]
 8006790:	1852      	adds	r2, r2, r1
 8006792:	9202      	str	r2, [sp, #8]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	0038      	movs	r0, r7
 8006798:	002b      	movs	r3, r5
 800679a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800679c:	f7ff febc 	bl	8006518 <__cvt>
 80067a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067a2:	0005      	movs	r5, r0
 80067a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067a6:	2b47      	cmp	r3, #71	; 0x47
 80067a8:	d108      	bne.n	80067bc <_printf_float+0x150>
 80067aa:	1ccb      	adds	r3, r1, #3
 80067ac:	db02      	blt.n	80067b4 <_printf_float+0x148>
 80067ae:	6863      	ldr	r3, [r4, #4]
 80067b0:	4299      	cmp	r1, r3
 80067b2:	dd48      	ble.n	8006846 <_printf_float+0x1da>
 80067b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b6:	3b02      	subs	r3, #2
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	930a      	str	r3, [sp, #40]	; 0x28
 80067bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067be:	2b65      	cmp	r3, #101	; 0x65
 80067c0:	d824      	bhi.n	800680c <_printf_float+0x1a0>
 80067c2:	0020      	movs	r0, r4
 80067c4:	001a      	movs	r2, r3
 80067c6:	3901      	subs	r1, #1
 80067c8:	3050      	adds	r0, #80	; 0x50
 80067ca:	9111      	str	r1, [sp, #68]	; 0x44
 80067cc:	f7ff ff07 	bl	80065de <__exponent>
 80067d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80067d4:	1813      	adds	r3, r2, r0
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	2a01      	cmp	r2, #1
 80067da:	dc02      	bgt.n	80067e2 <_printf_float+0x176>
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	07d2      	lsls	r2, r2, #31
 80067e0:	d501      	bpl.n	80067e6 <_printf_float+0x17a>
 80067e2:	3301      	adds	r3, #1
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	2323      	movs	r3, #35	; 0x23
 80067e8:	aa08      	add	r2, sp, #32
 80067ea:	189b      	adds	r3, r3, r2
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d100      	bne.n	80067f4 <_printf_float+0x188>
 80067f2:	e78f      	b.n	8006714 <_printf_float+0xa8>
 80067f4:	0023      	movs	r3, r4
 80067f6:	222d      	movs	r2, #45	; 0x2d
 80067f8:	3343      	adds	r3, #67	; 0x43
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	e78a      	b.n	8006714 <_printf_float+0xa8>
 80067fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006800:	2a47      	cmp	r2, #71	; 0x47
 8006802:	d1b4      	bne.n	800676e <_printf_float+0x102>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1b2      	bne.n	800676e <_printf_float+0x102>
 8006808:	3301      	adds	r3, #1
 800680a:	e7af      	b.n	800676c <_printf_float+0x100>
 800680c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680e:	2b66      	cmp	r3, #102	; 0x66
 8006810:	d11b      	bne.n	800684a <_printf_float+0x1de>
 8006812:	6863      	ldr	r3, [r4, #4]
 8006814:	2900      	cmp	r1, #0
 8006816:	dd0d      	ble.n	8006834 <_printf_float+0x1c8>
 8006818:	6121      	str	r1, [r4, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <_printf_float+0x1b8>
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	07d2      	lsls	r2, r2, #31
 8006822:	d502      	bpl.n	800682a <_printf_float+0x1be>
 8006824:	3301      	adds	r3, #1
 8006826:	1859      	adds	r1, r3, r1
 8006828:	6121      	str	r1, [r4, #16]
 800682a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800682c:	65a3      	str	r3, [r4, #88]	; 0x58
 800682e:	2300      	movs	r3, #0
 8006830:	930b      	str	r3, [sp, #44]	; 0x2c
 8006832:	e7d8      	b.n	80067e6 <_printf_float+0x17a>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <_printf_float+0x1d4>
 8006838:	2201      	movs	r2, #1
 800683a:	6821      	ldr	r1, [r4, #0]
 800683c:	4211      	tst	r1, r2
 800683e:	d000      	beq.n	8006842 <_printf_float+0x1d6>
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	6122      	str	r2, [r4, #16]
 8006844:	e7f1      	b.n	800682a <_printf_float+0x1be>
 8006846:	2367      	movs	r3, #103	; 0x67
 8006848:	930a      	str	r3, [sp, #40]	; 0x28
 800684a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800684e:	4293      	cmp	r3, r2
 8006850:	db06      	blt.n	8006860 <_printf_float+0x1f4>
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	07d2      	lsls	r2, r2, #31
 8006858:	d5e7      	bpl.n	800682a <_printf_float+0x1be>
 800685a:	3301      	adds	r3, #1
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	e7e4      	b.n	800682a <_printf_float+0x1be>
 8006860:	2101      	movs	r1, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	dc01      	bgt.n	800686a <_printf_float+0x1fe>
 8006866:	1849      	adds	r1, r1, r1
 8006868:	1ac9      	subs	r1, r1, r3
 800686a:	1852      	adds	r2, r2, r1
 800686c:	e7e9      	b.n	8006842 <_printf_float+0x1d6>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	0553      	lsls	r3, r2, #21
 8006872:	d407      	bmi.n	8006884 <_printf_float+0x218>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	002a      	movs	r2, r5
 8006878:	0038      	movs	r0, r7
 800687a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800687c:	47b0      	blx	r6
 800687e:	1c43      	adds	r3, r0, #1
 8006880:	d128      	bne.n	80068d4 <_printf_float+0x268>
 8006882:	e751      	b.n	8006728 <_printf_float+0xbc>
 8006884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006886:	2b65      	cmp	r3, #101	; 0x65
 8006888:	d800      	bhi.n	800688c <_printf_float+0x220>
 800688a:	e0e1      	b.n	8006a50 <_printf_float+0x3e4>
 800688c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800688e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006890:	2200      	movs	r2, #0
 8006892:	2300      	movs	r3, #0
 8006894:	f7f9 fdd6 	bl	8000444 <__aeabi_dcmpeq>
 8006898:	2800      	cmp	r0, #0
 800689a:	d031      	beq.n	8006900 <_printf_float+0x294>
 800689c:	2301      	movs	r3, #1
 800689e:	0038      	movs	r0, r7
 80068a0:	4a34      	ldr	r2, [pc, #208]	; (8006974 <_printf_float+0x308>)
 80068a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068a4:	47b0      	blx	r6
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	d100      	bne.n	80068ac <_printf_float+0x240>
 80068aa:	e73d      	b.n	8006728 <_printf_float+0xbc>
 80068ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068b0:	4293      	cmp	r3, r2
 80068b2:	db02      	blt.n	80068ba <_printf_float+0x24e>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07db      	lsls	r3, r3, #31
 80068b8:	d50c      	bpl.n	80068d4 <_printf_float+0x268>
 80068ba:	0038      	movs	r0, r7
 80068bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068c2:	47b0      	blx	r6
 80068c4:	2500      	movs	r5, #0
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d100      	bne.n	80068cc <_printf_float+0x260>
 80068ca:	e72d      	b.n	8006728 <_printf_float+0xbc>
 80068cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068ce:	3b01      	subs	r3, #1
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dc0a      	bgt.n	80068ea <_printf_float+0x27e>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	079b      	lsls	r3, r3, #30
 80068d8:	d500      	bpl.n	80068dc <_printf_float+0x270>
 80068da:	e106      	b.n	8006aea <_printf_float+0x47e>
 80068dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068de:	68e0      	ldr	r0, [r4, #12]
 80068e0:	4298      	cmp	r0, r3
 80068e2:	db00      	blt.n	80068e6 <_printf_float+0x27a>
 80068e4:	e722      	b.n	800672c <_printf_float+0xc0>
 80068e6:	0018      	movs	r0, r3
 80068e8:	e720      	b.n	800672c <_printf_float+0xc0>
 80068ea:	0022      	movs	r2, r4
 80068ec:	2301      	movs	r3, #1
 80068ee:	0038      	movs	r0, r7
 80068f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f2:	321a      	adds	r2, #26
 80068f4:	47b0      	blx	r6
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d100      	bne.n	80068fc <_printf_float+0x290>
 80068fa:	e715      	b.n	8006728 <_printf_float+0xbc>
 80068fc:	3501      	adds	r5, #1
 80068fe:	e7e5      	b.n	80068cc <_printf_float+0x260>
 8006900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006902:	2b00      	cmp	r3, #0
 8006904:	dc38      	bgt.n	8006978 <_printf_float+0x30c>
 8006906:	2301      	movs	r3, #1
 8006908:	0038      	movs	r0, r7
 800690a:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <_printf_float+0x308>)
 800690c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800690e:	47b0      	blx	r6
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d100      	bne.n	8006916 <_printf_float+0x2aa>
 8006914:	e708      	b.n	8006728 <_printf_float+0xbc>
 8006916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800691a:	4313      	orrs	r3, r2
 800691c:	d102      	bne.n	8006924 <_printf_float+0x2b8>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	07db      	lsls	r3, r3, #31
 8006922:	d5d7      	bpl.n	80068d4 <_printf_float+0x268>
 8006924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006926:	0038      	movs	r0, r7
 8006928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800692a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800692c:	47b0      	blx	r6
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	d100      	bne.n	8006934 <_printf_float+0x2c8>
 8006932:	e6f9      	b.n	8006728 <_printf_float+0xbc>
 8006934:	2300      	movs	r3, #0
 8006936:	930a      	str	r3, [sp, #40]	; 0x28
 8006938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800693a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800693c:	425b      	negs	r3, r3
 800693e:	4293      	cmp	r3, r2
 8006940:	dc01      	bgt.n	8006946 <_printf_float+0x2da>
 8006942:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006944:	e797      	b.n	8006876 <_printf_float+0x20a>
 8006946:	0022      	movs	r2, r4
 8006948:	2301      	movs	r3, #1
 800694a:	0038      	movs	r0, r7
 800694c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800694e:	321a      	adds	r2, #26
 8006950:	47b0      	blx	r6
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	d100      	bne.n	8006958 <_printf_float+0x2ec>
 8006956:	e6e7      	b.n	8006728 <_printf_float+0xbc>
 8006958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695a:	3301      	adds	r3, #1
 800695c:	e7eb      	b.n	8006936 <_printf_float+0x2ca>
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	7fefffff 	.word	0x7fefffff
 8006964:	0800981c 	.word	0x0800981c
 8006968:	08009820 	.word	0x08009820
 800696c:	08009824 	.word	0x08009824
 8006970:	08009828 	.word	0x08009828
 8006974:	0800982c 	.word	0x0800982c
 8006978:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800697a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800697c:	920a      	str	r2, [sp, #40]	; 0x28
 800697e:	429a      	cmp	r2, r3
 8006980:	dd00      	ble.n	8006984 <_printf_float+0x318>
 8006982:	930a      	str	r3, [sp, #40]	; 0x28
 8006984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	dc3c      	bgt.n	8006a04 <_printf_float+0x398>
 800698a:	2300      	movs	r3, #0
 800698c:	930d      	str	r3, [sp, #52]	; 0x34
 800698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006990:	43db      	mvns	r3, r3
 8006992:	17db      	asrs	r3, r3, #31
 8006994:	930f      	str	r3, [sp, #60]	; 0x3c
 8006996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800699a:	930b      	str	r3, [sp, #44]	; 0x2c
 800699c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699e:	4013      	ands	r3, r2
 80069a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069a6:	4293      	cmp	r3, r2
 80069a8:	dc34      	bgt.n	8006a14 <_printf_float+0x3a8>
 80069aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069ae:	4293      	cmp	r3, r2
 80069b0:	db3d      	blt.n	8006a2e <_printf_float+0x3c2>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	07db      	lsls	r3, r3, #31
 80069b6:	d43a      	bmi.n	8006a2e <_printf_float+0x3c2>
 80069b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	1a52      	subs	r2, r2, r1
 80069c2:	920a      	str	r2, [sp, #40]	; 0x28
 80069c4:	429a      	cmp	r2, r3
 80069c6:	dd00      	ble.n	80069ca <_printf_float+0x35e>
 80069c8:	930a      	str	r3, [sp, #40]	; 0x28
 80069ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dc36      	bgt.n	8006a3e <_printf_float+0x3d2>
 80069d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d2:	2500      	movs	r5, #0
 80069d4:	43db      	mvns	r3, r3
 80069d6:	17db      	asrs	r3, r3, #31
 80069d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80069dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069e0:	1a9b      	subs	r3, r3, r2
 80069e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069e4:	400a      	ands	r2, r1
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	42ab      	cmp	r3, r5
 80069ea:	dc00      	bgt.n	80069ee <_printf_float+0x382>
 80069ec:	e772      	b.n	80068d4 <_printf_float+0x268>
 80069ee:	0022      	movs	r2, r4
 80069f0:	2301      	movs	r3, #1
 80069f2:	0038      	movs	r0, r7
 80069f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069f6:	321a      	adds	r2, #26
 80069f8:	47b0      	blx	r6
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d100      	bne.n	8006a00 <_printf_float+0x394>
 80069fe:	e693      	b.n	8006728 <_printf_float+0xbc>
 8006a00:	3501      	adds	r5, #1
 8006a02:	e7ea      	b.n	80069da <_printf_float+0x36e>
 8006a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a06:	002a      	movs	r2, r5
 8006a08:	0038      	movs	r0, r7
 8006a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a0c:	47b0      	blx	r6
 8006a0e:	1c43      	adds	r3, r0, #1
 8006a10:	d1bb      	bne.n	800698a <_printf_float+0x31e>
 8006a12:	e689      	b.n	8006728 <_printf_float+0xbc>
 8006a14:	0022      	movs	r2, r4
 8006a16:	2301      	movs	r3, #1
 8006a18:	0038      	movs	r0, r7
 8006a1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a1c:	321a      	adds	r2, #26
 8006a1e:	47b0      	blx	r6
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d100      	bne.n	8006a26 <_printf_float+0x3ba>
 8006a24:	e680      	b.n	8006728 <_printf_float+0xbc>
 8006a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a28:	3301      	adds	r3, #1
 8006a2a:	930d      	str	r3, [sp, #52]	; 0x34
 8006a2c:	e7b3      	b.n	8006996 <_printf_float+0x32a>
 8006a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a30:	0038      	movs	r0, r7
 8006a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a36:	47b0      	blx	r6
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d1bd      	bne.n	80069b8 <_printf_float+0x34c>
 8006a3c:	e674      	b.n	8006728 <_printf_float+0xbc>
 8006a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a40:	0038      	movs	r0, r7
 8006a42:	18ea      	adds	r2, r5, r3
 8006a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a48:	47b0      	blx	r6
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d1c0      	bne.n	80069d0 <_printf_float+0x364>
 8006a4e:	e66b      	b.n	8006728 <_printf_float+0xbc>
 8006a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	dc02      	bgt.n	8006a5c <_printf_float+0x3f0>
 8006a56:	2301      	movs	r3, #1
 8006a58:	421a      	tst	r2, r3
 8006a5a:	d034      	beq.n	8006ac6 <_printf_float+0x45a>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	002a      	movs	r2, r5
 8006a60:	0038      	movs	r0, r7
 8006a62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a64:	47b0      	blx	r6
 8006a66:	1c43      	adds	r3, r0, #1
 8006a68:	d100      	bne.n	8006a6c <_printf_float+0x400>
 8006a6a:	e65d      	b.n	8006728 <_printf_float+0xbc>
 8006a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a6e:	0038      	movs	r0, r7
 8006a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a74:	47b0      	blx	r6
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d100      	bne.n	8006a7c <_printf_float+0x410>
 8006a7a:	e655      	b.n	8006728 <_printf_float+0xbc>
 8006a7c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006a7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006a80:	2200      	movs	r2, #0
 8006a82:	2300      	movs	r3, #0
 8006a84:	f7f9 fcde 	bl	8000444 <__aeabi_dcmpeq>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d11a      	bne.n	8006ac2 <_printf_float+0x456>
 8006a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a8e:	1c6a      	adds	r2, r5, #1
 8006a90:	3b01      	subs	r3, #1
 8006a92:	0038      	movs	r0, r7
 8006a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a96:	47b0      	blx	r6
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d10e      	bne.n	8006aba <_printf_float+0x44e>
 8006a9c:	e644      	b.n	8006728 <_printf_float+0xbc>
 8006a9e:	0022      	movs	r2, r4
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	0038      	movs	r0, r7
 8006aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa6:	321a      	adds	r2, #26
 8006aa8:	47b0      	blx	r6
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	d100      	bne.n	8006ab0 <_printf_float+0x444>
 8006aae:	e63b      	b.n	8006728 <_printf_float+0xbc>
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	42ab      	cmp	r3, r5
 8006ab8:	dcf1      	bgt.n	8006a9e <_printf_float+0x432>
 8006aba:	0022      	movs	r2, r4
 8006abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006abe:	3250      	adds	r2, #80	; 0x50
 8006ac0:	e6da      	b.n	8006878 <_printf_float+0x20c>
 8006ac2:	2500      	movs	r5, #0
 8006ac4:	e7f5      	b.n	8006ab2 <_printf_float+0x446>
 8006ac6:	002a      	movs	r2, r5
 8006ac8:	e7e3      	b.n	8006a92 <_printf_float+0x426>
 8006aca:	0022      	movs	r2, r4
 8006acc:	2301      	movs	r3, #1
 8006ace:	0038      	movs	r0, r7
 8006ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ad2:	3219      	adds	r2, #25
 8006ad4:	47b0      	blx	r6
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	d100      	bne.n	8006adc <_printf_float+0x470>
 8006ada:	e625      	b.n	8006728 <_printf_float+0xbc>
 8006adc:	3501      	adds	r5, #1
 8006ade:	68e3      	ldr	r3, [r4, #12]
 8006ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	42ab      	cmp	r3, r5
 8006ae6:	dcf0      	bgt.n	8006aca <_printf_float+0x45e>
 8006ae8:	e6f8      	b.n	80068dc <_printf_float+0x270>
 8006aea:	2500      	movs	r5, #0
 8006aec:	e7f7      	b.n	8006ade <_printf_float+0x472>
 8006aee:	46c0      	nop			; (mov r8, r8)

08006af0 <_printf_common>:
 8006af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af2:	0015      	movs	r5, r2
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	688a      	ldr	r2, [r1, #8]
 8006af8:	690b      	ldr	r3, [r1, #16]
 8006afa:	000c      	movs	r4, r1
 8006afc:	9000      	str	r0, [sp, #0]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	da00      	bge.n	8006b04 <_printf_common+0x14>
 8006b02:	0013      	movs	r3, r2
 8006b04:	0022      	movs	r2, r4
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	3243      	adds	r2, #67	; 0x43
 8006b0a:	7812      	ldrb	r2, [r2, #0]
 8006b0c:	2a00      	cmp	r2, #0
 8006b0e:	d001      	beq.n	8006b14 <_printf_common+0x24>
 8006b10:	3301      	adds	r3, #1
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	069b      	lsls	r3, r3, #26
 8006b18:	d502      	bpl.n	8006b20 <_printf_common+0x30>
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	602b      	str	r3, [r5, #0]
 8006b20:	6822      	ldr	r2, [r4, #0]
 8006b22:	2306      	movs	r3, #6
 8006b24:	0017      	movs	r7, r2
 8006b26:	401f      	ands	r7, r3
 8006b28:	421a      	tst	r2, r3
 8006b2a:	d027      	beq.n	8006b7c <_printf_common+0x8c>
 8006b2c:	0023      	movs	r3, r4
 8006b2e:	3343      	adds	r3, #67	; 0x43
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	1e5a      	subs	r2, r3, #1
 8006b34:	4193      	sbcs	r3, r2
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	0692      	lsls	r2, r2, #26
 8006b3a:	d430      	bmi.n	8006b9e <_printf_common+0xae>
 8006b3c:	0022      	movs	r2, r4
 8006b3e:	9901      	ldr	r1, [sp, #4]
 8006b40:	9800      	ldr	r0, [sp, #0]
 8006b42:	9e08      	ldr	r6, [sp, #32]
 8006b44:	3243      	adds	r2, #67	; 0x43
 8006b46:	47b0      	blx	r6
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d025      	beq.n	8006b98 <_printf_common+0xa8>
 8006b4c:	2306      	movs	r3, #6
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	682a      	ldr	r2, [r5, #0]
 8006b52:	68e1      	ldr	r1, [r4, #12]
 8006b54:	2500      	movs	r5, #0
 8006b56:	4003      	ands	r3, r0
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d103      	bne.n	8006b64 <_printf_common+0x74>
 8006b5c:	1a8d      	subs	r5, r1, r2
 8006b5e:	43eb      	mvns	r3, r5
 8006b60:	17db      	asrs	r3, r3, #31
 8006b62:	401d      	ands	r5, r3
 8006b64:	68a3      	ldr	r3, [r4, #8]
 8006b66:	6922      	ldr	r2, [r4, #16]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	dd01      	ble.n	8006b70 <_printf_common+0x80>
 8006b6c:	1a9b      	subs	r3, r3, r2
 8006b6e:	18ed      	adds	r5, r5, r3
 8006b70:	2700      	movs	r7, #0
 8006b72:	42bd      	cmp	r5, r7
 8006b74:	d120      	bne.n	8006bb8 <_printf_common+0xc8>
 8006b76:	2000      	movs	r0, #0
 8006b78:	e010      	b.n	8006b9c <_printf_common+0xac>
 8006b7a:	3701      	adds	r7, #1
 8006b7c:	68e3      	ldr	r3, [r4, #12]
 8006b7e:	682a      	ldr	r2, [r5, #0]
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	42bb      	cmp	r3, r7
 8006b84:	ddd2      	ble.n	8006b2c <_printf_common+0x3c>
 8006b86:	0022      	movs	r2, r4
 8006b88:	2301      	movs	r3, #1
 8006b8a:	9901      	ldr	r1, [sp, #4]
 8006b8c:	9800      	ldr	r0, [sp, #0]
 8006b8e:	9e08      	ldr	r6, [sp, #32]
 8006b90:	3219      	adds	r2, #25
 8006b92:	47b0      	blx	r6
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d1f0      	bne.n	8006b7a <_printf_common+0x8a>
 8006b98:	2001      	movs	r0, #1
 8006b9a:	4240      	negs	r0, r0
 8006b9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b9e:	2030      	movs	r0, #48	; 0x30
 8006ba0:	18e1      	adds	r1, r4, r3
 8006ba2:	3143      	adds	r1, #67	; 0x43
 8006ba4:	7008      	strb	r0, [r1, #0]
 8006ba6:	0021      	movs	r1, r4
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	3145      	adds	r1, #69	; 0x45
 8006bac:	7809      	ldrb	r1, [r1, #0]
 8006bae:	18a2      	adds	r2, r4, r2
 8006bb0:	3243      	adds	r2, #67	; 0x43
 8006bb2:	3302      	adds	r3, #2
 8006bb4:	7011      	strb	r1, [r2, #0]
 8006bb6:	e7c1      	b.n	8006b3c <_printf_common+0x4c>
 8006bb8:	0022      	movs	r2, r4
 8006bba:	2301      	movs	r3, #1
 8006bbc:	9901      	ldr	r1, [sp, #4]
 8006bbe:	9800      	ldr	r0, [sp, #0]
 8006bc0:	9e08      	ldr	r6, [sp, #32]
 8006bc2:	321a      	adds	r2, #26
 8006bc4:	47b0      	blx	r6
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d0e6      	beq.n	8006b98 <_printf_common+0xa8>
 8006bca:	3701      	adds	r7, #1
 8006bcc:	e7d1      	b.n	8006b72 <_printf_common+0x82>
	...

08006bd0 <_printf_i>:
 8006bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd2:	b08b      	sub	sp, #44	; 0x2c
 8006bd4:	9206      	str	r2, [sp, #24]
 8006bd6:	000a      	movs	r2, r1
 8006bd8:	3243      	adds	r2, #67	; 0x43
 8006bda:	9307      	str	r3, [sp, #28]
 8006bdc:	9005      	str	r0, [sp, #20]
 8006bde:	9204      	str	r2, [sp, #16]
 8006be0:	7e0a      	ldrb	r2, [r1, #24]
 8006be2:	000c      	movs	r4, r1
 8006be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006be6:	2a78      	cmp	r2, #120	; 0x78
 8006be8:	d807      	bhi.n	8006bfa <_printf_i+0x2a>
 8006bea:	2a62      	cmp	r2, #98	; 0x62
 8006bec:	d809      	bhi.n	8006c02 <_printf_i+0x32>
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	d100      	bne.n	8006bf4 <_printf_i+0x24>
 8006bf2:	e0c1      	b.n	8006d78 <_printf_i+0x1a8>
 8006bf4:	2a58      	cmp	r2, #88	; 0x58
 8006bf6:	d100      	bne.n	8006bfa <_printf_i+0x2a>
 8006bf8:	e08c      	b.n	8006d14 <_printf_i+0x144>
 8006bfa:	0026      	movs	r6, r4
 8006bfc:	3642      	adds	r6, #66	; 0x42
 8006bfe:	7032      	strb	r2, [r6, #0]
 8006c00:	e022      	b.n	8006c48 <_printf_i+0x78>
 8006c02:	0010      	movs	r0, r2
 8006c04:	3863      	subs	r0, #99	; 0x63
 8006c06:	2815      	cmp	r0, #21
 8006c08:	d8f7      	bhi.n	8006bfa <_printf_i+0x2a>
 8006c0a:	f7f9 fa8b 	bl	8000124 <__gnu_thumb1_case_shi>
 8006c0e:	0016      	.short	0x0016
 8006c10:	fff6001f 	.word	0xfff6001f
 8006c14:	fff6fff6 	.word	0xfff6fff6
 8006c18:	001ffff6 	.word	0x001ffff6
 8006c1c:	fff6fff6 	.word	0xfff6fff6
 8006c20:	fff6fff6 	.word	0xfff6fff6
 8006c24:	003600a8 	.word	0x003600a8
 8006c28:	fff6009a 	.word	0xfff6009a
 8006c2c:	00b9fff6 	.word	0x00b9fff6
 8006c30:	0036fff6 	.word	0x0036fff6
 8006c34:	fff6fff6 	.word	0xfff6fff6
 8006c38:	009e      	.short	0x009e
 8006c3a:	0026      	movs	r6, r4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	3642      	adds	r6, #66	; 0x42
 8006c40:	1d11      	adds	r1, r2, #4
 8006c42:	6019      	str	r1, [r3, #0]
 8006c44:	6813      	ldr	r3, [r2, #0]
 8006c46:	7033      	strb	r3, [r6, #0]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0a7      	b.n	8006d9c <_printf_i+0x1cc>
 8006c4c:	6808      	ldr	r0, [r1, #0]
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	1d0a      	adds	r2, r1, #4
 8006c52:	0605      	lsls	r5, r0, #24
 8006c54:	d50b      	bpl.n	8006c6e <_printf_i+0x9e>
 8006c56:	680d      	ldr	r5, [r1, #0]
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	da03      	bge.n	8006c66 <_printf_i+0x96>
 8006c5e:	232d      	movs	r3, #45	; 0x2d
 8006c60:	9a04      	ldr	r2, [sp, #16]
 8006c62:	426d      	negs	r5, r5
 8006c64:	7013      	strb	r3, [r2, #0]
 8006c66:	4b61      	ldr	r3, [pc, #388]	; (8006dec <_printf_i+0x21c>)
 8006c68:	270a      	movs	r7, #10
 8006c6a:	9303      	str	r3, [sp, #12]
 8006c6c:	e01b      	b.n	8006ca6 <_printf_i+0xd6>
 8006c6e:	680d      	ldr	r5, [r1, #0]
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	0641      	lsls	r1, r0, #25
 8006c74:	d5f1      	bpl.n	8006c5a <_printf_i+0x8a>
 8006c76:	b22d      	sxth	r5, r5
 8006c78:	e7ef      	b.n	8006c5a <_printf_i+0x8a>
 8006c7a:	680d      	ldr	r5, [r1, #0]
 8006c7c:	6819      	ldr	r1, [r3, #0]
 8006c7e:	1d08      	adds	r0, r1, #4
 8006c80:	6018      	str	r0, [r3, #0]
 8006c82:	062e      	lsls	r6, r5, #24
 8006c84:	d501      	bpl.n	8006c8a <_printf_i+0xba>
 8006c86:	680d      	ldr	r5, [r1, #0]
 8006c88:	e003      	b.n	8006c92 <_printf_i+0xc2>
 8006c8a:	066d      	lsls	r5, r5, #25
 8006c8c:	d5fb      	bpl.n	8006c86 <_printf_i+0xb6>
 8006c8e:	680d      	ldr	r5, [r1, #0]
 8006c90:	b2ad      	uxth	r5, r5
 8006c92:	4b56      	ldr	r3, [pc, #344]	; (8006dec <_printf_i+0x21c>)
 8006c94:	2708      	movs	r7, #8
 8006c96:	9303      	str	r3, [sp, #12]
 8006c98:	2a6f      	cmp	r2, #111	; 0x6f
 8006c9a:	d000      	beq.n	8006c9e <_printf_i+0xce>
 8006c9c:	3702      	adds	r7, #2
 8006c9e:	0023      	movs	r3, r4
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	3343      	adds	r3, #67	; 0x43
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	60a3      	str	r3, [r4, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	db03      	blt.n	8006cb6 <_printf_i+0xe6>
 8006cae:	2204      	movs	r2, #4
 8006cb0:	6821      	ldr	r1, [r4, #0]
 8006cb2:	4391      	bics	r1, r2
 8006cb4:	6021      	str	r1, [r4, #0]
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	d102      	bne.n	8006cc0 <_printf_i+0xf0>
 8006cba:	9e04      	ldr	r6, [sp, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00c      	beq.n	8006cda <_printf_i+0x10a>
 8006cc0:	9e04      	ldr	r6, [sp, #16]
 8006cc2:	0028      	movs	r0, r5
 8006cc4:	0039      	movs	r1, r7
 8006cc6:	f7f9 fabd 	bl	8000244 <__aeabi_uidivmod>
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	3e01      	subs	r6, #1
 8006cce:	5c5b      	ldrb	r3, [r3, r1]
 8006cd0:	7033      	strb	r3, [r6, #0]
 8006cd2:	002b      	movs	r3, r5
 8006cd4:	0005      	movs	r5, r0
 8006cd6:	429f      	cmp	r7, r3
 8006cd8:	d9f3      	bls.n	8006cc2 <_printf_i+0xf2>
 8006cda:	2f08      	cmp	r7, #8
 8006cdc:	d109      	bne.n	8006cf2 <_printf_i+0x122>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	07db      	lsls	r3, r3, #31
 8006ce2:	d506      	bpl.n	8006cf2 <_printf_i+0x122>
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	6922      	ldr	r2, [r4, #16]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	dc02      	bgt.n	8006cf2 <_printf_i+0x122>
 8006cec:	2330      	movs	r3, #48	; 0x30
 8006cee:	3e01      	subs	r6, #1
 8006cf0:	7033      	strb	r3, [r6, #0]
 8006cf2:	9b04      	ldr	r3, [sp, #16]
 8006cf4:	1b9b      	subs	r3, r3, r6
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	0021      	movs	r1, r4
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	9b06      	ldr	r3, [sp, #24]
 8006d02:	aa09      	add	r2, sp, #36	; 0x24
 8006d04:	f7ff fef4 	bl	8006af0 <_printf_common>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d14c      	bne.n	8006da6 <_printf_i+0x1d6>
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	4240      	negs	r0, r0
 8006d10:	b00b      	add	sp, #44	; 0x2c
 8006d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d14:	3145      	adds	r1, #69	; 0x45
 8006d16:	700a      	strb	r2, [r1, #0]
 8006d18:	4a34      	ldr	r2, [pc, #208]	; (8006dec <_printf_i+0x21c>)
 8006d1a:	9203      	str	r2, [sp, #12]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	6821      	ldr	r1, [r4, #0]
 8006d20:	ca20      	ldmia	r2!, {r5}
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	0608      	lsls	r0, r1, #24
 8006d26:	d516      	bpl.n	8006d56 <_printf_i+0x186>
 8006d28:	07cb      	lsls	r3, r1, #31
 8006d2a:	d502      	bpl.n	8006d32 <_printf_i+0x162>
 8006d2c:	2320      	movs	r3, #32
 8006d2e:	4319      	orrs	r1, r3
 8006d30:	6021      	str	r1, [r4, #0]
 8006d32:	2710      	movs	r7, #16
 8006d34:	2d00      	cmp	r5, #0
 8006d36:	d1b2      	bne.n	8006c9e <_printf_i+0xce>
 8006d38:	2320      	movs	r3, #32
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	439a      	bics	r2, r3
 8006d3e:	6022      	str	r2, [r4, #0]
 8006d40:	e7ad      	b.n	8006c9e <_printf_i+0xce>
 8006d42:	2220      	movs	r2, #32
 8006d44:	6809      	ldr	r1, [r1, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	6022      	str	r2, [r4, #0]
 8006d4a:	0022      	movs	r2, r4
 8006d4c:	2178      	movs	r1, #120	; 0x78
 8006d4e:	3245      	adds	r2, #69	; 0x45
 8006d50:	7011      	strb	r1, [r2, #0]
 8006d52:	4a27      	ldr	r2, [pc, #156]	; (8006df0 <_printf_i+0x220>)
 8006d54:	e7e1      	b.n	8006d1a <_printf_i+0x14a>
 8006d56:	0648      	lsls	r0, r1, #25
 8006d58:	d5e6      	bpl.n	8006d28 <_printf_i+0x158>
 8006d5a:	b2ad      	uxth	r5, r5
 8006d5c:	e7e4      	b.n	8006d28 <_printf_i+0x158>
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	680d      	ldr	r5, [r1, #0]
 8006d62:	1d10      	adds	r0, r2, #4
 8006d64:	6949      	ldr	r1, [r1, #20]
 8006d66:	6018      	str	r0, [r3, #0]
 8006d68:	6813      	ldr	r3, [r2, #0]
 8006d6a:	062e      	lsls	r6, r5, #24
 8006d6c:	d501      	bpl.n	8006d72 <_printf_i+0x1a2>
 8006d6e:	6019      	str	r1, [r3, #0]
 8006d70:	e002      	b.n	8006d78 <_printf_i+0x1a8>
 8006d72:	066d      	lsls	r5, r5, #25
 8006d74:	d5fb      	bpl.n	8006d6e <_printf_i+0x19e>
 8006d76:	8019      	strh	r1, [r3, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9e04      	ldr	r6, [sp, #16]
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	e7bb      	b.n	8006cf8 <_printf_i+0x128>
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	1d11      	adds	r1, r2, #4
 8006d84:	6019      	str	r1, [r3, #0]
 8006d86:	6816      	ldr	r6, [r2, #0]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	0030      	movs	r0, r6
 8006d8c:	6862      	ldr	r2, [r4, #4]
 8006d8e:	f000 ff05 	bl	8007b9c <memchr>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d001      	beq.n	8006d9a <_printf_i+0x1ca>
 8006d96:	1b80      	subs	r0, r0, r6
 8006d98:	6060      	str	r0, [r4, #4]
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	9a04      	ldr	r2, [sp, #16]
 8006da2:	7013      	strb	r3, [r2, #0]
 8006da4:	e7a8      	b.n	8006cf8 <_printf_i+0x128>
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	0032      	movs	r2, r6
 8006daa:	9906      	ldr	r1, [sp, #24]
 8006dac:	9805      	ldr	r0, [sp, #20]
 8006dae:	9d07      	ldr	r5, [sp, #28]
 8006db0:	47a8      	blx	r5
 8006db2:	1c43      	adds	r3, r0, #1
 8006db4:	d0aa      	beq.n	8006d0c <_printf_i+0x13c>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	079b      	lsls	r3, r3, #30
 8006dba:	d415      	bmi.n	8006de8 <_printf_i+0x218>
 8006dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dbe:	68e0      	ldr	r0, [r4, #12]
 8006dc0:	4298      	cmp	r0, r3
 8006dc2:	daa5      	bge.n	8006d10 <_printf_i+0x140>
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	e7a3      	b.n	8006d10 <_printf_i+0x140>
 8006dc8:	0022      	movs	r2, r4
 8006dca:	2301      	movs	r3, #1
 8006dcc:	9906      	ldr	r1, [sp, #24]
 8006dce:	9805      	ldr	r0, [sp, #20]
 8006dd0:	9e07      	ldr	r6, [sp, #28]
 8006dd2:	3219      	adds	r2, #25
 8006dd4:	47b0      	blx	r6
 8006dd6:	1c43      	adds	r3, r0, #1
 8006dd8:	d098      	beq.n	8006d0c <_printf_i+0x13c>
 8006dda:	3501      	adds	r5, #1
 8006ddc:	68e3      	ldr	r3, [r4, #12]
 8006dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	42ab      	cmp	r3, r5
 8006de4:	dcf0      	bgt.n	8006dc8 <_printf_i+0x1f8>
 8006de6:	e7e9      	b.n	8006dbc <_printf_i+0x1ec>
 8006de8:	2500      	movs	r5, #0
 8006dea:	e7f7      	b.n	8006ddc <_printf_i+0x20c>
 8006dec:	0800982e 	.word	0x0800982e
 8006df0:	0800983f 	.word	0x0800983f

08006df4 <siprintf>:
 8006df4:	b40e      	push	{r1, r2, r3}
 8006df6:	b500      	push	{lr}
 8006df8:	490b      	ldr	r1, [pc, #44]	; (8006e28 <siprintf+0x34>)
 8006dfa:	b09c      	sub	sp, #112	; 0x70
 8006dfc:	ab1d      	add	r3, sp, #116	; 0x74
 8006dfe:	9002      	str	r0, [sp, #8]
 8006e00:	9006      	str	r0, [sp, #24]
 8006e02:	9107      	str	r1, [sp, #28]
 8006e04:	9104      	str	r1, [sp, #16]
 8006e06:	4809      	ldr	r0, [pc, #36]	; (8006e2c <siprintf+0x38>)
 8006e08:	4909      	ldr	r1, [pc, #36]	; (8006e30 <siprintf+0x3c>)
 8006e0a:	cb04      	ldmia	r3!, {r2}
 8006e0c:	9105      	str	r1, [sp, #20]
 8006e0e:	6800      	ldr	r0, [r0, #0]
 8006e10:	a902      	add	r1, sp, #8
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	f001 fbe2 	bl	80085dc <_svfiprintf_r>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9a02      	ldr	r2, [sp, #8]
 8006e1c:	7013      	strb	r3, [r2, #0]
 8006e1e:	b01c      	add	sp, #112	; 0x70
 8006e20:	bc08      	pop	{r3}
 8006e22:	b003      	add	sp, #12
 8006e24:	4718      	bx	r3
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	7fffffff 	.word	0x7fffffff
 8006e2c:	20000080 	.word	0x20000080
 8006e30:	ffff0208 	.word	0xffff0208

08006e34 <quorem>:
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e36:	0006      	movs	r6, r0
 8006e38:	690b      	ldr	r3, [r1, #16]
 8006e3a:	6932      	ldr	r2, [r6, #16]
 8006e3c:	b087      	sub	sp, #28
 8006e3e:	2000      	movs	r0, #0
 8006e40:	9103      	str	r1, [sp, #12]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	db65      	blt.n	8006f12 <quorem+0xde>
 8006e46:	3b01      	subs	r3, #1
 8006e48:	009c      	lsls	r4, r3, #2
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	000b      	movs	r3, r1
 8006e4e:	3314      	adds	r3, #20
 8006e50:	9305      	str	r3, [sp, #20]
 8006e52:	191b      	adds	r3, r3, r4
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	0033      	movs	r3, r6
 8006e58:	3314      	adds	r3, #20
 8006e5a:	9302      	str	r3, [sp, #8]
 8006e5c:	191c      	adds	r4, r3, r4
 8006e5e:	9b04      	ldr	r3, [sp, #16]
 8006e60:	6827      	ldr	r7, [r4, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	0038      	movs	r0, r7
 8006e66:	1c5d      	adds	r5, r3, #1
 8006e68:	0029      	movs	r1, r5
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	f7f9 f964 	bl	8000138 <__udivsi3>
 8006e70:	9001      	str	r0, [sp, #4]
 8006e72:	42af      	cmp	r7, r5
 8006e74:	d324      	bcc.n	8006ec0 <quorem+0x8c>
 8006e76:	2500      	movs	r5, #0
 8006e78:	46ac      	mov	ip, r5
 8006e7a:	9802      	ldr	r0, [sp, #8]
 8006e7c:	9f05      	ldr	r7, [sp, #20]
 8006e7e:	cf08      	ldmia	r7!, {r3}
 8006e80:	9a01      	ldr	r2, [sp, #4]
 8006e82:	b299      	uxth	r1, r3
 8006e84:	4351      	muls	r1, r2
 8006e86:	0c1b      	lsrs	r3, r3, #16
 8006e88:	4353      	muls	r3, r2
 8006e8a:	1949      	adds	r1, r1, r5
 8006e8c:	0c0a      	lsrs	r2, r1, #16
 8006e8e:	189b      	adds	r3, r3, r2
 8006e90:	6802      	ldr	r2, [r0, #0]
 8006e92:	b289      	uxth	r1, r1
 8006e94:	b292      	uxth	r2, r2
 8006e96:	4462      	add	r2, ip
 8006e98:	1a52      	subs	r2, r2, r1
 8006e9a:	6801      	ldr	r1, [r0, #0]
 8006e9c:	0c1d      	lsrs	r5, r3, #16
 8006e9e:	0c09      	lsrs	r1, r1, #16
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	1acb      	subs	r3, r1, r3
 8006ea4:	1411      	asrs	r1, r2, #16
 8006ea6:	185b      	adds	r3, r3, r1
 8006ea8:	1419      	asrs	r1, r3, #16
 8006eaa:	b292      	uxth	r2, r2
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	468c      	mov	ip, r1
 8006eb4:	c004      	stmia	r0!, {r2}
 8006eb6:	42bb      	cmp	r3, r7
 8006eb8:	d2e1      	bcs.n	8006e7e <quorem+0x4a>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d030      	beq.n	8006f22 <quorem+0xee>
 8006ec0:	0030      	movs	r0, r6
 8006ec2:	9903      	ldr	r1, [sp, #12]
 8006ec4:	f001 f902 	bl	80080cc <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	db21      	blt.n	8006f10 <quorem+0xdc>
 8006ecc:	0030      	movs	r0, r6
 8006ece:	2400      	movs	r4, #0
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	9903      	ldr	r1, [sp, #12]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	3014      	adds	r0, #20
 8006eda:	3114      	adds	r1, #20
 8006edc:	6803      	ldr	r3, [r0, #0]
 8006ede:	c920      	ldmia	r1!, {r5}
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	1914      	adds	r4, r2, r4
 8006ee4:	b2aa      	uxth	r2, r5
 8006ee6:	1aa2      	subs	r2, r4, r2
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	0c2d      	lsrs	r5, r5, #16
 8006eec:	1414      	asrs	r4, r2, #16
 8006eee:	1b5b      	subs	r3, r3, r5
 8006ef0:	191b      	adds	r3, r3, r4
 8006ef2:	141c      	asrs	r4, r3, #16
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	c008      	stmia	r0!, {r3}
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	428b      	cmp	r3, r1
 8006f00:	d2ec      	bcs.n	8006edc <quorem+0xa8>
 8006f02:	9b00      	ldr	r3, [sp, #0]
 8006f04:	9a02      	ldr	r2, [sp, #8]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	18d3      	adds	r3, r2, r3
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	d015      	beq.n	8006f3c <quorem+0x108>
 8006f10:	9801      	ldr	r0, [sp, #4]
 8006f12:	b007      	add	sp, #28
 8006f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d106      	bne.n	8006f2a <quorem+0xf6>
 8006f1c:	9b00      	ldr	r3, [sp, #0]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	9b02      	ldr	r3, [sp, #8]
 8006f24:	3c04      	subs	r4, #4
 8006f26:	42a3      	cmp	r3, r4
 8006f28:	d3f5      	bcc.n	8006f16 <quorem+0xe2>
 8006f2a:	9b00      	ldr	r3, [sp, #0]
 8006f2c:	6133      	str	r3, [r6, #16]
 8006f2e:	e7c7      	b.n	8006ec0 <quorem+0x8c>
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	2a00      	cmp	r2, #0
 8006f34:	d106      	bne.n	8006f44 <quorem+0x110>
 8006f36:	9a00      	ldr	r2, [sp, #0]
 8006f38:	3a01      	subs	r2, #1
 8006f3a:	9200      	str	r2, [sp, #0]
 8006f3c:	9a02      	ldr	r2, [sp, #8]
 8006f3e:	3b04      	subs	r3, #4
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d3f5      	bcc.n	8006f30 <quorem+0xfc>
 8006f44:	9b00      	ldr	r3, [sp, #0]
 8006f46:	6133      	str	r3, [r6, #16]
 8006f48:	e7e2      	b.n	8006f10 <quorem+0xdc>
	...

08006f4c <_dtoa_r>:
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	b09d      	sub	sp, #116	; 0x74
 8006f50:	9202      	str	r2, [sp, #8]
 8006f52:	9303      	str	r3, [sp, #12]
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	9c03      	ldr	r4, [sp, #12]
 8006f58:	9308      	str	r3, [sp, #32]
 8006f5a:	9409      	str	r4, [sp, #36]	; 0x24
 8006f5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006f5e:	0007      	movs	r7, r0
 8006f60:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006f62:	2c00      	cmp	r4, #0
 8006f64:	d10e      	bne.n	8006f84 <_dtoa_r+0x38>
 8006f66:	2010      	movs	r0, #16
 8006f68:	f000 fe0e 	bl	8007b88 <malloc>
 8006f6c:	1e02      	subs	r2, r0, #0
 8006f6e:	6278      	str	r0, [r7, #36]	; 0x24
 8006f70:	d104      	bne.n	8006f7c <_dtoa_r+0x30>
 8006f72:	21ea      	movs	r1, #234	; 0xea
 8006f74:	4bc7      	ldr	r3, [pc, #796]	; (8007294 <_dtoa_r+0x348>)
 8006f76:	48c8      	ldr	r0, [pc, #800]	; (8007298 <_dtoa_r+0x34c>)
 8006f78:	f001 fc42 	bl	8008800 <__assert_func>
 8006f7c:	6044      	str	r4, [r0, #4]
 8006f7e:	6084      	str	r4, [r0, #8]
 8006f80:	6004      	str	r4, [r0, #0]
 8006f82:	60c4      	str	r4, [r0, #12]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	6819      	ldr	r1, [r3, #0]
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	d00a      	beq.n	8006fa2 <_dtoa_r+0x56>
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4093      	lsls	r3, r2
 8006f92:	604a      	str	r2, [r1, #4]
 8006f94:	608b      	str	r3, [r1, #8]
 8006f96:	0038      	movs	r0, r7
 8006f98:	f000 fe58 	bl	8007c4c <_Bfree>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	da20      	bge.n	8006fea <_dtoa_r+0x9e>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	602b      	str	r3, [r5, #0]
 8006fac:	9b03      	ldr	r3, [sp, #12]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006fb6:	4bb9      	ldr	r3, [pc, #740]	; (800729c <_dtoa_r+0x350>)
 8006fb8:	4ab8      	ldr	r2, [pc, #736]	; (800729c <_dtoa_r+0x350>)
 8006fba:	402b      	ands	r3, r5
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d117      	bne.n	8006ff0 <_dtoa_r+0xa4>
 8006fc0:	4bb7      	ldr	r3, [pc, #732]	; (80072a0 <_dtoa_r+0x354>)
 8006fc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fc4:	0328      	lsls	r0, r5, #12
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	9b02      	ldr	r3, [sp, #8]
 8006fca:	0b00      	lsrs	r0, r0, #12
 8006fcc:	4318      	orrs	r0, r3
 8006fce:	d101      	bne.n	8006fd4 <_dtoa_r+0x88>
 8006fd0:	f000 fdbf 	bl	8007b52 <_dtoa_r+0xc06>
 8006fd4:	48b3      	ldr	r0, [pc, #716]	; (80072a4 <_dtoa_r+0x358>)
 8006fd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fd8:	9006      	str	r0, [sp, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <_dtoa_r+0x98>
 8006fde:	4bb2      	ldr	r3, [pc, #712]	; (80072a8 <_dtoa_r+0x35c>)
 8006fe0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	9806      	ldr	r0, [sp, #24]
 8006fe6:	b01d      	add	sp, #116	; 0x74
 8006fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fea:	2300      	movs	r3, #0
 8006fec:	602b      	str	r3, [r5, #0]
 8006fee:	e7e1      	b.n	8006fb4 <_dtoa_r+0x68>
 8006ff0:	9b08      	ldr	r3, [sp, #32]
 8006ff2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006ff4:	9312      	str	r3, [sp, #72]	; 0x48
 8006ff6:	9413      	str	r4, [sp, #76]	; 0x4c
 8006ff8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ffa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2300      	movs	r3, #0
 8007000:	f7f9 fa20 	bl	8000444 <__aeabi_dcmpeq>
 8007004:	1e04      	subs	r4, r0, #0
 8007006:	d009      	beq.n	800701c <_dtoa_r+0xd0>
 8007008:	2301      	movs	r3, #1
 800700a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	4ba7      	ldr	r3, [pc, #668]	; (80072ac <_dtoa_r+0x360>)
 8007010:	9306      	str	r3, [sp, #24]
 8007012:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0e5      	beq.n	8006fe4 <_dtoa_r+0x98>
 8007018:	4ba5      	ldr	r3, [pc, #660]	; (80072b0 <_dtoa_r+0x364>)
 800701a:	e7e1      	b.n	8006fe0 <_dtoa_r+0x94>
 800701c:	ab1a      	add	r3, sp, #104	; 0x68
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	ab1b      	add	r3, sp, #108	; 0x6c
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	0038      	movs	r0, r7
 8007026:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800702a:	f001 f903 	bl	8008234 <__d2b>
 800702e:	006e      	lsls	r6, r5, #1
 8007030:	9005      	str	r0, [sp, #20]
 8007032:	0d76      	lsrs	r6, r6, #21
 8007034:	d100      	bne.n	8007038 <_dtoa_r+0xec>
 8007036:	e07c      	b.n	8007132 <_dtoa_r+0x1e6>
 8007038:	9812      	ldr	r0, [sp, #72]	; 0x48
 800703a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800703c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800703e:	4a9d      	ldr	r2, [pc, #628]	; (80072b4 <_dtoa_r+0x368>)
 8007040:	031b      	lsls	r3, r3, #12
 8007042:	0b1b      	lsrs	r3, r3, #12
 8007044:	431a      	orrs	r2, r3
 8007046:	0011      	movs	r1, r2
 8007048:	4b9b      	ldr	r3, [pc, #620]	; (80072b8 <_dtoa_r+0x36c>)
 800704a:	9418      	str	r4, [sp, #96]	; 0x60
 800704c:	18f6      	adds	r6, r6, r3
 800704e:	2200      	movs	r2, #0
 8007050:	4b9a      	ldr	r3, [pc, #616]	; (80072bc <_dtoa_r+0x370>)
 8007052:	f7fa fe4f 	bl	8001cf4 <__aeabi_dsub>
 8007056:	4a9a      	ldr	r2, [pc, #616]	; (80072c0 <_dtoa_r+0x374>)
 8007058:	4b9a      	ldr	r3, [pc, #616]	; (80072c4 <_dtoa_r+0x378>)
 800705a:	f7fa fbdf 	bl	800181c <__aeabi_dmul>
 800705e:	4a9a      	ldr	r2, [pc, #616]	; (80072c8 <_dtoa_r+0x37c>)
 8007060:	4b9a      	ldr	r3, [pc, #616]	; (80072cc <_dtoa_r+0x380>)
 8007062:	f7f9 fc9d 	bl	80009a0 <__aeabi_dadd>
 8007066:	0004      	movs	r4, r0
 8007068:	0030      	movs	r0, r6
 800706a:	000d      	movs	r5, r1
 800706c:	f7fb fa28 	bl	80024c0 <__aeabi_i2d>
 8007070:	4a97      	ldr	r2, [pc, #604]	; (80072d0 <_dtoa_r+0x384>)
 8007072:	4b98      	ldr	r3, [pc, #608]	; (80072d4 <_dtoa_r+0x388>)
 8007074:	f7fa fbd2 	bl	800181c <__aeabi_dmul>
 8007078:	0002      	movs	r2, r0
 800707a:	000b      	movs	r3, r1
 800707c:	0020      	movs	r0, r4
 800707e:	0029      	movs	r1, r5
 8007080:	f7f9 fc8e 	bl	80009a0 <__aeabi_dadd>
 8007084:	0004      	movs	r4, r0
 8007086:	000d      	movs	r5, r1
 8007088:	f7fb f9e4 	bl	8002454 <__aeabi_d2iz>
 800708c:	2200      	movs	r2, #0
 800708e:	9002      	str	r0, [sp, #8]
 8007090:	2300      	movs	r3, #0
 8007092:	0020      	movs	r0, r4
 8007094:	0029      	movs	r1, r5
 8007096:	f7f9 f9db 	bl	8000450 <__aeabi_dcmplt>
 800709a:	2800      	cmp	r0, #0
 800709c:	d00b      	beq.n	80070b6 <_dtoa_r+0x16a>
 800709e:	9802      	ldr	r0, [sp, #8]
 80070a0:	f7fb fa0e 	bl	80024c0 <__aeabi_i2d>
 80070a4:	002b      	movs	r3, r5
 80070a6:	0022      	movs	r2, r4
 80070a8:	f7f9 f9cc 	bl	8000444 <__aeabi_dcmpeq>
 80070ac:	4243      	negs	r3, r0
 80070ae:	4158      	adcs	r0, r3
 80070b0:	9b02      	ldr	r3, [sp, #8]
 80070b2:	1a1b      	subs	r3, r3, r0
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	2301      	movs	r3, #1
 80070b8:	9316      	str	r3, [sp, #88]	; 0x58
 80070ba:	9b02      	ldr	r3, [sp, #8]
 80070bc:	2b16      	cmp	r3, #22
 80070be:	d80f      	bhi.n	80070e0 <_dtoa_r+0x194>
 80070c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80070c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80070c4:	00da      	lsls	r2, r3, #3
 80070c6:	4b84      	ldr	r3, [pc, #528]	; (80072d8 <_dtoa_r+0x38c>)
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f7f9 f9bf 	bl	8000450 <__aeabi_dcmplt>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d049      	beq.n	800716a <_dtoa_r+0x21e>
 80070d6:	9b02      	ldr	r3, [sp, #8]
 80070d8:	3b01      	subs	r3, #1
 80070da:	9302      	str	r3, [sp, #8]
 80070dc:	2300      	movs	r3, #0
 80070de:	9316      	str	r3, [sp, #88]	; 0x58
 80070e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80070e2:	1b9e      	subs	r6, r3, r6
 80070e4:	2300      	movs	r3, #0
 80070e6:	930a      	str	r3, [sp, #40]	; 0x28
 80070e8:	0033      	movs	r3, r6
 80070ea:	3b01      	subs	r3, #1
 80070ec:	930d      	str	r3, [sp, #52]	; 0x34
 80070ee:	d504      	bpl.n	80070fa <_dtoa_r+0x1ae>
 80070f0:	2301      	movs	r3, #1
 80070f2:	1b9b      	subs	r3, r3, r6
 80070f4:	930a      	str	r3, [sp, #40]	; 0x28
 80070f6:	2300      	movs	r3, #0
 80070f8:	930d      	str	r3, [sp, #52]	; 0x34
 80070fa:	9b02      	ldr	r3, [sp, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	db36      	blt.n	800716e <_dtoa_r+0x222>
 8007100:	9a02      	ldr	r2, [sp, #8]
 8007102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007104:	4694      	mov	ip, r2
 8007106:	4463      	add	r3, ip
 8007108:	930d      	str	r3, [sp, #52]	; 0x34
 800710a:	2300      	movs	r3, #0
 800710c:	9215      	str	r2, [sp, #84]	; 0x54
 800710e:	930e      	str	r3, [sp, #56]	; 0x38
 8007110:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007112:	2401      	movs	r4, #1
 8007114:	2b09      	cmp	r3, #9
 8007116:	d864      	bhi.n	80071e2 <_dtoa_r+0x296>
 8007118:	2b05      	cmp	r3, #5
 800711a:	dd02      	ble.n	8007122 <_dtoa_r+0x1d6>
 800711c:	2400      	movs	r4, #0
 800711e:	3b04      	subs	r3, #4
 8007120:	9322      	str	r3, [sp, #136]	; 0x88
 8007122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007124:	1e98      	subs	r0, r3, #2
 8007126:	2803      	cmp	r0, #3
 8007128:	d864      	bhi.n	80071f4 <_dtoa_r+0x2a8>
 800712a:	f7f8 fff1 	bl	8000110 <__gnu_thumb1_case_uqi>
 800712e:	3829      	.short	0x3829
 8007130:	5836      	.short	0x5836
 8007132:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007134:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007136:	189e      	adds	r6, r3, r2
 8007138:	4b68      	ldr	r3, [pc, #416]	; (80072dc <_dtoa_r+0x390>)
 800713a:	18f2      	adds	r2, r6, r3
 800713c:	2a20      	cmp	r2, #32
 800713e:	dd0f      	ble.n	8007160 <_dtoa_r+0x214>
 8007140:	2340      	movs	r3, #64	; 0x40
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	409d      	lsls	r5, r3
 8007146:	4b66      	ldr	r3, [pc, #408]	; (80072e0 <_dtoa_r+0x394>)
 8007148:	9802      	ldr	r0, [sp, #8]
 800714a:	18f3      	adds	r3, r6, r3
 800714c:	40d8      	lsrs	r0, r3
 800714e:	4328      	orrs	r0, r5
 8007150:	f7fb f9e6 	bl	8002520 <__aeabi_ui2d>
 8007154:	2301      	movs	r3, #1
 8007156:	4c63      	ldr	r4, [pc, #396]	; (80072e4 <_dtoa_r+0x398>)
 8007158:	3e01      	subs	r6, #1
 800715a:	1909      	adds	r1, r1, r4
 800715c:	9318      	str	r3, [sp, #96]	; 0x60
 800715e:	e776      	b.n	800704e <_dtoa_r+0x102>
 8007160:	2320      	movs	r3, #32
 8007162:	9802      	ldr	r0, [sp, #8]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	4098      	lsls	r0, r3
 8007168:	e7f2      	b.n	8007150 <_dtoa_r+0x204>
 800716a:	9016      	str	r0, [sp, #88]	; 0x58
 800716c:	e7b8      	b.n	80070e0 <_dtoa_r+0x194>
 800716e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007170:	9a02      	ldr	r2, [sp, #8]
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	930a      	str	r3, [sp, #40]	; 0x28
 8007176:	4253      	negs	r3, r2
 8007178:	930e      	str	r3, [sp, #56]	; 0x38
 800717a:	2300      	movs	r3, #0
 800717c:	9315      	str	r3, [sp, #84]	; 0x54
 800717e:	e7c7      	b.n	8007110 <_dtoa_r+0x1c4>
 8007180:	2300      	movs	r3, #0
 8007182:	930f      	str	r3, [sp, #60]	; 0x3c
 8007184:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007186:	930c      	str	r3, [sp, #48]	; 0x30
 8007188:	9307      	str	r3, [sp, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	dc13      	bgt.n	80071b6 <_dtoa_r+0x26a>
 800718e:	2301      	movs	r3, #1
 8007190:	001a      	movs	r2, r3
 8007192:	930c      	str	r3, [sp, #48]	; 0x30
 8007194:	9307      	str	r3, [sp, #28]
 8007196:	9223      	str	r2, [sp, #140]	; 0x8c
 8007198:	e00d      	b.n	80071b6 <_dtoa_r+0x26a>
 800719a:	2301      	movs	r3, #1
 800719c:	e7f1      	b.n	8007182 <_dtoa_r+0x236>
 800719e:	2300      	movs	r3, #0
 80071a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80071a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80071a4:	4694      	mov	ip, r2
 80071a6:	9b02      	ldr	r3, [sp, #8]
 80071a8:	4463      	add	r3, ip
 80071aa:	930c      	str	r3, [sp, #48]	; 0x30
 80071ac:	3301      	adds	r3, #1
 80071ae:	9307      	str	r3, [sp, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dc00      	bgt.n	80071b6 <_dtoa_r+0x26a>
 80071b4:	2301      	movs	r3, #1
 80071b6:	2200      	movs	r2, #0
 80071b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071ba:	6042      	str	r2, [r0, #4]
 80071bc:	3204      	adds	r2, #4
 80071be:	0015      	movs	r5, r2
 80071c0:	3514      	adds	r5, #20
 80071c2:	6841      	ldr	r1, [r0, #4]
 80071c4:	429d      	cmp	r5, r3
 80071c6:	d919      	bls.n	80071fc <_dtoa_r+0x2b0>
 80071c8:	0038      	movs	r0, r7
 80071ca:	f000 fcfb 	bl	8007bc4 <_Balloc>
 80071ce:	9006      	str	r0, [sp, #24]
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d117      	bne.n	8007204 <_dtoa_r+0x2b8>
 80071d4:	21d5      	movs	r1, #213	; 0xd5
 80071d6:	0002      	movs	r2, r0
 80071d8:	4b43      	ldr	r3, [pc, #268]	; (80072e8 <_dtoa_r+0x39c>)
 80071da:	0049      	lsls	r1, r1, #1
 80071dc:	e6cb      	b.n	8006f76 <_dtoa_r+0x2a>
 80071de:	2301      	movs	r3, #1
 80071e0:	e7de      	b.n	80071a0 <_dtoa_r+0x254>
 80071e2:	2300      	movs	r3, #0
 80071e4:	940f      	str	r4, [sp, #60]	; 0x3c
 80071e6:	9322      	str	r3, [sp, #136]	; 0x88
 80071e8:	3b01      	subs	r3, #1
 80071ea:	930c      	str	r3, [sp, #48]	; 0x30
 80071ec:	9307      	str	r3, [sp, #28]
 80071ee:	2200      	movs	r2, #0
 80071f0:	3313      	adds	r3, #19
 80071f2:	e7d0      	b.n	8007196 <_dtoa_r+0x24a>
 80071f4:	2301      	movs	r3, #1
 80071f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80071f8:	3b02      	subs	r3, #2
 80071fa:	e7f6      	b.n	80071ea <_dtoa_r+0x29e>
 80071fc:	3101      	adds	r1, #1
 80071fe:	6041      	str	r1, [r0, #4]
 8007200:	0052      	lsls	r2, r2, #1
 8007202:	e7dc      	b.n	80071be <_dtoa_r+0x272>
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	9a06      	ldr	r2, [sp, #24]
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	9b07      	ldr	r3, [sp, #28]
 800720c:	2b0e      	cmp	r3, #14
 800720e:	d900      	bls.n	8007212 <_dtoa_r+0x2c6>
 8007210:	e0eb      	b.n	80073ea <_dtoa_r+0x49e>
 8007212:	2c00      	cmp	r4, #0
 8007214:	d100      	bne.n	8007218 <_dtoa_r+0x2cc>
 8007216:	e0e8      	b.n	80073ea <_dtoa_r+0x49e>
 8007218:	9b02      	ldr	r3, [sp, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	dd68      	ble.n	80072f0 <_dtoa_r+0x3a4>
 800721e:	001a      	movs	r2, r3
 8007220:	210f      	movs	r1, #15
 8007222:	4b2d      	ldr	r3, [pc, #180]	; (80072d8 <_dtoa_r+0x38c>)
 8007224:	400a      	ands	r2, r1
 8007226:	00d2      	lsls	r2, r2, #3
 8007228:	189b      	adds	r3, r3, r2
 800722a:	681d      	ldr	r5, [r3, #0]
 800722c:	685e      	ldr	r6, [r3, #4]
 800722e:	9b02      	ldr	r3, [sp, #8]
 8007230:	111c      	asrs	r4, r3, #4
 8007232:	2302      	movs	r3, #2
 8007234:	9310      	str	r3, [sp, #64]	; 0x40
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	05db      	lsls	r3, r3, #23
 800723a:	d50b      	bpl.n	8007254 <_dtoa_r+0x308>
 800723c:	4b2b      	ldr	r3, [pc, #172]	; (80072ec <_dtoa_r+0x3a0>)
 800723e:	400c      	ands	r4, r1
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007246:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007248:	f7f9 fee6 	bl	8001018 <__aeabi_ddiv>
 800724c:	2303      	movs	r3, #3
 800724e:	9008      	str	r0, [sp, #32]
 8007250:	9109      	str	r1, [sp, #36]	; 0x24
 8007252:	9310      	str	r3, [sp, #64]	; 0x40
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <_dtoa_r+0x3a0>)
 8007256:	9314      	str	r3, [sp, #80]	; 0x50
 8007258:	2c00      	cmp	r4, #0
 800725a:	d108      	bne.n	800726e <_dtoa_r+0x322>
 800725c:	9808      	ldr	r0, [sp, #32]
 800725e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007260:	002a      	movs	r2, r5
 8007262:	0033      	movs	r3, r6
 8007264:	f7f9 fed8 	bl	8001018 <__aeabi_ddiv>
 8007268:	9008      	str	r0, [sp, #32]
 800726a:	9109      	str	r1, [sp, #36]	; 0x24
 800726c:	e05c      	b.n	8007328 <_dtoa_r+0x3dc>
 800726e:	2301      	movs	r3, #1
 8007270:	421c      	tst	r4, r3
 8007272:	d00b      	beq.n	800728c <_dtoa_r+0x340>
 8007274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007276:	0028      	movs	r0, r5
 8007278:	3301      	adds	r3, #1
 800727a:	9310      	str	r3, [sp, #64]	; 0x40
 800727c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800727e:	0031      	movs	r1, r6
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f7fa faca 	bl	800181c <__aeabi_dmul>
 8007288:	0005      	movs	r5, r0
 800728a:	000e      	movs	r6, r1
 800728c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800728e:	1064      	asrs	r4, r4, #1
 8007290:	3308      	adds	r3, #8
 8007292:	e7e0      	b.n	8007256 <_dtoa_r+0x30a>
 8007294:	0800985d 	.word	0x0800985d
 8007298:	08009874 	.word	0x08009874
 800729c:	7ff00000 	.word	0x7ff00000
 80072a0:	0000270f 	.word	0x0000270f
 80072a4:	08009859 	.word	0x08009859
 80072a8:	0800985c 	.word	0x0800985c
 80072ac:	0800982c 	.word	0x0800982c
 80072b0:	0800982d 	.word	0x0800982d
 80072b4:	3ff00000 	.word	0x3ff00000
 80072b8:	fffffc01 	.word	0xfffffc01
 80072bc:	3ff80000 	.word	0x3ff80000
 80072c0:	636f4361 	.word	0x636f4361
 80072c4:	3fd287a7 	.word	0x3fd287a7
 80072c8:	8b60c8b3 	.word	0x8b60c8b3
 80072cc:	3fc68a28 	.word	0x3fc68a28
 80072d0:	509f79fb 	.word	0x509f79fb
 80072d4:	3fd34413 	.word	0x3fd34413
 80072d8:	08009968 	.word	0x08009968
 80072dc:	00000432 	.word	0x00000432
 80072e0:	00000412 	.word	0x00000412
 80072e4:	fe100000 	.word	0xfe100000
 80072e8:	080098cf 	.word	0x080098cf
 80072ec:	08009940 	.word	0x08009940
 80072f0:	2302      	movs	r3, #2
 80072f2:	9310      	str	r3, [sp, #64]	; 0x40
 80072f4:	9b02      	ldr	r3, [sp, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d016      	beq.n	8007328 <_dtoa_r+0x3dc>
 80072fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80072fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80072fe:	425c      	negs	r4, r3
 8007300:	230f      	movs	r3, #15
 8007302:	4ab6      	ldr	r2, [pc, #728]	; (80075dc <_dtoa_r+0x690>)
 8007304:	4023      	ands	r3, r4
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	18d3      	adds	r3, r2, r3
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f7fa fa85 	bl	800181c <__aeabi_dmul>
 8007312:	2601      	movs	r6, #1
 8007314:	2300      	movs	r3, #0
 8007316:	9008      	str	r0, [sp, #32]
 8007318:	9109      	str	r1, [sp, #36]	; 0x24
 800731a:	4db1      	ldr	r5, [pc, #708]	; (80075e0 <_dtoa_r+0x694>)
 800731c:	1124      	asrs	r4, r4, #4
 800731e:	2c00      	cmp	r4, #0
 8007320:	d000      	beq.n	8007324 <_dtoa_r+0x3d8>
 8007322:	e094      	b.n	800744e <_dtoa_r+0x502>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d19f      	bne.n	8007268 <_dtoa_r+0x31c>
 8007328:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800732a:	2b00      	cmp	r3, #0
 800732c:	d100      	bne.n	8007330 <_dtoa_r+0x3e4>
 800732e:	e09b      	b.n	8007468 <_dtoa_r+0x51c>
 8007330:	9c08      	ldr	r4, [sp, #32]
 8007332:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007334:	2200      	movs	r2, #0
 8007336:	0020      	movs	r0, r4
 8007338:	0029      	movs	r1, r5
 800733a:	4baa      	ldr	r3, [pc, #680]	; (80075e4 <_dtoa_r+0x698>)
 800733c:	f7f9 f888 	bl	8000450 <__aeabi_dcmplt>
 8007340:	2800      	cmp	r0, #0
 8007342:	d100      	bne.n	8007346 <_dtoa_r+0x3fa>
 8007344:	e090      	b.n	8007468 <_dtoa_r+0x51c>
 8007346:	9b07      	ldr	r3, [sp, #28]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d100      	bne.n	800734e <_dtoa_r+0x402>
 800734c:	e08c      	b.n	8007468 <_dtoa_r+0x51c>
 800734e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007350:	2b00      	cmp	r3, #0
 8007352:	dd46      	ble.n	80073e2 <_dtoa_r+0x496>
 8007354:	9b02      	ldr	r3, [sp, #8]
 8007356:	2200      	movs	r2, #0
 8007358:	0020      	movs	r0, r4
 800735a:	0029      	movs	r1, r5
 800735c:	1e5e      	subs	r6, r3, #1
 800735e:	4ba2      	ldr	r3, [pc, #648]	; (80075e8 <_dtoa_r+0x69c>)
 8007360:	f7fa fa5c 	bl	800181c <__aeabi_dmul>
 8007364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007366:	9008      	str	r0, [sp, #32]
 8007368:	9109      	str	r1, [sp, #36]	; 0x24
 800736a:	3301      	adds	r3, #1
 800736c:	9310      	str	r3, [sp, #64]	; 0x40
 800736e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007370:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007372:	9c08      	ldr	r4, [sp, #32]
 8007374:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007376:	9314      	str	r3, [sp, #80]	; 0x50
 8007378:	f7fb f8a2 	bl	80024c0 <__aeabi_i2d>
 800737c:	0022      	movs	r2, r4
 800737e:	002b      	movs	r3, r5
 8007380:	f7fa fa4c 	bl	800181c <__aeabi_dmul>
 8007384:	2200      	movs	r2, #0
 8007386:	4b99      	ldr	r3, [pc, #612]	; (80075ec <_dtoa_r+0x6a0>)
 8007388:	f7f9 fb0a 	bl	80009a0 <__aeabi_dadd>
 800738c:	9010      	str	r0, [sp, #64]	; 0x40
 800738e:	9111      	str	r1, [sp, #68]	; 0x44
 8007390:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007394:	9208      	str	r2, [sp, #32]
 8007396:	9309      	str	r3, [sp, #36]	; 0x24
 8007398:	4a95      	ldr	r2, [pc, #596]	; (80075f0 <_dtoa_r+0x6a4>)
 800739a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800739c:	4694      	mov	ip, r2
 800739e:	4463      	add	r3, ip
 80073a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80073a2:	9309      	str	r3, [sp, #36]	; 0x24
 80073a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d161      	bne.n	800746e <_dtoa_r+0x522>
 80073aa:	2200      	movs	r2, #0
 80073ac:	0020      	movs	r0, r4
 80073ae:	0029      	movs	r1, r5
 80073b0:	4b90      	ldr	r3, [pc, #576]	; (80075f4 <_dtoa_r+0x6a8>)
 80073b2:	f7fa fc9f 	bl	8001cf4 <__aeabi_dsub>
 80073b6:	9a08      	ldr	r2, [sp, #32]
 80073b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073ba:	0004      	movs	r4, r0
 80073bc:	000d      	movs	r5, r1
 80073be:	f7f9 f85b 	bl	8000478 <__aeabi_dcmpgt>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d000      	beq.n	80073c8 <_dtoa_r+0x47c>
 80073c6:	e2af      	b.n	8007928 <_dtoa_r+0x9dc>
 80073c8:	488b      	ldr	r0, [pc, #556]	; (80075f8 <_dtoa_r+0x6ac>)
 80073ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80073cc:	4684      	mov	ip, r0
 80073ce:	4461      	add	r1, ip
 80073d0:	000b      	movs	r3, r1
 80073d2:	0020      	movs	r0, r4
 80073d4:	0029      	movs	r1, r5
 80073d6:	9a08      	ldr	r2, [sp, #32]
 80073d8:	f7f9 f83a 	bl	8000450 <__aeabi_dcmplt>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d000      	beq.n	80073e2 <_dtoa_r+0x496>
 80073e0:	e29f      	b.n	8007922 <_dtoa_r+0x9d6>
 80073e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	9409      	str	r4, [sp, #36]	; 0x24
 80073ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da00      	bge.n	80073f2 <_dtoa_r+0x4a6>
 80073f0:	e172      	b.n	80076d8 <_dtoa_r+0x78c>
 80073f2:	9a02      	ldr	r2, [sp, #8]
 80073f4:	2a0e      	cmp	r2, #14
 80073f6:	dd00      	ble.n	80073fa <_dtoa_r+0x4ae>
 80073f8:	e16e      	b.n	80076d8 <_dtoa_r+0x78c>
 80073fa:	4b78      	ldr	r3, [pc, #480]	; (80075dc <_dtoa_r+0x690>)
 80073fc:	00d2      	lsls	r2, r2, #3
 80073fe:	189b      	adds	r3, r3, r2
 8007400:	685c      	ldr	r4, [r3, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	930a      	str	r3, [sp, #40]	; 0x28
 8007406:	940b      	str	r4, [sp, #44]	; 0x2c
 8007408:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800740a:	2b00      	cmp	r3, #0
 800740c:	db00      	blt.n	8007410 <_dtoa_r+0x4c4>
 800740e:	e0f7      	b.n	8007600 <_dtoa_r+0x6b4>
 8007410:	9b07      	ldr	r3, [sp, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	dd00      	ble.n	8007418 <_dtoa_r+0x4cc>
 8007416:	e0f3      	b.n	8007600 <_dtoa_r+0x6b4>
 8007418:	d000      	beq.n	800741c <_dtoa_r+0x4d0>
 800741a:	e282      	b.n	8007922 <_dtoa_r+0x9d6>
 800741c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800741e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007420:	2200      	movs	r2, #0
 8007422:	4b74      	ldr	r3, [pc, #464]	; (80075f4 <_dtoa_r+0x6a8>)
 8007424:	f7fa f9fa 	bl	800181c <__aeabi_dmul>
 8007428:	9a08      	ldr	r2, [sp, #32]
 800742a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742c:	f7f9 f82e 	bl	800048c <__aeabi_dcmpge>
 8007430:	9e07      	ldr	r6, [sp, #28]
 8007432:	0035      	movs	r5, r6
 8007434:	2800      	cmp	r0, #0
 8007436:	d000      	beq.n	800743a <_dtoa_r+0x4ee>
 8007438:	e259      	b.n	80078ee <_dtoa_r+0x9a2>
 800743a:	9b06      	ldr	r3, [sp, #24]
 800743c:	9a06      	ldr	r2, [sp, #24]
 800743e:	3301      	adds	r3, #1
 8007440:	9308      	str	r3, [sp, #32]
 8007442:	2331      	movs	r3, #49	; 0x31
 8007444:	7013      	strb	r3, [r2, #0]
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	3301      	adds	r3, #1
 800744a:	9302      	str	r3, [sp, #8]
 800744c:	e254      	b.n	80078f8 <_dtoa_r+0x9ac>
 800744e:	4234      	tst	r4, r6
 8007450:	d007      	beq.n	8007462 <_dtoa_r+0x516>
 8007452:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007454:	3301      	adds	r3, #1
 8007456:	9310      	str	r3, [sp, #64]	; 0x40
 8007458:	682a      	ldr	r2, [r5, #0]
 800745a:	686b      	ldr	r3, [r5, #4]
 800745c:	f7fa f9de 	bl	800181c <__aeabi_dmul>
 8007460:	0033      	movs	r3, r6
 8007462:	1064      	asrs	r4, r4, #1
 8007464:	3508      	adds	r5, #8
 8007466:	e75a      	b.n	800731e <_dtoa_r+0x3d2>
 8007468:	9e02      	ldr	r6, [sp, #8]
 800746a:	9b07      	ldr	r3, [sp, #28]
 800746c:	e780      	b.n	8007370 <_dtoa_r+0x424>
 800746e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007472:	1e5a      	subs	r2, r3, #1
 8007474:	4b59      	ldr	r3, [pc, #356]	; (80075dc <_dtoa_r+0x690>)
 8007476:	00d2      	lsls	r2, r2, #3
 8007478:	189b      	adds	r3, r3, r2
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2900      	cmp	r1, #0
 8007480:	d051      	beq.n	8007526 <_dtoa_r+0x5da>
 8007482:	2000      	movs	r0, #0
 8007484:	495d      	ldr	r1, [pc, #372]	; (80075fc <_dtoa_r+0x6b0>)
 8007486:	f7f9 fdc7 	bl	8001018 <__aeabi_ddiv>
 800748a:	9a08      	ldr	r2, [sp, #32]
 800748c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748e:	f7fa fc31 	bl	8001cf4 <__aeabi_dsub>
 8007492:	9a06      	ldr	r2, [sp, #24]
 8007494:	9b06      	ldr	r3, [sp, #24]
 8007496:	4694      	mov	ip, r2
 8007498:	9317      	str	r3, [sp, #92]	; 0x5c
 800749a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800749c:	9010      	str	r0, [sp, #64]	; 0x40
 800749e:	9111      	str	r1, [sp, #68]	; 0x44
 80074a0:	4463      	add	r3, ip
 80074a2:	9319      	str	r3, [sp, #100]	; 0x64
 80074a4:	0029      	movs	r1, r5
 80074a6:	0020      	movs	r0, r4
 80074a8:	f7fa ffd4 	bl	8002454 <__aeabi_d2iz>
 80074ac:	9014      	str	r0, [sp, #80]	; 0x50
 80074ae:	f7fb f807 	bl	80024c0 <__aeabi_i2d>
 80074b2:	0002      	movs	r2, r0
 80074b4:	000b      	movs	r3, r1
 80074b6:	0020      	movs	r0, r4
 80074b8:	0029      	movs	r1, r5
 80074ba:	f7fa fc1b 	bl	8001cf4 <__aeabi_dsub>
 80074be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074c2:	3301      	adds	r3, #1
 80074c4:	9308      	str	r3, [sp, #32]
 80074c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074c8:	0004      	movs	r4, r0
 80074ca:	3330      	adds	r3, #48	; 0x30
 80074cc:	7013      	strb	r3, [r2, #0]
 80074ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074d2:	000d      	movs	r5, r1
 80074d4:	f7f8 ffbc 	bl	8000450 <__aeabi_dcmplt>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d175      	bne.n	80075c8 <_dtoa_r+0x67c>
 80074dc:	0022      	movs	r2, r4
 80074de:	002b      	movs	r3, r5
 80074e0:	2000      	movs	r0, #0
 80074e2:	4940      	ldr	r1, [pc, #256]	; (80075e4 <_dtoa_r+0x698>)
 80074e4:	f7fa fc06 	bl	8001cf4 <__aeabi_dsub>
 80074e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ec:	f7f8 ffb0 	bl	8000450 <__aeabi_dcmplt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d000      	beq.n	80074f6 <_dtoa_r+0x5aa>
 80074f4:	e0d2      	b.n	800769c <_dtoa_r+0x750>
 80074f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074f8:	9a08      	ldr	r2, [sp, #32]
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d100      	bne.n	8007500 <_dtoa_r+0x5b4>
 80074fe:	e770      	b.n	80073e2 <_dtoa_r+0x496>
 8007500:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007502:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007504:	2200      	movs	r2, #0
 8007506:	4b38      	ldr	r3, [pc, #224]	; (80075e8 <_dtoa_r+0x69c>)
 8007508:	f7fa f988 	bl	800181c <__aeabi_dmul>
 800750c:	4b36      	ldr	r3, [pc, #216]	; (80075e8 <_dtoa_r+0x69c>)
 800750e:	9010      	str	r0, [sp, #64]	; 0x40
 8007510:	9111      	str	r1, [sp, #68]	; 0x44
 8007512:	2200      	movs	r2, #0
 8007514:	0020      	movs	r0, r4
 8007516:	0029      	movs	r1, r5
 8007518:	f7fa f980 	bl	800181c <__aeabi_dmul>
 800751c:	9b08      	ldr	r3, [sp, #32]
 800751e:	0004      	movs	r4, r0
 8007520:	000d      	movs	r5, r1
 8007522:	9317      	str	r3, [sp, #92]	; 0x5c
 8007524:	e7be      	b.n	80074a4 <_dtoa_r+0x558>
 8007526:	9808      	ldr	r0, [sp, #32]
 8007528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800752a:	f7fa f977 	bl	800181c <__aeabi_dmul>
 800752e:	9a06      	ldr	r2, [sp, #24]
 8007530:	9b06      	ldr	r3, [sp, #24]
 8007532:	4694      	mov	ip, r2
 8007534:	9308      	str	r3, [sp, #32]
 8007536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007538:	9010      	str	r0, [sp, #64]	; 0x40
 800753a:	9111      	str	r1, [sp, #68]	; 0x44
 800753c:	4463      	add	r3, ip
 800753e:	9319      	str	r3, [sp, #100]	; 0x64
 8007540:	0029      	movs	r1, r5
 8007542:	0020      	movs	r0, r4
 8007544:	f7fa ff86 	bl	8002454 <__aeabi_d2iz>
 8007548:	9017      	str	r0, [sp, #92]	; 0x5c
 800754a:	f7fa ffb9 	bl	80024c0 <__aeabi_i2d>
 800754e:	0002      	movs	r2, r0
 8007550:	000b      	movs	r3, r1
 8007552:	0020      	movs	r0, r4
 8007554:	0029      	movs	r1, r5
 8007556:	f7fa fbcd 	bl	8001cf4 <__aeabi_dsub>
 800755a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800755c:	9a08      	ldr	r2, [sp, #32]
 800755e:	3330      	adds	r3, #48	; 0x30
 8007560:	7013      	strb	r3, [r2, #0]
 8007562:	0013      	movs	r3, r2
 8007564:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007566:	3301      	adds	r3, #1
 8007568:	0004      	movs	r4, r0
 800756a:	000d      	movs	r5, r1
 800756c:	9308      	str	r3, [sp, #32]
 800756e:	4293      	cmp	r3, r2
 8007570:	d12c      	bne.n	80075cc <_dtoa_r+0x680>
 8007572:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007574:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007576:	9a06      	ldr	r2, [sp, #24]
 8007578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800757a:	4694      	mov	ip, r2
 800757c:	4463      	add	r3, ip
 800757e:	2200      	movs	r2, #0
 8007580:	9308      	str	r3, [sp, #32]
 8007582:	4b1e      	ldr	r3, [pc, #120]	; (80075fc <_dtoa_r+0x6b0>)
 8007584:	f7f9 fa0c 	bl	80009a0 <__aeabi_dadd>
 8007588:	0002      	movs	r2, r0
 800758a:	000b      	movs	r3, r1
 800758c:	0020      	movs	r0, r4
 800758e:	0029      	movs	r1, r5
 8007590:	f7f8 ff72 	bl	8000478 <__aeabi_dcmpgt>
 8007594:	2800      	cmp	r0, #0
 8007596:	d000      	beq.n	800759a <_dtoa_r+0x64e>
 8007598:	e080      	b.n	800769c <_dtoa_r+0x750>
 800759a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800759c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800759e:	2000      	movs	r0, #0
 80075a0:	4916      	ldr	r1, [pc, #88]	; (80075fc <_dtoa_r+0x6b0>)
 80075a2:	f7fa fba7 	bl	8001cf4 <__aeabi_dsub>
 80075a6:	0002      	movs	r2, r0
 80075a8:	000b      	movs	r3, r1
 80075aa:	0020      	movs	r0, r4
 80075ac:	0029      	movs	r1, r5
 80075ae:	f7f8 ff4f 	bl	8000450 <__aeabi_dcmplt>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d100      	bne.n	80075b8 <_dtoa_r+0x66c>
 80075b6:	e714      	b.n	80073e2 <_dtoa_r+0x496>
 80075b8:	9b08      	ldr	r3, [sp, #32]
 80075ba:	001a      	movs	r2, r3
 80075bc:	3a01      	subs	r2, #1
 80075be:	9208      	str	r2, [sp, #32]
 80075c0:	7812      	ldrb	r2, [r2, #0]
 80075c2:	2a30      	cmp	r2, #48	; 0x30
 80075c4:	d0f8      	beq.n	80075b8 <_dtoa_r+0x66c>
 80075c6:	9308      	str	r3, [sp, #32]
 80075c8:	9602      	str	r6, [sp, #8]
 80075ca:	e055      	b.n	8007678 <_dtoa_r+0x72c>
 80075cc:	2200      	movs	r2, #0
 80075ce:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <_dtoa_r+0x69c>)
 80075d0:	f7fa f924 	bl	800181c <__aeabi_dmul>
 80075d4:	0004      	movs	r4, r0
 80075d6:	000d      	movs	r5, r1
 80075d8:	e7b2      	b.n	8007540 <_dtoa_r+0x5f4>
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	08009968 	.word	0x08009968
 80075e0:	08009940 	.word	0x08009940
 80075e4:	3ff00000 	.word	0x3ff00000
 80075e8:	40240000 	.word	0x40240000
 80075ec:	401c0000 	.word	0x401c0000
 80075f0:	fcc00000 	.word	0xfcc00000
 80075f4:	40140000 	.word	0x40140000
 80075f8:	7cc00000 	.word	0x7cc00000
 80075fc:	3fe00000 	.word	0x3fe00000
 8007600:	9b07      	ldr	r3, [sp, #28]
 8007602:	9e06      	ldr	r6, [sp, #24]
 8007604:	3b01      	subs	r3, #1
 8007606:	199b      	adds	r3, r3, r6
 8007608:	930c      	str	r3, [sp, #48]	; 0x30
 800760a:	9c08      	ldr	r4, [sp, #32]
 800760c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800760e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007612:	0020      	movs	r0, r4
 8007614:	0029      	movs	r1, r5
 8007616:	f7f9 fcff 	bl	8001018 <__aeabi_ddiv>
 800761a:	f7fa ff1b 	bl	8002454 <__aeabi_d2iz>
 800761e:	9007      	str	r0, [sp, #28]
 8007620:	f7fa ff4e 	bl	80024c0 <__aeabi_i2d>
 8007624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007628:	f7fa f8f8 	bl	800181c <__aeabi_dmul>
 800762c:	0002      	movs	r2, r0
 800762e:	000b      	movs	r3, r1
 8007630:	0020      	movs	r0, r4
 8007632:	0029      	movs	r1, r5
 8007634:	f7fa fb5e 	bl	8001cf4 <__aeabi_dsub>
 8007638:	0033      	movs	r3, r6
 800763a:	9a07      	ldr	r2, [sp, #28]
 800763c:	3601      	adds	r6, #1
 800763e:	3230      	adds	r2, #48	; 0x30
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007644:	9608      	str	r6, [sp, #32]
 8007646:	429a      	cmp	r2, r3
 8007648:	d139      	bne.n	80076be <_dtoa_r+0x772>
 800764a:	0002      	movs	r2, r0
 800764c:	000b      	movs	r3, r1
 800764e:	f7f9 f9a7 	bl	80009a0 <__aeabi_dadd>
 8007652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007656:	0004      	movs	r4, r0
 8007658:	000d      	movs	r5, r1
 800765a:	f7f8 ff0d 	bl	8000478 <__aeabi_dcmpgt>
 800765e:	2800      	cmp	r0, #0
 8007660:	d11b      	bne.n	800769a <_dtoa_r+0x74e>
 8007662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007666:	0020      	movs	r0, r4
 8007668:	0029      	movs	r1, r5
 800766a:	f7f8 feeb 	bl	8000444 <__aeabi_dcmpeq>
 800766e:	2800      	cmp	r0, #0
 8007670:	d002      	beq.n	8007678 <_dtoa_r+0x72c>
 8007672:	9b07      	ldr	r3, [sp, #28]
 8007674:	07db      	lsls	r3, r3, #31
 8007676:	d410      	bmi.n	800769a <_dtoa_r+0x74e>
 8007678:	0038      	movs	r0, r7
 800767a:	9905      	ldr	r1, [sp, #20]
 800767c:	f000 fae6 	bl	8007c4c <_Bfree>
 8007680:	2300      	movs	r3, #0
 8007682:	9a08      	ldr	r2, [sp, #32]
 8007684:	9802      	ldr	r0, [sp, #8]
 8007686:	7013      	strb	r3, [r2, #0]
 8007688:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800768a:	3001      	adds	r0, #1
 800768c:	6018      	str	r0, [r3, #0]
 800768e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007690:	2b00      	cmp	r3, #0
 8007692:	d100      	bne.n	8007696 <_dtoa_r+0x74a>
 8007694:	e4a6      	b.n	8006fe4 <_dtoa_r+0x98>
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	e4a4      	b.n	8006fe4 <_dtoa_r+0x98>
 800769a:	9e02      	ldr	r6, [sp, #8]
 800769c:	9b08      	ldr	r3, [sp, #32]
 800769e:	9308      	str	r3, [sp, #32]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	781a      	ldrb	r2, [r3, #0]
 80076a4:	2a39      	cmp	r2, #57	; 0x39
 80076a6:	d106      	bne.n	80076b6 <_dtoa_r+0x76a>
 80076a8:	9a06      	ldr	r2, [sp, #24]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d1f7      	bne.n	800769e <_dtoa_r+0x752>
 80076ae:	2230      	movs	r2, #48	; 0x30
 80076b0:	9906      	ldr	r1, [sp, #24]
 80076b2:	3601      	adds	r6, #1
 80076b4:	700a      	strb	r2, [r1, #0]
 80076b6:	781a      	ldrb	r2, [r3, #0]
 80076b8:	3201      	adds	r2, #1
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	e784      	b.n	80075c8 <_dtoa_r+0x67c>
 80076be:	2200      	movs	r2, #0
 80076c0:	4baa      	ldr	r3, [pc, #680]	; (800796c <_dtoa_r+0xa20>)
 80076c2:	f7fa f8ab 	bl	800181c <__aeabi_dmul>
 80076c6:	2200      	movs	r2, #0
 80076c8:	2300      	movs	r3, #0
 80076ca:	0004      	movs	r4, r0
 80076cc:	000d      	movs	r5, r1
 80076ce:	f7f8 feb9 	bl	8000444 <__aeabi_dcmpeq>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d09b      	beq.n	800760e <_dtoa_r+0x6c2>
 80076d6:	e7cf      	b.n	8007678 <_dtoa_r+0x72c>
 80076d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80076da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80076dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076de:	2d00      	cmp	r5, #0
 80076e0:	d012      	beq.n	8007708 <_dtoa_r+0x7bc>
 80076e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80076e4:	2a01      	cmp	r2, #1
 80076e6:	dc66      	bgt.n	80077b6 <_dtoa_r+0x86a>
 80076e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	d05d      	beq.n	80077aa <_dtoa_r+0x85e>
 80076ee:	4aa0      	ldr	r2, [pc, #640]	; (8007970 <_dtoa_r+0xa24>)
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076f4:	2101      	movs	r1, #1
 80076f6:	18d2      	adds	r2, r2, r3
 80076f8:	920a      	str	r2, [sp, #40]	; 0x28
 80076fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076fc:	0038      	movs	r0, r7
 80076fe:	18d3      	adds	r3, r2, r3
 8007700:	930d      	str	r3, [sp, #52]	; 0x34
 8007702:	f000 fb53 	bl	8007dac <__i2b>
 8007706:	0005      	movs	r5, r0
 8007708:	2c00      	cmp	r4, #0
 800770a:	dd0e      	ble.n	800772a <_dtoa_r+0x7de>
 800770c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800770e:	2b00      	cmp	r3, #0
 8007710:	dd0b      	ble.n	800772a <_dtoa_r+0x7de>
 8007712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007714:	0023      	movs	r3, r4
 8007716:	4294      	cmp	r4, r2
 8007718:	dd00      	ble.n	800771c <_dtoa_r+0x7d0>
 800771a:	0013      	movs	r3, r2
 800771c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771e:	1ae4      	subs	r4, r4, r3
 8007720:	1ad2      	subs	r2, r2, r3
 8007722:	920a      	str	r2, [sp, #40]	; 0x28
 8007724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	930d      	str	r3, [sp, #52]	; 0x34
 800772a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01f      	beq.n	8007770 <_dtoa_r+0x824>
 8007730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d054      	beq.n	80077e0 <_dtoa_r+0x894>
 8007736:	2e00      	cmp	r6, #0
 8007738:	dd11      	ble.n	800775e <_dtoa_r+0x812>
 800773a:	0029      	movs	r1, r5
 800773c:	0032      	movs	r2, r6
 800773e:	0038      	movs	r0, r7
 8007740:	f000 fbfa 	bl	8007f38 <__pow5mult>
 8007744:	9a05      	ldr	r2, [sp, #20]
 8007746:	0001      	movs	r1, r0
 8007748:	0005      	movs	r5, r0
 800774a:	0038      	movs	r0, r7
 800774c:	f000 fb44 	bl	8007dd8 <__multiply>
 8007750:	9905      	ldr	r1, [sp, #20]
 8007752:	9014      	str	r0, [sp, #80]	; 0x50
 8007754:	0038      	movs	r0, r7
 8007756:	f000 fa79 	bl	8007c4c <_Bfree>
 800775a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007760:	1b9a      	subs	r2, r3, r6
 8007762:	42b3      	cmp	r3, r6
 8007764:	d004      	beq.n	8007770 <_dtoa_r+0x824>
 8007766:	0038      	movs	r0, r7
 8007768:	9905      	ldr	r1, [sp, #20]
 800776a:	f000 fbe5 	bl	8007f38 <__pow5mult>
 800776e:	9005      	str	r0, [sp, #20]
 8007770:	2101      	movs	r1, #1
 8007772:	0038      	movs	r0, r7
 8007774:	f000 fb1a 	bl	8007dac <__i2b>
 8007778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800777a:	0006      	movs	r6, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	dd31      	ble.n	80077e4 <_dtoa_r+0x898>
 8007780:	001a      	movs	r2, r3
 8007782:	0001      	movs	r1, r0
 8007784:	0038      	movs	r0, r7
 8007786:	f000 fbd7 	bl	8007f38 <__pow5mult>
 800778a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800778c:	0006      	movs	r6, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	dd2d      	ble.n	80077ee <_dtoa_r+0x8a2>
 8007792:	2300      	movs	r3, #0
 8007794:	930e      	str	r3, [sp, #56]	; 0x38
 8007796:	6933      	ldr	r3, [r6, #16]
 8007798:	3303      	adds	r3, #3
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	18f3      	adds	r3, r6, r3
 800779e:	6858      	ldr	r0, [r3, #4]
 80077a0:	f000 fabc 	bl	8007d1c <__hi0bits>
 80077a4:	2320      	movs	r3, #32
 80077a6:	1a18      	subs	r0, r3, r0
 80077a8:	e039      	b.n	800781e <_dtoa_r+0x8d2>
 80077aa:	2336      	movs	r3, #54	; 0x36
 80077ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80077b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	e79d      	b.n	80076f2 <_dtoa_r+0x7a6>
 80077b6:	9b07      	ldr	r3, [sp, #28]
 80077b8:	1e5e      	subs	r6, r3, #1
 80077ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077bc:	42b3      	cmp	r3, r6
 80077be:	db07      	blt.n	80077d0 <_dtoa_r+0x884>
 80077c0:	1b9e      	subs	r6, r3, r6
 80077c2:	9b07      	ldr	r3, [sp, #28]
 80077c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da93      	bge.n	80076f2 <_dtoa_r+0x7a6>
 80077ca:	1ae4      	subs	r4, r4, r3
 80077cc:	2300      	movs	r3, #0
 80077ce:	e790      	b.n	80076f2 <_dtoa_r+0x7a6>
 80077d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077d4:	1af3      	subs	r3, r6, r3
 80077d6:	18d3      	adds	r3, r2, r3
 80077d8:	960e      	str	r6, [sp, #56]	; 0x38
 80077da:	9315      	str	r3, [sp, #84]	; 0x54
 80077dc:	2600      	movs	r6, #0
 80077de:	e7f0      	b.n	80077c2 <_dtoa_r+0x876>
 80077e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077e2:	e7c0      	b.n	8007766 <_dtoa_r+0x81a>
 80077e4:	2300      	movs	r3, #0
 80077e6:	930e      	str	r3, [sp, #56]	; 0x38
 80077e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	dc13      	bgt.n	8007816 <_dtoa_r+0x8ca>
 80077ee:	2300      	movs	r3, #0
 80077f0:	930e      	str	r3, [sp, #56]	; 0x38
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10e      	bne.n	8007816 <_dtoa_r+0x8ca>
 80077f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077fa:	031b      	lsls	r3, r3, #12
 80077fc:	d10b      	bne.n	8007816 <_dtoa_r+0x8ca>
 80077fe:	4b5d      	ldr	r3, [pc, #372]	; (8007974 <_dtoa_r+0xa28>)
 8007800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007802:	4213      	tst	r3, r2
 8007804:	d007      	beq.n	8007816 <_dtoa_r+0x8ca>
 8007806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007808:	3301      	adds	r3, #1
 800780a:	930a      	str	r3, [sp, #40]	; 0x28
 800780c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800780e:	3301      	adds	r3, #1
 8007810:	930d      	str	r3, [sp, #52]	; 0x34
 8007812:	2301      	movs	r3, #1
 8007814:	930e      	str	r3, [sp, #56]	; 0x38
 8007816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007818:	2001      	movs	r0, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1bb      	bne.n	8007796 <_dtoa_r+0x84a>
 800781e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007820:	221f      	movs	r2, #31
 8007822:	1818      	adds	r0, r3, r0
 8007824:	0003      	movs	r3, r0
 8007826:	4013      	ands	r3, r2
 8007828:	4210      	tst	r0, r2
 800782a:	d046      	beq.n	80078ba <_dtoa_r+0x96e>
 800782c:	3201      	adds	r2, #1
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	2a04      	cmp	r2, #4
 8007832:	dd3f      	ble.n	80078b4 <_dtoa_r+0x968>
 8007834:	221c      	movs	r2, #28
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800783a:	18e4      	adds	r4, r4, r3
 800783c:	18d2      	adds	r2, r2, r3
 800783e:	920a      	str	r2, [sp, #40]	; 0x28
 8007840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007842:	18d3      	adds	r3, r2, r3
 8007844:	930d      	str	r3, [sp, #52]	; 0x34
 8007846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007848:	2b00      	cmp	r3, #0
 800784a:	dd05      	ble.n	8007858 <_dtoa_r+0x90c>
 800784c:	001a      	movs	r2, r3
 800784e:	0038      	movs	r0, r7
 8007850:	9905      	ldr	r1, [sp, #20]
 8007852:	f000 fbcd 	bl	8007ff0 <__lshift>
 8007856:	9005      	str	r0, [sp, #20]
 8007858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800785a:	2b00      	cmp	r3, #0
 800785c:	dd05      	ble.n	800786a <_dtoa_r+0x91e>
 800785e:	0031      	movs	r1, r6
 8007860:	001a      	movs	r2, r3
 8007862:	0038      	movs	r0, r7
 8007864:	f000 fbc4 	bl	8007ff0 <__lshift>
 8007868:	0006      	movs	r6, r0
 800786a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800786c:	2b00      	cmp	r3, #0
 800786e:	d026      	beq.n	80078be <_dtoa_r+0x972>
 8007870:	0031      	movs	r1, r6
 8007872:	9805      	ldr	r0, [sp, #20]
 8007874:	f000 fc2a 	bl	80080cc <__mcmp>
 8007878:	2800      	cmp	r0, #0
 800787a:	da20      	bge.n	80078be <_dtoa_r+0x972>
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	220a      	movs	r2, #10
 8007880:	3b01      	subs	r3, #1
 8007882:	9302      	str	r3, [sp, #8]
 8007884:	0038      	movs	r0, r7
 8007886:	2300      	movs	r3, #0
 8007888:	9905      	ldr	r1, [sp, #20]
 800788a:	f000 fa03 	bl	8007c94 <__multadd>
 800788e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007890:	9005      	str	r0, [sp, #20]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d100      	bne.n	8007898 <_dtoa_r+0x94c>
 8007896:	e166      	b.n	8007b66 <_dtoa_r+0xc1a>
 8007898:	2300      	movs	r3, #0
 800789a:	0029      	movs	r1, r5
 800789c:	220a      	movs	r2, #10
 800789e:	0038      	movs	r0, r7
 80078a0:	f000 f9f8 	bl	8007c94 <__multadd>
 80078a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078a6:	0005      	movs	r5, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dc47      	bgt.n	800793c <_dtoa_r+0x9f0>
 80078ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	dc0d      	bgt.n	80078ce <_dtoa_r+0x982>
 80078b2:	e043      	b.n	800793c <_dtoa_r+0x9f0>
 80078b4:	2a04      	cmp	r2, #4
 80078b6:	d0c6      	beq.n	8007846 <_dtoa_r+0x8fa>
 80078b8:	0013      	movs	r3, r2
 80078ba:	331c      	adds	r3, #28
 80078bc:	e7bc      	b.n	8007838 <_dtoa_r+0x8ec>
 80078be:	9b07      	ldr	r3, [sp, #28]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	dc35      	bgt.n	8007930 <_dtoa_r+0x9e4>
 80078c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	dd32      	ble.n	8007930 <_dtoa_r+0x9e4>
 80078ca:	9b07      	ldr	r3, [sp, #28]
 80078cc:	930c      	str	r3, [sp, #48]	; 0x30
 80078ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10c      	bne.n	80078ee <_dtoa_r+0x9a2>
 80078d4:	0031      	movs	r1, r6
 80078d6:	2205      	movs	r2, #5
 80078d8:	0038      	movs	r0, r7
 80078da:	f000 f9db 	bl	8007c94 <__multadd>
 80078de:	0006      	movs	r6, r0
 80078e0:	0001      	movs	r1, r0
 80078e2:	9805      	ldr	r0, [sp, #20]
 80078e4:	f000 fbf2 	bl	80080cc <__mcmp>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	dd00      	ble.n	80078ee <_dtoa_r+0x9a2>
 80078ec:	e5a5      	b.n	800743a <_dtoa_r+0x4ee>
 80078ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078f0:	43db      	mvns	r3, r3
 80078f2:	9302      	str	r3, [sp, #8]
 80078f4:	9b06      	ldr	r3, [sp, #24]
 80078f6:	9308      	str	r3, [sp, #32]
 80078f8:	2400      	movs	r4, #0
 80078fa:	0031      	movs	r1, r6
 80078fc:	0038      	movs	r0, r7
 80078fe:	f000 f9a5 	bl	8007c4c <_Bfree>
 8007902:	2d00      	cmp	r5, #0
 8007904:	d100      	bne.n	8007908 <_dtoa_r+0x9bc>
 8007906:	e6b7      	b.n	8007678 <_dtoa_r+0x72c>
 8007908:	2c00      	cmp	r4, #0
 800790a:	d005      	beq.n	8007918 <_dtoa_r+0x9cc>
 800790c:	42ac      	cmp	r4, r5
 800790e:	d003      	beq.n	8007918 <_dtoa_r+0x9cc>
 8007910:	0021      	movs	r1, r4
 8007912:	0038      	movs	r0, r7
 8007914:	f000 f99a 	bl	8007c4c <_Bfree>
 8007918:	0029      	movs	r1, r5
 800791a:	0038      	movs	r0, r7
 800791c:	f000 f996 	bl	8007c4c <_Bfree>
 8007920:	e6aa      	b.n	8007678 <_dtoa_r+0x72c>
 8007922:	2600      	movs	r6, #0
 8007924:	0035      	movs	r5, r6
 8007926:	e7e2      	b.n	80078ee <_dtoa_r+0x9a2>
 8007928:	9602      	str	r6, [sp, #8]
 800792a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800792c:	0035      	movs	r5, r6
 800792e:	e584      	b.n	800743a <_dtoa_r+0x4ee>
 8007930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d100      	bne.n	8007938 <_dtoa_r+0x9ec>
 8007936:	e0ce      	b.n	8007ad6 <_dtoa_r+0xb8a>
 8007938:	9b07      	ldr	r3, [sp, #28]
 800793a:	930c      	str	r3, [sp, #48]	; 0x30
 800793c:	2c00      	cmp	r4, #0
 800793e:	dd05      	ble.n	800794c <_dtoa_r+0xa00>
 8007940:	0029      	movs	r1, r5
 8007942:	0022      	movs	r2, r4
 8007944:	0038      	movs	r0, r7
 8007946:	f000 fb53 	bl	8007ff0 <__lshift>
 800794a:	0005      	movs	r5, r0
 800794c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800794e:	0028      	movs	r0, r5
 8007950:	2b00      	cmp	r3, #0
 8007952:	d022      	beq.n	800799a <_dtoa_r+0xa4e>
 8007954:	0038      	movs	r0, r7
 8007956:	6869      	ldr	r1, [r5, #4]
 8007958:	f000 f934 	bl	8007bc4 <_Balloc>
 800795c:	1e04      	subs	r4, r0, #0
 800795e:	d10f      	bne.n	8007980 <_dtoa_r+0xa34>
 8007960:	0002      	movs	r2, r0
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <_dtoa_r+0xa2c>)
 8007964:	4905      	ldr	r1, [pc, #20]	; (800797c <_dtoa_r+0xa30>)
 8007966:	f7ff fb06 	bl	8006f76 <_dtoa_r+0x2a>
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	40240000 	.word	0x40240000
 8007970:	00000433 	.word	0x00000433
 8007974:	7ff00000 	.word	0x7ff00000
 8007978:	080098cf 	.word	0x080098cf
 800797c:	000002ea 	.word	0x000002ea
 8007980:	0029      	movs	r1, r5
 8007982:	692b      	ldr	r3, [r5, #16]
 8007984:	310c      	adds	r1, #12
 8007986:	1c9a      	adds	r2, r3, #2
 8007988:	0092      	lsls	r2, r2, #2
 800798a:	300c      	adds	r0, #12
 800798c:	f000 f911 	bl	8007bb2 <memcpy>
 8007990:	2201      	movs	r2, #1
 8007992:	0021      	movs	r1, r4
 8007994:	0038      	movs	r0, r7
 8007996:	f000 fb2b 	bl	8007ff0 <__lshift>
 800799a:	9b06      	ldr	r3, [sp, #24]
 800799c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800799e:	930a      	str	r3, [sp, #40]	; 0x28
 80079a0:	3b01      	subs	r3, #1
 80079a2:	189b      	adds	r3, r3, r2
 80079a4:	2201      	movs	r2, #1
 80079a6:	002c      	movs	r4, r5
 80079a8:	0005      	movs	r5, r0
 80079aa:	9314      	str	r3, [sp, #80]	; 0x50
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	4013      	ands	r3, r2
 80079b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80079b2:	0031      	movs	r1, r6
 80079b4:	9805      	ldr	r0, [sp, #20]
 80079b6:	f7ff fa3d 	bl	8006e34 <quorem>
 80079ba:	0003      	movs	r3, r0
 80079bc:	0021      	movs	r1, r4
 80079be:	3330      	adds	r3, #48	; 0x30
 80079c0:	900d      	str	r0, [sp, #52]	; 0x34
 80079c2:	9805      	ldr	r0, [sp, #20]
 80079c4:	9307      	str	r3, [sp, #28]
 80079c6:	f000 fb81 	bl	80080cc <__mcmp>
 80079ca:	002a      	movs	r2, r5
 80079cc:	900e      	str	r0, [sp, #56]	; 0x38
 80079ce:	0031      	movs	r1, r6
 80079d0:	0038      	movs	r0, r7
 80079d2:	f000 fb97 	bl	8008104 <__mdiff>
 80079d6:	68c3      	ldr	r3, [r0, #12]
 80079d8:	9008      	str	r0, [sp, #32]
 80079da:	9310      	str	r3, [sp, #64]	; 0x40
 80079dc:	2301      	movs	r3, #1
 80079de:	930c      	str	r3, [sp, #48]	; 0x30
 80079e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <_dtoa_r+0xaa4>
 80079e6:	0001      	movs	r1, r0
 80079e8:	9805      	ldr	r0, [sp, #20]
 80079ea:	f000 fb6f 	bl	80080cc <__mcmp>
 80079ee:	900c      	str	r0, [sp, #48]	; 0x30
 80079f0:	0038      	movs	r0, r7
 80079f2:	9908      	ldr	r1, [sp, #32]
 80079f4:	f000 f92a 	bl	8007c4c <_Bfree>
 80079f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079fc:	3301      	adds	r3, #1
 80079fe:	9308      	str	r3, [sp, #32]
 8007a00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a02:	4313      	orrs	r3, r2
 8007a04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a06:	4313      	orrs	r3, r2
 8007a08:	d10c      	bne.n	8007a24 <_dtoa_r+0xad8>
 8007a0a:	9b07      	ldr	r3, [sp, #28]
 8007a0c:	2b39      	cmp	r3, #57	; 0x39
 8007a0e:	d026      	beq.n	8007a5e <_dtoa_r+0xb12>
 8007a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dd02      	ble.n	8007a1c <_dtoa_r+0xad0>
 8007a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a18:	3331      	adds	r3, #49	; 0x31
 8007a1a:	9307      	str	r3, [sp, #28]
 8007a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a1e:	9a07      	ldr	r2, [sp, #28]
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e76a      	b.n	80078fa <_dtoa_r+0x9ae>
 8007a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	db04      	blt.n	8007a34 <_dtoa_r+0xae8>
 8007a2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a30:	4313      	orrs	r3, r2
 8007a32:	d11f      	bne.n	8007a74 <_dtoa_r+0xb28>
 8007a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	ddf0      	ble.n	8007a1c <_dtoa_r+0xad0>
 8007a3a:	9905      	ldr	r1, [sp, #20]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	0038      	movs	r0, r7
 8007a40:	f000 fad6 	bl	8007ff0 <__lshift>
 8007a44:	0031      	movs	r1, r6
 8007a46:	9005      	str	r0, [sp, #20]
 8007a48:	f000 fb40 	bl	80080cc <__mcmp>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	dc03      	bgt.n	8007a58 <_dtoa_r+0xb0c>
 8007a50:	d1e4      	bne.n	8007a1c <_dtoa_r+0xad0>
 8007a52:	9b07      	ldr	r3, [sp, #28]
 8007a54:	07db      	lsls	r3, r3, #31
 8007a56:	d5e1      	bpl.n	8007a1c <_dtoa_r+0xad0>
 8007a58:	9b07      	ldr	r3, [sp, #28]
 8007a5a:	2b39      	cmp	r3, #57	; 0x39
 8007a5c:	d1db      	bne.n	8007a16 <_dtoa_r+0xaca>
 8007a5e:	2339      	movs	r3, #57	; 0x39
 8007a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a62:	7013      	strb	r3, [r2, #0]
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	9308      	str	r3, [sp, #32]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	2a39      	cmp	r2, #57	; 0x39
 8007a6e:	d068      	beq.n	8007b42 <_dtoa_r+0xbf6>
 8007a70:	3201      	adds	r2, #1
 8007a72:	e7d5      	b.n	8007a20 <_dtoa_r+0xad4>
 8007a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd07      	ble.n	8007a8a <_dtoa_r+0xb3e>
 8007a7a:	9b07      	ldr	r3, [sp, #28]
 8007a7c:	2b39      	cmp	r3, #57	; 0x39
 8007a7e:	d0ee      	beq.n	8007a5e <_dtoa_r+0xb12>
 8007a80:	9b07      	ldr	r3, [sp, #28]
 8007a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a84:	3301      	adds	r3, #1
 8007a86:	7013      	strb	r3, [r2, #0]
 8007a88:	e737      	b.n	80078fa <_dtoa_r+0x9ae>
 8007a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8c:	9a07      	ldr	r2, [sp, #28]
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d03e      	beq.n	8007b16 <_dtoa_r+0xbca>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	9905      	ldr	r1, [sp, #20]
 8007a9e:	0038      	movs	r0, r7
 8007aa0:	f000 f8f8 	bl	8007c94 <__multadd>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9005      	str	r0, [sp, #20]
 8007aa8:	220a      	movs	r2, #10
 8007aaa:	0021      	movs	r1, r4
 8007aac:	0038      	movs	r0, r7
 8007aae:	42ac      	cmp	r4, r5
 8007ab0:	d106      	bne.n	8007ac0 <_dtoa_r+0xb74>
 8007ab2:	f000 f8ef 	bl	8007c94 <__multadd>
 8007ab6:	0004      	movs	r4, r0
 8007ab8:	0005      	movs	r5, r0
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	930a      	str	r3, [sp, #40]	; 0x28
 8007abe:	e778      	b.n	80079b2 <_dtoa_r+0xa66>
 8007ac0:	f000 f8e8 	bl	8007c94 <__multadd>
 8007ac4:	0029      	movs	r1, r5
 8007ac6:	0004      	movs	r4, r0
 8007ac8:	2300      	movs	r3, #0
 8007aca:	220a      	movs	r2, #10
 8007acc:	0038      	movs	r0, r7
 8007ace:	f000 f8e1 	bl	8007c94 <__multadd>
 8007ad2:	0005      	movs	r5, r0
 8007ad4:	e7f1      	b.n	8007aba <_dtoa_r+0xb6e>
 8007ad6:	9b07      	ldr	r3, [sp, #28]
 8007ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8007ada:	2400      	movs	r4, #0
 8007adc:	0031      	movs	r1, r6
 8007ade:	9805      	ldr	r0, [sp, #20]
 8007ae0:	f7ff f9a8 	bl	8006e34 <quorem>
 8007ae4:	9b06      	ldr	r3, [sp, #24]
 8007ae6:	3030      	adds	r0, #48	; 0x30
 8007ae8:	5518      	strb	r0, [r3, r4]
 8007aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aec:	3401      	adds	r4, #1
 8007aee:	9007      	str	r0, [sp, #28]
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	dd07      	ble.n	8007b04 <_dtoa_r+0xbb8>
 8007af4:	2300      	movs	r3, #0
 8007af6:	220a      	movs	r2, #10
 8007af8:	0038      	movs	r0, r7
 8007afa:	9905      	ldr	r1, [sp, #20]
 8007afc:	f000 f8ca 	bl	8007c94 <__multadd>
 8007b00:	9005      	str	r0, [sp, #20]
 8007b02:	e7eb      	b.n	8007adc <_dtoa_r+0xb90>
 8007b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b06:	2001      	movs	r0, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	dd00      	ble.n	8007b0e <_dtoa_r+0xbc2>
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	2400      	movs	r4, #0
 8007b10:	9b06      	ldr	r3, [sp, #24]
 8007b12:	181b      	adds	r3, r3, r0
 8007b14:	9308      	str	r3, [sp, #32]
 8007b16:	9905      	ldr	r1, [sp, #20]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	0038      	movs	r0, r7
 8007b1c:	f000 fa68 	bl	8007ff0 <__lshift>
 8007b20:	0031      	movs	r1, r6
 8007b22:	9005      	str	r0, [sp, #20]
 8007b24:	f000 fad2 	bl	80080cc <__mcmp>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	dc9b      	bgt.n	8007a64 <_dtoa_r+0xb18>
 8007b2c:	d102      	bne.n	8007b34 <_dtoa_r+0xbe8>
 8007b2e:	9b07      	ldr	r3, [sp, #28]
 8007b30:	07db      	lsls	r3, r3, #31
 8007b32:	d497      	bmi.n	8007a64 <_dtoa_r+0xb18>
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	9308      	str	r3, [sp, #32]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	2a30      	cmp	r2, #48	; 0x30
 8007b3e:	d0fa      	beq.n	8007b36 <_dtoa_r+0xbea>
 8007b40:	e6db      	b.n	80078fa <_dtoa_r+0x9ae>
 8007b42:	9a06      	ldr	r2, [sp, #24]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d18e      	bne.n	8007a66 <_dtoa_r+0xb1a>
 8007b48:	9b02      	ldr	r3, [sp, #8]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	9302      	str	r3, [sp, #8]
 8007b4e:	2331      	movs	r3, #49	; 0x31
 8007b50:	e799      	b.n	8007a86 <_dtoa_r+0xb3a>
 8007b52:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <_dtoa_r+0xc2c>)
 8007b54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b56:	9306      	str	r3, [sp, #24]
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <_dtoa_r+0xc30>)
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	d001      	beq.n	8007b62 <_dtoa_r+0xc16>
 8007b5e:	f7ff fa3f 	bl	8006fe0 <_dtoa_r+0x94>
 8007b62:	f7ff fa3f 	bl	8006fe4 <_dtoa_r+0x98>
 8007b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	dcb6      	bgt.n	8007ada <_dtoa_r+0xb8e>
 8007b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	dd00      	ble.n	8007b74 <_dtoa_r+0xc28>
 8007b72:	e6ac      	b.n	80078ce <_dtoa_r+0x982>
 8007b74:	e7b1      	b.n	8007ada <_dtoa_r+0xb8e>
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	08009850 	.word	0x08009850
 8007b7c:	08009858 	.word	0x08009858

08007b80 <_localeconv_r>:
 8007b80:	4800      	ldr	r0, [pc, #0]	; (8007b84 <_localeconv_r+0x4>)
 8007b82:	4770      	bx	lr
 8007b84:	200001d4 	.word	0x200001d4

08007b88 <malloc>:
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <malloc+0x10>)
 8007b8c:	0001      	movs	r1, r0
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	f000 fc4c 	bl	800842c <_malloc_r>
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	20000080 	.word	0x20000080

08007b9c <memchr>:
 8007b9c:	b2c9      	uxtb	r1, r1
 8007b9e:	1882      	adds	r2, r0, r2
 8007ba0:	4290      	cmp	r0, r2
 8007ba2:	d101      	bne.n	8007ba8 <memchr+0xc>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	4770      	bx	lr
 8007ba8:	7803      	ldrb	r3, [r0, #0]
 8007baa:	428b      	cmp	r3, r1
 8007bac:	d0fb      	beq.n	8007ba6 <memchr+0xa>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	e7f6      	b.n	8007ba0 <memchr+0x4>

08007bb2 <memcpy>:
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d100      	bne.n	8007bbc <memcpy+0xa>
 8007bba:	bd10      	pop	{r4, pc}
 8007bbc:	5ccc      	ldrb	r4, [r1, r3]
 8007bbe:	54c4      	strb	r4, [r0, r3]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	e7f8      	b.n	8007bb6 <memcpy+0x4>

08007bc4 <_Balloc>:
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bc8:	0006      	movs	r6, r0
 8007bca:	000c      	movs	r4, r1
 8007bcc:	2d00      	cmp	r5, #0
 8007bce:	d10e      	bne.n	8007bee <_Balloc+0x2a>
 8007bd0:	2010      	movs	r0, #16
 8007bd2:	f7ff ffd9 	bl	8007b88 <malloc>
 8007bd6:	1e02      	subs	r2, r0, #0
 8007bd8:	6270      	str	r0, [r6, #36]	; 0x24
 8007bda:	d104      	bne.n	8007be6 <_Balloc+0x22>
 8007bdc:	2166      	movs	r1, #102	; 0x66
 8007bde:	4b19      	ldr	r3, [pc, #100]	; (8007c44 <_Balloc+0x80>)
 8007be0:	4819      	ldr	r0, [pc, #100]	; (8007c48 <_Balloc+0x84>)
 8007be2:	f000 fe0d 	bl	8008800 <__assert_func>
 8007be6:	6045      	str	r5, [r0, #4]
 8007be8:	6085      	str	r5, [r0, #8]
 8007bea:	6005      	str	r5, [r0, #0]
 8007bec:	60c5      	str	r5, [r0, #12]
 8007bee:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007bf0:	68eb      	ldr	r3, [r5, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d013      	beq.n	8007c1e <_Balloc+0x5a>
 8007bf6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007bf8:	00a2      	lsls	r2, r4, #2
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	189b      	adds	r3, r3, r2
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d118      	bne.n	8007c36 <_Balloc+0x72>
 8007c04:	2101      	movs	r1, #1
 8007c06:	000d      	movs	r5, r1
 8007c08:	40a5      	lsls	r5, r4
 8007c0a:	1d6a      	adds	r2, r5, #5
 8007c0c:	0030      	movs	r0, r6
 8007c0e:	0092      	lsls	r2, r2, #2
 8007c10:	f000 fb74 	bl	80082fc <_calloc_r>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d00c      	beq.n	8007c32 <_Balloc+0x6e>
 8007c18:	6044      	str	r4, [r0, #4]
 8007c1a:	6085      	str	r5, [r0, #8]
 8007c1c:	e00d      	b.n	8007c3a <_Balloc+0x76>
 8007c1e:	2221      	movs	r2, #33	; 0x21
 8007c20:	2104      	movs	r1, #4
 8007c22:	0030      	movs	r0, r6
 8007c24:	f000 fb6a 	bl	80082fc <_calloc_r>
 8007c28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c2a:	60e8      	str	r0, [r5, #12]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e1      	bne.n	8007bf6 <_Balloc+0x32>
 8007c32:	2000      	movs	r0, #0
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	6802      	ldr	r2, [r0, #0]
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	6103      	str	r3, [r0, #16]
 8007c3e:	60c3      	str	r3, [r0, #12]
 8007c40:	e7f8      	b.n	8007c34 <_Balloc+0x70>
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	0800985d 	.word	0x0800985d
 8007c48:	080098e0 	.word	0x080098e0

08007c4c <_Bfree>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c50:	0005      	movs	r5, r0
 8007c52:	000c      	movs	r4, r1
 8007c54:	2e00      	cmp	r6, #0
 8007c56:	d10e      	bne.n	8007c76 <_Bfree+0x2a>
 8007c58:	2010      	movs	r0, #16
 8007c5a:	f7ff ff95 	bl	8007b88 <malloc>
 8007c5e:	1e02      	subs	r2, r0, #0
 8007c60:	6268      	str	r0, [r5, #36]	; 0x24
 8007c62:	d104      	bne.n	8007c6e <_Bfree+0x22>
 8007c64:	218a      	movs	r1, #138	; 0x8a
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <_Bfree+0x40>)
 8007c68:	4809      	ldr	r0, [pc, #36]	; (8007c90 <_Bfree+0x44>)
 8007c6a:	f000 fdc9 	bl	8008800 <__assert_func>
 8007c6e:	6046      	str	r6, [r0, #4]
 8007c70:	6086      	str	r6, [r0, #8]
 8007c72:	6006      	str	r6, [r0, #0]
 8007c74:	60c6      	str	r6, [r0, #12]
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	d007      	beq.n	8007c8a <_Bfree+0x3e>
 8007c7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c7c:	6862      	ldr	r2, [r4, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	0092      	lsls	r2, r2, #2
 8007c82:	189b      	adds	r3, r3, r2
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	6022      	str	r2, [r4, #0]
 8007c88:	601c      	str	r4, [r3, #0]
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	0800985d 	.word	0x0800985d
 8007c90:	080098e0 	.word	0x080098e0

08007c94 <__multadd>:
 8007c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c96:	000e      	movs	r6, r1
 8007c98:	9001      	str	r0, [sp, #4]
 8007c9a:	000c      	movs	r4, r1
 8007c9c:	001d      	movs	r5, r3
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	690f      	ldr	r7, [r1, #16]
 8007ca2:	3614      	adds	r6, #20
 8007ca4:	6833      	ldr	r3, [r6, #0]
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	b299      	uxth	r1, r3
 8007caa:	4351      	muls	r1, r2
 8007cac:	0c1b      	lsrs	r3, r3, #16
 8007cae:	4353      	muls	r3, r2
 8007cb0:	1949      	adds	r1, r1, r5
 8007cb2:	0c0d      	lsrs	r5, r1, #16
 8007cb4:	195b      	adds	r3, r3, r5
 8007cb6:	0c1d      	lsrs	r5, r3, #16
 8007cb8:	b289      	uxth	r1, r1
 8007cba:	041b      	lsls	r3, r3, #16
 8007cbc:	185b      	adds	r3, r3, r1
 8007cbe:	c608      	stmia	r6!, {r3}
 8007cc0:	4287      	cmp	r7, r0
 8007cc2:	dcef      	bgt.n	8007ca4 <__multadd+0x10>
 8007cc4:	2d00      	cmp	r5, #0
 8007cc6:	d022      	beq.n	8007d0e <__multadd+0x7a>
 8007cc8:	68a3      	ldr	r3, [r4, #8]
 8007cca:	42bb      	cmp	r3, r7
 8007ccc:	dc19      	bgt.n	8007d02 <__multadd+0x6e>
 8007cce:	6863      	ldr	r3, [r4, #4]
 8007cd0:	9801      	ldr	r0, [sp, #4]
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	f7ff ff76 	bl	8007bc4 <_Balloc>
 8007cd8:	1e06      	subs	r6, r0, #0
 8007cda:	d105      	bne.n	8007ce8 <__multadd+0x54>
 8007cdc:	0002      	movs	r2, r0
 8007cde:	21b5      	movs	r1, #181	; 0xb5
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <__multadd+0x80>)
 8007ce2:	480d      	ldr	r0, [pc, #52]	; (8007d18 <__multadd+0x84>)
 8007ce4:	f000 fd8c 	bl	8008800 <__assert_func>
 8007ce8:	0021      	movs	r1, r4
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	310c      	adds	r1, #12
 8007cee:	1c9a      	adds	r2, r3, #2
 8007cf0:	0092      	lsls	r2, r2, #2
 8007cf2:	300c      	adds	r0, #12
 8007cf4:	f7ff ff5d 	bl	8007bb2 <memcpy>
 8007cf8:	0021      	movs	r1, r4
 8007cfa:	9801      	ldr	r0, [sp, #4]
 8007cfc:	f7ff ffa6 	bl	8007c4c <_Bfree>
 8007d00:	0034      	movs	r4, r6
 8007d02:	1d3b      	adds	r3, r7, #4
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	18e3      	adds	r3, r4, r3
 8007d08:	605d      	str	r5, [r3, #4]
 8007d0a:	1c7b      	adds	r3, r7, #1
 8007d0c:	6123      	str	r3, [r4, #16]
 8007d0e:	0020      	movs	r0, r4
 8007d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	080098cf 	.word	0x080098cf
 8007d18:	080098e0 	.word	0x080098e0

08007d1c <__hi0bits>:
 8007d1c:	0003      	movs	r3, r0
 8007d1e:	0c02      	lsrs	r2, r0, #16
 8007d20:	2000      	movs	r0, #0
 8007d22:	4282      	cmp	r2, r0
 8007d24:	d101      	bne.n	8007d2a <__hi0bits+0xe>
 8007d26:	041b      	lsls	r3, r3, #16
 8007d28:	3010      	adds	r0, #16
 8007d2a:	0e1a      	lsrs	r2, r3, #24
 8007d2c:	d101      	bne.n	8007d32 <__hi0bits+0x16>
 8007d2e:	3008      	adds	r0, #8
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	0f1a      	lsrs	r2, r3, #28
 8007d34:	d101      	bne.n	8007d3a <__hi0bits+0x1e>
 8007d36:	3004      	adds	r0, #4
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	0f9a      	lsrs	r2, r3, #30
 8007d3c:	d101      	bne.n	8007d42 <__hi0bits+0x26>
 8007d3e:	3002      	adds	r0, #2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	db03      	blt.n	8007d4e <__hi0bits+0x32>
 8007d46:	3001      	adds	r0, #1
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	d400      	bmi.n	8007d4e <__hi0bits+0x32>
 8007d4c:	2020      	movs	r0, #32
 8007d4e:	4770      	bx	lr

08007d50 <__lo0bits>:
 8007d50:	6803      	ldr	r3, [r0, #0]
 8007d52:	0002      	movs	r2, r0
 8007d54:	2107      	movs	r1, #7
 8007d56:	0018      	movs	r0, r3
 8007d58:	4008      	ands	r0, r1
 8007d5a:	420b      	tst	r3, r1
 8007d5c:	d00d      	beq.n	8007d7a <__lo0bits+0x2a>
 8007d5e:	3906      	subs	r1, #6
 8007d60:	2000      	movs	r0, #0
 8007d62:	420b      	tst	r3, r1
 8007d64:	d105      	bne.n	8007d72 <__lo0bits+0x22>
 8007d66:	3002      	adds	r0, #2
 8007d68:	4203      	tst	r3, r0
 8007d6a:	d003      	beq.n	8007d74 <__lo0bits+0x24>
 8007d6c:	40cb      	lsrs	r3, r1
 8007d6e:	0008      	movs	r0, r1
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	4770      	bx	lr
 8007d74:	089b      	lsrs	r3, r3, #2
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	e7fb      	b.n	8007d72 <__lo0bits+0x22>
 8007d7a:	b299      	uxth	r1, r3
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	d101      	bne.n	8007d84 <__lo0bits+0x34>
 8007d80:	2010      	movs	r0, #16
 8007d82:	0c1b      	lsrs	r3, r3, #16
 8007d84:	b2d9      	uxtb	r1, r3
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d101      	bne.n	8007d8e <__lo0bits+0x3e>
 8007d8a:	3008      	adds	r0, #8
 8007d8c:	0a1b      	lsrs	r3, r3, #8
 8007d8e:	0719      	lsls	r1, r3, #28
 8007d90:	d101      	bne.n	8007d96 <__lo0bits+0x46>
 8007d92:	3004      	adds	r0, #4
 8007d94:	091b      	lsrs	r3, r3, #4
 8007d96:	0799      	lsls	r1, r3, #30
 8007d98:	d101      	bne.n	8007d9e <__lo0bits+0x4e>
 8007d9a:	3002      	adds	r0, #2
 8007d9c:	089b      	lsrs	r3, r3, #2
 8007d9e:	07d9      	lsls	r1, r3, #31
 8007da0:	d4e9      	bmi.n	8007d76 <__lo0bits+0x26>
 8007da2:	3001      	adds	r0, #1
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	d1e6      	bne.n	8007d76 <__lo0bits+0x26>
 8007da8:	2020      	movs	r0, #32
 8007daa:	e7e2      	b.n	8007d72 <__lo0bits+0x22>

08007dac <__i2b>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	000c      	movs	r4, r1
 8007db0:	2101      	movs	r1, #1
 8007db2:	f7ff ff07 	bl	8007bc4 <_Balloc>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d106      	bne.n	8007dc8 <__i2b+0x1c>
 8007dba:	21a0      	movs	r1, #160	; 0xa0
 8007dbc:	0002      	movs	r2, r0
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <__i2b+0x24>)
 8007dc0:	4804      	ldr	r0, [pc, #16]	; (8007dd4 <__i2b+0x28>)
 8007dc2:	0049      	lsls	r1, r1, #1
 8007dc4:	f000 fd1c 	bl	8008800 <__assert_func>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	6144      	str	r4, [r0, #20]
 8007dcc:	6103      	str	r3, [r0, #16]
 8007dce:	bd10      	pop	{r4, pc}
 8007dd0:	080098cf 	.word	0x080098cf
 8007dd4:	080098e0 	.word	0x080098e0

08007dd8 <__multiply>:
 8007dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dda:	690b      	ldr	r3, [r1, #16]
 8007ddc:	0014      	movs	r4, r2
 8007dde:	6912      	ldr	r2, [r2, #16]
 8007de0:	000d      	movs	r5, r1
 8007de2:	b089      	sub	sp, #36	; 0x24
 8007de4:	4293      	cmp	r3, r2
 8007de6:	da01      	bge.n	8007dec <__multiply+0x14>
 8007de8:	0025      	movs	r5, r4
 8007dea:	000c      	movs	r4, r1
 8007dec:	692f      	ldr	r7, [r5, #16]
 8007dee:	6926      	ldr	r6, [r4, #16]
 8007df0:	6869      	ldr	r1, [r5, #4]
 8007df2:	19bb      	adds	r3, r7, r6
 8007df4:	9302      	str	r3, [sp, #8]
 8007df6:	68ab      	ldr	r3, [r5, #8]
 8007df8:	19ba      	adds	r2, r7, r6
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	da00      	bge.n	8007e00 <__multiply+0x28>
 8007dfe:	3101      	adds	r1, #1
 8007e00:	f7ff fee0 	bl	8007bc4 <_Balloc>
 8007e04:	9001      	str	r0, [sp, #4]
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d106      	bne.n	8007e18 <__multiply+0x40>
 8007e0a:	215e      	movs	r1, #94	; 0x5e
 8007e0c:	0002      	movs	r2, r0
 8007e0e:	4b48      	ldr	r3, [pc, #288]	; (8007f30 <__multiply+0x158>)
 8007e10:	4848      	ldr	r0, [pc, #288]	; (8007f34 <__multiply+0x15c>)
 8007e12:	31ff      	adds	r1, #255	; 0xff
 8007e14:	f000 fcf4 	bl	8008800 <__assert_func>
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	3314      	adds	r3, #20
 8007e1e:	469c      	mov	ip, r3
 8007e20:	19bb      	adds	r3, r7, r6
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4463      	add	r3, ip
 8007e26:	9303      	str	r3, [sp, #12]
 8007e28:	4663      	mov	r3, ip
 8007e2a:	9903      	ldr	r1, [sp, #12]
 8007e2c:	428b      	cmp	r3, r1
 8007e2e:	d32c      	bcc.n	8007e8a <__multiply+0xb2>
 8007e30:	002b      	movs	r3, r5
 8007e32:	0022      	movs	r2, r4
 8007e34:	3314      	adds	r3, #20
 8007e36:	00bf      	lsls	r7, r7, #2
 8007e38:	3214      	adds	r2, #20
 8007e3a:	9306      	str	r3, [sp, #24]
 8007e3c:	00b6      	lsls	r6, r6, #2
 8007e3e:	19db      	adds	r3, r3, r7
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	1993      	adds	r3, r2, r6
 8007e44:	9307      	str	r3, [sp, #28]
 8007e46:	2304      	movs	r3, #4
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	002b      	movs	r3, r5
 8007e4c:	9904      	ldr	r1, [sp, #16]
 8007e4e:	3315      	adds	r3, #21
 8007e50:	9200      	str	r2, [sp, #0]
 8007e52:	4299      	cmp	r1, r3
 8007e54:	d305      	bcc.n	8007e62 <__multiply+0x8a>
 8007e56:	1b4b      	subs	r3, r1, r5
 8007e58:	3b15      	subs	r3, #21
 8007e5a:	089b      	lsrs	r3, r3, #2
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	9305      	str	r3, [sp, #20]
 8007e62:	9b07      	ldr	r3, [sp, #28]
 8007e64:	9a00      	ldr	r2, [sp, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d311      	bcc.n	8007e8e <__multiply+0xb6>
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd06      	ble.n	8007e7e <__multiply+0xa6>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	3b04      	subs	r3, #4
 8007e74:	9303      	str	r3, [sp, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d053      	beq.n	8007f26 <__multiply+0x14e>
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	9a02      	ldr	r2, [sp, #8]
 8007e82:	0018      	movs	r0, r3
 8007e84:	611a      	str	r2, [r3, #16]
 8007e86:	b009      	add	sp, #36	; 0x24
 8007e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8a:	c304      	stmia	r3!, {r2}
 8007e8c:	e7cd      	b.n	8007e2a <__multiply+0x52>
 8007e8e:	9b00      	ldr	r3, [sp, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	b298      	uxth	r0, r3
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d01b      	beq.n	8007ed0 <__multiply+0xf8>
 8007e98:	4667      	mov	r7, ip
 8007e9a:	2400      	movs	r4, #0
 8007e9c:	9e06      	ldr	r6, [sp, #24]
 8007e9e:	ce02      	ldmia	r6!, {r1}
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	b28b      	uxth	r3, r1
 8007ea4:	4343      	muls	r3, r0
 8007ea6:	b292      	uxth	r2, r2
 8007ea8:	189b      	adds	r3, r3, r2
 8007eaa:	191b      	adds	r3, r3, r4
 8007eac:	0c0c      	lsrs	r4, r1, #16
 8007eae:	4344      	muls	r4, r0
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	0c11      	lsrs	r1, r2, #16
 8007eb4:	1861      	adds	r1, r4, r1
 8007eb6:	0c1c      	lsrs	r4, r3, #16
 8007eb8:	1909      	adds	r1, r1, r4
 8007eba:	0c0c      	lsrs	r4, r1, #16
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	0409      	lsls	r1, r1, #16
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	c708      	stmia	r7!, {r3}
 8007ec4:	9b04      	ldr	r3, [sp, #16]
 8007ec6:	42b3      	cmp	r3, r6
 8007ec8:	d8e9      	bhi.n	8007e9e <__multiply+0xc6>
 8007eca:	4663      	mov	r3, ip
 8007ecc:	9a05      	ldr	r2, [sp, #20]
 8007ece:	509c      	str	r4, [r3, r2]
 8007ed0:	9b00      	ldr	r3, [sp, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	0c1e      	lsrs	r6, r3, #16
 8007ed6:	d020      	beq.n	8007f1a <__multiply+0x142>
 8007ed8:	4663      	mov	r3, ip
 8007eda:	002c      	movs	r4, r5
 8007edc:	4660      	mov	r0, ip
 8007ede:	2700      	movs	r7, #0
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3414      	adds	r4, #20
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	b291      	uxth	r1, r2
 8007eea:	4371      	muls	r1, r6
 8007eec:	6802      	ldr	r2, [r0, #0]
 8007eee:	0c12      	lsrs	r2, r2, #16
 8007ef0:	1889      	adds	r1, r1, r2
 8007ef2:	19cf      	adds	r7, r1, r7
 8007ef4:	0439      	lsls	r1, r7, #16
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	6003      	str	r3, [r0, #0]
 8007efa:	cc02      	ldmia	r4!, {r1}
 8007efc:	6843      	ldr	r3, [r0, #4]
 8007efe:	0c09      	lsrs	r1, r1, #16
 8007f00:	4371      	muls	r1, r6
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	0c3f      	lsrs	r7, r7, #16
 8007f06:	18cb      	adds	r3, r1, r3
 8007f08:	9a04      	ldr	r2, [sp, #16]
 8007f0a:	19db      	adds	r3, r3, r7
 8007f0c:	0c1f      	lsrs	r7, r3, #16
 8007f0e:	3004      	adds	r0, #4
 8007f10:	42a2      	cmp	r2, r4
 8007f12:	d8e7      	bhi.n	8007ee4 <__multiply+0x10c>
 8007f14:	4662      	mov	r2, ip
 8007f16:	9905      	ldr	r1, [sp, #20]
 8007f18:	5053      	str	r3, [r2, r1]
 8007f1a:	9b00      	ldr	r3, [sp, #0]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2304      	movs	r3, #4
 8007f22:	449c      	add	ip, r3
 8007f24:	e79d      	b.n	8007e62 <__multiply+0x8a>
 8007f26:	9b02      	ldr	r3, [sp, #8]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	9302      	str	r3, [sp, #8]
 8007f2c:	e79d      	b.n	8007e6a <__multiply+0x92>
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	080098cf 	.word	0x080098cf
 8007f34:	080098e0 	.word	0x080098e0

08007f38 <__pow5mult>:
 8007f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	0015      	movs	r5, r2
 8007f3e:	0007      	movs	r7, r0
 8007f40:	000e      	movs	r6, r1
 8007f42:	401a      	ands	r2, r3
 8007f44:	421d      	tst	r5, r3
 8007f46:	d008      	beq.n	8007f5a <__pow5mult+0x22>
 8007f48:	4925      	ldr	r1, [pc, #148]	; (8007fe0 <__pow5mult+0xa8>)
 8007f4a:	3a01      	subs	r2, #1
 8007f4c:	0092      	lsls	r2, r2, #2
 8007f4e:	5852      	ldr	r2, [r2, r1]
 8007f50:	2300      	movs	r3, #0
 8007f52:	0031      	movs	r1, r6
 8007f54:	f7ff fe9e 	bl	8007c94 <__multadd>
 8007f58:	0006      	movs	r6, r0
 8007f5a:	10ad      	asrs	r5, r5, #2
 8007f5c:	d03d      	beq.n	8007fda <__pow5mult+0xa2>
 8007f5e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007f60:	2c00      	cmp	r4, #0
 8007f62:	d10f      	bne.n	8007f84 <__pow5mult+0x4c>
 8007f64:	2010      	movs	r0, #16
 8007f66:	f7ff fe0f 	bl	8007b88 <malloc>
 8007f6a:	1e02      	subs	r2, r0, #0
 8007f6c:	6278      	str	r0, [r7, #36]	; 0x24
 8007f6e:	d105      	bne.n	8007f7c <__pow5mult+0x44>
 8007f70:	21d7      	movs	r1, #215	; 0xd7
 8007f72:	4b1c      	ldr	r3, [pc, #112]	; (8007fe4 <__pow5mult+0xac>)
 8007f74:	481c      	ldr	r0, [pc, #112]	; (8007fe8 <__pow5mult+0xb0>)
 8007f76:	0049      	lsls	r1, r1, #1
 8007f78:	f000 fc42 	bl	8008800 <__assert_func>
 8007f7c:	6044      	str	r4, [r0, #4]
 8007f7e:	6084      	str	r4, [r0, #8]
 8007f80:	6004      	str	r4, [r0, #0]
 8007f82:	60c4      	str	r4, [r0, #12]
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	689c      	ldr	r4, [r3, #8]
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	2c00      	cmp	r4, #0
 8007f8c:	d108      	bne.n	8007fa0 <__pow5mult+0x68>
 8007f8e:	0038      	movs	r0, r7
 8007f90:	4916      	ldr	r1, [pc, #88]	; (8007fec <__pow5mult+0xb4>)
 8007f92:	f7ff ff0b 	bl	8007dac <__i2b>
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	0004      	movs	r4, r0
 8007f9a:	6098      	str	r0, [r3, #8]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	6003      	str	r3, [r0, #0]
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	421d      	tst	r5, r3
 8007fa4:	d00a      	beq.n	8007fbc <__pow5mult+0x84>
 8007fa6:	0031      	movs	r1, r6
 8007fa8:	0022      	movs	r2, r4
 8007faa:	0038      	movs	r0, r7
 8007fac:	f7ff ff14 	bl	8007dd8 <__multiply>
 8007fb0:	0031      	movs	r1, r6
 8007fb2:	9001      	str	r0, [sp, #4]
 8007fb4:	0038      	movs	r0, r7
 8007fb6:	f7ff fe49 	bl	8007c4c <_Bfree>
 8007fba:	9e01      	ldr	r6, [sp, #4]
 8007fbc:	106d      	asrs	r5, r5, #1
 8007fbe:	d00c      	beq.n	8007fda <__pow5mult+0xa2>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d107      	bne.n	8007fd6 <__pow5mult+0x9e>
 8007fc6:	0022      	movs	r2, r4
 8007fc8:	0021      	movs	r1, r4
 8007fca:	0038      	movs	r0, r7
 8007fcc:	f7ff ff04 	bl	8007dd8 <__multiply>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	6020      	str	r0, [r4, #0]
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	0004      	movs	r4, r0
 8007fd8:	e7e2      	b.n	8007fa0 <__pow5mult+0x68>
 8007fda:	0030      	movs	r0, r6
 8007fdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	08009a30 	.word	0x08009a30
 8007fe4:	0800985d 	.word	0x0800985d
 8007fe8:	080098e0 	.word	0x080098e0
 8007fec:	00000271 	.word	0x00000271

08007ff0 <__lshift>:
 8007ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff2:	000c      	movs	r4, r1
 8007ff4:	0017      	movs	r7, r2
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	1155      	asrs	r5, r2, #5
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	18eb      	adds	r3, r5, r3
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	3301      	adds	r3, #1
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	6849      	ldr	r1, [r1, #4]
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	9004      	str	r0, [sp, #16]
 800800a:	9a01      	ldr	r2, [sp, #4]
 800800c:	4293      	cmp	r3, r2
 800800e:	db10      	blt.n	8008032 <__lshift+0x42>
 8008010:	9804      	ldr	r0, [sp, #16]
 8008012:	f7ff fdd7 	bl	8007bc4 <_Balloc>
 8008016:	2300      	movs	r3, #0
 8008018:	0002      	movs	r2, r0
 800801a:	0006      	movs	r6, r0
 800801c:	0019      	movs	r1, r3
 800801e:	3214      	adds	r2, #20
 8008020:	4298      	cmp	r0, r3
 8008022:	d10c      	bne.n	800803e <__lshift+0x4e>
 8008024:	21da      	movs	r1, #218	; 0xda
 8008026:	0002      	movs	r2, r0
 8008028:	4b26      	ldr	r3, [pc, #152]	; (80080c4 <__lshift+0xd4>)
 800802a:	4827      	ldr	r0, [pc, #156]	; (80080c8 <__lshift+0xd8>)
 800802c:	31ff      	adds	r1, #255	; 0xff
 800802e:	f000 fbe7 	bl	8008800 <__assert_func>
 8008032:	3101      	adds	r1, #1
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	e7e8      	b.n	800800a <__lshift+0x1a>
 8008038:	0098      	lsls	r0, r3, #2
 800803a:	5011      	str	r1, [r2, r0]
 800803c:	3301      	adds	r3, #1
 800803e:	42ab      	cmp	r3, r5
 8008040:	dbfa      	blt.n	8008038 <__lshift+0x48>
 8008042:	43eb      	mvns	r3, r5
 8008044:	17db      	asrs	r3, r3, #31
 8008046:	401d      	ands	r5, r3
 8008048:	211f      	movs	r1, #31
 800804a:	0023      	movs	r3, r4
 800804c:	0038      	movs	r0, r7
 800804e:	00ad      	lsls	r5, r5, #2
 8008050:	1955      	adds	r5, r2, r5
 8008052:	6922      	ldr	r2, [r4, #16]
 8008054:	3314      	adds	r3, #20
 8008056:	0092      	lsls	r2, r2, #2
 8008058:	4008      	ands	r0, r1
 800805a:	4684      	mov	ip, r0
 800805c:	189a      	adds	r2, r3, r2
 800805e:	420f      	tst	r7, r1
 8008060:	d02a      	beq.n	80080b8 <__lshift+0xc8>
 8008062:	3101      	adds	r1, #1
 8008064:	1a09      	subs	r1, r1, r0
 8008066:	9105      	str	r1, [sp, #20]
 8008068:	2100      	movs	r1, #0
 800806a:	9503      	str	r5, [sp, #12]
 800806c:	4667      	mov	r7, ip
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	40b8      	lsls	r0, r7
 8008072:	4301      	orrs	r1, r0
 8008074:	9803      	ldr	r0, [sp, #12]
 8008076:	c002      	stmia	r0!, {r1}
 8008078:	cb02      	ldmia	r3!, {r1}
 800807a:	9003      	str	r0, [sp, #12]
 800807c:	9805      	ldr	r0, [sp, #20]
 800807e:	40c1      	lsrs	r1, r0
 8008080:	429a      	cmp	r2, r3
 8008082:	d8f3      	bhi.n	800806c <__lshift+0x7c>
 8008084:	0020      	movs	r0, r4
 8008086:	3015      	adds	r0, #21
 8008088:	2304      	movs	r3, #4
 800808a:	4282      	cmp	r2, r0
 800808c:	d304      	bcc.n	8008098 <__lshift+0xa8>
 800808e:	1b13      	subs	r3, r2, r4
 8008090:	3b15      	subs	r3, #21
 8008092:	089b      	lsrs	r3, r3, #2
 8008094:	3301      	adds	r3, #1
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	50e9      	str	r1, [r5, r3]
 800809a:	2900      	cmp	r1, #0
 800809c:	d002      	beq.n	80080a4 <__lshift+0xb4>
 800809e:	9b02      	ldr	r3, [sp, #8]
 80080a0:	3302      	adds	r3, #2
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	9b01      	ldr	r3, [sp, #4]
 80080a6:	9804      	ldr	r0, [sp, #16]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	0021      	movs	r1, r4
 80080ac:	6133      	str	r3, [r6, #16]
 80080ae:	f7ff fdcd 	bl	8007c4c <_Bfree>
 80080b2:	0030      	movs	r0, r6
 80080b4:	b007      	add	sp, #28
 80080b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b8:	cb02      	ldmia	r3!, {r1}
 80080ba:	c502      	stmia	r5!, {r1}
 80080bc:	429a      	cmp	r2, r3
 80080be:	d8fb      	bhi.n	80080b8 <__lshift+0xc8>
 80080c0:	e7f0      	b.n	80080a4 <__lshift+0xb4>
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	080098cf 	.word	0x080098cf
 80080c8:	080098e0 	.word	0x080098e0

080080cc <__mcmp>:
 80080cc:	6902      	ldr	r2, [r0, #16]
 80080ce:	690b      	ldr	r3, [r1, #16]
 80080d0:	b530      	push	{r4, r5, lr}
 80080d2:	0004      	movs	r4, r0
 80080d4:	1ad0      	subs	r0, r2, r3
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d10d      	bne.n	80080f6 <__mcmp+0x2a>
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	3414      	adds	r4, #20
 80080de:	3114      	adds	r1, #20
 80080e0:	18e2      	adds	r2, r4, r3
 80080e2:	18c9      	adds	r1, r1, r3
 80080e4:	3a04      	subs	r2, #4
 80080e6:	3904      	subs	r1, #4
 80080e8:	6815      	ldr	r5, [r2, #0]
 80080ea:	680b      	ldr	r3, [r1, #0]
 80080ec:	429d      	cmp	r5, r3
 80080ee:	d003      	beq.n	80080f8 <__mcmp+0x2c>
 80080f0:	2001      	movs	r0, #1
 80080f2:	429d      	cmp	r5, r3
 80080f4:	d303      	bcc.n	80080fe <__mcmp+0x32>
 80080f6:	bd30      	pop	{r4, r5, pc}
 80080f8:	4294      	cmp	r4, r2
 80080fa:	d3f3      	bcc.n	80080e4 <__mcmp+0x18>
 80080fc:	e7fb      	b.n	80080f6 <__mcmp+0x2a>
 80080fe:	4240      	negs	r0, r0
 8008100:	e7f9      	b.n	80080f6 <__mcmp+0x2a>
	...

08008104 <__mdiff>:
 8008104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008106:	000e      	movs	r6, r1
 8008108:	0007      	movs	r7, r0
 800810a:	0011      	movs	r1, r2
 800810c:	0030      	movs	r0, r6
 800810e:	b087      	sub	sp, #28
 8008110:	0014      	movs	r4, r2
 8008112:	f7ff ffdb 	bl	80080cc <__mcmp>
 8008116:	1e05      	subs	r5, r0, #0
 8008118:	d110      	bne.n	800813c <__mdiff+0x38>
 800811a:	0001      	movs	r1, r0
 800811c:	0038      	movs	r0, r7
 800811e:	f7ff fd51 	bl	8007bc4 <_Balloc>
 8008122:	1e02      	subs	r2, r0, #0
 8008124:	d104      	bne.n	8008130 <__mdiff+0x2c>
 8008126:	4b40      	ldr	r3, [pc, #256]	; (8008228 <__mdiff+0x124>)
 8008128:	4940      	ldr	r1, [pc, #256]	; (800822c <__mdiff+0x128>)
 800812a:	4841      	ldr	r0, [pc, #260]	; (8008230 <__mdiff+0x12c>)
 800812c:	f000 fb68 	bl	8008800 <__assert_func>
 8008130:	2301      	movs	r3, #1
 8008132:	6145      	str	r5, [r0, #20]
 8008134:	6103      	str	r3, [r0, #16]
 8008136:	0010      	movs	r0, r2
 8008138:	b007      	add	sp, #28
 800813a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800813c:	2301      	movs	r3, #1
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	2800      	cmp	r0, #0
 8008142:	db04      	blt.n	800814e <__mdiff+0x4a>
 8008144:	0023      	movs	r3, r4
 8008146:	0034      	movs	r4, r6
 8008148:	001e      	movs	r6, r3
 800814a:	2300      	movs	r3, #0
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	0038      	movs	r0, r7
 8008150:	6861      	ldr	r1, [r4, #4]
 8008152:	f7ff fd37 	bl	8007bc4 <_Balloc>
 8008156:	1e02      	subs	r2, r0, #0
 8008158:	d103      	bne.n	8008162 <__mdiff+0x5e>
 800815a:	2190      	movs	r1, #144	; 0x90
 800815c:	4b32      	ldr	r3, [pc, #200]	; (8008228 <__mdiff+0x124>)
 800815e:	0089      	lsls	r1, r1, #2
 8008160:	e7e3      	b.n	800812a <__mdiff+0x26>
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	2700      	movs	r7, #0
 8008166:	60c3      	str	r3, [r0, #12]
 8008168:	6920      	ldr	r0, [r4, #16]
 800816a:	3414      	adds	r4, #20
 800816c:	9401      	str	r4, [sp, #4]
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	0084      	lsls	r4, r0, #2
 8008172:	191b      	adds	r3, r3, r4
 8008174:	0034      	movs	r4, r6
 8008176:	9302      	str	r3, [sp, #8]
 8008178:	6933      	ldr	r3, [r6, #16]
 800817a:	3414      	adds	r4, #20
 800817c:	0099      	lsls	r1, r3, #2
 800817e:	1863      	adds	r3, r4, r1
 8008180:	9303      	str	r3, [sp, #12]
 8008182:	0013      	movs	r3, r2
 8008184:	3314      	adds	r3, #20
 8008186:	469c      	mov	ip, r3
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	9b01      	ldr	r3, [sp, #4]
 800818c:	9304      	str	r3, [sp, #16]
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	cc02      	ldmia	r4!, {r1}
 8008192:	cb20      	ldmia	r3!, {r5}
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	b2ab      	uxth	r3, r5
 8008198:	19df      	adds	r7, r3, r7
 800819a:	b28b      	uxth	r3, r1
 800819c:	1afb      	subs	r3, r7, r3
 800819e:	0c09      	lsrs	r1, r1, #16
 80081a0:	0c2d      	lsrs	r5, r5, #16
 80081a2:	1a6d      	subs	r5, r5, r1
 80081a4:	1419      	asrs	r1, r3, #16
 80081a6:	186d      	adds	r5, r5, r1
 80081a8:	4661      	mov	r1, ip
 80081aa:	142f      	asrs	r7, r5, #16
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	042d      	lsls	r5, r5, #16
 80081b0:	432b      	orrs	r3, r5
 80081b2:	c108      	stmia	r1!, {r3}
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	468c      	mov	ip, r1
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d8e8      	bhi.n	800818e <__mdiff+0x8a>
 80081bc:	0031      	movs	r1, r6
 80081be:	9c03      	ldr	r4, [sp, #12]
 80081c0:	3115      	adds	r1, #21
 80081c2:	2304      	movs	r3, #4
 80081c4:	428c      	cmp	r4, r1
 80081c6:	d304      	bcc.n	80081d2 <__mdiff+0xce>
 80081c8:	1ba3      	subs	r3, r4, r6
 80081ca:	3b15      	subs	r3, #21
 80081cc:	089b      	lsrs	r3, r3, #2
 80081ce:	3301      	adds	r3, #1
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	9901      	ldr	r1, [sp, #4]
 80081d4:	18cc      	adds	r4, r1, r3
 80081d6:	9905      	ldr	r1, [sp, #20]
 80081d8:	0026      	movs	r6, r4
 80081da:	18cb      	adds	r3, r1, r3
 80081dc:	469c      	mov	ip, r3
 80081de:	9902      	ldr	r1, [sp, #8]
 80081e0:	428e      	cmp	r6, r1
 80081e2:	d310      	bcc.n	8008206 <__mdiff+0x102>
 80081e4:	9e02      	ldr	r6, [sp, #8]
 80081e6:	1ee1      	subs	r1, r4, #3
 80081e8:	2500      	movs	r5, #0
 80081ea:	428e      	cmp	r6, r1
 80081ec:	d304      	bcc.n	80081f8 <__mdiff+0xf4>
 80081ee:	0031      	movs	r1, r6
 80081f0:	3103      	adds	r1, #3
 80081f2:	1b0c      	subs	r4, r1, r4
 80081f4:	08a4      	lsrs	r4, r4, #2
 80081f6:	00a5      	lsls	r5, r4, #2
 80081f8:	195b      	adds	r3, r3, r5
 80081fa:	3b04      	subs	r3, #4
 80081fc:	6819      	ldr	r1, [r3, #0]
 80081fe:	2900      	cmp	r1, #0
 8008200:	d00f      	beq.n	8008222 <__mdiff+0x11e>
 8008202:	6110      	str	r0, [r2, #16]
 8008204:	e797      	b.n	8008136 <__mdiff+0x32>
 8008206:	ce02      	ldmia	r6!, {r1}
 8008208:	b28d      	uxth	r5, r1
 800820a:	19ed      	adds	r5, r5, r7
 800820c:	0c0f      	lsrs	r7, r1, #16
 800820e:	1429      	asrs	r1, r5, #16
 8008210:	1879      	adds	r1, r7, r1
 8008212:	140f      	asrs	r7, r1, #16
 8008214:	b2ad      	uxth	r5, r5
 8008216:	0409      	lsls	r1, r1, #16
 8008218:	430d      	orrs	r5, r1
 800821a:	4661      	mov	r1, ip
 800821c:	c120      	stmia	r1!, {r5}
 800821e:	468c      	mov	ip, r1
 8008220:	e7dd      	b.n	80081de <__mdiff+0xda>
 8008222:	3801      	subs	r0, #1
 8008224:	e7e9      	b.n	80081fa <__mdiff+0xf6>
 8008226:	46c0      	nop			; (mov r8, r8)
 8008228:	080098cf 	.word	0x080098cf
 800822c:	00000232 	.word	0x00000232
 8008230:	080098e0 	.word	0x080098e0

08008234 <__d2b>:
 8008234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008236:	2101      	movs	r1, #1
 8008238:	0014      	movs	r4, r2
 800823a:	001e      	movs	r6, r3
 800823c:	9f08      	ldr	r7, [sp, #32]
 800823e:	f7ff fcc1 	bl	8007bc4 <_Balloc>
 8008242:	1e05      	subs	r5, r0, #0
 8008244:	d105      	bne.n	8008252 <__d2b+0x1e>
 8008246:	0002      	movs	r2, r0
 8008248:	4b26      	ldr	r3, [pc, #152]	; (80082e4 <__d2b+0xb0>)
 800824a:	4927      	ldr	r1, [pc, #156]	; (80082e8 <__d2b+0xb4>)
 800824c:	4827      	ldr	r0, [pc, #156]	; (80082ec <__d2b+0xb8>)
 800824e:	f000 fad7 	bl	8008800 <__assert_func>
 8008252:	0333      	lsls	r3, r6, #12
 8008254:	0076      	lsls	r6, r6, #1
 8008256:	0b1b      	lsrs	r3, r3, #12
 8008258:	0d76      	lsrs	r6, r6, #21
 800825a:	d124      	bne.n	80082a6 <__d2b+0x72>
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	2c00      	cmp	r4, #0
 8008260:	d027      	beq.n	80082b2 <__d2b+0x7e>
 8008262:	4668      	mov	r0, sp
 8008264:	9400      	str	r4, [sp, #0]
 8008266:	f7ff fd73 	bl	8007d50 <__lo0bits>
 800826a:	9c00      	ldr	r4, [sp, #0]
 800826c:	2800      	cmp	r0, #0
 800826e:	d01e      	beq.n	80082ae <__d2b+0x7a>
 8008270:	9b01      	ldr	r3, [sp, #4]
 8008272:	2120      	movs	r1, #32
 8008274:	001a      	movs	r2, r3
 8008276:	1a09      	subs	r1, r1, r0
 8008278:	408a      	lsls	r2, r1
 800827a:	40c3      	lsrs	r3, r0
 800827c:	4322      	orrs	r2, r4
 800827e:	616a      	str	r2, [r5, #20]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	9c01      	ldr	r4, [sp, #4]
 8008284:	61ac      	str	r4, [r5, #24]
 8008286:	1e63      	subs	r3, r4, #1
 8008288:	419c      	sbcs	r4, r3
 800828a:	3401      	adds	r4, #1
 800828c:	612c      	str	r4, [r5, #16]
 800828e:	2e00      	cmp	r6, #0
 8008290:	d018      	beq.n	80082c4 <__d2b+0x90>
 8008292:	4b17      	ldr	r3, [pc, #92]	; (80082f0 <__d2b+0xbc>)
 8008294:	18f6      	adds	r6, r6, r3
 8008296:	2335      	movs	r3, #53	; 0x35
 8008298:	1836      	adds	r6, r6, r0
 800829a:	1a18      	subs	r0, r3, r0
 800829c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829e:	603e      	str	r6, [r7, #0]
 80082a0:	6018      	str	r0, [r3, #0]
 80082a2:	0028      	movs	r0, r5
 80082a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082a6:	2280      	movs	r2, #128	; 0x80
 80082a8:	0352      	lsls	r2, r2, #13
 80082aa:	4313      	orrs	r3, r2
 80082ac:	e7d6      	b.n	800825c <__d2b+0x28>
 80082ae:	616c      	str	r4, [r5, #20]
 80082b0:	e7e7      	b.n	8008282 <__d2b+0x4e>
 80082b2:	a801      	add	r0, sp, #4
 80082b4:	f7ff fd4c 	bl	8007d50 <__lo0bits>
 80082b8:	2401      	movs	r4, #1
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	612c      	str	r4, [r5, #16]
 80082be:	616b      	str	r3, [r5, #20]
 80082c0:	3020      	adds	r0, #32
 80082c2:	e7e4      	b.n	800828e <__d2b+0x5a>
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <__d2b+0xc0>)
 80082c6:	18c0      	adds	r0, r0, r3
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <__d2b+0xc4>)
 80082ca:	6038      	str	r0, [r7, #0]
 80082cc:	18e3      	adds	r3, r4, r3
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	18eb      	adds	r3, r5, r3
 80082d2:	6958      	ldr	r0, [r3, #20]
 80082d4:	f7ff fd22 	bl	8007d1c <__hi0bits>
 80082d8:	0164      	lsls	r4, r4, #5
 80082da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082dc:	1a24      	subs	r4, r4, r0
 80082de:	601c      	str	r4, [r3, #0]
 80082e0:	e7df      	b.n	80082a2 <__d2b+0x6e>
 80082e2:	46c0      	nop			; (mov r8, r8)
 80082e4:	080098cf 	.word	0x080098cf
 80082e8:	0000030a 	.word	0x0000030a
 80082ec:	080098e0 	.word	0x080098e0
 80082f0:	fffffbcd 	.word	0xfffffbcd
 80082f4:	fffffbce 	.word	0xfffffbce
 80082f8:	3fffffff 	.word	0x3fffffff

080082fc <_calloc_r>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	0c13      	lsrs	r3, r2, #16
 8008300:	0c0d      	lsrs	r5, r1, #16
 8008302:	d11e      	bne.n	8008342 <_calloc_r+0x46>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10c      	bne.n	8008322 <_calloc_r+0x26>
 8008308:	b289      	uxth	r1, r1
 800830a:	b294      	uxth	r4, r2
 800830c:	434c      	muls	r4, r1
 800830e:	0021      	movs	r1, r4
 8008310:	f000 f88c 	bl	800842c <_malloc_r>
 8008314:	1e05      	subs	r5, r0, #0
 8008316:	d01b      	beq.n	8008350 <_calloc_r+0x54>
 8008318:	0022      	movs	r2, r4
 800831a:	2100      	movs	r1, #0
 800831c:	f7fe f8f4 	bl	8006508 <memset>
 8008320:	e016      	b.n	8008350 <_calloc_r+0x54>
 8008322:	1c1d      	adds	r5, r3, #0
 8008324:	1c0b      	adds	r3, r1, #0
 8008326:	b292      	uxth	r2, r2
 8008328:	b289      	uxth	r1, r1
 800832a:	b29c      	uxth	r4, r3
 800832c:	4351      	muls	r1, r2
 800832e:	b2ab      	uxth	r3, r5
 8008330:	4363      	muls	r3, r4
 8008332:	0c0c      	lsrs	r4, r1, #16
 8008334:	191c      	adds	r4, r3, r4
 8008336:	0c22      	lsrs	r2, r4, #16
 8008338:	d107      	bne.n	800834a <_calloc_r+0x4e>
 800833a:	0424      	lsls	r4, r4, #16
 800833c:	b289      	uxth	r1, r1
 800833e:	430c      	orrs	r4, r1
 8008340:	e7e5      	b.n	800830e <_calloc_r+0x12>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <_calloc_r+0x4e>
 8008346:	1c13      	adds	r3, r2, #0
 8008348:	e7ed      	b.n	8008326 <_calloc_r+0x2a>
 800834a:	230c      	movs	r3, #12
 800834c:	2500      	movs	r5, #0
 800834e:	6003      	str	r3, [r0, #0]
 8008350:	0028      	movs	r0, r5
 8008352:	bd70      	pop	{r4, r5, r6, pc}

08008354 <_free_r>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	0005      	movs	r5, r0
 8008358:	2900      	cmp	r1, #0
 800835a:	d010      	beq.n	800837e <_free_r+0x2a>
 800835c:	1f0c      	subs	r4, r1, #4
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	da00      	bge.n	8008366 <_free_r+0x12>
 8008364:	18e4      	adds	r4, r4, r3
 8008366:	0028      	movs	r0, r5
 8008368:	f000 fa9e 	bl	80088a8 <__malloc_lock>
 800836c:	4a1d      	ldr	r2, [pc, #116]	; (80083e4 <_free_r+0x90>)
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <_free_r+0x2c>
 8008374:	6063      	str	r3, [r4, #4]
 8008376:	6014      	str	r4, [r2, #0]
 8008378:	0028      	movs	r0, r5
 800837a:	f000 fa9d 	bl	80088b8 <__malloc_unlock>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	42a3      	cmp	r3, r4
 8008382:	d908      	bls.n	8008396 <_free_r+0x42>
 8008384:	6821      	ldr	r1, [r4, #0]
 8008386:	1860      	adds	r0, r4, r1
 8008388:	4283      	cmp	r3, r0
 800838a:	d1f3      	bne.n	8008374 <_free_r+0x20>
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	1841      	adds	r1, r0, r1
 8008392:	6021      	str	r1, [r4, #0]
 8008394:	e7ee      	b.n	8008374 <_free_r+0x20>
 8008396:	001a      	movs	r2, r3
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <_free_r+0x4e>
 800839e:	42a3      	cmp	r3, r4
 80083a0:	d9f9      	bls.n	8008396 <_free_r+0x42>
 80083a2:	6811      	ldr	r1, [r2, #0]
 80083a4:	1850      	adds	r0, r2, r1
 80083a6:	42a0      	cmp	r0, r4
 80083a8:	d10b      	bne.n	80083c2 <_free_r+0x6e>
 80083aa:	6820      	ldr	r0, [r4, #0]
 80083ac:	1809      	adds	r1, r1, r0
 80083ae:	1850      	adds	r0, r2, r1
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	4283      	cmp	r3, r0
 80083b4:	d1e0      	bne.n	8008378 <_free_r+0x24>
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	1841      	adds	r1, r0, r1
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	6053      	str	r3, [r2, #4]
 80083c0:	e7da      	b.n	8008378 <_free_r+0x24>
 80083c2:	42a0      	cmp	r0, r4
 80083c4:	d902      	bls.n	80083cc <_free_r+0x78>
 80083c6:	230c      	movs	r3, #12
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	e7d5      	b.n	8008378 <_free_r+0x24>
 80083cc:	6821      	ldr	r1, [r4, #0]
 80083ce:	1860      	adds	r0, r4, r1
 80083d0:	4283      	cmp	r3, r0
 80083d2:	d103      	bne.n	80083dc <_free_r+0x88>
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	1841      	adds	r1, r0, r1
 80083da:	6021      	str	r1, [r4, #0]
 80083dc:	6063      	str	r3, [r4, #4]
 80083de:	6054      	str	r4, [r2, #4]
 80083e0:	e7ca      	b.n	8008378 <_free_r+0x24>
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	200004bc 	.word	0x200004bc

080083e8 <sbrk_aligned>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	4e0f      	ldr	r6, [pc, #60]	; (8008428 <sbrk_aligned+0x40>)
 80083ec:	000d      	movs	r5, r1
 80083ee:	6831      	ldr	r1, [r6, #0]
 80083f0:	0004      	movs	r4, r0
 80083f2:	2900      	cmp	r1, #0
 80083f4:	d102      	bne.n	80083fc <sbrk_aligned+0x14>
 80083f6:	f000 f9f1 	bl	80087dc <_sbrk_r>
 80083fa:	6030      	str	r0, [r6, #0]
 80083fc:	0029      	movs	r1, r5
 80083fe:	0020      	movs	r0, r4
 8008400:	f000 f9ec 	bl	80087dc <_sbrk_r>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d00a      	beq.n	800841e <sbrk_aligned+0x36>
 8008408:	2303      	movs	r3, #3
 800840a:	1cc5      	adds	r5, r0, #3
 800840c:	439d      	bics	r5, r3
 800840e:	42a8      	cmp	r0, r5
 8008410:	d007      	beq.n	8008422 <sbrk_aligned+0x3a>
 8008412:	1a29      	subs	r1, r5, r0
 8008414:	0020      	movs	r0, r4
 8008416:	f000 f9e1 	bl	80087dc <_sbrk_r>
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	d101      	bne.n	8008422 <sbrk_aligned+0x3a>
 800841e:	2501      	movs	r5, #1
 8008420:	426d      	negs	r5, r5
 8008422:	0028      	movs	r0, r5
 8008424:	bd70      	pop	{r4, r5, r6, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	200004c0 	.word	0x200004c0

0800842c <_malloc_r>:
 800842c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800842e:	2203      	movs	r2, #3
 8008430:	1ccb      	adds	r3, r1, #3
 8008432:	4393      	bics	r3, r2
 8008434:	3308      	adds	r3, #8
 8008436:	0006      	movs	r6, r0
 8008438:	001f      	movs	r7, r3
 800843a:	2b0c      	cmp	r3, #12
 800843c:	d232      	bcs.n	80084a4 <_malloc_r+0x78>
 800843e:	270c      	movs	r7, #12
 8008440:	42b9      	cmp	r1, r7
 8008442:	d831      	bhi.n	80084a8 <_malloc_r+0x7c>
 8008444:	0030      	movs	r0, r6
 8008446:	f000 fa2f 	bl	80088a8 <__malloc_lock>
 800844a:	4d32      	ldr	r5, [pc, #200]	; (8008514 <_malloc_r+0xe8>)
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	001c      	movs	r4, r3
 8008450:	2c00      	cmp	r4, #0
 8008452:	d12e      	bne.n	80084b2 <_malloc_r+0x86>
 8008454:	0039      	movs	r1, r7
 8008456:	0030      	movs	r0, r6
 8008458:	f7ff ffc6 	bl	80083e8 <sbrk_aligned>
 800845c:	0004      	movs	r4, r0
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	d11e      	bne.n	80084a0 <_malloc_r+0x74>
 8008462:	682c      	ldr	r4, [r5, #0]
 8008464:	0025      	movs	r5, r4
 8008466:	2d00      	cmp	r5, #0
 8008468:	d14a      	bne.n	8008500 <_malloc_r+0xd4>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	0029      	movs	r1, r5
 800846e:	18e3      	adds	r3, r4, r3
 8008470:	0030      	movs	r0, r6
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	f000 f9b2 	bl	80087dc <_sbrk_r>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	4283      	cmp	r3, r0
 800847c:	d143      	bne.n	8008506 <_malloc_r+0xda>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	3703      	adds	r7, #3
 8008482:	1aff      	subs	r7, r7, r3
 8008484:	2303      	movs	r3, #3
 8008486:	439f      	bics	r7, r3
 8008488:	3708      	adds	r7, #8
 800848a:	2f0c      	cmp	r7, #12
 800848c:	d200      	bcs.n	8008490 <_malloc_r+0x64>
 800848e:	270c      	movs	r7, #12
 8008490:	0039      	movs	r1, r7
 8008492:	0030      	movs	r0, r6
 8008494:	f7ff ffa8 	bl	80083e8 <sbrk_aligned>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d034      	beq.n	8008506 <_malloc_r+0xda>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	19df      	adds	r7, r3, r7
 80084a0:	6027      	str	r7, [r4, #0]
 80084a2:	e013      	b.n	80084cc <_malloc_r+0xa0>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	dacb      	bge.n	8008440 <_malloc_r+0x14>
 80084a8:	230c      	movs	r3, #12
 80084aa:	2500      	movs	r5, #0
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	0028      	movs	r0, r5
 80084b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084b2:	6822      	ldr	r2, [r4, #0]
 80084b4:	1bd1      	subs	r1, r2, r7
 80084b6:	d420      	bmi.n	80084fa <_malloc_r+0xce>
 80084b8:	290b      	cmp	r1, #11
 80084ba:	d917      	bls.n	80084ec <_malloc_r+0xc0>
 80084bc:	19e2      	adds	r2, r4, r7
 80084be:	6027      	str	r7, [r4, #0]
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d111      	bne.n	80084e8 <_malloc_r+0xbc>
 80084c4:	602a      	str	r2, [r5, #0]
 80084c6:	6863      	ldr	r3, [r4, #4]
 80084c8:	6011      	str	r1, [r2, #0]
 80084ca:	6053      	str	r3, [r2, #4]
 80084cc:	0030      	movs	r0, r6
 80084ce:	0025      	movs	r5, r4
 80084d0:	f000 f9f2 	bl	80088b8 <__malloc_unlock>
 80084d4:	2207      	movs	r2, #7
 80084d6:	350b      	adds	r5, #11
 80084d8:	1d23      	adds	r3, r4, #4
 80084da:	4395      	bics	r5, r2
 80084dc:	1aea      	subs	r2, r5, r3
 80084de:	429d      	cmp	r5, r3
 80084e0:	d0e5      	beq.n	80084ae <_malloc_r+0x82>
 80084e2:	1b5b      	subs	r3, r3, r5
 80084e4:	50a3      	str	r3, [r4, r2]
 80084e6:	e7e2      	b.n	80084ae <_malloc_r+0x82>
 80084e8:	605a      	str	r2, [r3, #4]
 80084ea:	e7ec      	b.n	80084c6 <_malloc_r+0x9a>
 80084ec:	6862      	ldr	r2, [r4, #4]
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	d101      	bne.n	80084f6 <_malloc_r+0xca>
 80084f2:	602a      	str	r2, [r5, #0]
 80084f4:	e7ea      	b.n	80084cc <_malloc_r+0xa0>
 80084f6:	605a      	str	r2, [r3, #4]
 80084f8:	e7e8      	b.n	80084cc <_malloc_r+0xa0>
 80084fa:	0023      	movs	r3, r4
 80084fc:	6864      	ldr	r4, [r4, #4]
 80084fe:	e7a7      	b.n	8008450 <_malloc_r+0x24>
 8008500:	002c      	movs	r4, r5
 8008502:	686d      	ldr	r5, [r5, #4]
 8008504:	e7af      	b.n	8008466 <_malloc_r+0x3a>
 8008506:	230c      	movs	r3, #12
 8008508:	0030      	movs	r0, r6
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	f000 f9d4 	bl	80088b8 <__malloc_unlock>
 8008510:	e7cd      	b.n	80084ae <_malloc_r+0x82>
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	200004bc 	.word	0x200004bc

08008518 <__ssputs_r>:
 8008518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800851a:	688e      	ldr	r6, [r1, #8]
 800851c:	b085      	sub	sp, #20
 800851e:	0007      	movs	r7, r0
 8008520:	000c      	movs	r4, r1
 8008522:	9203      	str	r2, [sp, #12]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	429e      	cmp	r6, r3
 8008528:	d83c      	bhi.n	80085a4 <__ssputs_r+0x8c>
 800852a:	2390      	movs	r3, #144	; 0x90
 800852c:	898a      	ldrh	r2, [r1, #12]
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	421a      	tst	r2, r3
 8008532:	d034      	beq.n	800859e <__ssputs_r+0x86>
 8008534:	6909      	ldr	r1, [r1, #16]
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	6960      	ldr	r0, [r4, #20]
 800853a:	1a5b      	subs	r3, r3, r1
 800853c:	9302      	str	r3, [sp, #8]
 800853e:	2303      	movs	r3, #3
 8008540:	4343      	muls	r3, r0
 8008542:	0fdd      	lsrs	r5, r3, #31
 8008544:	18ed      	adds	r5, r5, r3
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	9802      	ldr	r0, [sp, #8]
 800854a:	3301      	adds	r3, #1
 800854c:	181b      	adds	r3, r3, r0
 800854e:	106d      	asrs	r5, r5, #1
 8008550:	42ab      	cmp	r3, r5
 8008552:	d900      	bls.n	8008556 <__ssputs_r+0x3e>
 8008554:	001d      	movs	r5, r3
 8008556:	0553      	lsls	r3, r2, #21
 8008558:	d532      	bpl.n	80085c0 <__ssputs_r+0xa8>
 800855a:	0029      	movs	r1, r5
 800855c:	0038      	movs	r0, r7
 800855e:	f7ff ff65 	bl	800842c <_malloc_r>
 8008562:	1e06      	subs	r6, r0, #0
 8008564:	d109      	bne.n	800857a <__ssputs_r+0x62>
 8008566:	230c      	movs	r3, #12
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	2340      	movs	r3, #64	; 0x40
 800856c:	2001      	movs	r0, #1
 800856e:	89a2      	ldrh	r2, [r4, #12]
 8008570:	4240      	negs	r0, r0
 8008572:	4313      	orrs	r3, r2
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	b005      	add	sp, #20
 8008578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800857a:	9a02      	ldr	r2, [sp, #8]
 800857c:	6921      	ldr	r1, [r4, #16]
 800857e:	f7ff fb18 	bl	8007bb2 <memcpy>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	4a14      	ldr	r2, [pc, #80]	; (80085d8 <__ssputs_r+0xc0>)
 8008586:	401a      	ands	r2, r3
 8008588:	2380      	movs	r3, #128	; 0x80
 800858a:	4313      	orrs	r3, r2
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	9b02      	ldr	r3, [sp, #8]
 8008590:	6126      	str	r6, [r4, #16]
 8008592:	18f6      	adds	r6, r6, r3
 8008594:	6026      	str	r6, [r4, #0]
 8008596:	6165      	str	r5, [r4, #20]
 8008598:	9e01      	ldr	r6, [sp, #4]
 800859a:	1aed      	subs	r5, r5, r3
 800859c:	60a5      	str	r5, [r4, #8]
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	429e      	cmp	r6, r3
 80085a2:	d900      	bls.n	80085a6 <__ssputs_r+0x8e>
 80085a4:	9e01      	ldr	r6, [sp, #4]
 80085a6:	0032      	movs	r2, r6
 80085a8:	9903      	ldr	r1, [sp, #12]
 80085aa:	6820      	ldr	r0, [r4, #0]
 80085ac:	f000 f968 	bl	8008880 <memmove>
 80085b0:	68a3      	ldr	r3, [r4, #8]
 80085b2:	2000      	movs	r0, #0
 80085b4:	1b9b      	subs	r3, r3, r6
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	199e      	adds	r6, r3, r6
 80085bc:	6026      	str	r6, [r4, #0]
 80085be:	e7da      	b.n	8008576 <__ssputs_r+0x5e>
 80085c0:	002a      	movs	r2, r5
 80085c2:	0038      	movs	r0, r7
 80085c4:	f000 f980 	bl	80088c8 <_realloc_r>
 80085c8:	1e06      	subs	r6, r0, #0
 80085ca:	d1e0      	bne.n	800858e <__ssputs_r+0x76>
 80085cc:	0038      	movs	r0, r7
 80085ce:	6921      	ldr	r1, [r4, #16]
 80085d0:	f7ff fec0 	bl	8008354 <_free_r>
 80085d4:	e7c7      	b.n	8008566 <__ssputs_r+0x4e>
 80085d6:	46c0      	nop			; (mov r8, r8)
 80085d8:	fffffb7f 	.word	0xfffffb7f

080085dc <_svfiprintf_r>:
 80085dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085de:	b0a1      	sub	sp, #132	; 0x84
 80085e0:	9003      	str	r0, [sp, #12]
 80085e2:	001d      	movs	r5, r3
 80085e4:	898b      	ldrh	r3, [r1, #12]
 80085e6:	000f      	movs	r7, r1
 80085e8:	0016      	movs	r6, r2
 80085ea:	061b      	lsls	r3, r3, #24
 80085ec:	d511      	bpl.n	8008612 <_svfiprintf_r+0x36>
 80085ee:	690b      	ldr	r3, [r1, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10e      	bne.n	8008612 <_svfiprintf_r+0x36>
 80085f4:	2140      	movs	r1, #64	; 0x40
 80085f6:	f7ff ff19 	bl	800842c <_malloc_r>
 80085fa:	6038      	str	r0, [r7, #0]
 80085fc:	6138      	str	r0, [r7, #16]
 80085fe:	2800      	cmp	r0, #0
 8008600:	d105      	bne.n	800860e <_svfiprintf_r+0x32>
 8008602:	230c      	movs	r3, #12
 8008604:	9a03      	ldr	r2, [sp, #12]
 8008606:	3801      	subs	r0, #1
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	b021      	add	sp, #132	; 0x84
 800860c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860e:	2340      	movs	r3, #64	; 0x40
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	2300      	movs	r3, #0
 8008614:	ac08      	add	r4, sp, #32
 8008616:	6163      	str	r3, [r4, #20]
 8008618:	3320      	adds	r3, #32
 800861a:	7663      	strb	r3, [r4, #25]
 800861c:	3310      	adds	r3, #16
 800861e:	76a3      	strb	r3, [r4, #26]
 8008620:	9507      	str	r5, [sp, #28]
 8008622:	0035      	movs	r5, r6
 8008624:	782b      	ldrb	r3, [r5, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <_svfiprintf_r+0x52>
 800862a:	2b25      	cmp	r3, #37	; 0x25
 800862c:	d147      	bne.n	80086be <_svfiprintf_r+0xe2>
 800862e:	1bab      	subs	r3, r5, r6
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	42b5      	cmp	r5, r6
 8008634:	d00c      	beq.n	8008650 <_svfiprintf_r+0x74>
 8008636:	0032      	movs	r2, r6
 8008638:	0039      	movs	r1, r7
 800863a:	9803      	ldr	r0, [sp, #12]
 800863c:	f7ff ff6c 	bl	8008518 <__ssputs_r>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d100      	bne.n	8008646 <_svfiprintf_r+0x6a>
 8008644:	e0ae      	b.n	80087a4 <_svfiprintf_r+0x1c8>
 8008646:	6962      	ldr	r2, [r4, #20]
 8008648:	9b05      	ldr	r3, [sp, #20]
 800864a:	4694      	mov	ip, r2
 800864c:	4463      	add	r3, ip
 800864e:	6163      	str	r3, [r4, #20]
 8008650:	782b      	ldrb	r3, [r5, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d100      	bne.n	8008658 <_svfiprintf_r+0x7c>
 8008656:	e0a5      	b.n	80087a4 <_svfiprintf_r+0x1c8>
 8008658:	2201      	movs	r2, #1
 800865a:	2300      	movs	r3, #0
 800865c:	4252      	negs	r2, r2
 800865e:	6062      	str	r2, [r4, #4]
 8008660:	a904      	add	r1, sp, #16
 8008662:	3254      	adds	r2, #84	; 0x54
 8008664:	1852      	adds	r2, r2, r1
 8008666:	1c6e      	adds	r6, r5, #1
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	60e3      	str	r3, [r4, #12]
 800866c:	60a3      	str	r3, [r4, #8]
 800866e:	7013      	strb	r3, [r2, #0]
 8008670:	65a3      	str	r3, [r4, #88]	; 0x58
 8008672:	2205      	movs	r2, #5
 8008674:	7831      	ldrb	r1, [r6, #0]
 8008676:	4854      	ldr	r0, [pc, #336]	; (80087c8 <_svfiprintf_r+0x1ec>)
 8008678:	f7ff fa90 	bl	8007b9c <memchr>
 800867c:	1c75      	adds	r5, r6, #1
 800867e:	2800      	cmp	r0, #0
 8008680:	d11f      	bne.n	80086c2 <_svfiprintf_r+0xe6>
 8008682:	6822      	ldr	r2, [r4, #0]
 8008684:	06d3      	lsls	r3, r2, #27
 8008686:	d504      	bpl.n	8008692 <_svfiprintf_r+0xb6>
 8008688:	2353      	movs	r3, #83	; 0x53
 800868a:	a904      	add	r1, sp, #16
 800868c:	185b      	adds	r3, r3, r1
 800868e:	2120      	movs	r1, #32
 8008690:	7019      	strb	r1, [r3, #0]
 8008692:	0713      	lsls	r3, r2, #28
 8008694:	d504      	bpl.n	80086a0 <_svfiprintf_r+0xc4>
 8008696:	2353      	movs	r3, #83	; 0x53
 8008698:	a904      	add	r1, sp, #16
 800869a:	185b      	adds	r3, r3, r1
 800869c:	212b      	movs	r1, #43	; 0x2b
 800869e:	7019      	strb	r1, [r3, #0]
 80086a0:	7833      	ldrb	r3, [r6, #0]
 80086a2:	2b2a      	cmp	r3, #42	; 0x2a
 80086a4:	d016      	beq.n	80086d4 <_svfiprintf_r+0xf8>
 80086a6:	0035      	movs	r5, r6
 80086a8:	2100      	movs	r1, #0
 80086aa:	200a      	movs	r0, #10
 80086ac:	68e3      	ldr	r3, [r4, #12]
 80086ae:	782a      	ldrb	r2, [r5, #0]
 80086b0:	1c6e      	adds	r6, r5, #1
 80086b2:	3a30      	subs	r2, #48	; 0x30
 80086b4:	2a09      	cmp	r2, #9
 80086b6:	d94e      	bls.n	8008756 <_svfiprintf_r+0x17a>
 80086b8:	2900      	cmp	r1, #0
 80086ba:	d111      	bne.n	80086e0 <_svfiprintf_r+0x104>
 80086bc:	e017      	b.n	80086ee <_svfiprintf_r+0x112>
 80086be:	3501      	adds	r5, #1
 80086c0:	e7b0      	b.n	8008624 <_svfiprintf_r+0x48>
 80086c2:	4b41      	ldr	r3, [pc, #260]	; (80087c8 <_svfiprintf_r+0x1ec>)
 80086c4:	6822      	ldr	r2, [r4, #0]
 80086c6:	1ac0      	subs	r0, r0, r3
 80086c8:	2301      	movs	r3, #1
 80086ca:	4083      	lsls	r3, r0
 80086cc:	4313      	orrs	r3, r2
 80086ce:	002e      	movs	r6, r5
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	e7ce      	b.n	8008672 <_svfiprintf_r+0x96>
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	1d19      	adds	r1, r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	9107      	str	r1, [sp, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	db01      	blt.n	80086e4 <_svfiprintf_r+0x108>
 80086e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086e2:	e004      	b.n	80086ee <_svfiprintf_r+0x112>
 80086e4:	425b      	negs	r3, r3
 80086e6:	60e3      	str	r3, [r4, #12]
 80086e8:	2302      	movs	r3, #2
 80086ea:	4313      	orrs	r3, r2
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	782b      	ldrb	r3, [r5, #0]
 80086f0:	2b2e      	cmp	r3, #46	; 0x2e
 80086f2:	d10a      	bne.n	800870a <_svfiprintf_r+0x12e>
 80086f4:	786b      	ldrb	r3, [r5, #1]
 80086f6:	2b2a      	cmp	r3, #42	; 0x2a
 80086f8:	d135      	bne.n	8008766 <_svfiprintf_r+0x18a>
 80086fa:	9b07      	ldr	r3, [sp, #28]
 80086fc:	3502      	adds	r5, #2
 80086fe:	1d1a      	adds	r2, r3, #4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	9207      	str	r2, [sp, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	db2b      	blt.n	8008760 <_svfiprintf_r+0x184>
 8008708:	9309      	str	r3, [sp, #36]	; 0x24
 800870a:	4e30      	ldr	r6, [pc, #192]	; (80087cc <_svfiprintf_r+0x1f0>)
 800870c:	2203      	movs	r2, #3
 800870e:	0030      	movs	r0, r6
 8008710:	7829      	ldrb	r1, [r5, #0]
 8008712:	f7ff fa43 	bl	8007b9c <memchr>
 8008716:	2800      	cmp	r0, #0
 8008718:	d006      	beq.n	8008728 <_svfiprintf_r+0x14c>
 800871a:	2340      	movs	r3, #64	; 0x40
 800871c:	1b80      	subs	r0, r0, r6
 800871e:	4083      	lsls	r3, r0
 8008720:	6822      	ldr	r2, [r4, #0]
 8008722:	3501      	adds	r5, #1
 8008724:	4313      	orrs	r3, r2
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	7829      	ldrb	r1, [r5, #0]
 800872a:	2206      	movs	r2, #6
 800872c:	4828      	ldr	r0, [pc, #160]	; (80087d0 <_svfiprintf_r+0x1f4>)
 800872e:	1c6e      	adds	r6, r5, #1
 8008730:	7621      	strb	r1, [r4, #24]
 8008732:	f7ff fa33 	bl	8007b9c <memchr>
 8008736:	2800      	cmp	r0, #0
 8008738:	d03c      	beq.n	80087b4 <_svfiprintf_r+0x1d8>
 800873a:	4b26      	ldr	r3, [pc, #152]	; (80087d4 <_svfiprintf_r+0x1f8>)
 800873c:	2b00      	cmp	r3, #0
 800873e:	d125      	bne.n	800878c <_svfiprintf_r+0x1b0>
 8008740:	2207      	movs	r2, #7
 8008742:	9b07      	ldr	r3, [sp, #28]
 8008744:	3307      	adds	r3, #7
 8008746:	4393      	bics	r3, r2
 8008748:	3308      	adds	r3, #8
 800874a:	9307      	str	r3, [sp, #28]
 800874c:	6963      	ldr	r3, [r4, #20]
 800874e:	9a04      	ldr	r2, [sp, #16]
 8008750:	189b      	adds	r3, r3, r2
 8008752:	6163      	str	r3, [r4, #20]
 8008754:	e765      	b.n	8008622 <_svfiprintf_r+0x46>
 8008756:	4343      	muls	r3, r0
 8008758:	0035      	movs	r5, r6
 800875a:	2101      	movs	r1, #1
 800875c:	189b      	adds	r3, r3, r2
 800875e:	e7a6      	b.n	80086ae <_svfiprintf_r+0xd2>
 8008760:	2301      	movs	r3, #1
 8008762:	425b      	negs	r3, r3
 8008764:	e7d0      	b.n	8008708 <_svfiprintf_r+0x12c>
 8008766:	2300      	movs	r3, #0
 8008768:	200a      	movs	r0, #10
 800876a:	001a      	movs	r2, r3
 800876c:	3501      	adds	r5, #1
 800876e:	6063      	str	r3, [r4, #4]
 8008770:	7829      	ldrb	r1, [r5, #0]
 8008772:	1c6e      	adds	r6, r5, #1
 8008774:	3930      	subs	r1, #48	; 0x30
 8008776:	2909      	cmp	r1, #9
 8008778:	d903      	bls.n	8008782 <_svfiprintf_r+0x1a6>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0c5      	beq.n	800870a <_svfiprintf_r+0x12e>
 800877e:	9209      	str	r2, [sp, #36]	; 0x24
 8008780:	e7c3      	b.n	800870a <_svfiprintf_r+0x12e>
 8008782:	4342      	muls	r2, r0
 8008784:	0035      	movs	r5, r6
 8008786:	2301      	movs	r3, #1
 8008788:	1852      	adds	r2, r2, r1
 800878a:	e7f1      	b.n	8008770 <_svfiprintf_r+0x194>
 800878c:	ab07      	add	r3, sp, #28
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	003a      	movs	r2, r7
 8008792:	0021      	movs	r1, r4
 8008794:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <_svfiprintf_r+0x1fc>)
 8008796:	9803      	ldr	r0, [sp, #12]
 8008798:	f7fd ff68 	bl	800666c <_printf_float>
 800879c:	9004      	str	r0, [sp, #16]
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	3301      	adds	r3, #1
 80087a2:	d1d3      	bne.n	800874c <_svfiprintf_r+0x170>
 80087a4:	89bb      	ldrh	r3, [r7, #12]
 80087a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80087a8:	065b      	lsls	r3, r3, #25
 80087aa:	d400      	bmi.n	80087ae <_svfiprintf_r+0x1d2>
 80087ac:	e72d      	b.n	800860a <_svfiprintf_r+0x2e>
 80087ae:	2001      	movs	r0, #1
 80087b0:	4240      	negs	r0, r0
 80087b2:	e72a      	b.n	800860a <_svfiprintf_r+0x2e>
 80087b4:	ab07      	add	r3, sp, #28
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	003a      	movs	r2, r7
 80087ba:	0021      	movs	r1, r4
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <_svfiprintf_r+0x1fc>)
 80087be:	9803      	ldr	r0, [sp, #12]
 80087c0:	f7fe fa06 	bl	8006bd0 <_printf_i>
 80087c4:	e7ea      	b.n	800879c <_svfiprintf_r+0x1c0>
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	08009a3c 	.word	0x08009a3c
 80087cc:	08009a42 	.word	0x08009a42
 80087d0:	08009a46 	.word	0x08009a46
 80087d4:	0800666d 	.word	0x0800666d
 80087d8:	08008519 	.word	0x08008519

080087dc <_sbrk_r>:
 80087dc:	2300      	movs	r3, #0
 80087de:	b570      	push	{r4, r5, r6, lr}
 80087e0:	4d06      	ldr	r5, [pc, #24]	; (80087fc <_sbrk_r+0x20>)
 80087e2:	0004      	movs	r4, r0
 80087e4:	0008      	movs	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7fa ff4e 	bl	8003688 <_sbrk>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d103      	bne.n	80087f8 <_sbrk_r+0x1c>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d000      	beq.n	80087f8 <_sbrk_r+0x1c>
 80087f6:	6023      	str	r3, [r4, #0]
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	46c0      	nop			; (mov r8, r8)
 80087fc:	200004c4 	.word	0x200004c4

08008800 <__assert_func>:
 8008800:	b530      	push	{r4, r5, lr}
 8008802:	0014      	movs	r4, r2
 8008804:	001a      	movs	r2, r3
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <__assert_func+0x2c>)
 8008808:	0005      	movs	r5, r0
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	b085      	sub	sp, #20
 800880e:	68d8      	ldr	r0, [r3, #12]
 8008810:	4b07      	ldr	r3, [pc, #28]	; (8008830 <__assert_func+0x30>)
 8008812:	2c00      	cmp	r4, #0
 8008814:	d101      	bne.n	800881a <__assert_func+0x1a>
 8008816:	4b07      	ldr	r3, [pc, #28]	; (8008834 <__assert_func+0x34>)
 8008818:	001c      	movs	r4, r3
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	9100      	str	r1, [sp, #0]
 800881e:	002b      	movs	r3, r5
 8008820:	4905      	ldr	r1, [pc, #20]	; (8008838 <__assert_func+0x38>)
 8008822:	9402      	str	r4, [sp, #8]
 8008824:	f000 f80a 	bl	800883c <fiprintf>
 8008828:	f000 faba 	bl	8008da0 <abort>
 800882c:	20000080 	.word	0x20000080
 8008830:	08009a4d 	.word	0x08009a4d
 8008834:	08009a88 	.word	0x08009a88
 8008838:	08009a5a 	.word	0x08009a5a

0800883c <fiprintf>:
 800883c:	b40e      	push	{r1, r2, r3}
 800883e:	b503      	push	{r0, r1, lr}
 8008840:	0001      	movs	r1, r0
 8008842:	ab03      	add	r3, sp, #12
 8008844:	4804      	ldr	r0, [pc, #16]	; (8008858 <fiprintf+0x1c>)
 8008846:	cb04      	ldmia	r3!, {r2}
 8008848:	6800      	ldr	r0, [r0, #0]
 800884a:	9301      	str	r3, [sp, #4]
 800884c:	f000 f892 	bl	8008974 <_vfiprintf_r>
 8008850:	b002      	add	sp, #8
 8008852:	bc08      	pop	{r3}
 8008854:	b003      	add	sp, #12
 8008856:	4718      	bx	r3
 8008858:	20000080 	.word	0x20000080

0800885c <__ascii_mbtowc>:
 800885c:	b082      	sub	sp, #8
 800885e:	2900      	cmp	r1, #0
 8008860:	d100      	bne.n	8008864 <__ascii_mbtowc+0x8>
 8008862:	a901      	add	r1, sp, #4
 8008864:	1e10      	subs	r0, r2, #0
 8008866:	d006      	beq.n	8008876 <__ascii_mbtowc+0x1a>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d006      	beq.n	800887a <__ascii_mbtowc+0x1e>
 800886c:	7813      	ldrb	r3, [r2, #0]
 800886e:	600b      	str	r3, [r1, #0]
 8008870:	7810      	ldrb	r0, [r2, #0]
 8008872:	1e43      	subs	r3, r0, #1
 8008874:	4198      	sbcs	r0, r3
 8008876:	b002      	add	sp, #8
 8008878:	4770      	bx	lr
 800887a:	2002      	movs	r0, #2
 800887c:	4240      	negs	r0, r0
 800887e:	e7fa      	b.n	8008876 <__ascii_mbtowc+0x1a>

08008880 <memmove>:
 8008880:	b510      	push	{r4, lr}
 8008882:	4288      	cmp	r0, r1
 8008884:	d902      	bls.n	800888c <memmove+0xc>
 8008886:	188b      	adds	r3, r1, r2
 8008888:	4298      	cmp	r0, r3
 800888a:	d303      	bcc.n	8008894 <memmove+0x14>
 800888c:	2300      	movs	r3, #0
 800888e:	e007      	b.n	80088a0 <memmove+0x20>
 8008890:	5c8b      	ldrb	r3, [r1, r2]
 8008892:	5483      	strb	r3, [r0, r2]
 8008894:	3a01      	subs	r2, #1
 8008896:	d2fb      	bcs.n	8008890 <memmove+0x10>
 8008898:	bd10      	pop	{r4, pc}
 800889a:	5ccc      	ldrb	r4, [r1, r3]
 800889c:	54c4      	strb	r4, [r0, r3]
 800889e:	3301      	adds	r3, #1
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d1fa      	bne.n	800889a <memmove+0x1a>
 80088a4:	e7f8      	b.n	8008898 <memmove+0x18>
	...

080088a8 <__malloc_lock>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	4802      	ldr	r0, [pc, #8]	; (80088b4 <__malloc_lock+0xc>)
 80088ac:	f000 fc4f 	bl	800914e <__retarget_lock_acquire_recursive>
 80088b0:	bd10      	pop	{r4, pc}
 80088b2:	46c0      	nop			; (mov r8, r8)
 80088b4:	200004c8 	.word	0x200004c8

080088b8 <__malloc_unlock>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	4802      	ldr	r0, [pc, #8]	; (80088c4 <__malloc_unlock+0xc>)
 80088bc:	f000 fc48 	bl	8009150 <__retarget_lock_release_recursive>
 80088c0:	bd10      	pop	{r4, pc}
 80088c2:	46c0      	nop			; (mov r8, r8)
 80088c4:	200004c8 	.word	0x200004c8

080088c8 <_realloc_r>:
 80088c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ca:	0007      	movs	r7, r0
 80088cc:	000e      	movs	r6, r1
 80088ce:	0014      	movs	r4, r2
 80088d0:	2900      	cmp	r1, #0
 80088d2:	d105      	bne.n	80088e0 <_realloc_r+0x18>
 80088d4:	0011      	movs	r1, r2
 80088d6:	f7ff fda9 	bl	800842c <_malloc_r>
 80088da:	0005      	movs	r5, r0
 80088dc:	0028      	movs	r0, r5
 80088de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088e0:	2a00      	cmp	r2, #0
 80088e2:	d103      	bne.n	80088ec <_realloc_r+0x24>
 80088e4:	f7ff fd36 	bl	8008354 <_free_r>
 80088e8:	0025      	movs	r5, r4
 80088ea:	e7f7      	b.n	80088dc <_realloc_r+0x14>
 80088ec:	f000 fc9e 	bl	800922c <_malloc_usable_size_r>
 80088f0:	9001      	str	r0, [sp, #4]
 80088f2:	4284      	cmp	r4, r0
 80088f4:	d803      	bhi.n	80088fe <_realloc_r+0x36>
 80088f6:	0035      	movs	r5, r6
 80088f8:	0843      	lsrs	r3, r0, #1
 80088fa:	42a3      	cmp	r3, r4
 80088fc:	d3ee      	bcc.n	80088dc <_realloc_r+0x14>
 80088fe:	0021      	movs	r1, r4
 8008900:	0038      	movs	r0, r7
 8008902:	f7ff fd93 	bl	800842c <_malloc_r>
 8008906:	1e05      	subs	r5, r0, #0
 8008908:	d0e8      	beq.n	80088dc <_realloc_r+0x14>
 800890a:	9b01      	ldr	r3, [sp, #4]
 800890c:	0022      	movs	r2, r4
 800890e:	429c      	cmp	r4, r3
 8008910:	d900      	bls.n	8008914 <_realloc_r+0x4c>
 8008912:	001a      	movs	r2, r3
 8008914:	0031      	movs	r1, r6
 8008916:	0028      	movs	r0, r5
 8008918:	f7ff f94b 	bl	8007bb2 <memcpy>
 800891c:	0031      	movs	r1, r6
 800891e:	0038      	movs	r0, r7
 8008920:	f7ff fd18 	bl	8008354 <_free_r>
 8008924:	e7da      	b.n	80088dc <_realloc_r+0x14>

08008926 <__sfputc_r>:
 8008926:	6893      	ldr	r3, [r2, #8]
 8008928:	b510      	push	{r4, lr}
 800892a:	3b01      	subs	r3, #1
 800892c:	6093      	str	r3, [r2, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	da04      	bge.n	800893c <__sfputc_r+0x16>
 8008932:	6994      	ldr	r4, [r2, #24]
 8008934:	42a3      	cmp	r3, r4
 8008936:	db07      	blt.n	8008948 <__sfputc_r+0x22>
 8008938:	290a      	cmp	r1, #10
 800893a:	d005      	beq.n	8008948 <__sfputc_r+0x22>
 800893c:	6813      	ldr	r3, [r2, #0]
 800893e:	1c58      	adds	r0, r3, #1
 8008940:	6010      	str	r0, [r2, #0]
 8008942:	7019      	strb	r1, [r3, #0]
 8008944:	0008      	movs	r0, r1
 8008946:	bd10      	pop	{r4, pc}
 8008948:	f000 f94e 	bl	8008be8 <__swbuf_r>
 800894c:	0001      	movs	r1, r0
 800894e:	e7f9      	b.n	8008944 <__sfputc_r+0x1e>

08008950 <__sfputs_r>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	0006      	movs	r6, r0
 8008954:	000f      	movs	r7, r1
 8008956:	0014      	movs	r4, r2
 8008958:	18d5      	adds	r5, r2, r3
 800895a:	42ac      	cmp	r4, r5
 800895c:	d101      	bne.n	8008962 <__sfputs_r+0x12>
 800895e:	2000      	movs	r0, #0
 8008960:	e007      	b.n	8008972 <__sfputs_r+0x22>
 8008962:	7821      	ldrb	r1, [r4, #0]
 8008964:	003a      	movs	r2, r7
 8008966:	0030      	movs	r0, r6
 8008968:	f7ff ffdd 	bl	8008926 <__sfputc_r>
 800896c:	3401      	adds	r4, #1
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d1f3      	bne.n	800895a <__sfputs_r+0xa>
 8008972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008974 <_vfiprintf_r>:
 8008974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008976:	b0a1      	sub	sp, #132	; 0x84
 8008978:	0006      	movs	r6, r0
 800897a:	000c      	movs	r4, r1
 800897c:	001f      	movs	r7, r3
 800897e:	9203      	str	r2, [sp, #12]
 8008980:	2800      	cmp	r0, #0
 8008982:	d004      	beq.n	800898e <_vfiprintf_r+0x1a>
 8008984:	6983      	ldr	r3, [r0, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <_vfiprintf_r+0x1a>
 800898a:	f000 fb3f 	bl	800900c <__sinit>
 800898e:	4b8e      	ldr	r3, [pc, #568]	; (8008bc8 <_vfiprintf_r+0x254>)
 8008990:	429c      	cmp	r4, r3
 8008992:	d11c      	bne.n	80089ce <_vfiprintf_r+0x5a>
 8008994:	6874      	ldr	r4, [r6, #4]
 8008996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008998:	07db      	lsls	r3, r3, #31
 800899a:	d405      	bmi.n	80089a8 <_vfiprintf_r+0x34>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	059b      	lsls	r3, r3, #22
 80089a0:	d402      	bmi.n	80089a8 <_vfiprintf_r+0x34>
 80089a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a4:	f000 fbd3 	bl	800914e <__retarget_lock_acquire_recursive>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	071b      	lsls	r3, r3, #28
 80089ac:	d502      	bpl.n	80089b4 <_vfiprintf_r+0x40>
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d11d      	bne.n	80089f0 <_vfiprintf_r+0x7c>
 80089b4:	0021      	movs	r1, r4
 80089b6:	0030      	movs	r0, r6
 80089b8:	f000 f97a 	bl	8008cb0 <__swsetup_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d017      	beq.n	80089f0 <_vfiprintf_r+0x7c>
 80089c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089c2:	07db      	lsls	r3, r3, #31
 80089c4:	d50d      	bpl.n	80089e2 <_vfiprintf_r+0x6e>
 80089c6:	2001      	movs	r0, #1
 80089c8:	4240      	negs	r0, r0
 80089ca:	b021      	add	sp, #132	; 0x84
 80089cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ce:	4b7f      	ldr	r3, [pc, #508]	; (8008bcc <_vfiprintf_r+0x258>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	d101      	bne.n	80089d8 <_vfiprintf_r+0x64>
 80089d4:	68b4      	ldr	r4, [r6, #8]
 80089d6:	e7de      	b.n	8008996 <_vfiprintf_r+0x22>
 80089d8:	4b7d      	ldr	r3, [pc, #500]	; (8008bd0 <_vfiprintf_r+0x25c>)
 80089da:	429c      	cmp	r4, r3
 80089dc:	d1db      	bne.n	8008996 <_vfiprintf_r+0x22>
 80089de:	68f4      	ldr	r4, [r6, #12]
 80089e0:	e7d9      	b.n	8008996 <_vfiprintf_r+0x22>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	059b      	lsls	r3, r3, #22
 80089e6:	d4ee      	bmi.n	80089c6 <_vfiprintf_r+0x52>
 80089e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ea:	f000 fbb1 	bl	8009150 <__retarget_lock_release_recursive>
 80089ee:	e7ea      	b.n	80089c6 <_vfiprintf_r+0x52>
 80089f0:	2300      	movs	r3, #0
 80089f2:	ad08      	add	r5, sp, #32
 80089f4:	616b      	str	r3, [r5, #20]
 80089f6:	3320      	adds	r3, #32
 80089f8:	766b      	strb	r3, [r5, #25]
 80089fa:	3310      	adds	r3, #16
 80089fc:	76ab      	strb	r3, [r5, #26]
 80089fe:	9707      	str	r7, [sp, #28]
 8008a00:	9f03      	ldr	r7, [sp, #12]
 8008a02:	783b      	ldrb	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <_vfiprintf_r+0x98>
 8008a08:	2b25      	cmp	r3, #37	; 0x25
 8008a0a:	d14e      	bne.n	8008aaa <_vfiprintf_r+0x136>
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	1afb      	subs	r3, r7, r3
 8008a10:	9305      	str	r3, [sp, #20]
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	429f      	cmp	r7, r3
 8008a16:	d00d      	beq.n	8008a34 <_vfiprintf_r+0xc0>
 8008a18:	9b05      	ldr	r3, [sp, #20]
 8008a1a:	0021      	movs	r1, r4
 8008a1c:	0030      	movs	r0, r6
 8008a1e:	9a03      	ldr	r2, [sp, #12]
 8008a20:	f7ff ff96 	bl	8008950 <__sfputs_r>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d100      	bne.n	8008a2a <_vfiprintf_r+0xb6>
 8008a28:	e0b5      	b.n	8008b96 <_vfiprintf_r+0x222>
 8008a2a:	696a      	ldr	r2, [r5, #20]
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	4694      	mov	ip, r2
 8008a30:	4463      	add	r3, ip
 8008a32:	616b      	str	r3, [r5, #20]
 8008a34:	783b      	ldrb	r3, [r7, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d100      	bne.n	8008a3c <_vfiprintf_r+0xc8>
 8008a3a:	e0ac      	b.n	8008b96 <_vfiprintf_r+0x222>
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	1c7b      	adds	r3, r7, #1
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	2300      	movs	r3, #0
 8008a44:	4252      	negs	r2, r2
 8008a46:	606a      	str	r2, [r5, #4]
 8008a48:	a904      	add	r1, sp, #16
 8008a4a:	3254      	adds	r2, #84	; 0x54
 8008a4c:	1852      	adds	r2, r2, r1
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	60eb      	str	r3, [r5, #12]
 8008a52:	60ab      	str	r3, [r5, #8]
 8008a54:	7013      	strb	r3, [r2, #0]
 8008a56:	65ab      	str	r3, [r5, #88]	; 0x58
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	7819      	ldrb	r1, [r3, #0]
 8008a5e:	485d      	ldr	r0, [pc, #372]	; (8008bd4 <_vfiprintf_r+0x260>)
 8008a60:	f7ff f89c 	bl	8007b9c <memchr>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	1c5f      	adds	r7, r3, #1
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d120      	bne.n	8008aae <_vfiprintf_r+0x13a>
 8008a6c:	682a      	ldr	r2, [r5, #0]
 8008a6e:	06d3      	lsls	r3, r2, #27
 8008a70:	d504      	bpl.n	8008a7c <_vfiprintf_r+0x108>
 8008a72:	2353      	movs	r3, #83	; 0x53
 8008a74:	a904      	add	r1, sp, #16
 8008a76:	185b      	adds	r3, r3, r1
 8008a78:	2120      	movs	r1, #32
 8008a7a:	7019      	strb	r1, [r3, #0]
 8008a7c:	0713      	lsls	r3, r2, #28
 8008a7e:	d504      	bpl.n	8008a8a <_vfiprintf_r+0x116>
 8008a80:	2353      	movs	r3, #83	; 0x53
 8008a82:	a904      	add	r1, sp, #16
 8008a84:	185b      	adds	r3, r3, r1
 8008a86:	212b      	movs	r1, #43	; 0x2b
 8008a88:	7019      	strb	r1, [r3, #0]
 8008a8a:	9b03      	ldr	r3, [sp, #12]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a90:	d016      	beq.n	8008ac0 <_vfiprintf_r+0x14c>
 8008a92:	2100      	movs	r1, #0
 8008a94:	68eb      	ldr	r3, [r5, #12]
 8008a96:	9f03      	ldr	r7, [sp, #12]
 8008a98:	783a      	ldrb	r2, [r7, #0]
 8008a9a:	1c78      	adds	r0, r7, #1
 8008a9c:	3a30      	subs	r2, #48	; 0x30
 8008a9e:	4684      	mov	ip, r0
 8008aa0:	2a09      	cmp	r2, #9
 8008aa2:	d94f      	bls.n	8008b44 <_vfiprintf_r+0x1d0>
 8008aa4:	2900      	cmp	r1, #0
 8008aa6:	d111      	bne.n	8008acc <_vfiprintf_r+0x158>
 8008aa8:	e017      	b.n	8008ada <_vfiprintf_r+0x166>
 8008aaa:	3701      	adds	r7, #1
 8008aac:	e7a9      	b.n	8008a02 <_vfiprintf_r+0x8e>
 8008aae:	4b49      	ldr	r3, [pc, #292]	; (8008bd4 <_vfiprintf_r+0x260>)
 8008ab0:	682a      	ldr	r2, [r5, #0]
 8008ab2:	1ac0      	subs	r0, r0, r3
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	4083      	lsls	r3, r0
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	9703      	str	r7, [sp, #12]
 8008abe:	e7cb      	b.n	8008a58 <_vfiprintf_r+0xe4>
 8008ac0:	9b07      	ldr	r3, [sp, #28]
 8008ac2:	1d19      	adds	r1, r3, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	9107      	str	r1, [sp, #28]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	db01      	blt.n	8008ad0 <_vfiprintf_r+0x15c>
 8008acc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ace:	e004      	b.n	8008ada <_vfiprintf_r+0x166>
 8008ad0:	425b      	negs	r3, r3
 8008ad2:	60eb      	str	r3, [r5, #12]
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	783b      	ldrb	r3, [r7, #0]
 8008adc:	2b2e      	cmp	r3, #46	; 0x2e
 8008ade:	d10a      	bne.n	8008af6 <_vfiprintf_r+0x182>
 8008ae0:	787b      	ldrb	r3, [r7, #1]
 8008ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae4:	d137      	bne.n	8008b56 <_vfiprintf_r+0x1e2>
 8008ae6:	9b07      	ldr	r3, [sp, #28]
 8008ae8:	3702      	adds	r7, #2
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9207      	str	r2, [sp, #28]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	db2d      	blt.n	8008b50 <_vfiprintf_r+0x1dc>
 8008af4:	9309      	str	r3, [sp, #36]	; 0x24
 8008af6:	2203      	movs	r2, #3
 8008af8:	7839      	ldrb	r1, [r7, #0]
 8008afa:	4837      	ldr	r0, [pc, #220]	; (8008bd8 <_vfiprintf_r+0x264>)
 8008afc:	f7ff f84e 	bl	8007b9c <memchr>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d007      	beq.n	8008b14 <_vfiprintf_r+0x1a0>
 8008b04:	4b34      	ldr	r3, [pc, #208]	; (8008bd8 <_vfiprintf_r+0x264>)
 8008b06:	682a      	ldr	r2, [r5, #0]
 8008b08:	1ac0      	subs	r0, r0, r3
 8008b0a:	2340      	movs	r3, #64	; 0x40
 8008b0c:	4083      	lsls	r3, r0
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	3701      	adds	r7, #1
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	7839      	ldrb	r1, [r7, #0]
 8008b16:	1c7b      	adds	r3, r7, #1
 8008b18:	2206      	movs	r2, #6
 8008b1a:	4830      	ldr	r0, [pc, #192]	; (8008bdc <_vfiprintf_r+0x268>)
 8008b1c:	9303      	str	r3, [sp, #12]
 8008b1e:	7629      	strb	r1, [r5, #24]
 8008b20:	f7ff f83c 	bl	8007b9c <memchr>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d045      	beq.n	8008bb4 <_vfiprintf_r+0x240>
 8008b28:	4b2d      	ldr	r3, [pc, #180]	; (8008be0 <_vfiprintf_r+0x26c>)
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d127      	bne.n	8008b7e <_vfiprintf_r+0x20a>
 8008b2e:	2207      	movs	r2, #7
 8008b30:	9b07      	ldr	r3, [sp, #28]
 8008b32:	3307      	adds	r3, #7
 8008b34:	4393      	bics	r3, r2
 8008b36:	3308      	adds	r3, #8
 8008b38:	9307      	str	r3, [sp, #28]
 8008b3a:	696b      	ldr	r3, [r5, #20]
 8008b3c:	9a04      	ldr	r2, [sp, #16]
 8008b3e:	189b      	adds	r3, r3, r2
 8008b40:	616b      	str	r3, [r5, #20]
 8008b42:	e75d      	b.n	8008a00 <_vfiprintf_r+0x8c>
 8008b44:	210a      	movs	r1, #10
 8008b46:	434b      	muls	r3, r1
 8008b48:	4667      	mov	r7, ip
 8008b4a:	189b      	adds	r3, r3, r2
 8008b4c:	3909      	subs	r1, #9
 8008b4e:	e7a3      	b.n	8008a98 <_vfiprintf_r+0x124>
 8008b50:	2301      	movs	r3, #1
 8008b52:	425b      	negs	r3, r3
 8008b54:	e7ce      	b.n	8008af4 <_vfiprintf_r+0x180>
 8008b56:	2300      	movs	r3, #0
 8008b58:	001a      	movs	r2, r3
 8008b5a:	3701      	adds	r7, #1
 8008b5c:	606b      	str	r3, [r5, #4]
 8008b5e:	7839      	ldrb	r1, [r7, #0]
 8008b60:	1c78      	adds	r0, r7, #1
 8008b62:	3930      	subs	r1, #48	; 0x30
 8008b64:	4684      	mov	ip, r0
 8008b66:	2909      	cmp	r1, #9
 8008b68:	d903      	bls.n	8008b72 <_vfiprintf_r+0x1fe>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0c3      	beq.n	8008af6 <_vfiprintf_r+0x182>
 8008b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b70:	e7c1      	b.n	8008af6 <_vfiprintf_r+0x182>
 8008b72:	230a      	movs	r3, #10
 8008b74:	435a      	muls	r2, r3
 8008b76:	4667      	mov	r7, ip
 8008b78:	1852      	adds	r2, r2, r1
 8008b7a:	3b09      	subs	r3, #9
 8008b7c:	e7ef      	b.n	8008b5e <_vfiprintf_r+0x1ea>
 8008b7e:	ab07      	add	r3, sp, #28
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	0022      	movs	r2, r4
 8008b84:	0029      	movs	r1, r5
 8008b86:	0030      	movs	r0, r6
 8008b88:	4b16      	ldr	r3, [pc, #88]	; (8008be4 <_vfiprintf_r+0x270>)
 8008b8a:	f7fd fd6f 	bl	800666c <_printf_float>
 8008b8e:	9004      	str	r0, [sp, #16]
 8008b90:	9b04      	ldr	r3, [sp, #16]
 8008b92:	3301      	adds	r3, #1
 8008b94:	d1d1      	bne.n	8008b3a <_vfiprintf_r+0x1c6>
 8008b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b98:	07db      	lsls	r3, r3, #31
 8008b9a:	d405      	bmi.n	8008ba8 <_vfiprintf_r+0x234>
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	059b      	lsls	r3, r3, #22
 8008ba0:	d402      	bmi.n	8008ba8 <_vfiprintf_r+0x234>
 8008ba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ba4:	f000 fad4 	bl	8009150 <__retarget_lock_release_recursive>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	065b      	lsls	r3, r3, #25
 8008bac:	d500      	bpl.n	8008bb0 <_vfiprintf_r+0x23c>
 8008bae:	e70a      	b.n	80089c6 <_vfiprintf_r+0x52>
 8008bb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008bb2:	e70a      	b.n	80089ca <_vfiprintf_r+0x56>
 8008bb4:	ab07      	add	r3, sp, #28
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	0022      	movs	r2, r4
 8008bba:	0029      	movs	r1, r5
 8008bbc:	0030      	movs	r0, r6
 8008bbe:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <_vfiprintf_r+0x270>)
 8008bc0:	f7fe f806 	bl	8006bd0 <_printf_i>
 8008bc4:	e7e3      	b.n	8008b8e <_vfiprintf_r+0x21a>
 8008bc6:	46c0      	nop			; (mov r8, r8)
 8008bc8:	08009bb4 	.word	0x08009bb4
 8008bcc:	08009bd4 	.word	0x08009bd4
 8008bd0:	08009b94 	.word	0x08009b94
 8008bd4:	08009a3c 	.word	0x08009a3c
 8008bd8:	08009a42 	.word	0x08009a42
 8008bdc:	08009a46 	.word	0x08009a46
 8008be0:	0800666d 	.word	0x0800666d
 8008be4:	08008951 	.word	0x08008951

08008be8 <__swbuf_r>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	0005      	movs	r5, r0
 8008bec:	000e      	movs	r6, r1
 8008bee:	0014      	movs	r4, r2
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d004      	beq.n	8008bfe <__swbuf_r+0x16>
 8008bf4:	6983      	ldr	r3, [r0, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <__swbuf_r+0x16>
 8008bfa:	f000 fa07 	bl	800900c <__sinit>
 8008bfe:	4b22      	ldr	r3, [pc, #136]	; (8008c88 <__swbuf_r+0xa0>)
 8008c00:	429c      	cmp	r4, r3
 8008c02:	d12e      	bne.n	8008c62 <__swbuf_r+0x7a>
 8008c04:	686c      	ldr	r4, [r5, #4]
 8008c06:	69a3      	ldr	r3, [r4, #24]
 8008c08:	60a3      	str	r3, [r4, #8]
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	071b      	lsls	r3, r3, #28
 8008c0e:	d532      	bpl.n	8008c76 <__swbuf_r+0x8e>
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d02f      	beq.n	8008c76 <__swbuf_r+0x8e>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	6922      	ldr	r2, [r4, #16]
 8008c1a:	b2f7      	uxtb	r7, r6
 8008c1c:	1a98      	subs	r0, r3, r2
 8008c1e:	6963      	ldr	r3, [r4, #20]
 8008c20:	b2f6      	uxtb	r6, r6
 8008c22:	4283      	cmp	r3, r0
 8008c24:	dc05      	bgt.n	8008c32 <__swbuf_r+0x4a>
 8008c26:	0021      	movs	r1, r4
 8008c28:	0028      	movs	r0, r5
 8008c2a:	f000 f94d 	bl	8008ec8 <_fflush_r>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d127      	bne.n	8008c82 <__swbuf_r+0x9a>
 8008c32:	68a3      	ldr	r3, [r4, #8]
 8008c34:	3001      	adds	r0, #1
 8008c36:	3b01      	subs	r3, #1
 8008c38:	60a3      	str	r3, [r4, #8]
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	6022      	str	r2, [r4, #0]
 8008c40:	701f      	strb	r7, [r3, #0]
 8008c42:	6963      	ldr	r3, [r4, #20]
 8008c44:	4283      	cmp	r3, r0
 8008c46:	d004      	beq.n	8008c52 <__swbuf_r+0x6a>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	07db      	lsls	r3, r3, #31
 8008c4c:	d507      	bpl.n	8008c5e <__swbuf_r+0x76>
 8008c4e:	2e0a      	cmp	r6, #10
 8008c50:	d105      	bne.n	8008c5e <__swbuf_r+0x76>
 8008c52:	0021      	movs	r1, r4
 8008c54:	0028      	movs	r0, r5
 8008c56:	f000 f937 	bl	8008ec8 <_fflush_r>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d111      	bne.n	8008c82 <__swbuf_r+0x9a>
 8008c5e:	0030      	movs	r0, r6
 8008c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <__swbuf_r+0xa4>)
 8008c64:	429c      	cmp	r4, r3
 8008c66:	d101      	bne.n	8008c6c <__swbuf_r+0x84>
 8008c68:	68ac      	ldr	r4, [r5, #8]
 8008c6a:	e7cc      	b.n	8008c06 <__swbuf_r+0x1e>
 8008c6c:	4b08      	ldr	r3, [pc, #32]	; (8008c90 <__swbuf_r+0xa8>)
 8008c6e:	429c      	cmp	r4, r3
 8008c70:	d1c9      	bne.n	8008c06 <__swbuf_r+0x1e>
 8008c72:	68ec      	ldr	r4, [r5, #12]
 8008c74:	e7c7      	b.n	8008c06 <__swbuf_r+0x1e>
 8008c76:	0021      	movs	r1, r4
 8008c78:	0028      	movs	r0, r5
 8008c7a:	f000 f819 	bl	8008cb0 <__swsetup_r>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d0c9      	beq.n	8008c16 <__swbuf_r+0x2e>
 8008c82:	2601      	movs	r6, #1
 8008c84:	4276      	negs	r6, r6
 8008c86:	e7ea      	b.n	8008c5e <__swbuf_r+0x76>
 8008c88:	08009bb4 	.word	0x08009bb4
 8008c8c:	08009bd4 	.word	0x08009bd4
 8008c90:	08009b94 	.word	0x08009b94

08008c94 <__ascii_wctomb>:
 8008c94:	0003      	movs	r3, r0
 8008c96:	1e08      	subs	r0, r1, #0
 8008c98:	d005      	beq.n	8008ca6 <__ascii_wctomb+0x12>
 8008c9a:	2aff      	cmp	r2, #255	; 0xff
 8008c9c:	d904      	bls.n	8008ca8 <__ascii_wctomb+0x14>
 8008c9e:	228a      	movs	r2, #138	; 0x8a
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	4240      	negs	r0, r0
 8008ca6:	4770      	bx	lr
 8008ca8:	2001      	movs	r0, #1
 8008caa:	700a      	strb	r2, [r1, #0]
 8008cac:	e7fb      	b.n	8008ca6 <__ascii_wctomb+0x12>
	...

08008cb0 <__swsetup_r>:
 8008cb0:	4b37      	ldr	r3, [pc, #220]	; (8008d90 <__swsetup_r+0xe0>)
 8008cb2:	b570      	push	{r4, r5, r6, lr}
 8008cb4:	681d      	ldr	r5, [r3, #0]
 8008cb6:	0006      	movs	r6, r0
 8008cb8:	000c      	movs	r4, r1
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	d005      	beq.n	8008cca <__swsetup_r+0x1a>
 8008cbe:	69ab      	ldr	r3, [r5, #24]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d102      	bne.n	8008cca <__swsetup_r+0x1a>
 8008cc4:	0028      	movs	r0, r5
 8008cc6:	f000 f9a1 	bl	800900c <__sinit>
 8008cca:	4b32      	ldr	r3, [pc, #200]	; (8008d94 <__swsetup_r+0xe4>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	d10f      	bne.n	8008cf0 <__swsetup_r+0x40>
 8008cd0:	686c      	ldr	r4, [r5, #4]
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	5ee2      	ldrsh	r2, [r4, r3]
 8008cd6:	b293      	uxth	r3, r2
 8008cd8:	0711      	lsls	r1, r2, #28
 8008cda:	d42d      	bmi.n	8008d38 <__swsetup_r+0x88>
 8008cdc:	06d9      	lsls	r1, r3, #27
 8008cde:	d411      	bmi.n	8008d04 <__swsetup_r+0x54>
 8008ce0:	2309      	movs	r3, #9
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	6033      	str	r3, [r6, #0]
 8008ce6:	3337      	adds	r3, #55	; 0x37
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	81a3      	strh	r3, [r4, #12]
 8008cec:	4240      	negs	r0, r0
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	4b29      	ldr	r3, [pc, #164]	; (8008d98 <__swsetup_r+0xe8>)
 8008cf2:	429c      	cmp	r4, r3
 8008cf4:	d101      	bne.n	8008cfa <__swsetup_r+0x4a>
 8008cf6:	68ac      	ldr	r4, [r5, #8]
 8008cf8:	e7eb      	b.n	8008cd2 <__swsetup_r+0x22>
 8008cfa:	4b28      	ldr	r3, [pc, #160]	; (8008d9c <__swsetup_r+0xec>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	d1e8      	bne.n	8008cd2 <__swsetup_r+0x22>
 8008d00:	68ec      	ldr	r4, [r5, #12]
 8008d02:	e7e6      	b.n	8008cd2 <__swsetup_r+0x22>
 8008d04:	075b      	lsls	r3, r3, #29
 8008d06:	d513      	bpl.n	8008d30 <__swsetup_r+0x80>
 8008d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0a:	2900      	cmp	r1, #0
 8008d0c:	d008      	beq.n	8008d20 <__swsetup_r+0x70>
 8008d0e:	0023      	movs	r3, r4
 8008d10:	3344      	adds	r3, #68	; 0x44
 8008d12:	4299      	cmp	r1, r3
 8008d14:	d002      	beq.n	8008d1c <__swsetup_r+0x6c>
 8008d16:	0030      	movs	r0, r6
 8008d18:	f7ff fb1c 	bl	8008354 <_free_r>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6363      	str	r3, [r4, #52]	; 0x34
 8008d20:	2224      	movs	r2, #36	; 0x24
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	4393      	bics	r3, r2
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6063      	str	r3, [r4, #4]
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	2308      	movs	r3, #8
 8008d32:	89a2      	ldrh	r2, [r4, #12]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10b      	bne.n	8008d56 <__swsetup_r+0xa6>
 8008d3e:	21a0      	movs	r1, #160	; 0xa0
 8008d40:	2280      	movs	r2, #128	; 0x80
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	0089      	lsls	r1, r1, #2
 8008d46:	0092      	lsls	r2, r2, #2
 8008d48:	400b      	ands	r3, r1
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d003      	beq.n	8008d56 <__swsetup_r+0xa6>
 8008d4e:	0021      	movs	r1, r4
 8008d50:	0030      	movs	r0, r6
 8008d52:	f000 fa27 	bl	80091a4 <__smakebuf_r>
 8008d56:	220c      	movs	r2, #12
 8008d58:	5ea3      	ldrsh	r3, [r4, r2]
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	001a      	movs	r2, r3
 8008d5e:	b299      	uxth	r1, r3
 8008d60:	4002      	ands	r2, r0
 8008d62:	4203      	tst	r3, r0
 8008d64:	d00f      	beq.n	8008d86 <__swsetup_r+0xd6>
 8008d66:	2200      	movs	r2, #0
 8008d68:	60a2      	str	r2, [r4, #8]
 8008d6a:	6962      	ldr	r2, [r4, #20]
 8008d6c:	4252      	negs	r2, r2
 8008d6e:	61a2      	str	r2, [r4, #24]
 8008d70:	2000      	movs	r0, #0
 8008d72:	6922      	ldr	r2, [r4, #16]
 8008d74:	4282      	cmp	r2, r0
 8008d76:	d1ba      	bne.n	8008cee <__swsetup_r+0x3e>
 8008d78:	060a      	lsls	r2, r1, #24
 8008d7a:	d5b8      	bpl.n	8008cee <__swsetup_r+0x3e>
 8008d7c:	2240      	movs	r2, #64	; 0x40
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	81a3      	strh	r3, [r4, #12]
 8008d82:	3801      	subs	r0, #1
 8008d84:	e7b3      	b.n	8008cee <__swsetup_r+0x3e>
 8008d86:	0788      	lsls	r0, r1, #30
 8008d88:	d400      	bmi.n	8008d8c <__swsetup_r+0xdc>
 8008d8a:	6962      	ldr	r2, [r4, #20]
 8008d8c:	60a2      	str	r2, [r4, #8]
 8008d8e:	e7ef      	b.n	8008d70 <__swsetup_r+0xc0>
 8008d90:	20000080 	.word	0x20000080
 8008d94:	08009bb4 	.word	0x08009bb4
 8008d98:	08009bd4 	.word	0x08009bd4
 8008d9c:	08009b94 	.word	0x08009b94

08008da0 <abort>:
 8008da0:	2006      	movs	r0, #6
 8008da2:	b510      	push	{r4, lr}
 8008da4:	f000 fa74 	bl	8009290 <raise>
 8008da8:	2001      	movs	r0, #1
 8008daa:	f7fa fbfc 	bl	80035a6 <_exit>
	...

08008db0 <__sflush_r>:
 8008db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008db2:	898b      	ldrh	r3, [r1, #12]
 8008db4:	0005      	movs	r5, r0
 8008db6:	000c      	movs	r4, r1
 8008db8:	071a      	lsls	r2, r3, #28
 8008dba:	d45f      	bmi.n	8008e7c <__sflush_r+0xcc>
 8008dbc:	684a      	ldr	r2, [r1, #4]
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	dc04      	bgt.n	8008dcc <__sflush_r+0x1c>
 8008dc2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	dc01      	bgt.n	8008dcc <__sflush_r+0x1c>
 8008dc8:	2000      	movs	r0, #0
 8008dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008dcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008dce:	2f00      	cmp	r7, #0
 8008dd0:	d0fa      	beq.n	8008dc8 <__sflush_r+0x18>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2180      	movs	r1, #128	; 0x80
 8008dd6:	682e      	ldr	r6, [r5, #0]
 8008dd8:	602a      	str	r2, [r5, #0]
 8008dda:	001a      	movs	r2, r3
 8008ddc:	0149      	lsls	r1, r1, #5
 8008dde:	400a      	ands	r2, r1
 8008de0:	420b      	tst	r3, r1
 8008de2:	d034      	beq.n	8008e4e <__sflush_r+0x9e>
 8008de4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	075b      	lsls	r3, r3, #29
 8008dea:	d506      	bpl.n	8008dfa <__sflush_r+0x4a>
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	1ac0      	subs	r0, r0, r3
 8008df0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <__sflush_r+0x4a>
 8008df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008df8:	1ac0      	subs	r0, r0, r3
 8008dfa:	0002      	movs	r2, r0
 8008dfc:	6a21      	ldr	r1, [r4, #32]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	0028      	movs	r0, r5
 8008e02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008e04:	47b8      	blx	r7
 8008e06:	89a1      	ldrh	r1, [r4, #12]
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d106      	bne.n	8008e1a <__sflush_r+0x6a>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	2b1d      	cmp	r3, #29
 8008e10:	d831      	bhi.n	8008e76 <__sflush_r+0xc6>
 8008e12:	4a2c      	ldr	r2, [pc, #176]	; (8008ec4 <__sflush_r+0x114>)
 8008e14:	40da      	lsrs	r2, r3
 8008e16:	07d3      	lsls	r3, r2, #31
 8008e18:	d52d      	bpl.n	8008e76 <__sflush_r+0xc6>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6063      	str	r3, [r4, #4]
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	04cb      	lsls	r3, r1, #19
 8008e24:	d505      	bpl.n	8008e32 <__sflush_r+0x82>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	d102      	bne.n	8008e30 <__sflush_r+0x80>
 8008e2a:	682b      	ldr	r3, [r5, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d100      	bne.n	8008e32 <__sflush_r+0x82>
 8008e30:	6560      	str	r0, [r4, #84]	; 0x54
 8008e32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e34:	602e      	str	r6, [r5, #0]
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d0c6      	beq.n	8008dc8 <__sflush_r+0x18>
 8008e3a:	0023      	movs	r3, r4
 8008e3c:	3344      	adds	r3, #68	; 0x44
 8008e3e:	4299      	cmp	r1, r3
 8008e40:	d002      	beq.n	8008e48 <__sflush_r+0x98>
 8008e42:	0028      	movs	r0, r5
 8008e44:	f7ff fa86 	bl	8008354 <_free_r>
 8008e48:	2000      	movs	r0, #0
 8008e4a:	6360      	str	r0, [r4, #52]	; 0x34
 8008e4c:	e7bd      	b.n	8008dca <__sflush_r+0x1a>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	0028      	movs	r0, r5
 8008e52:	6a21      	ldr	r1, [r4, #32]
 8008e54:	47b8      	blx	r7
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	d1c5      	bne.n	8008de6 <__sflush_r+0x36>
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0c2      	beq.n	8008de6 <__sflush_r+0x36>
 8008e60:	2b1d      	cmp	r3, #29
 8008e62:	d001      	beq.n	8008e68 <__sflush_r+0xb8>
 8008e64:	2b16      	cmp	r3, #22
 8008e66:	d101      	bne.n	8008e6c <__sflush_r+0xbc>
 8008e68:	602e      	str	r6, [r5, #0]
 8008e6a:	e7ad      	b.n	8008dc8 <__sflush_r+0x18>
 8008e6c:	2340      	movs	r3, #64	; 0x40
 8008e6e:	89a2      	ldrh	r2, [r4, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	e7a9      	b.n	8008dca <__sflush_r+0x1a>
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	e7fa      	b.n	8008e72 <__sflush_r+0xc2>
 8008e7c:	690f      	ldr	r7, [r1, #16]
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	d0a2      	beq.n	8008dc8 <__sflush_r+0x18>
 8008e82:	680a      	ldr	r2, [r1, #0]
 8008e84:	600f      	str	r7, [r1, #0]
 8008e86:	1bd2      	subs	r2, r2, r7
 8008e88:	9201      	str	r2, [sp, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	079b      	lsls	r3, r3, #30
 8008e8e:	d100      	bne.n	8008e92 <__sflush_r+0xe2>
 8008e90:	694a      	ldr	r2, [r1, #20]
 8008e92:	60a2      	str	r2, [r4, #8]
 8008e94:	9b01      	ldr	r3, [sp, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dc00      	bgt.n	8008e9c <__sflush_r+0xec>
 8008e9a:	e795      	b.n	8008dc8 <__sflush_r+0x18>
 8008e9c:	003a      	movs	r2, r7
 8008e9e:	0028      	movs	r0, r5
 8008ea0:	9b01      	ldr	r3, [sp, #4]
 8008ea2:	6a21      	ldr	r1, [r4, #32]
 8008ea4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ea6:	47b0      	blx	r6
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	dc06      	bgt.n	8008eba <__sflush_r+0x10a>
 8008eac:	2340      	movs	r3, #64	; 0x40
 8008eae:	2001      	movs	r0, #1
 8008eb0:	89a2      	ldrh	r2, [r4, #12]
 8008eb2:	4240      	negs	r0, r0
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	e787      	b.n	8008dca <__sflush_r+0x1a>
 8008eba:	9b01      	ldr	r3, [sp, #4]
 8008ebc:	183f      	adds	r7, r7, r0
 8008ebe:	1a1b      	subs	r3, r3, r0
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	e7e7      	b.n	8008e94 <__sflush_r+0xe4>
 8008ec4:	20400001 	.word	0x20400001

08008ec8 <_fflush_r>:
 8008ec8:	690b      	ldr	r3, [r1, #16]
 8008eca:	b570      	push	{r4, r5, r6, lr}
 8008ecc:	0005      	movs	r5, r0
 8008ece:	000c      	movs	r4, r1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d102      	bne.n	8008eda <_fflush_r+0x12>
 8008ed4:	2500      	movs	r5, #0
 8008ed6:	0028      	movs	r0, r5
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d004      	beq.n	8008ee8 <_fflush_r+0x20>
 8008ede:	6983      	ldr	r3, [r0, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <_fflush_r+0x20>
 8008ee4:	f000 f892 	bl	800900c <__sinit>
 8008ee8:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <_fflush_r+0x74>)
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d11b      	bne.n	8008f26 <_fflush_r+0x5e>
 8008eee:	686c      	ldr	r4, [r5, #4]
 8008ef0:	220c      	movs	r2, #12
 8008ef2:	5ea3      	ldrsh	r3, [r4, r2]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0ed      	beq.n	8008ed4 <_fflush_r+0xc>
 8008ef8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008efa:	07d2      	lsls	r2, r2, #31
 8008efc:	d404      	bmi.n	8008f08 <_fflush_r+0x40>
 8008efe:	059b      	lsls	r3, r3, #22
 8008f00:	d402      	bmi.n	8008f08 <_fflush_r+0x40>
 8008f02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f04:	f000 f923 	bl	800914e <__retarget_lock_acquire_recursive>
 8008f08:	0028      	movs	r0, r5
 8008f0a:	0021      	movs	r1, r4
 8008f0c:	f7ff ff50 	bl	8008db0 <__sflush_r>
 8008f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f12:	0005      	movs	r5, r0
 8008f14:	07db      	lsls	r3, r3, #31
 8008f16:	d4de      	bmi.n	8008ed6 <_fflush_r+0xe>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	059b      	lsls	r3, r3, #22
 8008f1c:	d4db      	bmi.n	8008ed6 <_fflush_r+0xe>
 8008f1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f20:	f000 f916 	bl	8009150 <__retarget_lock_release_recursive>
 8008f24:	e7d7      	b.n	8008ed6 <_fflush_r+0xe>
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <_fflush_r+0x78>)
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	d101      	bne.n	8008f30 <_fflush_r+0x68>
 8008f2c:	68ac      	ldr	r4, [r5, #8]
 8008f2e:	e7df      	b.n	8008ef0 <_fflush_r+0x28>
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <_fflush_r+0x7c>)
 8008f32:	429c      	cmp	r4, r3
 8008f34:	d1dc      	bne.n	8008ef0 <_fflush_r+0x28>
 8008f36:	68ec      	ldr	r4, [r5, #12]
 8008f38:	e7da      	b.n	8008ef0 <_fflush_r+0x28>
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	08009bb4 	.word	0x08009bb4
 8008f40:	08009bd4 	.word	0x08009bd4
 8008f44:	08009b94 	.word	0x08009b94

08008f48 <std>:
 8008f48:	2300      	movs	r3, #0
 8008f4a:	b510      	push	{r4, lr}
 8008f4c:	0004      	movs	r4, r0
 8008f4e:	6003      	str	r3, [r0, #0]
 8008f50:	6043      	str	r3, [r0, #4]
 8008f52:	6083      	str	r3, [r0, #8]
 8008f54:	8181      	strh	r1, [r0, #12]
 8008f56:	6643      	str	r3, [r0, #100]	; 0x64
 8008f58:	0019      	movs	r1, r3
 8008f5a:	81c2      	strh	r2, [r0, #14]
 8008f5c:	6103      	str	r3, [r0, #16]
 8008f5e:	6143      	str	r3, [r0, #20]
 8008f60:	6183      	str	r3, [r0, #24]
 8008f62:	2208      	movs	r2, #8
 8008f64:	305c      	adds	r0, #92	; 0x5c
 8008f66:	f7fd facf 	bl	8006508 <memset>
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <std+0x38>)
 8008f6c:	6224      	str	r4, [r4, #32]
 8008f6e:	6263      	str	r3, [r4, #36]	; 0x24
 8008f70:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <std+0x3c>)
 8008f72:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f74:	4b04      	ldr	r3, [pc, #16]	; (8008f88 <std+0x40>)
 8008f76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f78:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <std+0x44>)
 8008f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	080092d1 	.word	0x080092d1
 8008f84:	080092f9 	.word	0x080092f9
 8008f88:	08009331 	.word	0x08009331
 8008f8c:	0800935d 	.word	0x0800935d

08008f90 <_cleanup_r>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4902      	ldr	r1, [pc, #8]	; (8008f9c <_cleanup_r+0xc>)
 8008f94:	f000 f8ba 	bl	800910c <_fwalk_reent>
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	08008ec9 	.word	0x08008ec9

08008fa0 <__sfmoreglue>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	2568      	movs	r5, #104	; 0x68
 8008fa4:	1e4a      	subs	r2, r1, #1
 8008fa6:	4355      	muls	r5, r2
 8008fa8:	000e      	movs	r6, r1
 8008faa:	0029      	movs	r1, r5
 8008fac:	3174      	adds	r1, #116	; 0x74
 8008fae:	f7ff fa3d 	bl	800842c <_malloc_r>
 8008fb2:	1e04      	subs	r4, r0, #0
 8008fb4:	d008      	beq.n	8008fc8 <__sfmoreglue+0x28>
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	002a      	movs	r2, r5
 8008fba:	6001      	str	r1, [r0, #0]
 8008fbc:	6046      	str	r6, [r0, #4]
 8008fbe:	300c      	adds	r0, #12
 8008fc0:	60a0      	str	r0, [r4, #8]
 8008fc2:	3268      	adds	r2, #104	; 0x68
 8008fc4:	f7fd faa0 	bl	8006508 <memset>
 8008fc8:	0020      	movs	r0, r4
 8008fca:	bd70      	pop	{r4, r5, r6, pc}

08008fcc <__sfp_lock_acquire>:
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	4802      	ldr	r0, [pc, #8]	; (8008fd8 <__sfp_lock_acquire+0xc>)
 8008fd0:	f000 f8bd 	bl	800914e <__retarget_lock_acquire_recursive>
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	200004c9 	.word	0x200004c9

08008fdc <__sfp_lock_release>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	4802      	ldr	r0, [pc, #8]	; (8008fe8 <__sfp_lock_release+0xc>)
 8008fe0:	f000 f8b6 	bl	8009150 <__retarget_lock_release_recursive>
 8008fe4:	bd10      	pop	{r4, pc}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	200004c9 	.word	0x200004c9

08008fec <__sinit_lock_acquire>:
 8008fec:	b510      	push	{r4, lr}
 8008fee:	4802      	ldr	r0, [pc, #8]	; (8008ff8 <__sinit_lock_acquire+0xc>)
 8008ff0:	f000 f8ad 	bl	800914e <__retarget_lock_acquire_recursive>
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	200004ca 	.word	0x200004ca

08008ffc <__sinit_lock_release>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	4802      	ldr	r0, [pc, #8]	; (8009008 <__sinit_lock_release+0xc>)
 8009000:	f000 f8a6 	bl	8009150 <__retarget_lock_release_recursive>
 8009004:	bd10      	pop	{r4, pc}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	200004ca 	.word	0x200004ca

0800900c <__sinit>:
 800900c:	b513      	push	{r0, r1, r4, lr}
 800900e:	0004      	movs	r4, r0
 8009010:	f7ff ffec 	bl	8008fec <__sinit_lock_acquire>
 8009014:	69a3      	ldr	r3, [r4, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <__sinit+0x14>
 800901a:	f7ff ffef 	bl	8008ffc <__sinit_lock_release>
 800901e:	bd13      	pop	{r0, r1, r4, pc}
 8009020:	64a3      	str	r3, [r4, #72]	; 0x48
 8009022:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009024:	6523      	str	r3, [r4, #80]	; 0x50
 8009026:	4b13      	ldr	r3, [pc, #76]	; (8009074 <__sinit+0x68>)
 8009028:	4a13      	ldr	r2, [pc, #76]	; (8009078 <__sinit+0x6c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	62a2      	str	r2, [r4, #40]	; 0x28
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	42a3      	cmp	r3, r4
 8009032:	d101      	bne.n	8009038 <__sinit+0x2c>
 8009034:	2301      	movs	r3, #1
 8009036:	61a3      	str	r3, [r4, #24]
 8009038:	0020      	movs	r0, r4
 800903a:	f000 f81f 	bl	800907c <__sfp>
 800903e:	6060      	str	r0, [r4, #4]
 8009040:	0020      	movs	r0, r4
 8009042:	f000 f81b 	bl	800907c <__sfp>
 8009046:	60a0      	str	r0, [r4, #8]
 8009048:	0020      	movs	r0, r4
 800904a:	f000 f817 	bl	800907c <__sfp>
 800904e:	2200      	movs	r2, #0
 8009050:	2104      	movs	r1, #4
 8009052:	60e0      	str	r0, [r4, #12]
 8009054:	6860      	ldr	r0, [r4, #4]
 8009056:	f7ff ff77 	bl	8008f48 <std>
 800905a:	2201      	movs	r2, #1
 800905c:	2109      	movs	r1, #9
 800905e:	68a0      	ldr	r0, [r4, #8]
 8009060:	f7ff ff72 	bl	8008f48 <std>
 8009064:	2202      	movs	r2, #2
 8009066:	2112      	movs	r1, #18
 8009068:	68e0      	ldr	r0, [r4, #12]
 800906a:	f7ff ff6d 	bl	8008f48 <std>
 800906e:	2301      	movs	r3, #1
 8009070:	61a3      	str	r3, [r4, #24]
 8009072:	e7d2      	b.n	800901a <__sinit+0xe>
 8009074:	08009818 	.word	0x08009818
 8009078:	08008f91 	.word	0x08008f91

0800907c <__sfp>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	0007      	movs	r7, r0
 8009080:	f7ff ffa4 	bl	8008fcc <__sfp_lock_acquire>
 8009084:	4b1f      	ldr	r3, [pc, #124]	; (8009104 <__sfp+0x88>)
 8009086:	681e      	ldr	r6, [r3, #0]
 8009088:	69b3      	ldr	r3, [r6, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d102      	bne.n	8009094 <__sfp+0x18>
 800908e:	0030      	movs	r0, r6
 8009090:	f7ff ffbc 	bl	800900c <__sinit>
 8009094:	3648      	adds	r6, #72	; 0x48
 8009096:	68b4      	ldr	r4, [r6, #8]
 8009098:	6873      	ldr	r3, [r6, #4]
 800909a:	3b01      	subs	r3, #1
 800909c:	d504      	bpl.n	80090a8 <__sfp+0x2c>
 800909e:	6833      	ldr	r3, [r6, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d022      	beq.n	80090ea <__sfp+0x6e>
 80090a4:	6836      	ldr	r6, [r6, #0]
 80090a6:	e7f6      	b.n	8009096 <__sfp+0x1a>
 80090a8:	220c      	movs	r2, #12
 80090aa:	5ea5      	ldrsh	r5, [r4, r2]
 80090ac:	2d00      	cmp	r5, #0
 80090ae:	d11a      	bne.n	80090e6 <__sfp+0x6a>
 80090b0:	0020      	movs	r0, r4
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <__sfp+0x8c>)
 80090b4:	3058      	adds	r0, #88	; 0x58
 80090b6:	60e3      	str	r3, [r4, #12]
 80090b8:	6665      	str	r5, [r4, #100]	; 0x64
 80090ba:	f000 f847 	bl	800914c <__retarget_lock_init_recursive>
 80090be:	f7ff ff8d 	bl	8008fdc <__sfp_lock_release>
 80090c2:	0020      	movs	r0, r4
 80090c4:	2208      	movs	r2, #8
 80090c6:	0029      	movs	r1, r5
 80090c8:	6025      	str	r5, [r4, #0]
 80090ca:	60a5      	str	r5, [r4, #8]
 80090cc:	6065      	str	r5, [r4, #4]
 80090ce:	6125      	str	r5, [r4, #16]
 80090d0:	6165      	str	r5, [r4, #20]
 80090d2:	61a5      	str	r5, [r4, #24]
 80090d4:	305c      	adds	r0, #92	; 0x5c
 80090d6:	f7fd fa17 	bl	8006508 <memset>
 80090da:	6365      	str	r5, [r4, #52]	; 0x34
 80090dc:	63a5      	str	r5, [r4, #56]	; 0x38
 80090de:	64a5      	str	r5, [r4, #72]	; 0x48
 80090e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80090e2:	0020      	movs	r0, r4
 80090e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e6:	3468      	adds	r4, #104	; 0x68
 80090e8:	e7d7      	b.n	800909a <__sfp+0x1e>
 80090ea:	2104      	movs	r1, #4
 80090ec:	0038      	movs	r0, r7
 80090ee:	f7ff ff57 	bl	8008fa0 <__sfmoreglue>
 80090f2:	1e04      	subs	r4, r0, #0
 80090f4:	6030      	str	r0, [r6, #0]
 80090f6:	d1d5      	bne.n	80090a4 <__sfp+0x28>
 80090f8:	f7ff ff70 	bl	8008fdc <__sfp_lock_release>
 80090fc:	230c      	movs	r3, #12
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	e7ef      	b.n	80090e2 <__sfp+0x66>
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	08009818 	.word	0x08009818
 8009108:	ffff0001 	.word	0xffff0001

0800910c <_fwalk_reent>:
 800910c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800910e:	0004      	movs	r4, r0
 8009110:	0006      	movs	r6, r0
 8009112:	2700      	movs	r7, #0
 8009114:	9101      	str	r1, [sp, #4]
 8009116:	3448      	adds	r4, #72	; 0x48
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	68a5      	ldr	r5, [r4, #8]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	9b00      	ldr	r3, [sp, #0]
 8009120:	3b01      	subs	r3, #1
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	d504      	bpl.n	8009130 <_fwalk_reent+0x24>
 8009126:	6824      	ldr	r4, [r4, #0]
 8009128:	2c00      	cmp	r4, #0
 800912a:	d1f5      	bne.n	8009118 <_fwalk_reent+0xc>
 800912c:	0038      	movs	r0, r7
 800912e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009130:	89ab      	ldrh	r3, [r5, #12]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d908      	bls.n	8009148 <_fwalk_reent+0x3c>
 8009136:	220e      	movs	r2, #14
 8009138:	5eab      	ldrsh	r3, [r5, r2]
 800913a:	3301      	adds	r3, #1
 800913c:	d004      	beq.n	8009148 <_fwalk_reent+0x3c>
 800913e:	0029      	movs	r1, r5
 8009140:	0030      	movs	r0, r6
 8009142:	9b01      	ldr	r3, [sp, #4]
 8009144:	4798      	blx	r3
 8009146:	4307      	orrs	r7, r0
 8009148:	3568      	adds	r5, #104	; 0x68
 800914a:	e7e8      	b.n	800911e <_fwalk_reent+0x12>

0800914c <__retarget_lock_init_recursive>:
 800914c:	4770      	bx	lr

0800914e <__retarget_lock_acquire_recursive>:
 800914e:	4770      	bx	lr

08009150 <__retarget_lock_release_recursive>:
 8009150:	4770      	bx	lr
	...

08009154 <__swhatbuf_r>:
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	000e      	movs	r6, r1
 8009158:	001d      	movs	r5, r3
 800915a:	230e      	movs	r3, #14
 800915c:	5ec9      	ldrsh	r1, [r1, r3]
 800915e:	0014      	movs	r4, r2
 8009160:	b096      	sub	sp, #88	; 0x58
 8009162:	2900      	cmp	r1, #0
 8009164:	da08      	bge.n	8009178 <__swhatbuf_r+0x24>
 8009166:	220c      	movs	r2, #12
 8009168:	5eb3      	ldrsh	r3, [r6, r2]
 800916a:	2200      	movs	r2, #0
 800916c:	602a      	str	r2, [r5, #0]
 800916e:	061b      	lsls	r3, r3, #24
 8009170:	d411      	bmi.n	8009196 <__swhatbuf_r+0x42>
 8009172:	2380      	movs	r3, #128	; 0x80
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	e00f      	b.n	8009198 <__swhatbuf_r+0x44>
 8009178:	466a      	mov	r2, sp
 800917a:	f000 f91b 	bl	80093b4 <_fstat_r>
 800917e:	2800      	cmp	r0, #0
 8009180:	dbf1      	blt.n	8009166 <__swhatbuf_r+0x12>
 8009182:	23f0      	movs	r3, #240	; 0xf0
 8009184:	9901      	ldr	r1, [sp, #4]
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	4019      	ands	r1, r3
 800918a:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <__swhatbuf_r+0x4c>)
 800918c:	18c9      	adds	r1, r1, r3
 800918e:	424b      	negs	r3, r1
 8009190:	4159      	adcs	r1, r3
 8009192:	6029      	str	r1, [r5, #0]
 8009194:	e7ed      	b.n	8009172 <__swhatbuf_r+0x1e>
 8009196:	2340      	movs	r3, #64	; 0x40
 8009198:	2000      	movs	r0, #0
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	b016      	add	sp, #88	; 0x58
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	ffffe000 	.word	0xffffe000

080091a4 <__smakebuf_r>:
 80091a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091a6:	2602      	movs	r6, #2
 80091a8:	898b      	ldrh	r3, [r1, #12]
 80091aa:	0005      	movs	r5, r0
 80091ac:	000c      	movs	r4, r1
 80091ae:	4233      	tst	r3, r6
 80091b0:	d006      	beq.n	80091c0 <__smakebuf_r+0x1c>
 80091b2:	0023      	movs	r3, r4
 80091b4:	3347      	adds	r3, #71	; 0x47
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	6123      	str	r3, [r4, #16]
 80091ba:	2301      	movs	r3, #1
 80091bc:	6163      	str	r3, [r4, #20]
 80091be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80091c0:	466a      	mov	r2, sp
 80091c2:	ab01      	add	r3, sp, #4
 80091c4:	f7ff ffc6 	bl	8009154 <__swhatbuf_r>
 80091c8:	9900      	ldr	r1, [sp, #0]
 80091ca:	0007      	movs	r7, r0
 80091cc:	0028      	movs	r0, r5
 80091ce:	f7ff f92d 	bl	800842c <_malloc_r>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d108      	bne.n	80091e8 <__smakebuf_r+0x44>
 80091d6:	220c      	movs	r2, #12
 80091d8:	5ea3      	ldrsh	r3, [r4, r2]
 80091da:	059a      	lsls	r2, r3, #22
 80091dc:	d4ef      	bmi.n	80091be <__smakebuf_r+0x1a>
 80091de:	2203      	movs	r2, #3
 80091e0:	4393      	bics	r3, r2
 80091e2:	431e      	orrs	r6, r3
 80091e4:	81a6      	strh	r6, [r4, #12]
 80091e6:	e7e4      	b.n	80091b2 <__smakebuf_r+0xe>
 80091e8:	4b0f      	ldr	r3, [pc, #60]	; (8009228 <__smakebuf_r+0x84>)
 80091ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80091ec:	2380      	movs	r3, #128	; 0x80
 80091ee:	89a2      	ldrh	r2, [r4, #12]
 80091f0:	6020      	str	r0, [r4, #0]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	9b00      	ldr	r3, [sp, #0]
 80091f8:	6120      	str	r0, [r4, #16]
 80091fa:	6163      	str	r3, [r4, #20]
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00d      	beq.n	800921e <__smakebuf_r+0x7a>
 8009202:	0028      	movs	r0, r5
 8009204:	230e      	movs	r3, #14
 8009206:	5ee1      	ldrsh	r1, [r4, r3]
 8009208:	f000 f8e6 	bl	80093d8 <_isatty_r>
 800920c:	2800      	cmp	r0, #0
 800920e:	d006      	beq.n	800921e <__smakebuf_r+0x7a>
 8009210:	2203      	movs	r2, #3
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	4393      	bics	r3, r2
 8009216:	001a      	movs	r2, r3
 8009218:	2301      	movs	r3, #1
 800921a:	4313      	orrs	r3, r2
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	89a0      	ldrh	r0, [r4, #12]
 8009220:	4307      	orrs	r7, r0
 8009222:	81a7      	strh	r7, [r4, #12]
 8009224:	e7cb      	b.n	80091be <__smakebuf_r+0x1a>
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	08008f91 	.word	0x08008f91

0800922c <_malloc_usable_size_r>:
 800922c:	1f0b      	subs	r3, r1, #4
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	1f18      	subs	r0, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	da01      	bge.n	800923a <_malloc_usable_size_r+0xe>
 8009236:	580b      	ldr	r3, [r1, r0]
 8009238:	18c0      	adds	r0, r0, r3
 800923a:	4770      	bx	lr

0800923c <_raise_r>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	0004      	movs	r4, r0
 8009240:	000d      	movs	r5, r1
 8009242:	291f      	cmp	r1, #31
 8009244:	d904      	bls.n	8009250 <_raise_r+0x14>
 8009246:	2316      	movs	r3, #22
 8009248:	6003      	str	r3, [r0, #0]
 800924a:	2001      	movs	r0, #1
 800924c:	4240      	negs	r0, r0
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009252:	2b00      	cmp	r3, #0
 8009254:	d004      	beq.n	8009260 <_raise_r+0x24>
 8009256:	008a      	lsls	r2, r1, #2
 8009258:	189b      	adds	r3, r3, r2
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	2a00      	cmp	r2, #0
 800925e:	d108      	bne.n	8009272 <_raise_r+0x36>
 8009260:	0020      	movs	r0, r4
 8009262:	f000 f831 	bl	80092c8 <_getpid_r>
 8009266:	002a      	movs	r2, r5
 8009268:	0001      	movs	r1, r0
 800926a:	0020      	movs	r0, r4
 800926c:	f000 f81a 	bl	80092a4 <_kill_r>
 8009270:	e7ed      	b.n	800924e <_raise_r+0x12>
 8009272:	2000      	movs	r0, #0
 8009274:	2a01      	cmp	r2, #1
 8009276:	d0ea      	beq.n	800924e <_raise_r+0x12>
 8009278:	1c51      	adds	r1, r2, #1
 800927a:	d103      	bne.n	8009284 <_raise_r+0x48>
 800927c:	2316      	movs	r3, #22
 800927e:	3001      	adds	r0, #1
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	e7e4      	b.n	800924e <_raise_r+0x12>
 8009284:	2400      	movs	r4, #0
 8009286:	0028      	movs	r0, r5
 8009288:	601c      	str	r4, [r3, #0]
 800928a:	4790      	blx	r2
 800928c:	0020      	movs	r0, r4
 800928e:	e7de      	b.n	800924e <_raise_r+0x12>

08009290 <raise>:
 8009290:	b510      	push	{r4, lr}
 8009292:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <raise+0x10>)
 8009294:	0001      	movs	r1, r0
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	f7ff ffd0 	bl	800923c <_raise_r>
 800929c:	bd10      	pop	{r4, pc}
 800929e:	46c0      	nop			; (mov r8, r8)
 80092a0:	20000080 	.word	0x20000080

080092a4 <_kill_r>:
 80092a4:	2300      	movs	r3, #0
 80092a6:	b570      	push	{r4, r5, r6, lr}
 80092a8:	4d06      	ldr	r5, [pc, #24]	; (80092c4 <_kill_r+0x20>)
 80092aa:	0004      	movs	r4, r0
 80092ac:	0008      	movs	r0, r1
 80092ae:	0011      	movs	r1, r2
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	f7fa f968 	bl	8003586 <_kill>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d103      	bne.n	80092c2 <_kill_r+0x1e>
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d000      	beq.n	80092c2 <_kill_r+0x1e>
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	200004c4 	.word	0x200004c4

080092c8 <_getpid_r>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	f7fa f956 	bl	800357a <_getpid>
 80092ce:	bd10      	pop	{r4, pc}

080092d0 <__sread>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	000c      	movs	r4, r1
 80092d4:	250e      	movs	r5, #14
 80092d6:	5f49      	ldrsh	r1, [r1, r5]
 80092d8:	f000 f8a4 	bl	8009424 <_read_r>
 80092dc:	2800      	cmp	r0, #0
 80092de:	db03      	blt.n	80092e8 <__sread+0x18>
 80092e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80092e2:	181b      	adds	r3, r3, r0
 80092e4:	6563      	str	r3, [r4, #84]	; 0x54
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	4a02      	ldr	r2, [pc, #8]	; (80092f4 <__sread+0x24>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	e7f9      	b.n	80092e6 <__sread+0x16>
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	ffffefff 	.word	0xffffefff

080092f8 <__swrite>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	001f      	movs	r7, r3
 80092fc:	898b      	ldrh	r3, [r1, #12]
 80092fe:	0005      	movs	r5, r0
 8009300:	000c      	movs	r4, r1
 8009302:	0016      	movs	r6, r2
 8009304:	05db      	lsls	r3, r3, #23
 8009306:	d505      	bpl.n	8009314 <__swrite+0x1c>
 8009308:	230e      	movs	r3, #14
 800930a:	5ec9      	ldrsh	r1, [r1, r3]
 800930c:	2200      	movs	r2, #0
 800930e:	2302      	movs	r3, #2
 8009310:	f000 f874 	bl	80093fc <_lseek_r>
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	4a05      	ldr	r2, [pc, #20]	; (800932c <__swrite+0x34>)
 8009318:	0028      	movs	r0, r5
 800931a:	4013      	ands	r3, r2
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	0032      	movs	r2, r6
 8009320:	230e      	movs	r3, #14
 8009322:	5ee1      	ldrsh	r1, [r4, r3]
 8009324:	003b      	movs	r3, r7
 8009326:	f000 f81f 	bl	8009368 <_write_r>
 800932a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800932c:	ffffefff 	.word	0xffffefff

08009330 <__sseek>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	000c      	movs	r4, r1
 8009334:	250e      	movs	r5, #14
 8009336:	5f49      	ldrsh	r1, [r1, r5]
 8009338:	f000 f860 	bl	80093fc <_lseek_r>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	1c42      	adds	r2, r0, #1
 8009340:	d103      	bne.n	800934a <__sseek+0x1a>
 8009342:	4a05      	ldr	r2, [pc, #20]	; (8009358 <__sseek+0x28>)
 8009344:	4013      	ands	r3, r2
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	bd70      	pop	{r4, r5, r6, pc}
 800934a:	2280      	movs	r2, #128	; 0x80
 800934c:	0152      	lsls	r2, r2, #5
 800934e:	4313      	orrs	r3, r2
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	6560      	str	r0, [r4, #84]	; 0x54
 8009354:	e7f8      	b.n	8009348 <__sseek+0x18>
 8009356:	46c0      	nop			; (mov r8, r8)
 8009358:	ffffefff 	.word	0xffffefff

0800935c <__sclose>:
 800935c:	b510      	push	{r4, lr}
 800935e:	230e      	movs	r3, #14
 8009360:	5ec9      	ldrsh	r1, [r1, r3]
 8009362:	f000 f815 	bl	8009390 <_close_r>
 8009366:	bd10      	pop	{r4, pc}

08009368 <_write_r>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	0004      	movs	r4, r0
 800936c:	0008      	movs	r0, r1
 800936e:	0011      	movs	r1, r2
 8009370:	001a      	movs	r2, r3
 8009372:	2300      	movs	r3, #0
 8009374:	4d05      	ldr	r5, [pc, #20]	; (800938c <_write_r+0x24>)
 8009376:	602b      	str	r3, [r5, #0]
 8009378:	f7fa f93e 	bl	80035f8 <_write>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d103      	bne.n	8009388 <_write_r+0x20>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d000      	beq.n	8009388 <_write_r+0x20>
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	200004c4 	.word	0x200004c4

08009390 <_close_r>:
 8009390:	2300      	movs	r3, #0
 8009392:	b570      	push	{r4, r5, r6, lr}
 8009394:	4d06      	ldr	r5, [pc, #24]	; (80093b0 <_close_r+0x20>)
 8009396:	0004      	movs	r4, r0
 8009398:	0008      	movs	r0, r1
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	f7fa f948 	bl	8003630 <_close>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d103      	bne.n	80093ac <_close_r+0x1c>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d000      	beq.n	80093ac <_close_r+0x1c>
 80093aa:	6023      	str	r3, [r4, #0]
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
 80093ae:	46c0      	nop			; (mov r8, r8)
 80093b0:	200004c4 	.word	0x200004c4

080093b4 <_fstat_r>:
 80093b4:	2300      	movs	r3, #0
 80093b6:	b570      	push	{r4, r5, r6, lr}
 80093b8:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_fstat_r+0x20>)
 80093ba:	0004      	movs	r4, r0
 80093bc:	0008      	movs	r0, r1
 80093be:	0011      	movs	r1, r2
 80093c0:	602b      	str	r3, [r5, #0]
 80093c2:	f7fa f93f 	bl	8003644 <_fstat>
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	d103      	bne.n	80093d2 <_fstat_r+0x1e>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d000      	beq.n	80093d2 <_fstat_r+0x1e>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	200004c4 	.word	0x200004c4

080093d8 <_isatty_r>:
 80093d8:	2300      	movs	r3, #0
 80093da:	b570      	push	{r4, r5, r6, lr}
 80093dc:	4d06      	ldr	r5, [pc, #24]	; (80093f8 <_isatty_r+0x20>)
 80093de:	0004      	movs	r4, r0
 80093e0:	0008      	movs	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7fa f93c 	bl	8003660 <_isatty>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d103      	bne.n	80093f4 <_isatty_r+0x1c>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d000      	beq.n	80093f4 <_isatty_r+0x1c>
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	200004c4 	.word	0x200004c4

080093fc <_lseek_r>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	0004      	movs	r4, r0
 8009400:	0008      	movs	r0, r1
 8009402:	0011      	movs	r1, r2
 8009404:	001a      	movs	r2, r3
 8009406:	2300      	movs	r3, #0
 8009408:	4d05      	ldr	r5, [pc, #20]	; (8009420 <_lseek_r+0x24>)
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7fa f931 	bl	8003672 <_lseek>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d103      	bne.n	800941c <_lseek_r+0x20>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d000      	beq.n	800941c <_lseek_r+0x20>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	200004c4 	.word	0x200004c4

08009424 <_read_r>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	0004      	movs	r4, r0
 8009428:	0008      	movs	r0, r1
 800942a:	0011      	movs	r1, r2
 800942c:	001a      	movs	r2, r3
 800942e:	2300      	movs	r3, #0
 8009430:	4d05      	ldr	r5, [pc, #20]	; (8009448 <_read_r+0x24>)
 8009432:	602b      	str	r3, [r5, #0]
 8009434:	f7fa f8c3 	bl	80035be <_read>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d103      	bne.n	8009444 <_read_r+0x20>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d000      	beq.n	8009444 <_read_r+0x20>
 8009442:	6023      	str	r3, [r4, #0]
 8009444:	bd70      	pop	{r4, r5, r6, pc}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	200004c4 	.word	0x200004c4

0800944c <_init>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009452:	bc08      	pop	{r3}
 8009454:	469e      	mov	lr, r3
 8009456:	4770      	bx	lr

08009458 <_fini>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr
